
DS18B20_h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000735c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800762c  0800762c  0000862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800769c  0800769c  0000869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080076a4  080076a4  000086a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080076ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000037c  2400006c  08007718  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003e8  08007718  000093e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000151c6  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000297b  00000000  00000000  0001e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011c0  00000000  00000000  00020be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dd3  00000000  00000000  00021da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034785  00000000  00000000  00022b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016b1d  00000000  00000000  000572f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152016  00000000  00000000  0006de15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bfe2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052b4  00000000  00000000  001bfe70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001c5124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007614 	.word	0x08007614

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08007614 	.word	0x08007614

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <Set_DQ_Pin_Output>:
 */
#include "OneWire.h"

//void Delay_us(uint16_t us);

void Set_DQ_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f001 fb90 	bl	8001df8 <HAL_GPIO_Init>
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Set_DQ_Pin_Input>:

void Set_DQ_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f001 fb70 	bl	8001df8 <HAL_GPIO_Init>
}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <TM_OneWire_Init>:


void TM_OneWire_Init(TM_OneWire_t *OneWireStruct, GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	4613      	mov	r3, r2
 800072c:	80fb      	strh	r3, [r7, #6]

	/* Save settings */
	OneWireStruct->GPIOx = GPIOx;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	88fa      	ldrh	r2, [r7, #6]
 8000738:	809a      	strh	r2, [r3, #4]
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <TM_OneWire_Reset>:

uint8_t TM_OneWire_Reset(TM_OneWire_t *OneWireStruct) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_OUTPUT(OneWireStruct);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	889b      	ldrh	r3, [r3, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f7ff ffa1 	bl	80006a0 <Set_DQ_Pin_Output>
	ONEWIRE_LOW(OneWireStruct);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	889b      	ldrh	r3, [r3, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	f001 fd05 	bl	8002178 <HAL_GPIO_WritePin>
	ONEWIRE_DELAY(480);
 800076e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000772:	f000 fe7b 	bl	800146c <Delay_us>

	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	4619      	mov	r1, r3
 8000780:	4610      	mov	r0, r2
 8000782:	f7ff ffad 	bl	80006e0 <Set_DQ_Pin_Input>
	ONEWIRE_DELAY(70);
 8000786:	2046      	movs	r0, #70	@ 0x46
 8000788:	f000 fe70 	bl	800146c <Delay_us>

	/* Check bit value */

	if(HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin) == 0){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	889b      	ldrh	r3, [r3, #4]
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f001 fcd6 	bl	8002148 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <TM_OneWire_Reset+0x62>
		i = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e001      	b.n	80007ac <TM_OneWire_Reset+0x66>
	}else{
		i = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
	}

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 80007ac:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80007b0:	f000 fe5c 	bl	800146c <Delay_us>


	return i;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <TM_OneWire_WriteBit>:

void TM_OneWire_WriteBit(TM_OneWire_t *OneWireStruct, uint8_t bit) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
	if (bit) {
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01e      	beq.n	800080e <TM_OneWire_WriteBit+0x50>
		/* Set line low */
		ONEWIRE_OUTPUT(OneWireStruct);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	889b      	ldrh	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f7ff ff60 	bl	80006a0 <Set_DQ_Pin_Output>
		ONEWIRE_LOW(OneWireStruct);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fcc4 	bl	8002178 <HAL_GPIO_WritePin>
		ONEWIRE_DELAY(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f000 fe3b 	bl	800146c <Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	889b      	ldrh	r3, [r3, #4]
 80007fe:	4619      	mov	r1, r3
 8000800:	4610      	mov	r0, r2
 8000802:	f7ff ff6d 	bl	80006e0 <Set_DQ_Pin_Input>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(60);
 8000806:	203c      	movs	r0, #60	@ 0x3c
 8000808:	f000 fe30 	bl	800146c <Delay_us>
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);

	}

}
 800080c:	e01a      	b.n	8000844 <TM_OneWire_WriteBit+0x86>
		ONEWIRE_OUTPUT(OneWireStruct);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	889b      	ldrh	r3, [r3, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	4610      	mov	r0, r2
 800081a:	f7ff ff41 	bl	80006a0 <Set_DQ_Pin_Output>
		ONEWIRE_LOW(OneWireStruct);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	f001 fca5 	bl	8002178 <HAL_GPIO_WritePin>
		ONEWIRE_DELAY(60);
 800082e:	203c      	movs	r0, #60	@ 0x3c
 8000830:	f000 fe1c 	bl	800146c <Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	4619      	mov	r1, r3
 800083e:	4610      	mov	r0, r2
 8000840:	f7ff ff4e 	bl	80006e0 <Set_DQ_Pin_Input>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <TM_OneWire_ReadBit>:

uint8_t TM_OneWire_ReadBit(TM_OneWire_t *OneWireStruct) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_OUTPUT(OneWireStruct);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	889b      	ldrh	r3, [r3, #4]
 8000860:	4619      	mov	r1, r3
 8000862:	4610      	mov	r0, r2
 8000864:	f7ff ff1c 	bl	80006a0 <Set_DQ_Pin_Output>
	ONEWIRE_LOW(OneWireStruct);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	889b      	ldrh	r3, [r3, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f001 fc80 	bl	8002178 <HAL_GPIO_WritePin>
	ONEWIRE_DELAY(3);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 fdf7 	bl	800146c <Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	889b      	ldrh	r3, [r3, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	4610      	mov	r0, r2
 800088a:	f7ff ff29 	bl	80006e0 <Set_DQ_Pin_Input>
	//ONEWIRE_DELAY(10);

	/* Read line value */
	if(HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	889b      	ldrh	r3, [r3, #4]
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f001 fc55 	bl	8002148 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <TM_OneWire_ReadBit+0x5c>
		/* Bit is HIGH */
		bit = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 80008a8:	2032      	movs	r0, #50	@ 0x32
 80008aa:	f000 fddf 	bl	800146c <Delay_us>

	/* Return bit value */
	return bit;
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <TM_OneWire_WriteByte>:

void TM_OneWire_WriteByte(TM_OneWire_t *OneWireStruct, uint8_t byte) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80008c4:	2308      	movs	r3, #8
 80008c6:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80008c8:	e00a      	b.n	80008e0 <TM_OneWire_WriteByte+0x28>
		/* LSB bit is first */
		TM_OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4619      	mov	r1, r3
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff72 	bl	80007be <TM_OneWire_WriteBit>
		byte >>= 1;
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	73fa      	strb	r2, [r7, #15]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1ef      	bne.n	80008ca <TM_OneWire_WriteByte+0x12>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <TM_OneWire_ReadByte>:

uint8_t TM_OneWire_ReadByte(TM_OneWire_t *OneWireStruct) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80008fc:	2308      	movs	r3, #8
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	2300      	movs	r3, #0
 8000902:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000904:	e00d      	b.n	8000922 <TM_OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
		byte |= (TM_OneWire_ReadBit(OneWireStruct) << 7);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff9d 	bl	800084c <TM_OneWire_ReadBit>
 8000912:	4603      	mov	r3, r0
 8000914:	01db      	lsls	r3, r3, #7
 8000916:	b25a      	sxtb	r2, r3
 8000918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800091c:	4313      	orrs	r3, r2
 800091e:	b25b      	sxtb	r3, r3
 8000920:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	73fa      	strb	r2, [r7, #15]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1ec      	bne.n	8000906 <TM_OneWire_ReadByte+0x12>
	}

	return byte;
 800092c:	7bbb      	ldrb	r3, [r7, #14]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <TM_OneWire_First>:

uint8_t TM_OneWire_First(TM_OneWire_t *OneWireStruct) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	TM_OneWire_ResetSearch(OneWireStruct);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f816 	bl	8000970 <TM_OneWire_ResetSearch>

	/* Start with searching */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000944:	21f0      	movs	r1, #240	@ 0xf0
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f825 	bl	8000996 <TM_OneWire_Search>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <TM_OneWire_Next>:

uint8_t TM_OneWire_Next(TM_OneWire_t *OneWireStruct) {
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	/* Leave the search state alone */
	return TM_OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800095e:	21f0      	movs	r1, #240	@ 0xf0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f818 	bl	8000996 <TM_OneWire_Search>
 8000966:	4603      	mov	r3, r0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <TM_OneWire_ResetSearch>:

void TM_OneWire_ResetSearch(TM_OneWire_t *OneWireStruct) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	71da      	strb	r2, [r3, #7]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <TM_OneWire_Search>:

uint8_t TM_OneWire_Search(TM_OneWire_t *OneWireStruct, uint8_t command) {
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7a1b      	ldrb	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 809a 	bne.w	8000af4 <TM_OneWire_Search+0x15e>
		// 1-Wire reset
		if (TM_OneWire_Reset(OneWireStruct)) {
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff fec0 	bl	8000746 <TM_OneWire_Reset>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00a      	beq.n	80009e2 <TM_OneWire_Search+0x4c>
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	71da      	strb	r2, [r3, #7]
			return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e09b      	b.n	8000b1a <TM_OneWire_Search+0x184>
		}

		// issue the search command
		TM_OneWire_WriteByte(OneWireStruct, command);
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff66 	bl	80008b8 <TM_OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff2d 	bl	800084c <TM_OneWire_ReadBit>
 80009f2:	4603      	mov	r3, r0
 80009f4:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = TM_OneWire_ReadBit(OneWireStruct);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff28 	bl	800084c <TM_OneWire_ReadBit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <TM_OneWire_Search+0x76>
 8000a06:	7a3b      	ldrb	r3, [r7, #8]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d064      	beq.n	8000ad6 <TM_OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000a0c:	7a7a      	ldrb	r2, [r7, #9]
 8000a0e:	7a3b      	ldrb	r3, [r7, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d002      	beq.n	8000a1a <TM_OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8000a14:	7a7b      	ldrb	r3, [r7, #9]
 8000a16:	72bb      	strb	r3, [r7, #10]
 8000a18:	e026      	b.n	8000a68 <TM_OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d20d      	bcs.n	8000a40 <TM_OneWire_Search+0xaa>
						search_direction =
								((OneWireStruct->ROM_NO[rom_byte_number]
 8000a24:	7b7b      	ldrb	r3, [r7, #13]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	7a5a      	ldrb	r2, [r3, #9]
										& rom_byte_mask) > 0);
 8000a2c:	7afb      	ldrb	r3, [r7, #11]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
						search_direction =
 8000a3c:	72bb      	strb	r3, [r7, #10]
 8000a3e:	e008      	b.n	8000a52 <TM_OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number
								== OneWireStruct->LastDiscrepancy);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	799b      	ldrb	r3, [r3, #6]
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
						search_direction = (id_bit_number
 8000a50:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8000a52:	7abb      	ldrb	r3, [r7, #10]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d107      	bne.n	8000a68 <TM_OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	d802      	bhi.n	8000a68 <TM_OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7bba      	ldrb	r2, [r7, #14]
 8000a66:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8000a68:	7abb      	ldrb	r3, [r7, #10]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d10c      	bne.n	8000a88 <TM_OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	7a59      	ldrb	r1, [r3, #9]
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	7afa      	ldrb	r2, [r7, #11]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	b2d1      	uxtb	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	460a      	mov	r2, r1
 8000a84:	725a      	strb	r2, [r3, #9]
 8000a86:	e010      	b.n	8000aaa <TM_OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8000a88:	7b7b      	ldrb	r3, [r7, #13]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	7a5b      	ldrb	r3, [r3, #9]
 8000a90:	b25a      	sxtb	r2, r3
 8000a92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	7b7b      	ldrb	r3, [r7, #13]
 8000aa0:	b2d1      	uxtb	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	460a      	mov	r2, r1
 8000aa8:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				TM_OneWire_WriteBit(OneWireStruct, search_direction);
 8000aaa:	7abb      	ldrb	r3, [r7, #10]
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe85 	bl	80007be <TM_OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000aba:	7afb      	ldrb	r3, [r7, #11]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <TM_OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8000ac6:	7b7b      	ldrb	r3, [r7, #13]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d98a      	bls.n	80009ec <TM_OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	2b40      	cmp	r3, #64	@ 0x40
 8000ada:	d90b      	bls.n	8000af4 <TM_OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7bba      	ldrb	r2, [r7, #14]
 8000ae0:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	799b      	ldrb	r3, [r3, #6]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <TM_OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8000af4:	7b3b      	ldrb	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <TM_OneWire_Search+0x16c>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7a5b      	ldrb	r3, [r3, #9]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10a      	bne.n	8000b18 <TM_OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <TM_OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		TM_OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void TM_OneWire_SelectWithPointer(TM_OneWire_t *OneWireStruct, uint8_t *ROM) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8000b2c:	2155      	movs	r1, #85	@ 0x55
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fec2 	bl	80008b8 <TM_OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e00a      	b.n	8000b50 <TM_OneWire_SelectWithPointer+0x2e>
		TM_OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff feb7 	bl	80008b8 <TM_OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d9f1      	bls.n	8000b3a <TM_OneWire_SelectWithPointer+0x18>
	}
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <TM_OneWire_GetFullROM>:

void TM_OneWire_GetFullROM(TM_OneWire_t *OneWireStruct, uint8_t *firstIndex) {
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e00a      	b.n	8000b86 <TM_OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	440b      	add	r3, r1
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	440a      	add	r2, r1
 8000b7c:	7a52      	ldrb	r2, [r2, #9]
 8000b7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	3301      	adds	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d9f1      	bls.n	8000b70 <TM_OneWire_GetFullROM+0x10>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <TM_OneWire_CRC8>:

uint8_t TM_OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8000baa:	e022      	b.n	8000bf2 <TM_OneWire_CRC8+0x58>
		inbyte = *addr++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8000bb6:	2308      	movs	r3, #8
 8000bb8:	737b      	strb	r3, [r7, #13]
 8000bba:	e017      	b.n	8000bec <TM_OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8000bbc:	7bfa      	ldrb	r2, [r7, #15]
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8000bd0:	7b3b      	ldrb	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <TM_OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	085b      	lsrs	r3, r3, #1
 8000be4:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8000be6:	7b7b      	ldrb	r3, [r7, #13]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	737b      	strb	r3, [r7, #13]
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1e4      	bne.n	8000bbc <TM_OneWire_CRC8+0x22>
	while (len--) {
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	70fa      	strb	r2, [r7, #3]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1d7      	bne.n	8000bac <TM_OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <TM_DS18B20_StartAll>:

    return 1;
}

void
TM_DS18B20_StartAll(TM_OneWire_t* OneWire) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
    /* Reset pulse */
    TM_OneWire_Reset(OneWire);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fd97 	bl	8000746 <TM_OneWire_Reset>
    /* Skip rom */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000c18:	21cc      	movs	r1, #204	@ 0xcc
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe4c 	bl	80008b8 <TM_OneWire_WriteByte>
    /* Start conversion on all connected devices */
    TM_OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000c20:	2144      	movs	r1, #68	@ 0x44
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe48 	bl	80008b8 <TM_OneWire_WriteByte>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <TM_DS18B20_Read>:

uint8_t
TM_DS18B20_Read(TM_OneWire_t* OneWire, uint8_t* ROM, float* destination) {
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	@ 0x2c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
    uint16_t temperature;
    uint8_t resolution;
    int8_t digit, minus = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    float decimal;
    uint8_t i = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]
    uint8_t data[9];
    uint8_t crc;

    /* Check if device is DS18B20 */
    if (!TM_DS18B20_Is(ROM)) {
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f000 f97a 	bl	8000f40 <TM_DS18B20_Is>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <TM_DS18B20_Read+0x26>
        return 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e0e1      	b.n	8000e1a <TM_DS18B20_Read+0x1ea>
    }

    /* Check if line is released, if it is, then conversion is complete */
    if (!TM_OneWire_ReadBit(OneWire)) {
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff fdf8 	bl	800084c <TM_OneWire_ReadBit>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <TM_DS18B20_Read+0x36>
        /* Conversion is not finished yet */
        return 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	e0d9      	b.n	8000e1a <TM_DS18B20_Read+0x1ea>
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fd6d 	bl	8000746 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff ff57 	bl	8000b22 <TM_OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000c74:	21be      	movs	r1, #190	@ 0xbe
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fe1e 	bl	80008b8 <TM_OneWire_WriteByte>

    /* Get data */
    for (i = 0; i < 9; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
 8000c80:	e00d      	b.n	8000c9e <TM_DS18B20_Read+0x6e>
        /* Read byte by byte */
        data[i] = TM_OneWire_ReadByte(OneWire);
 8000c82:	7ffc      	ldrb	r4, [r7, #31]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fe35 	bl	80008f4 <TM_OneWire_ReadByte>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8000c92:	443b      	add	r3, r7
 8000c94:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < 9; i++) {
 8000c98:	7ffb      	ldrb	r3, [r7, #31]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	77fb      	strb	r3, [r7, #31]
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d9ee      	bls.n	8000c82 <TM_DS18B20_Read+0x52>
    }

    /* Calculate CRC */
    crc = TM_OneWire_CRC8(data, 8);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff75 	bl	8000b9a <TM_OneWire_CRC8>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	77bb      	strb	r3, [r7, #30]

    /* Check if CRC is ok */
    if (crc != data[8]) {
 8000cb4:	7f3b      	ldrb	r3, [r7, #28]
 8000cb6:	7fba      	ldrb	r2, [r7, #30]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d001      	beq.n	8000cc0 <TM_DS18B20_Read+0x90>
        /* CRC invalid */
        return 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e0ac      	b.n	8000e1a <TM_DS18B20_Read+0x1ea>
    }

    /* First two bytes of scratchpad are temperature values */
    temperature = data[0] | (data[1] << 8);
 8000cc0:	7d3b      	ldrb	r3, [r7, #20]
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	7d7b      	ldrb	r3, [r7, #21]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff fd38 	bl	8000746 <TM_OneWire_Reset>

    /* Check if temperature is negative */
    if (temperature & 0x8000) {
 8000cd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da05      	bge.n	8000cea <TM_DS18B20_Read+0xba>
        /* Two's complement, temperature is negative */
        temperature = ~temperature + 1;
 8000cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        minus = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    }


    /* Get sensor resolution */
    resolution = ((data[4] & 0x60) >> 5) + 9;
 8000cea:	7e3b      	ldrb	r3, [r7, #24]
 8000cec:	115b      	asrs	r3, r3, #5
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	3309      	adds	r3, #9
 8000cf8:	777b      	strb	r3, [r7, #29]


    /* Store temperature integer digits and decimal digits */
    digit = temperature >> 4;
 8000cfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    digit |= ((temperature >> 8) & 0x7) << 4;
 8000d04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d12:	b25a      	sxtb	r2, r3
 8000d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    /* Store decimal digits */
    switch (resolution) {
 8000d1e:	7f7b      	ldrb	r3, [r7, #29]
 8000d20:	3b09      	subs	r3, #9
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d858      	bhi.n	8000dd8 <TM_DS18B20_Read+0x1a8>
 8000d26:	a201      	add	r2, pc, #4	@ (adr r2, 8000d2c <TM_DS18B20_Read+0xfc>)
 8000d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2c:	08000d3d 	.word	0x08000d3d
 8000d30:	08000d65 	.word	0x08000d65
 8000d34:	08000d8d 	.word	0x08000d8d
 8000d38:	08000db5 	.word	0x08000db5
        case 9: {
            decimal = (temperature >> 3) & 0x01;
 8000d3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	ee07 3a90 	vmov	s15, r3
 8000d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4e:	edc7 7a08 	vstr	s15, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000d52:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5e:	edc7 7a08 	vstr	s15, [r7, #32]
        }
        break;
 8000d62:	e03e      	b.n	8000de2 <TM_DS18B20_Read+0x1b2>
        case 10: {
            decimal = (temperature >> 2) & 0x03;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	edc7 7a08 	vstr	s15, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000d7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d7e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d86:	edc7 7a08 	vstr	s15, [r7, #32]
        }
        break;
 8000d8a:	e02a      	b.n	8000de2 <TM_DS18B20_Read+0x1b2>
        case 11: {
            decimal = (temperature >> 1) & 0x07;
 8000d8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	edc7 7a08 	vstr	s15, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da6:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dae:	edc7 7a08 	vstr	s15, [r7, #32]
        }
        break;
 8000db2:	e016      	b.n	8000de2 <TM_DS18B20_Read+0x1b2>
        case 12: {
            decimal = temperature & 0x0F;
 8000db4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc2:	edc7 7a08 	vstr	s15, [r7, #32]
            decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000dc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dca:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000e24 <TM_DS18B20_Read+0x1f4>
 8000dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd2:	edc7 7a08 	vstr	s15, [r7, #32]
        }
        break;
 8000dd6:	e004      	b.n	8000de2 <TM_DS18B20_Read+0x1b2>
        default: {
            decimal = 0xFF;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <TM_DS18B20_Read+0x1f8>)
 8000dda:	623b      	str	r3, [r7, #32]
            digit = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        }
    }

    /* Check for negative part */
    decimal = digit + decimal;
 8000de2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	ed97 7a08 	vldr	s14, [r7, #32]
 8000df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df6:	edc7 7a08 	vstr	s15, [r7, #32]
    if (minus) {
 8000dfa:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <TM_DS18B20_Read+0x1e2>
        decimal = 0 - decimal;
 8000e02:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000e2c <TM_DS18B20_Read+0x1fc>
 8000e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* Set to pointer */
    *destination = decimal;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a3a      	ldr	r2, [r7, #32]
 8000e16:	601a      	str	r2, [r3, #0]

    /* Return 1, temperature valid */
    return 1;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	372c      	adds	r7, #44	@ 0x2c
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	3d800000 	.word	0x3d800000
 8000e28:	437f0000 	.word	0x437f0000
 8000e2c:	00000000 	.word	0x00000000

08000e30 <TM_DS18B20_SetResolution>:
    /* Return 9 - 12 value according to number of bits */
    return ((conf & 0x60) >> 5) + 9;
}

uint8_t
TM_DS18B20_SetResolution(TM_OneWire_t* OneWire, uint8_t* ROM, TM_DS18B20_Resolution_t resolution) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
    uint8_t th, tl, conf;
    if (!TM_DS18B20_Is(ROM)) {
 8000e3e:	68b8      	ldr	r0, [r7, #8]
 8000e40:	f000 f87e 	bl	8000f40 <TM_DS18B20_Is>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <TM_DS18B20_SetResolution+0x1e>
        return 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e074      	b.n	8000f38 <TM_DS18B20_SetResolution+0x108>
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff fc79 	bl	8000746 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff fe63 	bl	8000b22 <TM_OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000e5c:	21be      	movs	r1, #190	@ 0xbe
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff fd2a 	bl	80008b8 <TM_OneWire_WriteByte>

    /* Ignore first 2 bytes */
    TM_OneWire_ReadByte(OneWire);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fd45 	bl	80008f4 <TM_OneWire_ReadByte>
    TM_OneWire_ReadByte(OneWire);
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff fd42 	bl	80008f4 <TM_OneWire_ReadByte>

    th = TM_OneWire_ReadByte(OneWire);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fd3f 	bl	80008f4 <TM_OneWire_ReadByte>
 8000e76:	4603      	mov	r3, r0
 8000e78:	75bb      	strb	r3, [r7, #22]
    tl = TM_OneWire_ReadByte(OneWire);
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f7ff fd3a 	bl	80008f4 <TM_OneWire_ReadByte>
 8000e80:	4603      	mov	r3, r0
 8000e82:	757b      	strb	r3, [r7, #21]
    conf = TM_OneWire_ReadByte(OneWire);
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f7ff fd35 	bl	80008f4 <TM_OneWire_ReadByte>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	75fb      	strb	r3, [r7, #23]

    if (resolution == TM_DS18B20_Resolution_9bits) {
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b09      	cmp	r3, #9
 8000e92:	d108      	bne.n	8000ea6 <TM_DS18B20_SetResolution+0x76>
        conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e9a:	75fb      	strb	r3, [r7, #23]
        conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	f023 0320 	bic.w	r3, r3, #32
 8000ea2:	75fb      	strb	r3, [r7, #23]
 8000ea4:	e022      	b.n	8000eec <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_10bits) {
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b0a      	cmp	r3, #10
 8000eaa:	d108      	bne.n	8000ebe <TM_DS18B20_SetResolution+0x8e>
        conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000eb2:	75fb      	strb	r3, [r7, #23]
        conf |= 1 << DS18B20_RESOLUTION_R0;
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	75fb      	strb	r3, [r7, #23]
 8000ebc:	e016      	b.n	8000eec <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_11bits) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b0b      	cmp	r3, #11
 8000ec2:	d108      	bne.n	8000ed6 <TM_DS18B20_SetResolution+0xa6>
        conf |= 1 << DS18B20_RESOLUTION_R1;
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eca:	75fb      	strb	r3, [r7, #23]
        conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	f023 0320 	bic.w	r3, r3, #32
 8000ed2:	75fb      	strb	r3, [r7, #23]
 8000ed4:	e00a      	b.n	8000eec <TM_DS18B20_SetResolution+0xbc>
    } else if (resolution == TM_DS18B20_Resolution_12bits) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b0c      	cmp	r3, #12
 8000eda:	d107      	bne.n	8000eec <TM_DS18B20_SetResolution+0xbc>
        conf |= 1 << DS18B20_RESOLUTION_R1;
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee2:	75fb      	strb	r3, [r7, #23]
        conf |= 1 << DS18B20_RESOLUTION_R0;
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	75fb      	strb	r3, [r7, #23]
    }

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fc2a 	bl	8000746 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fe14 	bl	8000b22 <TM_OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000efa:	214e      	movs	r1, #78	@ 0x4e
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fcdb 	bl	80008b8 <TM_OneWire_WriteByte>

    /* Write bytes */
    TM_OneWire_WriteByte(OneWire, th);
 8000f02:	7dbb      	ldrb	r3, [r7, #22]
 8000f04:	4619      	mov	r1, r3
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f7ff fcd6 	bl	80008b8 <TM_OneWire_WriteByte>
    TM_OneWire_WriteByte(OneWire, tl);
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fcd1 	bl	80008b8 <TM_OneWire_WriteByte>
    TM_OneWire_WriteByte(OneWire, conf);
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f7ff fccc 	bl	80008b8 <TM_OneWire_WriteByte>

    /* Reset line */
    TM_OneWire_Reset(OneWire);
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff fc10 	bl	8000746 <TM_OneWire_Reset>
    /* Select ROM number */
    TM_OneWire_SelectWithPointer(OneWire, ROM);
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fdfa 	bl	8000b22 <TM_OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    TM_OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000f2e:	2148      	movs	r1, #72	@ 0x48
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f7ff fcc1 	bl	80008b8 <TM_OneWire_WriteByte>

    return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <TM_DS18B20_Is>:

uint8_t
TM_DS18B20_Is(uint8_t* ROM) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    /* Checks if first byte is equal to DS18B20's family code */
    if (*ROM == DS18B20_FAMILY_CODE) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b28      	cmp	r3, #40	@ 0x28
 8000f4e:	d101      	bne.n	8000f54 <TM_DS18B20_Is+0x14>
        return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <TM_DS18B20_Is+0x16>
    }
    return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <TM_DS18B20_AllDone>:
    /* Start alarm search */
    return TM_OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t
TM_DS18B20_AllDone(TM_OneWire_t* OneWire) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
    /* If read bit is low, then device is not finished yet with calculation temperature */
    return TM_OneWire_ReadBit(OneWire);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fc6e 	bl	800084c <TM_OneWire_ReadBit>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b092      	sub	sp, #72	@ 0x48
 8000f80:	af00      	add	r7, sp, #0
  TM_OneWire_t OneWire1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f82:	f000 fa8d 	bl	80014a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fd25 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f8c7 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 fa1f 	bl	80013d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f985 	bl	80012a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f96:	f000 f9cf 	bl	8001338 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f9a:	f000 f92d 	bl	80011f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000f9e:	485a      	ldr	r0, [pc, #360]	@ (8001108 <main+0x18c>)
 8000fa0:	f003 febe 	bl	8004d20 <HAL_TIM_Base_Start_IT>

	TM_OneWire_Init(&OneWire1, GPIOA_GPIO_Port, GPIOA_Pin);
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	4957      	ldr	r1, [pc, #348]	@ (800110c <main+0x190>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fbb6 	bl	8000720 <TM_OneWire_Init>

	for (int n = 0; n < 38; n++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fb8:	e009      	b.n	8000fce <main+0x52>
		temp[n] = 0;
 8000fba:	4a55      	ldr	r2, [pc, #340]	@ (8001110 <main+0x194>)
 8000fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < 38; n++)
 8000fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fca:	3301      	adds	r3, #1
 8000fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8000fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fd0:	2b25      	cmp	r3, #37	@ 0x25
 8000fd2:	ddf2      	ble.n	8000fba <main+0x3e>

	uint8_t ds18b20_flag = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	uint8_t devices, sensor_count, device[4][8];

	/* Check for any device on 1-wire bus*/

	devices = TM_OneWire_First(&OneWire1);
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fca9 	bl	8000936 <TM_OneWire_First>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	sensor_count = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	while (devices) {
 8000ff0:	e018      	b.n	8001024 <main+0xa8>
		/* Increase count variable */
		sensor_count++;
 8000ff2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

		/* Get full 8-bytes rom address */
		TM_OneWire_GetFullROM(&OneWire1, device[sensor_count - 1]);
 8000ffc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001000:	3b01      	subs	r3, #1
 8001002:	463a      	mov	r2, r7
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	441a      	add	r2, r3
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fda6 	bl	8000b60 <TM_OneWire_GetFullROM>

		/* Check for new device */
		devices = TM_OneWire_Next(&OneWire1);
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc9c 	bl	8000956 <TM_OneWire_Next>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	while (devices) {
 8001024:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e2      	bne.n	8000ff2 <main+0x76>
	}

	//Set 9bit resolution for all sensors (93.75ms max conversion time)

	for (int i = 0; i < sensor_count; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001030:	e00c      	b.n	800104c <main+0xd0>
		TM_DS18B20_SetResolution(&OneWire1, device[i],
 8001032:	463a      	mov	r2, r7
 8001034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2209      	movs	r2, #9
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fef5 	bl	8000e30 <TM_DS18B20_SetResolution>
	for (int i = 0; i < sensor_count; i++) {
 8001046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001048:	3301      	adds	r3, #1
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800104c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001050:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001052:	429a      	cmp	r2, r3
 8001054:	dbed      	blt.n	8001032 <main+0xb6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Start temperature sampling on all devices
		TM_DS18B20_StartAll(&OneWire1);
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fdd5 	bl	8000c0a <TM_DS18B20_StartAll>
		while (!TM_DS18B20_AllDone(&OneWire1));
 8001060:	bf00      	nop
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff7b 	bl	8000f62 <TM_DS18B20_AllDone>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f7      	beq.n	8001062 <main+0xe6>

		//Extract temperature data
		for (int i = 0; i < sensor_count; i++) {
 8001072:	2300      	movs	r3, #0
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001076:	e015      	b.n	80010a4 <main+0x128>
			if (TM_DS18B20_Read(&OneWire1, device[i], &temp[i])) {
 8001078:	463a      	mov	r2, r7
 800107a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	18d1      	adds	r1, r2, r3
 8001080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <main+0x194>)
 8001086:	441a      	add	r2, r3
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fdcf 	bl	8000c30 <TM_DS18B20_Read>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <main+0x122>
				ds18b20_flag = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		for (int i = 0; i < sensor_count; i++) {
 800109e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a0:	3301      	adds	r3, #1
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010a4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80010a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbe4      	blt.n	8001078 <main+0xfc>
			}
		}
		#if TEMPS
			int loop;

			for(loop = 0; loop < 3; loop++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b2:	e00f      	b.n	80010d4 <main+0x158>
			  printf("%d ", temp[loop]);
 80010b4:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <main+0x194>)
 80010b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c4:	ec53 2b17 	vmov	r2, r3, d7
 80010c8:	4812      	ldr	r0, [pc, #72]	@ (8001114 <main+0x198>)
 80010ca:	f005 fc35 	bl	8006938 <iprintf>
			for(loop = 0; loop < 3; loop++)
 80010ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d0:	3301      	adds	r3, #1
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	ddec      	ble.n	80010b4 <main+0x138>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, ds18b20_flag);
 80010da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80010de:	461a      	mov	r2, r3
 80010e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <main+0x19c>)
 80010e6:	f001 f847 	bl	8002178 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ee:	f000 fd03 	bl	8001af8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <main+0x19c>)
 80010fa:	f001 f83d 	bl	8002178 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80010fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001102:	f000 fcf9 	bl	8001af8 <HAL_Delay>
	{
 8001106:	e7a6      	b.n	8001056 <main+0xda>
 8001108:	24000088 	.word	0x24000088
 800110c:	58021000 	.word	0x58021000
 8001110:	240001fc 	.word	0x240001fc
 8001114:	0800762c 	.word	0x0800762c
 8001118:	58020000 	.word	0x58020000

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	224c      	movs	r2, #76	@ 0x4c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fc59 	bl	80069e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fc53 	bl	80069e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800113c:	2002      	movs	r0, #2
 800113e:	f001 f835 	bl	80021ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <SystemClock_Config+0xd8>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	4a2a      	ldr	r2, [pc, #168]	@ (80011f4 <SystemClock_Config+0xd8>)
 800114c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001150:	6193      	str	r3, [r2, #24]
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <SystemClock_Config+0xd8>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800115e:	bf00      	nop
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <SystemClock_Config+0xd8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800116c:	d1f8      	bne.n	8001160 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116e:	2301      	movs	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117c:	2302      	movs	r3, #2
 800117e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001184:	232c      	movs	r3, #44	@ 0x2c
 8001186:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001194:	230c      	movs	r3, #12
 8001196:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001198:	2300      	movs	r3, #0
 800119a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f83b 	bl	8002220 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011b0:	f000 f9a2 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	233f      	movs	r3, #63	@ 0x3f
 80011b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2303      	movs	r3, #3
 80011ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011c0:	2308      	movs	r3, #8
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011c4:	2340      	movs	r3, #64	@ 0x40
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011c8:	2340      	movs	r3, #64	@ 0x40
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011d2:	2340      	movs	r3, #64	@ 0x40
 80011d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2103      	movs	r1, #3
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fbfa 	bl	80029d4 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80011e6:	f000 f987 	bl	80014f8 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3770      	adds	r7, #112	@ 0x70
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024800 	.word	0x58024800

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001218:	4a20      	ldr	r2, [pc, #128]	@ (800129c <MX_TIM1_Init+0xa4>)
 800121a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM1_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001228:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_TIM1_Init+0xa0>)
 800122a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <MX_TIM1_Init+0xa0>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001244:	f003 fd14 	bl	8004c70 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800124e:	f000 f953 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001256:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	480e      	ldr	r0, [pc, #56]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001260:	f003 fde4 	bl	8004e2c <HAL_TIM_ConfigClockSource>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800126a:	f000 f945 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_TIM1_Init+0xa0>)
 8001280:	f004 f81c 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800128a:	f000 f935 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000088 	.word	0x24000088
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012a6:	4a23      	ldr	r2, [pc, #140]	@ (8001334 <MX_USART1_UART_Init+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e8:	4811      	ldr	r0, [pc, #68]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012ea:	f004 f883 	bl	80053f4 <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 f900 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 80012fc:	f005 f98f 	bl	800661e <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001306:	f000 f8f7 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4808      	ldr	r0, [pc, #32]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 800130e:	f005 f9c4 	bl	800669a <HAL_UARTEx_SetRxFifoThreshold>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 f8ee 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_USART1_UART_Init+0x90>)
 800131e:	f005 f945 	bl	80065ac <HAL_UARTEx_DisableFifoMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 f8e6 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	240000d4 	.word	0x240000d4
 8001334:	40011000 	.word	0x40011000

08001338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <MX_USART2_UART_Init+0x94>)
 8001340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001344:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001380:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001382:	f004 f837 	bl	80053f4 <HAL_UART_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 f8b4 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 8001394:	f005 f943 	bl	800661e <HAL_UARTEx_SetTxFifoThreshold>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800139e:	f000 f8ab 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 80013a6:	f005 f978 	bl	800669a <HAL_UARTEx_SetRxFifoThreshold>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013b0:	f000 f8a2 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_USART2_UART_Init+0x90>)
 80013b6:	f005 f8f9 	bl	80065ac <HAL_UARTEx_DisableFifoMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 f89a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	24000168 	.word	0x24000168
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_GPIO_Init+0x94>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <MX_GPIO_Init+0x94>)
 80013ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_GPIO_Init+0x94>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_GPIO_Init+0x94>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <MX_GPIO_Init+0x94>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_GPIO_Init+0x94>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_GPIO_Init+0x94>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <MX_GPIO_Init+0x94>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_GPIO_Init+0x94>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GPIOA_Pin */
  GPIO_InitStruct.Pin = GPIOA_Pin;
 8001440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_GPIO_Init+0x98>)
 8001456:	f000 fccf 	bl	8001df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	58024400 	.word	0x58024400
 8001468:	58021000 	.word	0x58021000

0800146c <Delay_us>:

/* USER CODE BEGIN 4 */

void Delay_us(uint16_t us) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <Delay_us+0x30>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 800147e:	bf00      	nop
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <Delay_us+0x30>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3f9      	bcc.n	8001480 <Delay_us+0x14>
		;
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	24000088 	.word	0x24000088

080014a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014b2:	f000 fc29 	bl	8001d08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014c2:	231f      	movs	r3, #31
 80014c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014c6:	2387      	movs	r3, #135	@ 0x87
 80014c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014ce:	2300      	movs	r3, #0
 80014d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fc47 	bl	8001d78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014ea:	2004      	movs	r0, #4
 80014ec:	f000 fc24 	bl	8001d38 <HAL_MPU_Enable>

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_MspInit+0x30>)
 800150c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001510:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x30>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x30>)
 800151c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58024400 	.word	0x58024400

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_TIM_Base_MspInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40010000 	.word	0x40010000
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ba      	sub	sp, #232	@ 0xe8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	22b8      	movs	r2, #184	@ 0xb8
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f005 fa20 	bl	80069e2 <memset>
  if(huart->Instance==USART1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4d      	ldr	r2, [pc, #308]	@ (80016dc <HAL_UART_MspInit+0x160>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d147      	bne.n	800163c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ac:	f04f 0201 	mov.w	r2, #1
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fd92 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015ce:	f7ff ff93 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d2:	4b43      	ldr	r3, [pc, #268]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d8:	4a41      	ldr	r2, [pc, #260]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015e2:	4b3f      	ldr	r3, [pc, #252]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f6:	4a3a      	ldr	r2, [pc, #232]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001612:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001628:	2307      	movs	r3, #7
 800162a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001632:	4619      	mov	r1, r3
 8001634:	482b      	ldr	r0, [pc, #172]	@ (80016e4 <HAL_UART_MspInit+0x168>)
 8001636:	f000 fbdf 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800163a:	e04a      	b.n	80016d2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d145      	bne.n	80016d2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001646:	f04f 0202 	mov.w	r2, #2
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fd45 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001668:	f7ff ff46 	bl	80014f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 800166e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001672:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001678:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 800167e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a8:	230c      	movs	r3, #12
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_UART_MspInit+0x168>)
 80016ce:	f000 fb93 	bl	8001df8 <HAL_GPIO_Init>
}
 80016d2:	bf00      	nop
 80016d4:	37e8      	adds	r7, #232	@ 0xe8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40011000 	.word	0x40011000
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58020000 	.word	0x58020000
 80016e8:	40004400 	.word	0x40004400

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001742:	f000 f9b9 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}

0800174a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00a      	b.n	8001772 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175c:	f3af 8000 	nop.w
 8001760:	4601      	mov	r1, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	b2ca      	uxtb	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbf0      	blt.n	800175c <_read+0x12>
  }

  return len;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e009      	b.n	80017aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	60ba      	str	r2, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf1      	blt.n	8001796 <_write+0x12>
  }
  return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_close>:

int _close(int file)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e4:	605a      	str	r2, [r3, #4]
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_isatty>:

int _isatty(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f005 f914 	bl	8006a80 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	24050000 	.word	0x24050000
 8001884:	00000400 	.word	0x00000400
 8001888:	24000294 	.word	0x24000294
 800188c:	240003e8 	.word	0x240003e8

08001890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001894:	4b32      	ldr	r3, [pc, #200]	@ (8001960 <SystemInit+0xd0>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a31      	ldr	r2, [pc, #196]	@ (8001960 <SystemInit+0xd0>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <SystemInit+0xd4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d807      	bhi.n	80018c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <SystemInit+0xd4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 030f 	bic.w	r3, r3, #15
 80018b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001964 <SystemInit+0xd4>)
 80018ba:	f043 0307 	orr.w	r3, r3, #7
 80018be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c0:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <SystemInit+0xd8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	@ (8001968 <SystemInit+0xd8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <SystemInit+0xd8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018d2:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <SystemInit+0xd8>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4924      	ldr	r1, [pc, #144]	@ (8001968 <SystemInit+0xd8>)
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <SystemInit+0xdc>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <SystemInit+0xd4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <SystemInit+0xd4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 030f 	bic.w	r3, r3, #15
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <SystemInit+0xd4>)
 80018f4:	f043 0307 	orr.w	r3, r3, #7
 80018f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <SystemInit+0xd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <SystemInit+0xd8>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <SystemInit+0xd8>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <SystemInit+0xd8>)
 800190e:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <SystemInit+0xe0>)
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <SystemInit+0xd8>)
 8001914:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <SystemInit+0xe4>)
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <SystemInit+0xd8>)
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <SystemInit+0xe8>)
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <SystemInit+0xd8>)
 8001920:	2200      	movs	r2, #0
 8001922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <SystemInit+0xd8>)
 8001926:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <SystemInit+0xe8>)
 8001928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <SystemInit+0xd8>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <SystemInit+0xd8>)
 8001932:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <SystemInit+0xe8>)
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <SystemInit+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <SystemInit+0xd8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a09      	ldr	r2, [pc, #36]	@ (8001968 <SystemInit+0xd8>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <SystemInit+0xd8>)
 800194a:	2200      	movs	r2, #0
 800194c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <SystemInit+0xec>)
 8001950:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001954:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00
 8001964:	52002000 	.word	0x52002000
 8001968:	58024400 	.word	0x58024400
 800196c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001970:	02020200 	.word	0x02020200
 8001974:	01ff0000 	.word	0x01ff0000
 8001978:	01010280 	.word	0x01010280
 800197c:	52004000 	.word	0x52004000

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001984:	f7ff ff84 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	@ (80019cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f005 f86d 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fae3 	bl	8000f7c <main>
  bx  lr
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80019c4:	080076ac 	.word	0x080076ac
  ldr r2, =_sbss
 80019c8:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80019cc:	240003e8 	.word	0x240003e8

080019d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC3_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f962 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019e0:	f001 f9ae 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_Init+0x68>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	4913      	ldr	r1, [pc, #76]	@ (8001a40 <HAL_Init+0x6c>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_Init+0x68>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <HAL_Init+0x6c>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	4a0b      	ldr	r2, [pc, #44]	@ (8001a44 <HAL_Init+0x70>)
 8001a16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_Init+0x74>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f814 	bl	8001a4c <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e002      	b.n	8001a34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2e:	f7ff fd69 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	08007630 	.word	0x08007630
 8001a44:	24000004 	.word	0x24000004
 8001a48:	24000000 	.word	0x24000000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_InitTick+0x60>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e021      	b.n	8001aa4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <HAL_InitTick+0x64>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_InitTick+0x60>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f939 	bl	8001cee <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00e      	b.n	8001aa4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80a      	bhi.n	8001aa2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 f911 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_InitTick+0x68>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2400000c 	.word	0x2400000c
 8001ab0:	24000000 	.word	0x24000000
 8001ab4:	24000008 	.word	0x24000008

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2400000c 	.word	0x2400000c
 8001adc:	24000298 	.word	0x24000298

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	24000298 	.word	0x24000298

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2400000c 	.word	0x2400000c

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	05fa0000 	.word	0x05fa0000

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff47 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff5e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff90 	bl	8001bf8 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5f 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffb2 	bl	8001c60 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d0c:	f3bf 8f5f 	dmb	sy
}
 8001d10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <HAL_MPU_Disable+0x28>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <HAL_MPU_Disable+0x28>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_MPU_Disable+0x2c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	e000ed90 	.word	0xe000ed90

08001d38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d40:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <HAL_MPU_Enable+0x38>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_MPU_Enable+0x3c>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_MPU_Enable+0x3c>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d56:	f3bf 8f4f 	dsb	sy
}
 8001d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d5c:	f3bf 8f6f 	isb	sy
}
 8001d60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed90 	.word	0xe000ed90
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	785a      	ldrb	r2, [r3, #1]
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d94:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b1b      	ldrb	r3, [r3, #12]
 8001da0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7adb      	ldrb	r3, [r3, #11]
 8001da6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7a9b      	ldrb	r3, [r3, #10]
 8001dae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001db0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7b5b      	ldrb	r3, [r3, #13]
 8001db6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001db8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7b9b      	ldrb	r3, [r3, #14]
 8001dbe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7bdb      	ldrb	r3, [r3, #15]
 8001dc6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a5b      	ldrb	r3, [r3, #9]
 8001dce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7a1b      	ldrb	r3, [r3, #8]
 8001dd6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dd8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001de2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001de4:	6113      	str	r3, [r2, #16]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed90 	.word	0xe000ed90

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e06:	4b86      	ldr	r3, [pc, #536]	@ (8002020 <HAL_GPIO_Init+0x228>)
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e0a:	e18c      	b.n	8002126 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 817e 	beq.w	8002120 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x44>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d017      	beq.n	8001eda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d123      	bne.n	8001f2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0203 	and.w	r2, r3, #3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80d8 	beq.w	8002120 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f70:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_GPIO_Init+0x22c>)
 8001f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f76:	4a2b      	ldr	r2, [pc, #172]	@ (8002024 <HAL_GPIO_Init+0x22c>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_GPIO_Init+0x22c>)
 8001f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8e:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_GPIO_Init+0x230>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_GPIO_Init+0x234>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04a      	beq.n	8002050 <HAL_GPIO_Init+0x258>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_GPIO_Init+0x238>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x222>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_GPIO_Init+0x23c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x21e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8002038 <HAL_GPIO_Init+0x240>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a19      	ldr	r2, [pc, #100]	@ (800203c <HAL_GPIO_Init+0x244>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x216>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a18      	ldr	r2, [pc, #96]	@ (8002040 <HAL_GPIO_Init+0x248>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x212>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a17      	ldr	r2, [pc, #92]	@ (8002044 <HAL_GPIO_Init+0x24c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a16      	ldr	r2, [pc, #88]	@ (8002048 <HAL_GPIO_Init+0x250>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x20a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a15      	ldr	r2, [pc, #84]	@ (800204c <HAL_GPIO_Init+0x254>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x206>
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	e029      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 8001ffe:	230a      	movs	r3, #10
 8002000:	e027      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 8002002:	2307      	movs	r3, #7
 8002004:	e025      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 8002006:	2306      	movs	r3, #6
 8002008:	e023      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 800200a:	2305      	movs	r3, #5
 800200c:	e021      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 800200e:	2304      	movs	r3, #4
 8002010:	e01f      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 8002012:	2303      	movs	r3, #3
 8002014:	e01d      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 8002016:	2302      	movs	r3, #2
 8002018:	e01b      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 800201a:	2301      	movs	r3, #1
 800201c:	e019      	b.n	8002052 <HAL_GPIO_Init+0x25a>
 800201e:	bf00      	nop
 8002020:	58000080 	.word	0x58000080
 8002024:	58024400 	.word	0x58024400
 8002028:	58000400 	.word	0x58000400
 800202c:	58020000 	.word	0x58020000
 8002030:	58020400 	.word	0x58020400
 8002034:	58020800 	.word	0x58020800
 8002038:	58020c00 	.word	0x58020c00
 800203c:	58021000 	.word	0x58021000
 8002040:	58021400 	.word	0x58021400
 8002044:	58021800 	.word	0x58021800
 8002048:	58021c00 	.word	0x58021c00
 800204c:	58022400 	.word	0x58022400
 8002050:	2300      	movs	r3, #0
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	f002 0203 	and.w	r2, r2, #3
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4093      	lsls	r3, r2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002062:	4938      	ldr	r1, [pc, #224]	@ (8002144 <HAL_GPIO_Init+0x34c>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f ae6b 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	3724      	adds	r7, #36	@ 0x24
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	58000400 	.word	0x58000400

08002148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	e001      	b.n	800216a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00a      	beq.n	80021d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01f      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e01d      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	490f      	ldr	r1, [pc, #60]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021e6:	f7ff fc7b 	bl	8001ae0 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ec:	e009      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021ee:	f7ff fc77 	bl	8001ae0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021fc:	d901      	bls.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e007      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220e:	d1ee      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	58024800 	.word	0x58024800

08002220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	@ 0x30
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e3c8      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002240:	4b88      	ldr	r3, [pc, #544]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800224a:	4b86      	ldr	r3, [pc, #536]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	2b10      	cmp	r3, #16
 8002254:	d007      	beq.n	8002266 <HAL_RCC_OscConfig+0x46>
 8002256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002258:	2b18      	cmp	r3, #24
 800225a:	d110      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06c      	beq.n	800234c <HAL_RCC_OscConfig+0x12c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d168      	bne.n	800234c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e3a2      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x76>
 8002288:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b71      	ldr	r3, [pc, #452]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a70      	ldr	r2, [pc, #448]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xbc>
 80022c2:	4b68      	ldr	r3, [pc, #416]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a67      	ldr	r2, [pc, #412]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b65      	ldr	r3, [pc, #404]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a64      	ldr	r2, [pc, #400]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022dc:	4b61      	ldr	r3, [pc, #388]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a60      	ldr	r2, [pc, #384]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fbf0 	bl	8001ae0 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fbec 	bl	8001ae0 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e356      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe4>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fbdc 	bl	8001ae0 <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fbd8 	bl	8001ae0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e342      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233e:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x10c>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 808c 	beq.w	8002474 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002364:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002366:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_RCC_OscConfig+0x162>
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2b18      	cmp	r3, #24
 8002376:	d137      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1c8>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d132      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002382:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x17a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e314      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800239a:	4b32      	ldr	r3, [pc, #200]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0219 	bic.w	r2, r3, #25
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	492f      	ldr	r1, [pc, #188]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fb98 	bl	8001ae0 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff fb94 	bl	8001ae0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e2fe      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	4920      	ldr	r1, [pc, #128]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e6:	e045      	b.n	8002474 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d026      	beq.n	800243e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0219 	bic.w	r2, r3, #25
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4919      	ldr	r1, [pc, #100]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff fb6d 	bl	8001ae0 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7ff fb69 	bl	8001ae0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e2d3      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	490b      	ldr	r1, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e01a      	b.n	8002474 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff fb49 	bl	8001ae0 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff fb45 	bl	8001ae0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d903      	bls.n	8002468 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e2af      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
 8002464:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002468:	4b96      	ldr	r3, [pc, #600]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d06a      	beq.n	8002556 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002480:	4b90      	ldr	r3, [pc, #576]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002488:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800248a:	4b8e      	ldr	r3, [pc, #568]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b08      	cmp	r3, #8
 8002494:	d007      	beq.n	80024a6 <HAL_RCC_OscConfig+0x286>
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b18      	cmp	r3, #24
 800249a:	d11b      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2b4>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a6:	4b87      	ldr	r3, [pc, #540]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x29e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b80      	cmp	r3, #128	@ 0x80
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e282      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024be:	4b81      	ldr	r3, [pc, #516]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	061b      	lsls	r3, r3, #24
 80024cc:	497d      	ldr	r1, [pc, #500]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d2:	e040      	b.n	8002556 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d023      	beq.n	8002524 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024dc:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a78      	ldr	r2, [pc, #480]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80024e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fafa 	bl	8001ae0 <HAL_GetTick>
 80024ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024f0:	f7ff faf6 	bl	8001ae0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e260      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002502:	4b70      	ldr	r3, [pc, #448]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800250e:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	061b      	lsls	r3, r3, #24
 800251c:	4969      	ldr	r1, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
 8002522:	e018      	b.n	8002556 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002524:	4b67      	ldr	r3, [pc, #412]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a66      	ldr	r2, [pc, #408]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800252a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fad6 	bl	8001ae0 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002538:	f7ff fad2 	bl	8001ae0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e23c      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800254a:	4b5e      	ldr	r3, [pc, #376]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b56      	ldr	r3, [pc, #344]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256e:	4a55      	ldr	r2, [pc, #340]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7ff fab3 	bl	8001ae0 <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257e:	f7ff faaf 	bl	8001ae0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e219      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002590:	4b4c      	ldr	r3, [pc, #304]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x35e>
 800259c:	e018      	b.n	80025d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b49      	ldr	r3, [pc, #292]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a2:	4a48      	ldr	r2, [pc, #288]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7ff fa99 	bl	8001ae0 <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff fa95 	bl	8001ae0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1ff      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c4:	4b3f      	ldr	r3, [pc, #252]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d036      	beq.n	800264a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d019      	beq.n	8002618 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e4:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a36      	ldr	r2, [pc, #216]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80025ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025f0:	f7ff fa76 	bl	8001ae0 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f8:	f7ff fa72 	bl	8001ae0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1dc      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800260a:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3d8>
 8002616:	e018      	b.n	800264a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002618:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 800261e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002622:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002624:	f7ff fa5c 	bl	8001ae0 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262c:	f7ff fa58 	bl	8001ae0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1c2      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8086 	beq.w	8002764 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x4a8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1a      	ldr	r2, [pc, #104]	@ (80026c8 <HAL_RCC_OscConfig+0x4a8>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002664:	f7ff fa3c 	bl	8001ae0 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff fa38 	bl	8001ae0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1a2      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_RCC_OscConfig+0x4a8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x480>
 8002692:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	e032      	b.n	8002706 <HAL_RCC_OscConfig+0x4e6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4ac>
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a02      	ldr	r2, [pc, #8]	@ (80026c4 <HAL_RCC_OscConfig+0x4a4>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c0:	e021      	b.n	8002706 <HAL_RCC_OscConfig+0x4e6>
 80026c2:	bf00      	nop
 80026c4:	58024400 	.word	0x58024400
 80026c8:	58024800 	.word	0x58024800
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d10c      	bne.n	80026ee <HAL_RCC_OscConfig+0x4ce>
 80026d4:	4b83      	ldr	r3, [pc, #524]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a82      	ldr	r2, [pc, #520]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	4b80      	ldr	r3, [pc, #512]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	4a7f      	ldr	r2, [pc, #508]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ec:	e00b      	b.n	8002706 <HAL_RCC_OscConfig+0x4e6>
 80026ee:	4b7d      	ldr	r3, [pc, #500]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a7c      	ldr	r2, [pc, #496]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	4b7a      	ldr	r3, [pc, #488]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	4a79      	ldr	r2, [pc, #484]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d015      	beq.n	800273a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7ff f9e7 	bl	8001ae0 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7ff f9e3 	bl	8001ae0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e14b      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800272c:	4b6d      	ldr	r3, [pc, #436]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ee      	beq.n	8002716 <HAL_RCC_OscConfig+0x4f6>
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7ff f9d1 	bl	8001ae0 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff f9cd 	bl	8001ae0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e135      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002758:	4b62      	ldr	r3, [pc, #392]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 812a 	beq.w	80029c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800276e:	4b5d      	ldr	r3, [pc, #372]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002776:	2b18      	cmp	r3, #24
 8002778:	f000 80ba 	beq.w	80028f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	2b02      	cmp	r3, #2
 8002782:	f040 8095 	bne.w	80028b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b57      	ldr	r3, [pc, #348]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a56      	ldr	r2, [pc, #344]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f9a5 	bl	8001ae0 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7ff f9a1 	bl	8001ae0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e10b      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ac:	4b4d      	ldr	r3, [pc, #308]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b8:	4b4a      	ldr	r3, [pc, #296]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80027ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027bc:	4b4a      	ldr	r3, [pc, #296]	@ (80028e8 <HAL_RCC_OscConfig+0x6c8>)
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	430a      	orrs	r2, r1
 80027cc:	4945      	ldr	r1, [pc, #276]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	3b01      	subs	r3, #1
 80027d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e0:	3b01      	subs	r3, #1
 80027e2:	025b      	lsls	r3, r3, #9
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	3b01      	subs	r3, #1
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002802:	4938      	ldr	r1, [pc, #224]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	4a35      	ldr	r2, [pc, #212]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002814:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002818:	4b34      	ldr	r3, [pc, #208]	@ (80028ec <HAL_RCC_OscConfig+0x6cc>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	4930      	ldr	r1, [pc, #192]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002828:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	f023 020c 	bic.w	r2, r3, #12
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	492b      	ldr	r1, [pc, #172]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800283a:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	f023 0202 	bic.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	4927      	ldr	r1, [pc, #156]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002858:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	4a1e      	ldr	r2, [pc, #120]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800286e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002870:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	4a1b      	ldr	r2, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a18      	ldr	r2, [pc, #96]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7ff f92a 	bl	8001ae0 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7ff f926 	bl	8001ae0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e090      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x670>
 80028ae:	e088      	b.n	80029c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff f910 	bl	8001ae0 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f90c 	bl	8001ae0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e076      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d6:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCC_OscConfig+0x6c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x6a4>
 80028e2:	e06e      	b.n	80029c2 <HAL_RCC_OscConfig+0x7a2>
 80028e4:	58024400 	.word	0x58024400
 80028e8:	fffffc0c 	.word	0xfffffc0c
 80028ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028f6:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	2b01      	cmp	r3, #1
 8002902:	d031      	beq.n	8002968 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d12a      	bne.n	8002968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d122      	bne.n	8002968 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d11a      	bne.n	8002968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0a5b      	lsrs	r3, r3, #9
 8002936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d111      	bne.n	8002968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d108      	bne.n	8002968 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0e1b      	lsrs	r3, r3, #24
 800295a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002962:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e02b      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002976:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d01f      	beq.n	80029c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	4a11      	ldr	r2, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800298e:	f7ff f8a7 	bl	8001ae0 <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002994:	bf00      	nop
 8002996:	f7ff f8a3 	bl	8001ae0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	4293      	cmp	r3, r2
 80029a0:	d0f9      	beq.n	8002996 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80029a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_RCC_OscConfig+0x7b0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	4906      	ldr	r1, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_RCC_OscConfig+0x7ac>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3730      	adds	r7, #48	@ 0x30
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	58024400 	.word	0x58024400
 80029d0:	ffff0007 	.word	0xffff0007

080029d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e19c      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b87      	ldr	r3, [pc, #540]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4985      	ldr	r1, [pc, #532]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b83      	ldr	r3, [pc, #524]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e184      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a34:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	4975      	ldr	r1, [pc, #468]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b70      	ldr	r3, [pc, #448]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d908      	bls.n	8002a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a62:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	496a      	ldr	r1, [pc, #424]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	4b64      	ldr	r3, [pc, #400]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d908      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a90:	4b61      	ldr	r3, [pc, #388]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	495e      	ldr	r1, [pc, #376]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	4b59      	ldr	r3, [pc, #356]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002abe:	4b56      	ldr	r3, [pc, #344]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4953      	ldr	r1, [pc, #332]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d908      	bls.n	8002afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b4a      	ldr	r3, [pc, #296]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 020f 	bic.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4947      	ldr	r1, [pc, #284]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d055      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4940      	ldr	r1, [pc, #256]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b24:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0f6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3c:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0ea      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b54:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0de      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b64:	4b2c      	ldr	r3, [pc, #176]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d6      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4925      	ldr	r1, [pc, #148]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe ffab 	bl	8001ae0 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe ffa7 	bl	8001ae0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0be      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d208      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f023 020f 	bic.w	r2, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	490e      	ldr	r1, [pc, #56]	@ (8002c18 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d214      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	4906      	ldr	r1, [pc, #24]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e086      	b.n	8002d22 <HAL_RCC_ClockConfig+0x34e>
 8002c14:	52002000 	.word	0x52002000
 8002c18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d208      	bcs.n	8002c4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c38:	4b3c      	ldr	r3, [pc, #240]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4939      	ldr	r1, [pc, #228]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d208      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c66:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	492e      	ldr	r1, [pc, #184]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d208      	bcs.n	8002ca6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c94:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4922      	ldr	r1, [pc, #136]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d208      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4917      	ldr	r1, [pc, #92]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd4:	f000 f834 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4912      	ldr	r1, [pc, #72]	@ (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <HAL_RCC_ClockConfig+0x35c>)
 8002cfc:	5cd3      	ldrb	r3, [r2, r3]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <HAL_RCC_ClockConfig+0x360>)
 8002d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <HAL_RCC_ClockConfig+0x364>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x368>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fe98 	bl	8001a4c <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	08007630 	.word	0x08007630
 8002d34:	24000004 	.word	0x24000004
 8002d38:	24000000 	.word	0x24000000
 8002d3c:	24000008 	.word	0x24000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	@ 0x24
 8002d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d46:	4bb3      	ldr	r3, [pc, #716]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	f200 8155 	bhi.w	8002ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8002d54:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002dc1 	.word	0x08002dc1
 8002d60:	08002fff 	.word	0x08002fff
 8002d64:	08002fff 	.word	0x08002fff
 8002d68:	08002fff 	.word	0x08002fff
 8002d6c:	08002fff 	.word	0x08002fff
 8002d70:	08002fff 	.word	0x08002fff
 8002d74:	08002fff 	.word	0x08002fff
 8002d78:	08002fff 	.word	0x08002fff
 8002d7c:	08002de7 	.word	0x08002de7
 8002d80:	08002fff 	.word	0x08002fff
 8002d84:	08002fff 	.word	0x08002fff
 8002d88:	08002fff 	.word	0x08002fff
 8002d8c:	08002fff 	.word	0x08002fff
 8002d90:	08002fff 	.word	0x08002fff
 8002d94:	08002fff 	.word	0x08002fff
 8002d98:	08002fff 	.word	0x08002fff
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002fff 	.word	0x08002fff
 8002da4:	08002fff 	.word	0x08002fff
 8002da8:	08002fff 	.word	0x08002fff
 8002dac:	08002fff 	.word	0x08002fff
 8002db0:	08002fff 	.word	0x08002fff
 8002db4:	08002fff 	.word	0x08002fff
 8002db8:	08002fff 	.word	0x08002fff
 8002dbc:	08002df3 	.word	0x08002df3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc0:	4b94      	ldr	r3, [pc, #592]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dcc:	4b91      	ldr	r3, [pc, #580]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	4a90      	ldr	r2, [pc, #576]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dde:	e111      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002de0:	4b8d      	ldr	r3, [pc, #564]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002de2:	61bb      	str	r3, [r7, #24]
      break;
 8002de4:	e10e      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002de6:	4b8d      	ldr	r3, [pc, #564]	@ (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de8:	61bb      	str	r3, [r7, #24]
      break;
 8002dea:	e10b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dec:	4b8c      	ldr	r3, [pc, #560]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dee:	61bb      	str	r3, [r7, #24]
      break;
 8002df0:	e108      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002df2:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dfc:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e08:	4b82      	ldr	r3, [pc, #520]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e12:	4b80      	ldr	r3, [pc, #512]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80e1 	beq.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	f000 8083 	beq.w	8002f44 <HAL_RCC_GetSysClockFreq+0x204>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f200 80a1 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x114>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d056      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e52:	e099      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e54:	4b6f      	ldr	r3, [pc, #444]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e60:	4b6c      	ldr	r3, [pc, #432]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8a:	4b62      	ldr	r3, [pc, #392]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002eba:	e087      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ece:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002efe:	e065      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f42:	e043      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f56:	4b2f      	ldr	r3, [pc, #188]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f86:	e021      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	ee07 3a90 	vmov	s15, r3
 8002f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800302c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff0:	ee17 3a90 	vmov	r3, s15
 8002ff4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003000:	61bb      	str	r3, [r7, #24]
      break;
 8003002:	bf00      	nop
  }

  return sysclockfreq;
 8003004:	69bb      	ldr	r3, [r7, #24]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	@ 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	03d09000 	.word	0x03d09000
 800301c:	003d0900 	.word	0x003d0900
 8003020:	016e3600 	.word	0x016e3600
 8003024:	46000000 	.word	0x46000000
 8003028:	4c742400 	.word	0x4c742400
 800302c:	4a742400 	.word	0x4a742400
 8003030:	4bb71b00 	.word	0x4bb71b00

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800303a:	f7ff fe81 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490f      	ldr	r1, [pc, #60]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x50>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x54>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a07      	ldr	r2, [pc, #28]	@ (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 8003070:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003072:	4a07      	ldr	r2, [pc, #28]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <HAL_RCC_GetHCLKFreq+0x58>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	08007630 	.word	0x08007630
 800308c:	24000004 	.word	0x24000004
 8003090:	24000000 	.word	0x24000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003098:	f7ff ffcc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	58024400 	.word	0x58024400
 80030bc:	08007630 	.word	0x08007630

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030c4:	f7ff ffb6 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4904      	ldr	r1, [pc, #16]	@ (80030e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58024400 	.word	0x58024400
 80030e8:	08007630 	.word	0x08007630

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f0:	b0c6      	sub	sp, #280	@ 0x118
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003110:	2500      	movs	r5, #0
 8003112:	ea54 0305 	orrs.w	r3, r4, r5
 8003116:	d049      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800311c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003122:	d02f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003128:	d828      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800312a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312e:	d01a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003134:	d822      	bhi.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800313a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313e:	d007      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003140:	e01c      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003142:	4bab      	ldr	r3, [pc, #684]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	4aaa      	ldr	r2, [pc, #680]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800314e:	e01a      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003154:	3308      	adds	r3, #8
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fc25 	bl	80049a8 <RCCEx_PLL2_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003164:	e00f      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800316a:	3328      	adds	r3, #40	@ 0x28
 800316c:	2102      	movs	r1, #2
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fccc 	bl	8004b0c <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800318e:	4b98      	ldr	r3, [pc, #608]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800319a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800319c:	4a94      	ldr	r2, [pc, #592]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80031a2:	e003      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031b8:	f04f 0900 	mov.w	r9, #0
 80031bc:	ea58 0309 	orrs.w	r3, r8, r9
 80031c0:	d047      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d82a      	bhi.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031cc:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031f7 	.word	0x080031f7
 80031dc:	0800320d 	.word	0x0800320d
 80031e0:	0800322b 	.word	0x0800322b
 80031e4:	0800322b 	.word	0x0800322b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b81      	ldr	r3, [pc, #516]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	4a80      	ldr	r2, [pc, #512]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f4:	e01a      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031fa:	3308      	adds	r3, #8
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fbd2 	bl	80049a8 <RCCEx_PLL2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800320a:	e00f      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800320c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003210:	3328      	adds	r3, #40	@ 0x28
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fc79 	bl	8004b0c <RCCEx_PLL3_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800322a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003234:	4b6e      	ldr	r3, [pc, #440]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	f023 0107 	bic.w	r1, r3, #7
 800323c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6513      	str	r3, [r2, #80]	@ 0x50
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800324e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800325e:	f04f 0b00 	mov.w	fp, #0
 8003262:	ea5a 030b 	orrs.w	r3, sl, fp
 8003266:	d05b      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800326c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003270:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003274:	d03b      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003276:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800327a:	d834      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003280:	d037      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003286:	d82e      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003288:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800328c:	d033      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800328e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003292:	d828      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003298:	d01a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800329e:	d822      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80032a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032a8:	d007      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80032aa:	e01c      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b50      	ldr	r3, [pc, #320]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	4a4f      	ldr	r2, [pc, #316]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032b8:	e01e      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032be:	3308      	adds	r3, #8
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fb70 	bl	80049a8 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032ce:	e013      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d4:	3328      	adds	r3, #40	@ 0x28
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc17 	bl	8004b0c <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032e4:	e008      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032ec:	e004      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003300:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003310:	4a37      	ldr	r2, [pc, #220]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
 8003316:	e003      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800332c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003336:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800333a:	460b      	mov	r3, r1
 800333c:	4313      	orrs	r3, r2
 800333e:	d05d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003348:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800334c:	d03b      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800334e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003352:	d834      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003358:	d037      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800335a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800335e:	d82e      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003360:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003364:	d033      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003366:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800336a:	d828      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800336c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003370:	d01a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003376:	d822      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003380:	d007      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003382:	e01c      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b1a      	ldr	r3, [pc, #104]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003390:	e01e      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003396:	3308      	adds	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f001 fb04 	bl	80049a8 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033a6:	e013      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ac:	3328      	adds	r3, #40	@ 0x28
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fbab 	bl	8004b0c <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033c4:	e004      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80033e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033e8:	4a01      	ldr	r2, [pc, #4]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ee:	e005      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80033f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003408:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003412:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d03a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	2b30      	cmp	r3, #48	@ 0x30
 8003424:	d01f      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003426:	2b30      	cmp	r3, #48	@ 0x30
 8003428:	d819      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800342a:	2b20      	cmp	r3, #32
 800342c:	d00c      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d815      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003436:	2b10      	cmp	r3, #16
 8003438:	d111      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343a:	4baa      	ldr	r3, [pc, #680]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	4aa9      	ldr	r2, [pc, #676]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003446:	e011      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	3308      	adds	r3, #8
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f001 faa9 	bl	80049a8 <RCCEx_PLL2_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003474:	4b9b      	ldr	r3, [pc, #620]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	4a98      	ldr	r2, [pc, #608]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003484:	430b      	orrs	r3, r1
 8003486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800348e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800349e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80034a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d051      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034bc:	d035      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80034be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c2:	d82e      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034c8:	d031      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80034ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ce:	d828      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d4:	d01a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034da:	d822      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e4:	d007      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80034e6:	e01c      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b7e      	ldr	r3, [pc, #504]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034f4:	e01c      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034fa:	3308      	adds	r3, #8
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fa52 	bl	80049a8 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800350a:	e011      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003510:	3328      	adds	r3, #40	@ 0x28
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f001 faf9 	bl	8004b0c <RCCEx_PLL3_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003520:	e006      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800352e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003538:	4b6a      	ldr	r3, [pc, #424]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	4a67      	ldr	r2, [pc, #412]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6513      	str	r3, [r2, #80]	@ 0x50
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003552:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800356c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d053      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003580:	d033      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003582:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003586:	d82c      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800358c:	d02f      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800358e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003592:	d826      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003598:	d02b      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800359a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800359e:	d820      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035a4:	d012      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035aa:	d81a      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d115      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ba:	3308      	adds	r3, #8
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f9f2 	bl	80049a8 <RCCEx_PLL2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ca:	e015      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d0:	3328      	adds	r3, #40	@ 0x28
 80035d2:	2101      	movs	r1, #1
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fa99 	bl	8004b0c <RCCEx_PLL3_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035e0:	e00a      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035e8:	e006      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003600:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360e:	4a35      	ldr	r2, [pc, #212]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6513      	str	r3, [r2, #80]	@ 0x50
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800361e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800362a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003634:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003638:	460b      	mov	r3, r1
 800363a:	4313      	orrs	r3, r2
 800363c:	d058      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800363e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800364a:	d033      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800364c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003650:	d82c      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	d02f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d826      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800365e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003662:	d02b      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003668:	d820      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800366a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800366e:	d012      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003674:	d81a      	bhi.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d022      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800367a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800367e:	d115      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003684:	3308      	adds	r3, #8
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f001 f98d 	bl	80049a8 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003694:	e015      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369a:	3328      	adds	r3, #40	@ 0x28
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fa34 	bl	8004b0c <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036aa:	e00a      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036b2:	e006      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036b4:	bf00      	nop
 80036b6:	e004      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036da:	4a02      	ldr	r2, [pc, #8]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036e2:	bf00      	nop
 80036e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80036fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	d037      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800371a:	d00e      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003720:	d816      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800372a:	d111      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4bc4      	ldr	r3, [pc, #784]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	4ac3      	ldr	r2, [pc, #780]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373e:	3308      	adds	r3, #8
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f930 	bl	80049a8 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003762:	4bb7      	ldr	r3, [pc, #732]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003770:	4ab3      	ldr	r2, [pc, #716]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003772:	430b      	orrs	r3, r1
 8003774:	6513      	str	r3, [r2, #80]	@ 0x50
 8003776:	e003      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800377c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800378c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003796:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800379a:	460b      	mov	r3, r1
 800379c:	4313      	orrs	r3, r2
 800379e:	d039      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d81c      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80037aa:	a201      	add	r2, pc, #4	@ (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	080037c1 	.word	0x080037c1
 80037b8:	080037cf 	.word	0x080037cf
 80037bc:	080037ed 	.word	0x080037ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b9f      	ldr	r3, [pc, #636]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	4a9e      	ldr	r2, [pc, #632]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	3308      	adds	r3, #8
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f8e6 	bl	80049a8 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037f6:	4b92      	ldr	r3, [pc, #584]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	f023 0103 	bic.w	r1, r3, #3
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003804:	4a8e      	ldr	r2, [pc, #568]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003806:	430b      	orrs	r3, r1
 8003808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003820:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800382a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	f000 8099 	beq.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003836:	4b83      	ldr	r3, [pc, #524]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a82      	ldr	r2, [pc, #520]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003842:	f7fe f94d 	bl	8001ae0 <HAL_GetTick>
 8003846:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384a:	e00b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fe f948 	bl	8001ae0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	@ 0x64
 800385a:	d903      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003862:	e005      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003864:	4b77      	ldr	r3, [pc, #476]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003874:	2b00      	cmp	r3, #0
 8003876:	d173      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003878:	4b71      	ldr	r3, [pc, #452]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800387a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800387c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003884:	4053      	eors	r3, r2
 8003886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800388e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003896:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389a:	4b69      	ldr	r3, [pc, #420]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	4a68      	ldr	r2, [pc, #416]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a6:	4b66      	ldr	r3, [pc, #408]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038b2:	4a63      	ldr	r2, [pc, #396]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c6:	d118      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f90a 	bl	8001ae0 <HAL_GetTick>
 80038cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d0:	e00d      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe f905 	bl	8001ae0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038dc:	1ad2      	subs	r2, r2, r3
 80038de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d903      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ee:	4b54      	ldr	r3, [pc, #336]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0eb      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80038fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d129      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800390a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003912:	d10e      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003914:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003924:	091a      	lsrs	r2, r3, #4
 8003926:	4b48      	ldr	r3, [pc, #288]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003928:	4013      	ands	r3, r2
 800392a:	4a45      	ldr	r2, [pc, #276]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6113      	str	r3, [r2, #16]
 8003930:	e005      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003932:	4b43      	ldr	r3, [pc, #268]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4a42      	ldr	r2, [pc, #264]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800393c:	6113      	str	r3, [r2, #16]
 800393e:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003940:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6713      	str	r3, [r2, #112]	@ 0x70
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800395a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 0301 	and.w	r3, r2, #1
 8003974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800397e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	f000 808f 	beq.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003990:	2b28      	cmp	r3, #40	@ 0x28
 8003992:	d871      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003994:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	08003a81 	.word	0x08003a81
 80039a0:	08003a79 	.word	0x08003a79
 80039a4:	08003a79 	.word	0x08003a79
 80039a8:	08003a79 	.word	0x08003a79
 80039ac:	08003a79 	.word	0x08003a79
 80039b0:	08003a79 	.word	0x08003a79
 80039b4:	08003a79 	.word	0x08003a79
 80039b8:	08003a79 	.word	0x08003a79
 80039bc:	08003a4d 	.word	0x08003a4d
 80039c0:	08003a79 	.word	0x08003a79
 80039c4:	08003a79 	.word	0x08003a79
 80039c8:	08003a79 	.word	0x08003a79
 80039cc:	08003a79 	.word	0x08003a79
 80039d0:	08003a79 	.word	0x08003a79
 80039d4:	08003a79 	.word	0x08003a79
 80039d8:	08003a79 	.word	0x08003a79
 80039dc:	08003a63 	.word	0x08003a63
 80039e0:	08003a79 	.word	0x08003a79
 80039e4:	08003a79 	.word	0x08003a79
 80039e8:	08003a79 	.word	0x08003a79
 80039ec:	08003a79 	.word	0x08003a79
 80039f0:	08003a79 	.word	0x08003a79
 80039f4:	08003a79 	.word	0x08003a79
 80039f8:	08003a79 	.word	0x08003a79
 80039fc:	08003a81 	.word	0x08003a81
 8003a00:	08003a79 	.word	0x08003a79
 8003a04:	08003a79 	.word	0x08003a79
 8003a08:	08003a79 	.word	0x08003a79
 8003a0c:	08003a79 	.word	0x08003a79
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003a79 	.word	0x08003a79
 8003a1c:	08003a81 	.word	0x08003a81
 8003a20:	08003a79 	.word	0x08003a79
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	08003a79 	.word	0x08003a79
 8003a2c:	08003a79 	.word	0x08003a79
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a81 	.word	0x08003a81
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58024800 	.word	0x58024800
 8003a48:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a50:	3308      	adds	r3, #8
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 ffa7 	bl	80049a8 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a60:	e00f      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	3328      	adds	r3, #40	@ 0x28
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 f84e 	bl	8004b0c <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a8a:	4bbf      	ldr	r3, [pc, #764]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a98:	4abb      	ldr	r2, [pc, #748]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 0302 	and.w	r3, r2, #2
 8003ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003abe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d041      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d824      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b25 	.word	0x08003b25
 8003adc:	08003af1 	.word	0x08003af1
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b25 	.word	0x08003b25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af4:	3308      	adds	r3, #8
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ff55 	bl	80049a8 <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b04:	e00f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	3328      	adds	r3, #40	@ 0x28
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fffc 	bl	8004b0c <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b1a:	e004      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b2e:	4b96      	ldr	r3, [pc, #600]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b32:	f023 0107 	bic.w	r1, r3, #7
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	4a92      	ldr	r2, [pc, #584]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 0304 	and.w	r3, r2, #4
 8003b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d044      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d825      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003b78:	a201      	add	r2, pc, #4	@ (adr r2, 8003b80 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bcd 	.word	0x08003bcd
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003baf 	.word	0x08003baf
 8003b8c:	08003bcd 	.word	0x08003bcd
 8003b90:	08003bcd 	.word	0x08003bcd
 8003b94:	08003bcd 	.word	0x08003bcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ff01 	bl	80049a8 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb2:	3328      	adds	r3, #40	@ 0x28
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 ffa8 	bl	8004b0c <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	f023 0107 	bic.w	r1, r3, #7
 8003bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	4a68      	ldr	r2, [pc, #416]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bec:	e003      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f002 0320 	and.w	r3, r2, #32
 8003c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	d055      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c22:	d033      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c28:	d82c      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2e:	d02f      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c34:	d826      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c3a:	d02b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c40:	d820      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c46:	d012      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c4c:	d81a      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d022      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c56:	d115      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fea1 	bl	80049a8 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e015      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c72:	3328      	adds	r3, #40	@ 0x28
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 ff48 	bl	8004b0c <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c82:	e00a      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c8c:	bf00      	nop
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cb2:	4a35      	ldr	r2, [pc, #212]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003cce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cd8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d058      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003cee:	d033      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003cf0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003cf4:	d82c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfa:	d02f      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	d826      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d06:	d02b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d0c:	d820      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d12:	d012      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d18:	d81a      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d022      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d22:	d115      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe3b 	bl	80049a8 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d38:	e015      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fee2 	bl	8004b0c <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d56:	e006      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d58:	bf00      	nop
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d7e:	4a02      	ldr	r2, [pc, #8]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d055      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dbc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003dc0:	d033      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003dc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003dc6:	d82c      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dcc:	d02f      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd2:	d826      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dd4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dd8:	d02b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003dda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dde:	d820      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003de4:	d012      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dea:	d81a      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d022      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df4:	d115      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fdd2 	bl	80049a8 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e015      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e10:	3328      	adds	r3, #40	@ 0x28
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fe79 	bl	8004b0c <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e40:	4ba0      	ldr	r3, [pc, #640]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e50:	4a9c      	ldr	r2, [pc, #624]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 0308 	and.w	r3, r2, #8
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d01e      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e92:	3328      	adds	r3, #40	@ 0x28
 8003e94:	2102      	movs	r1, #2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fe38 	bl	8004b0c <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003ea8:	4b86      	ldr	r3, [pc, #536]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb8:	4a82      	ldr	r2, [pc, #520]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f002 0310 	and.w	r3, r2, #16
 8003eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d01e      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef0:	3328      	adds	r3, #40	@ 0x28
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fe09 	bl	8004b0c <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f06:	4b6f      	ldr	r3, [pc, #444]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f16:	4a6b      	ldr	r2, [pc, #428]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f2e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d03e      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f44:	d022      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f4a:	d81b      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d00b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003f56:	e015      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd21 	bl	80049a8 <RCCEx_PLL2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f6c:	e00f      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f72:	3328      	adds	r3, #40	@ 0x28
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fdc8 	bl	8004b0c <RCCEx_PLL3_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f82:	e004      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f96:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fa6:	4a47      	ldr	r2, [pc, #284]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	d03b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fde:	d01f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003fe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fe4:	d818      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff0:	d007      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff4:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004006:	3328      	adds	r3, #40	@ 0x28
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fd7e 	bl	8004b0c <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800402a:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403a:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800404a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004058:	2300      	movs	r3, #0
 800405a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800405c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d034      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004074:	d007      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004076:	e011      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004078:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800407e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004084:	e00e      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408a:	3308      	adds	r3, #8
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fc8a 	bl	80049a8 <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ba:	4a02      	ldr	r2, [pc, #8]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80040dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80040de:	2300      	movs	r3, #0
 80040e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80040e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d00c      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	3328      	adds	r3, #40	@ 0x28
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fd09 	bl	8004b0c <RCCEx_PLL3_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004114:	2300      	movs	r3, #0
 8004116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004118:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d036      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800412c:	d018      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800412e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004132:	d811      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004138:	d014      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800413a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800413e:	d80b      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004148:	d106      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414a:	4bb7      	ldr	r3, [pc, #732]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	4ab6      	ldr	r2, [pc, #728]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004172:	4bad      	ldr	r3, [pc, #692]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004176:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004180:	4aa9      	ldr	r2, [pc, #676]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004182:	430b      	orrs	r3, r1
 8004184:	6553      	str	r3, [r2, #84]	@ 0x54
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800419c:	653b      	str	r3, [r7, #80]	@ 0x50
 800419e:	2300      	movs	r3, #0
 80041a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	4a9b      	ldr	r2, [pc, #620]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ce:	2300      	movs	r3, #0
 80041d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041dc:	4b92      	ldr	r3, [pc, #584]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ea:	4a8f      	ldr	r2, [pc, #572]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041fe:	2300      	movs	r3, #0
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800420c:	4b86      	ldr	r3, [pc, #536]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	4a85      	ldr	r2, [pc, #532]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004216:	6113      	str	r3, [r2, #16]
 8004218:	4b83      	ldr	r3, [pc, #524]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800421a:	6919      	ldr	r1, [r3, #16]
 800421c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004224:	4a80      	ldr	r2, [pc, #512]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004226:	430b      	orrs	r3, r1
 8004228:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800422a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004238:	2300      	movs	r3, #0
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004246:	4b78      	ldr	r3, [pc, #480]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	4a74      	ldr	r2, [pc, #464]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004256:	430b      	orrs	r3, r1
 8004258:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
 8004268:	2300      	movs	r3, #0
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004276:	4b6c      	ldr	r3, [pc, #432]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800427e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	4a68      	ldr	r2, [pc, #416]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	2100      	movs	r1, #0
 8004296:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d011      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ac:	3308      	adds	r3, #8
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fb79 	bl	80049a8 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	2100      	movs	r1, #0
 80042d6:	6239      	str	r1, [r7, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d011      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ec:	3308      	adds	r3, #8
 80042ee:	2101      	movs	r1, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fb59 	bl	80049a8 <RCCEx_PLL2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	2100      	movs	r1, #0
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d011      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432c:	3308      	adds	r3, #8
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fb39 	bl	80049a8 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	2100      	movs	r1, #0
 8004356:	6139      	str	r1, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d011      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436c:	3328      	adds	r3, #40	@ 0x28
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fbcb 	bl	8004b0c <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800437c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	2100      	movs	r1, #0
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d011      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ac:	3328      	adds	r3, #40	@ 0x28
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fbab 	bl	8004b0c <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	2100      	movs	r1, #0
 80043d6:	6039      	str	r1, [r7, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d011      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb8b 	bl	8004b0c <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800440c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400

0800442c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004430:	f7fe fe00 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	58024400 	.word	0x58024400
 8004454:	08007630 	.word	0x08007630

08004458 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	@ 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004460:	4ba1      	ldr	r3, [pc, #644]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800446a:	4b9f      	ldr	r3, [pc, #636]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	0b1b      	lsrs	r3, r3, #12
 8004470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004474:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004476:	4b9c      	ldr	r3, [pc, #624]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004482:	4b99      	ldr	r3, [pc, #612]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8111 	beq.w	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f000 8083 	beq.w	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f200 80a1 	bhi.w	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d056      	beq.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044c2:	e099      	b.n	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c4:	4b88      	ldr	r3, [pc, #544]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d02d      	beq.n	800452c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044d0:	4b85      	ldr	r3, [pc, #532]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	08db      	lsrs	r3, r3, #3
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	4a84      	ldr	r2, [pc, #528]	@ (80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	ee07 3a90 	vmov	s15, r3
 80044e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b7b      	ldr	r3, [pc, #492]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a03 	vldr	s12, [r7, #12]
 800450e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800452a:	e087      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004552:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800456e:	e065      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a03 	vldr	s12, [r7, #12]
 8004596:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b2:	e043      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b48      	ldr	r3, [pc, #288]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f6:	e021      	b.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800463c:	4b2a      	ldr	r3, [pc, #168]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004656:	edd7 6a07 	vldr	s13, [r7, #28]
 800465a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004662:	ee17 2a90 	vmov	r2, s15
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004684:	edd7 6a07 	vldr	s13, [r7, #28]
 8004688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046be:	ee17 2a90 	vmov	r2, s15
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046c6:	e008      	b.n	80046da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	bf00      	nop
 80046dc:	3724      	adds	r7, #36	@ 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	46000000 	.word	0x46000000
 80046f4:	4c742400 	.word	0x4c742400
 80046f8:	4a742400 	.word	0x4a742400
 80046fc:	4bb71b00 	.word	0x4bb71b00

08004700 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004708:	4ba1      	ldr	r3, [pc, #644]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004712:	4b9f      	ldr	r3, [pc, #636]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	0d1b      	lsrs	r3, r3, #20
 8004718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800471e:	4b9c      	ldr	r3, [pc, #624]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800472a:	4b99      	ldr	r3, [pc, #612]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8111 	beq.w	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	f000 8083 	beq.w	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f200 80a1 	bhi.w	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d056      	beq.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800476a:	e099      	b.n	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800476c:	4b88      	ldr	r3, [pc, #544]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004778:	4b85      	ldr	r3, [pc, #532]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	4a84      	ldr	r2, [pc, #528]	@ (8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047d2:	e087      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800499c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e065      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	e043      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b48      	ldr	r3, [pc, #288]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e021      	b.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490a:	ee17 2a90 	vmov	r2, s15
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004912:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004938:	ee17 2a90 	vmov	r2, s15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004940:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800495a:	edd7 6a07 	vldr	s13, [r7, #28]
 800495e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004966:	ee17 2a90 	vmov	r2, s15
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800496e:	e008      	b.n	8004982 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	@ 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
 8004994:	03d09000 	.word	0x03d09000
 8004998:	46000000 	.word	0x46000000
 800499c:	4c742400 	.word	0x4c742400
 80049a0:	4a742400 	.word	0x4a742400
 80049a4:	4bb71b00 	.word	0x4bb71b00

080049a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049b6:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d101      	bne.n	80049c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e099      	b.n	8004afa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fd f885 	bl	8001ae0 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049d8:	e008      	b.n	80049ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049da:	f7fd f881 	bl	8001ae0 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e086      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049f8:	4b42      	ldr	r3, [pc, #264]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	493f      	ldr	r1, [pc, #252]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a3c:	4931      	ldr	r1, [pc, #196]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a42:	4b30      	ldr	r3, [pc, #192]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	492d      	ldr	r1, [pc, #180]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a54:	4b2b      	ldr	r3, [pc, #172]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f023 0220 	bic.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4928      	ldr	r1, [pc, #160]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a66:	4b27      	ldr	r3, [pc, #156]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <RCCEx_PLL2_Config+0x160>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69d2      	ldr	r2, [r2, #28]
 8004a7e:	00d2      	lsls	r2, r2, #3
 8004a80:	4920      	ldr	r1, [pc, #128]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a86:	4b1f      	ldr	r3, [pc, #124]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f043 0310 	orr.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aa4:	e00f      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004aac:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aba:	4b12      	ldr	r3, [pc, #72]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004acc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fd f805 	bl	8001ae0 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ada:	f7fd f801 	bl	8001ae0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
 8004b08:	ffff0007 	.word	0xffff0007

08004b0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b1a:	4b53      	ldr	r3, [pc, #332]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d101      	bne.n	8004b2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e099      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b36:	f7fc ffd3 	bl	8001ae0 <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b3e:	f7fc ffcf 	bl	8001ae0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e086      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b50:	4b45      	ldr	r3, [pc, #276]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b5c:	4b42      	ldr	r3, [pc, #264]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	051b      	lsls	r3, r3, #20
 8004b6a:	493f      	ldr	r1, [pc, #252]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	025b      	lsls	r3, r3, #9
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	061b      	lsls	r3, r3, #24
 8004b9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ba0:	4931      	ldr	r1, [pc, #196]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ba6:	4b30      	ldr	r3, [pc, #192]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	492d      	ldr	r1, [pc, #180]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4928      	ldr	r1, [pc, #160]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bca:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a26      	ldr	r2, [pc, #152]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bda:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <RCCEx_PLL3_Config+0x160>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	69d2      	ldr	r2, [r2, #28]
 8004be2:	00d2      	lsls	r2, r2, #3
 8004be4:	4920      	ldr	r1, [pc, #128]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bea:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	4a1e      	ldr	r2, [pc, #120]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c08:	e00f      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c1c:	e005      	b.n	8004c2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c1e:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fc ff53 	bl	8001ae0 <HAL_GetTick>
 8004c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c3c:	e008      	b.n	8004c50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c3e:	f7fc ff4f 	bl	8001ae0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <RCCEx_PLL3_Config+0x15c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	ffff0007 	.word	0xffff0007

08004c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e049      	b.n	8004d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fc4e 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 f9b4 	bl	800501c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e05e      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d62:	d027      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a27      	ldr	r2, [pc, #156]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a26      	ldr	r2, [pc, #152]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xec>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xf0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a23      	ldr	r2, [pc, #140]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xf4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a21      	ldr	r2, [pc, #132]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xf8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xfc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <HAL_TIM_Base_Start_IT+0x100>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x94>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <HAL_TIM_Base_Start_IT+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d115      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <HAL_TIM_Base_Start_IT+0x108>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d015      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0xd2>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d011      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40000c00 	.word	0x40000c00
 8004e14:	40010400 	.word	0x40010400
 8004e18:	40001800 	.word	0x40001800
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	4000e000 	.word	0x4000e000
 8004e24:	4000e400 	.word	0x4000e400
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_ConfigClockSource+0x1c>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0dc      	b.n	8005002 <HAL_TIM_ConfigClockSource+0x1d6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	4b6a      	ldr	r3, [pc, #424]	@ (800500c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a64      	ldr	r2, [pc, #400]	@ (8005010 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f000 80a9 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e84:	4a62      	ldr	r2, [pc, #392]	@ (8005010 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	f200 80ae 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e8c:	4a61      	ldr	r2, [pc, #388]	@ (8005014 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	f000 80a1 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e94:	4a5f      	ldr	r2, [pc, #380]	@ (8005014 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f200 80a6 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8005018 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f000 8099 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8005018 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f200 809e 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004eac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004eb0:	f000 8091 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004eb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004eb8:	f200 8096 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec0:	f000 8089 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec8:	f200 808e 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed0:	d03e      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x124>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed6:	f200 8087 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	f000 8086 	beq.w	8004fee <HAL_TIM_ConfigClockSource+0x1c2>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d87f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ee8:	2b70      	cmp	r3, #112	@ 0x70
 8004eea:	d01a      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xf6>
 8004eec:	2b70      	cmp	r3, #112	@ 0x70
 8004eee:	d87b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ef0:	2b60      	cmp	r3, #96	@ 0x60
 8004ef2:	d050      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x16a>
 8004ef4:	2b60      	cmp	r3, #96	@ 0x60
 8004ef6:	d877      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ef8:	2b50      	cmp	r3, #80	@ 0x50
 8004efa:	d03c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x14a>
 8004efc:	2b50      	cmp	r3, #80	@ 0x50
 8004efe:	d873      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d058      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x18a>
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	d86f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f08:	2b30      	cmp	r3, #48	@ 0x30
 8004f0a:	d064      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f0c:	2b30      	cmp	r3, #48	@ 0x30
 8004f0e:	d86b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d060      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d867      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05c      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d05a      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f20:	e062      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	f000 f9a3 	bl	800527c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
      break;
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	f000 f98c 	bl	800527c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e03c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 f8fc 	bl	8005180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2150      	movs	r1, #80	@ 0x50
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f956 	bl	8005240 <TIM_ITRx_SetConfig>
      break;
 8004f94:	e02c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 f91b 	bl	80051de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2160      	movs	r1, #96	@ 0x60
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f946 	bl	8005240 <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e01c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 f8dc 	bl	8005180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2140      	movs	r1, #64	@ 0x40
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f936 	bl	8005240 <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 f92d 	bl	8005240 <TIM_ITRx_SetConfig>
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	ffceff88 	.word	0xffceff88
 8005010:	00100040 	.word	0x00100040
 8005014:	00100030 	.word	0x00100030
 8005018:	00100020 	.word	0x00100020

0800501c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a4a      	ldr	r2, [pc, #296]	@ (8005158 <TIM_Base_SetConfig+0x13c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503a:	d00f      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a47      	ldr	r2, [pc, #284]	@ (800515c <TIM_Base_SetConfig+0x140>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a46      	ldr	r2, [pc, #280]	@ (8005160 <TIM_Base_SetConfig+0x144>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a45      	ldr	r2, [pc, #276]	@ (8005164 <TIM_Base_SetConfig+0x148>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a44      	ldr	r2, [pc, #272]	@ (8005168 <TIM_Base_SetConfig+0x14c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d108      	bne.n	800506e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <TIM_Base_SetConfig+0x13c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d027      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d023      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a36      	ldr	r2, [pc, #216]	@ (800515c <TIM_Base_SetConfig+0x140>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a35      	ldr	r2, [pc, #212]	@ (8005160 <TIM_Base_SetConfig+0x144>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01b      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <TIM_Base_SetConfig+0x148>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d017      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <TIM_Base_SetConfig+0x14c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a32      	ldr	r2, [pc, #200]	@ (800516c <TIM_Base_SetConfig+0x150>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a31      	ldr	r2, [pc, #196]	@ (8005170 <TIM_Base_SetConfig+0x154>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a30      	ldr	r2, [pc, #192]	@ (8005174 <TIM_Base_SetConfig+0x158>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <TIM_Base_SetConfig+0x15c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0xaa>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2e      	ldr	r2, [pc, #184]	@ (800517c <TIM_Base_SetConfig+0x160>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <TIM_Base_SetConfig+0x13c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x108>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <TIM_Base_SetConfig+0x14c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x108>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a17      	ldr	r2, [pc, #92]	@ (800516c <TIM_Base_SetConfig+0x150>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x108>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <TIM_Base_SetConfig+0x154>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x108>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <TIM_Base_SetConfig+0x158>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d105      	bne.n	800514a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]
  }
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40010400 	.word	0x40010400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800
 8005178:	4000e000 	.word	0x4000e000
 800517c:	4000e400 	.word	0x4000e400

08005180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 030a 	bic.w	r3, r3, #10
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051de:	b480      	push	{r7}
 80051e0:	b087      	sub	sp, #28
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f023 0210 	bic.w	r2, r3, #16
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800521a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <TIM_ITRx_SetConfig+0x38>)
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	f043 0307 	orr.w	r3, r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	609a      	str	r2, [r3, #8]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	ffcfff8f 	.word	0xffcfff8f

0800527c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e077      	b.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a34      	ldr	r2, [pc, #208]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800530e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02c      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d027      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d01d      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1a      	ldr	r2, [pc, #104]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1b      	ldr	r2, [pc, #108]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10c      	bne.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800
 80053e0:	40000c00 	.word	0x40000c00
 80053e4:	40001800 	.word	0x40001800
 80053e8:	40014000 	.word	0x40014000
 80053ec:	4000e000 	.word	0x4000e000
 80053f0:	4000e400 	.word	0x4000e400

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e042      	b.n	800548c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fc f8af 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2224      	movs	r2, #36	@ 0x24
 8005422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fe94 	bl	800616c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f825 	bl	8005494 <UART_SetConfig>
 800544a:	4603      	mov	r3, r0
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e01b      	b.n	800548c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 ff13 	bl	80062b0 <UART_CheckIdleState>
 800548a:	4603      	mov	r3, r0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b092      	sub	sp, #72	@ 0x48
 800549a:	af00      	add	r7, sp, #0
 800549c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4bbe      	ldr	r3, [pc, #760]	@ (80057bc <UART_SetConfig+0x328>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4ab3      	ldr	r2, [pc, #716]	@ (80057c0 <UART_SetConfig+0x32c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054fc:	4313      	orrs	r3, r2
 80054fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	4baf      	ldr	r3, [pc, #700]	@ (80057c4 <UART_SetConfig+0x330>)
 8005508:	4013      	ands	r3, r2
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005510:	430b      	orrs	r3, r1
 8005512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	f023 010f 	bic.w	r1, r3, #15
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4aa6      	ldr	r2, [pc, #664]	@ (80057c8 <UART_SetConfig+0x334>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d177      	bne.n	8005624 <UART_SetConfig+0x190>
 8005534:	4ba5      	ldr	r3, [pc, #660]	@ (80057cc <UART_SetConfig+0x338>)
 8005536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800553c:	2b28      	cmp	r3, #40	@ 0x28
 800553e:	d86d      	bhi.n	800561c <UART_SetConfig+0x188>
 8005540:	a201      	add	r2, pc, #4	@ (adr r2, 8005548 <UART_SetConfig+0xb4>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	080055ed 	.word	0x080055ed
 800554c:	0800561d 	.word	0x0800561d
 8005550:	0800561d 	.word	0x0800561d
 8005554:	0800561d 	.word	0x0800561d
 8005558:	0800561d 	.word	0x0800561d
 800555c:	0800561d 	.word	0x0800561d
 8005560:	0800561d 	.word	0x0800561d
 8005564:	0800561d 	.word	0x0800561d
 8005568:	080055f5 	.word	0x080055f5
 800556c:	0800561d 	.word	0x0800561d
 8005570:	0800561d 	.word	0x0800561d
 8005574:	0800561d 	.word	0x0800561d
 8005578:	0800561d 	.word	0x0800561d
 800557c:	0800561d 	.word	0x0800561d
 8005580:	0800561d 	.word	0x0800561d
 8005584:	0800561d 	.word	0x0800561d
 8005588:	080055fd 	.word	0x080055fd
 800558c:	0800561d 	.word	0x0800561d
 8005590:	0800561d 	.word	0x0800561d
 8005594:	0800561d 	.word	0x0800561d
 8005598:	0800561d 	.word	0x0800561d
 800559c:	0800561d 	.word	0x0800561d
 80055a0:	0800561d 	.word	0x0800561d
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	08005605 	.word	0x08005605
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	0800561d 	.word	0x0800561d
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	0800561d 	.word	0x0800561d
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800561d 	.word	0x0800561d
 80055d4:	0800561d 	.word	0x0800561d
 80055d8:	0800561d 	.word	0x0800561d
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	0800561d 	.word	0x0800561d
 80055e4:	0800561d 	.word	0x0800561d
 80055e8:	08005615 	.word	0x08005615
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e326      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e322      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e31e      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e31a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800560c:	2320      	movs	r3, #32
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e316      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005614:	2340      	movs	r3, #64	@ 0x40
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561a:	e312      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e30e      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a69      	ldr	r2, [pc, #420]	@ (80057d0 <UART_SetConfig+0x33c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d130      	bne.n	8005690 <UART_SetConfig+0x1fc>
 800562e:	4b67      	ldr	r3, [pc, #412]	@ (80057cc <UART_SetConfig+0x338>)
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b05      	cmp	r3, #5
 8005638:	d826      	bhi.n	8005688 <UART_SetConfig+0x1f4>
 800563a:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <UART_SetConfig+0x1ac>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005659 	.word	0x08005659
 8005644:	08005661 	.word	0x08005661
 8005648:	08005669 	.word	0x08005669
 800564c:	08005671 	.word	0x08005671
 8005650:	08005679 	.word	0x08005679
 8005654:	08005681 	.word	0x08005681
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e2f0      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e2ec      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e2e8      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e2e4      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005678:	2320      	movs	r3, #32
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567e:	e2e0      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005686:	e2dc      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e2d8      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a4f      	ldr	r2, [pc, #316]	@ (80057d4 <UART_SetConfig+0x340>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d130      	bne.n	80056fc <UART_SetConfig+0x268>
 800569a:	4b4c      	ldr	r3, [pc, #304]	@ (80057cc <UART_SetConfig+0x338>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d826      	bhi.n	80056f4 <UART_SetConfig+0x260>
 80056a6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x218>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056c5 	.word	0x080056c5
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e2ba      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e2b6      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056da:	e2b2      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e2:	e2ae      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056e4:	2320      	movs	r3, #32
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ea:	e2aa      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056ec:	2340      	movs	r3, #64	@ 0x40
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f2:	e2a6      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056f4:	2380      	movs	r3, #128	@ 0x80
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fa:	e2a2      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <UART_SetConfig+0x344>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d130      	bne.n	8005768 <UART_SetConfig+0x2d4>
 8005706:	4b31      	ldr	r3, [pc, #196]	@ (80057cc <UART_SetConfig+0x338>)
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b05      	cmp	r3, #5
 8005710:	d826      	bhi.n	8005760 <UART_SetConfig+0x2cc>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x284>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005731 	.word	0x08005731
 800571c:	08005739 	.word	0x08005739
 8005720:	08005741 	.word	0x08005741
 8005724:	08005749 	.word	0x08005749
 8005728:	08005751 	.word	0x08005751
 800572c:	08005759 	.word	0x08005759
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e284      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e280      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e27c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e278      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005750:	2320      	movs	r3, #32
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005756:	e274      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005758:	2340      	movs	r3, #64	@ 0x40
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575e:	e270      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e26c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <UART_SetConfig+0x348>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d142      	bne.n	80057f8 <UART_SetConfig+0x364>
 8005772:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <UART_SetConfig+0x338>)
 8005774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b05      	cmp	r3, #5
 800577c:	d838      	bhi.n	80057f0 <UART_SetConfig+0x35c>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <UART_SetConfig+0x2f0>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	0800579d 	.word	0x0800579d
 8005788:	080057a5 	.word	0x080057a5
 800578c:	080057ad 	.word	0x080057ad
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057e1 	.word	0x080057e1
 8005798:	080057e9 	.word	0x080057e9
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e24e      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057a4:	2304      	movs	r3, #4
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e24a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057ac:	2308      	movs	r3, #8
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b2:	e246      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057b4:	2310      	movs	r3, #16
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e242      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057bc:	cfff69f3 	.word	0xcfff69f3
 80057c0:	58000c00 	.word	0x58000c00
 80057c4:	11fff4ff 	.word	0x11fff4ff
 80057c8:	40011000 	.word	0x40011000
 80057cc:	58024400 	.word	0x58024400
 80057d0:	40004400 	.word	0x40004400
 80057d4:	40004800 	.word	0x40004800
 80057d8:	40004c00 	.word	0x40004c00
 80057dc:	40005000 	.word	0x40005000
 80057e0:	2320      	movs	r3, #32
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e22c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057e8:	2340      	movs	r3, #64	@ 0x40
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ee:	e228      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e224      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4ab1      	ldr	r2, [pc, #708]	@ (8005ac4 <UART_SetConfig+0x630>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d176      	bne.n	80058f0 <UART_SetConfig+0x45c>
 8005802:	4bb1      	ldr	r3, [pc, #708]	@ (8005ac8 <UART_SetConfig+0x634>)
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800580a:	2b28      	cmp	r3, #40	@ 0x28
 800580c:	d86c      	bhi.n	80058e8 <UART_SetConfig+0x454>
 800580e:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <UART_SetConfig+0x380>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	080058b9 	.word	0x080058b9
 8005818:	080058e9 	.word	0x080058e9
 800581c:	080058e9 	.word	0x080058e9
 8005820:	080058e9 	.word	0x080058e9
 8005824:	080058e9 	.word	0x080058e9
 8005828:	080058e9 	.word	0x080058e9
 800582c:	080058e9 	.word	0x080058e9
 8005830:	080058e9 	.word	0x080058e9
 8005834:	080058c1 	.word	0x080058c1
 8005838:	080058e9 	.word	0x080058e9
 800583c:	080058e9 	.word	0x080058e9
 8005840:	080058e9 	.word	0x080058e9
 8005844:	080058e9 	.word	0x080058e9
 8005848:	080058e9 	.word	0x080058e9
 800584c:	080058e9 	.word	0x080058e9
 8005850:	080058e9 	.word	0x080058e9
 8005854:	080058c9 	.word	0x080058c9
 8005858:	080058e9 	.word	0x080058e9
 800585c:	080058e9 	.word	0x080058e9
 8005860:	080058e9 	.word	0x080058e9
 8005864:	080058e9 	.word	0x080058e9
 8005868:	080058e9 	.word	0x080058e9
 800586c:	080058e9 	.word	0x080058e9
 8005870:	080058e9 	.word	0x080058e9
 8005874:	080058d1 	.word	0x080058d1
 8005878:	080058e9 	.word	0x080058e9
 800587c:	080058e9 	.word	0x080058e9
 8005880:	080058e9 	.word	0x080058e9
 8005884:	080058e9 	.word	0x080058e9
 8005888:	080058e9 	.word	0x080058e9
 800588c:	080058e9 	.word	0x080058e9
 8005890:	080058e9 	.word	0x080058e9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058e9 	.word	0x080058e9
 800589c:	080058e9 	.word	0x080058e9
 80058a0:	080058e9 	.word	0x080058e9
 80058a4:	080058e9 	.word	0x080058e9
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	080058e9 	.word	0x080058e9
 80058b0:	080058e9 	.word	0x080058e9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e1c0      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e1bc      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e1b8      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e1b4      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058d8:	2320      	movs	r3, #32
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e1b0      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058e0:	2340      	movs	r3, #64	@ 0x40
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e1ac      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e1a8      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a75      	ldr	r2, [pc, #468]	@ (8005acc <UART_SetConfig+0x638>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d130      	bne.n	800595c <UART_SetConfig+0x4c8>
 80058fa:	4b73      	ldr	r3, [pc, #460]	@ (8005ac8 <UART_SetConfig+0x634>)
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b05      	cmp	r3, #5
 8005904:	d826      	bhi.n	8005954 <UART_SetConfig+0x4c0>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x478>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005925 	.word	0x08005925
 8005910:	0800592d 	.word	0x0800592d
 8005914:	08005935 	.word	0x08005935
 8005918:	0800593d 	.word	0x0800593d
 800591c:	08005945 	.word	0x08005945
 8005920:	0800594d 	.word	0x0800594d
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e18a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e186      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e182      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e17e      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005944:	2320      	movs	r3, #32
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e17a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800594c:	2340      	movs	r3, #64	@ 0x40
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e176      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005954:	2380      	movs	r3, #128	@ 0x80
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e172      	b.n	8005c42 <UART_SetConfig+0x7ae>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a5b      	ldr	r2, [pc, #364]	@ (8005ad0 <UART_SetConfig+0x63c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d130      	bne.n	80059c8 <UART_SetConfig+0x534>
 8005966:	4b58      	ldr	r3, [pc, #352]	@ (8005ac8 <UART_SetConfig+0x634>)
 8005968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b05      	cmp	r3, #5
 8005970:	d826      	bhi.n	80059c0 <UART_SetConfig+0x52c>
 8005972:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <UART_SetConfig+0x4e4>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005991 	.word	0x08005991
 800597c:	08005999 	.word	0x08005999
 8005980:	080059a1 	.word	0x080059a1
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059b9 	.word	0x080059b9
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e154      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e150      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e14c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e148      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059b0:	2320      	movs	r3, #32
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e144      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059b8:	2340      	movs	r3, #64	@ 0x40
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e140      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059c0:	2380      	movs	r3, #128	@ 0x80
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e13c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a41      	ldr	r2, [pc, #260]	@ (8005ad4 <UART_SetConfig+0x640>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f040 8082 	bne.w	8005ad8 <UART_SetConfig+0x644>
 80059d4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ac8 <UART_SetConfig+0x634>)
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059dc:	2b28      	cmp	r3, #40	@ 0x28
 80059de:	d86d      	bhi.n	8005abc <UART_SetConfig+0x628>
 80059e0:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <UART_SetConfig+0x554>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005abd 	.word	0x08005abd
 80059f0:	08005abd 	.word	0x08005abd
 80059f4:	08005abd 	.word	0x08005abd
 80059f8:	08005abd 	.word	0x08005abd
 80059fc:	08005abd 	.word	0x08005abd
 8005a00:	08005abd 	.word	0x08005abd
 8005a04:	08005abd 	.word	0x08005abd
 8005a08:	08005a95 	.word	0x08005a95
 8005a0c:	08005abd 	.word	0x08005abd
 8005a10:	08005abd 	.word	0x08005abd
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005abd 	.word	0x08005abd
 8005a1c:	08005abd 	.word	0x08005abd
 8005a20:	08005abd 	.word	0x08005abd
 8005a24:	08005abd 	.word	0x08005abd
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005abd 	.word	0x08005abd
 8005a30:	08005abd 	.word	0x08005abd
 8005a34:	08005abd 	.word	0x08005abd
 8005a38:	08005abd 	.word	0x08005abd
 8005a3c:	08005abd 	.word	0x08005abd
 8005a40:	08005abd 	.word	0x08005abd
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005aa5 	.word	0x08005aa5
 8005a4c:	08005abd 	.word	0x08005abd
 8005a50:	08005abd 	.word	0x08005abd
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005abd 	.word	0x08005abd
 8005a5c:	08005abd 	.word	0x08005abd
 8005a60:	08005abd 	.word	0x08005abd
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005abd 	.word	0x08005abd
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005abd 	.word	0x08005abd
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005abd 	.word	0x08005abd
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e0d6      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e0d2      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e0ce      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e0ca      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005aac:	2320      	movs	r3, #32
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e0c6      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005ab4:	2340      	movs	r3, #64	@ 0x40
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e0c2      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e0be      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005ac4:	40011400 	.word	0x40011400
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	40007800 	.word	0x40007800
 8005ad0:	40007c00 	.word	0x40007c00
 8005ad4:	40011800 	.word	0x40011800
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4aad      	ldr	r2, [pc, #692]	@ (8005d94 <UART_SetConfig+0x900>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d176      	bne.n	8005bd0 <UART_SetConfig+0x73c>
 8005ae2:	4bad      	ldr	r3, [pc, #692]	@ (8005d98 <UART_SetConfig+0x904>)
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aea:	2b28      	cmp	r3, #40	@ 0x28
 8005aec:	d86c      	bhi.n	8005bc8 <UART_SetConfig+0x734>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <UART_SetConfig+0x660>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b99 	.word	0x08005b99
 8005af8:	08005bc9 	.word	0x08005bc9
 8005afc:	08005bc9 	.word	0x08005bc9
 8005b00:	08005bc9 	.word	0x08005bc9
 8005b04:	08005bc9 	.word	0x08005bc9
 8005b08:	08005bc9 	.word	0x08005bc9
 8005b0c:	08005bc9 	.word	0x08005bc9
 8005b10:	08005bc9 	.word	0x08005bc9
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005bc9 	.word	0x08005bc9
 8005b1c:	08005bc9 	.word	0x08005bc9
 8005b20:	08005bc9 	.word	0x08005bc9
 8005b24:	08005bc9 	.word	0x08005bc9
 8005b28:	08005bc9 	.word	0x08005bc9
 8005b2c:	08005bc9 	.word	0x08005bc9
 8005b30:	08005bc9 	.word	0x08005bc9
 8005b34:	08005ba9 	.word	0x08005ba9
 8005b38:	08005bc9 	.word	0x08005bc9
 8005b3c:	08005bc9 	.word	0x08005bc9
 8005b40:	08005bc9 	.word	0x08005bc9
 8005b44:	08005bc9 	.word	0x08005bc9
 8005b48:	08005bc9 	.word	0x08005bc9
 8005b4c:	08005bc9 	.word	0x08005bc9
 8005b50:	08005bc9 	.word	0x08005bc9
 8005b54:	08005bb1 	.word	0x08005bb1
 8005b58:	08005bc9 	.word	0x08005bc9
 8005b5c:	08005bc9 	.word	0x08005bc9
 8005b60:	08005bc9 	.word	0x08005bc9
 8005b64:	08005bc9 	.word	0x08005bc9
 8005b68:	08005bc9 	.word	0x08005bc9
 8005b6c:	08005bc9 	.word	0x08005bc9
 8005b70:	08005bc9 	.word	0x08005bc9
 8005b74:	08005bb9 	.word	0x08005bb9
 8005b78:	08005bc9 	.word	0x08005bc9
 8005b7c:	08005bc9 	.word	0x08005bc9
 8005b80:	08005bc9 	.word	0x08005bc9
 8005b84:	08005bc9 	.word	0x08005bc9
 8005b88:	08005bc9 	.word	0x08005bc9
 8005b8c:	08005bc9 	.word	0x08005bc9
 8005b90:	08005bc9 	.word	0x08005bc9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e050      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e04c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e048      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e044      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e040      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005bc0:	2340      	movs	r3, #64	@ 0x40
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e03c      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e038      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a71      	ldr	r2, [pc, #452]	@ (8005d9c <UART_SetConfig+0x908>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d130      	bne.n	8005c3c <UART_SetConfig+0x7a8>
 8005bda:	4b6f      	ldr	r3, [pc, #444]	@ (8005d98 <UART_SetConfig+0x904>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d826      	bhi.n	8005c34 <UART_SetConfig+0x7a0>
 8005be6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <UART_SetConfig+0x758>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c05 	.word	0x08005c05
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	2302      	movs	r3, #2
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e01a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e016      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e012      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e00e      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c24:	2320      	movs	r3, #32
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e00a      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c2c:	2340      	movs	r3, #64	@ 0x40
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e006      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e002      	b.n	8005c42 <UART_SetConfig+0x7ae>
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a55      	ldr	r2, [pc, #340]	@ (8005d9c <UART_SetConfig+0x908>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	f040 80f8 	bne.w	8005e3e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	dc46      	bgt.n	8005ce4 <UART_SetConfig+0x850>
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	db75      	blt.n	8005d46 <UART_SetConfig+0x8b2>
 8005c5a:	3b02      	subs	r3, #2
 8005c5c:	2b1e      	cmp	r3, #30
 8005c5e:	d872      	bhi.n	8005d46 <UART_SetConfig+0x8b2>
 8005c60:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <UART_SetConfig+0x7d4>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005ceb 	.word	0x08005ceb
 8005c6c:	08005d47 	.word	0x08005d47
 8005c70:	08005cf3 	.word	0x08005cf3
 8005c74:	08005d47 	.word	0x08005d47
 8005c78:	08005d47 	.word	0x08005d47
 8005c7c:	08005d47 	.word	0x08005d47
 8005c80:	08005d03 	.word	0x08005d03
 8005c84:	08005d47 	.word	0x08005d47
 8005c88:	08005d47 	.word	0x08005d47
 8005c8c:	08005d47 	.word	0x08005d47
 8005c90:	08005d47 	.word	0x08005d47
 8005c94:	08005d47 	.word	0x08005d47
 8005c98:	08005d47 	.word	0x08005d47
 8005c9c:	08005d47 	.word	0x08005d47
 8005ca0:	08005d13 	.word	0x08005d13
 8005ca4:	08005d47 	.word	0x08005d47
 8005ca8:	08005d47 	.word	0x08005d47
 8005cac:	08005d47 	.word	0x08005d47
 8005cb0:	08005d47 	.word	0x08005d47
 8005cb4:	08005d47 	.word	0x08005d47
 8005cb8:	08005d47 	.word	0x08005d47
 8005cbc:	08005d47 	.word	0x08005d47
 8005cc0:	08005d47 	.word	0x08005d47
 8005cc4:	08005d47 	.word	0x08005d47
 8005cc8:	08005d47 	.word	0x08005d47
 8005ccc:	08005d47 	.word	0x08005d47
 8005cd0:	08005d47 	.word	0x08005d47
 8005cd4:	08005d47 	.word	0x08005d47
 8005cd8:	08005d47 	.word	0x08005d47
 8005cdc:	08005d47 	.word	0x08005d47
 8005ce0:	08005d39 	.word	0x08005d39
 8005ce4:	2b40      	cmp	r3, #64	@ 0x40
 8005ce6:	d02a      	beq.n	8005d3e <UART_SetConfig+0x8aa>
 8005ce8:	e02d      	b.n	8005d46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005cea:	f7fe fb9f 	bl	800442c <HAL_RCCEx_GetD3PCLK1Freq>
 8005cee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cf0:	e02f      	b.n	8005d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fbae 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d00:	e027      	b.n	8005d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d02:	f107 0318 	add.w	r3, r7, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fcfa 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d10:	e01f      	b.n	8005d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d12:	4b21      	ldr	r3, [pc, #132]	@ (8005d98 <UART_SetConfig+0x904>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d98 <UART_SetConfig+0x904>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <UART_SetConfig+0x90c>)
 8005d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d30:	e00f      	b.n	8005d52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d32:	4b1b      	ldr	r3, [pc, #108]	@ (8005da0 <UART_SetConfig+0x90c>)
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d36:	e00c      	b.n	8005d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d38:	4b1a      	ldr	r3, [pc, #104]	@ (8005da4 <UART_SetConfig+0x910>)
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d3c:	e009      	b.n	8005d52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d44:	e005      	b.n	8005d52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 81ee 	beq.w	8006136 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5e:	4a12      	ldr	r2, [pc, #72]	@ (8005da8 <UART_SetConfig+0x914>)
 8005d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d6c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d305      	bcc.n	8005d8a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d910      	bls.n	8005dac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d90:	e1d1      	b.n	8006136 <UART_SetConfig+0xca2>
 8005d92:	bf00      	nop
 8005d94:	40011c00 	.word	0x40011c00
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	58000c00 	.word	0x58000c00
 8005da0:	03d09000 	.word	0x03d09000
 8005da4:	003d0900 	.word	0x003d0900
 8005da8:	08007640 	.word	0x08007640
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dae:	2200      	movs	r2, #0
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	60fa      	str	r2, [r7, #12]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	4ac0      	ldr	r2, [pc, #768]	@ (80060bc <UART_SetConfig+0xc28>)
 8005dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dce:	f7fa faef 	bl	80003b0 <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	020b      	lsls	r3, r1, #8
 8005de4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005de8:	0202      	lsls	r2, r0, #8
 8005dea:	6979      	ldr	r1, [r7, #20]
 8005dec:	6849      	ldr	r1, [r1, #4]
 8005dee:	0849      	lsrs	r1, r1, #1
 8005df0:	2000      	movs	r0, #0
 8005df2:	460c      	mov	r4, r1
 8005df4:	4605      	mov	r5, r0
 8005df6:	eb12 0804 	adds.w	r8, r2, r4
 8005dfa:	eb43 0905 	adc.w	r9, r3, r5
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	469a      	mov	sl, r3
 8005e06:	4693      	mov	fp, r2
 8005e08:	4652      	mov	r2, sl
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa face 	bl	80003b0 <__aeabi_uldivmod>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e22:	d308      	bcc.n	8005e36 <UART_SetConfig+0x9a2>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e2a:	d204      	bcs.n	8005e36 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e17f      	b.n	8006136 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e3c:	e17b      	b.n	8006136 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e46:	f040 80bd 	bne.w	8005fc4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005e4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	dc48      	bgt.n	8005ee4 <UART_SetConfig+0xa50>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	db7b      	blt.n	8005f4e <UART_SetConfig+0xaba>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d879      	bhi.n	8005f4e <UART_SetConfig+0xaba>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x9cc>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005eeb 	.word	0x08005eeb
 8005e64:	08005ef3 	.word	0x08005ef3
 8005e68:	08005f4f 	.word	0x08005f4f
 8005e6c:	08005f4f 	.word	0x08005f4f
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005f4f 	.word	0x08005f4f
 8005e78:	08005f4f 	.word	0x08005f4f
 8005e7c:	08005f4f 	.word	0x08005f4f
 8005e80:	08005f0b 	.word	0x08005f0b
 8005e84:	08005f4f 	.word	0x08005f4f
 8005e88:	08005f4f 	.word	0x08005f4f
 8005e8c:	08005f4f 	.word	0x08005f4f
 8005e90:	08005f4f 	.word	0x08005f4f
 8005e94:	08005f4f 	.word	0x08005f4f
 8005e98:	08005f4f 	.word	0x08005f4f
 8005e9c:	08005f4f 	.word	0x08005f4f
 8005ea0:	08005f1b 	.word	0x08005f1b
 8005ea4:	08005f4f 	.word	0x08005f4f
 8005ea8:	08005f4f 	.word	0x08005f4f
 8005eac:	08005f4f 	.word	0x08005f4f
 8005eb0:	08005f4f 	.word	0x08005f4f
 8005eb4:	08005f4f 	.word	0x08005f4f
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005f4f 	.word	0x08005f4f
 8005ec0:	08005f4f 	.word	0x08005f4f
 8005ec4:	08005f4f 	.word	0x08005f4f
 8005ec8:	08005f4f 	.word	0x08005f4f
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005f4f 	.word	0x08005f4f
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f4f 	.word	0x08005f4f
 8005edc:	08005f4f 	.word	0x08005f4f
 8005ee0:	08005f41 	.word	0x08005f41
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d02e      	beq.n	8005f46 <UART_SetConfig+0xab2>
 8005ee8:	e031      	b.n	8005f4e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eea:	f7fd f8d3 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8005eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ef0:	e033      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef2:	f7fd f8e5 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8005ef6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ef8:	e02f      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe faaa 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f08:	e027      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0a:	f107 0318 	add.w	r3, r7, #24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fbf6 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f18:	e01f      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1a:	4b69      	ldr	r3, [pc, #420]	@ (80060c0 <UART_SetConfig+0xc2c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f26:	4b66      	ldr	r3, [pc, #408]	@ (80060c0 <UART_SetConfig+0xc2c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	4a64      	ldr	r2, [pc, #400]	@ (80060c4 <UART_SetConfig+0xc30>)
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f38:	e00f      	b.n	8005f5a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005f3a:	4b62      	ldr	r3, [pc, #392]	@ (80060c4 <UART_SetConfig+0xc30>)
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f3e:	e00c      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f40:	4b61      	ldr	r3, [pc, #388]	@ (80060c8 <UART_SetConfig+0xc34>)
 8005f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80ea 	beq.w	8006136 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	4a55      	ldr	r2, [pc, #340]	@ (80060bc <UART_SetConfig+0xc28>)
 8005f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f74:	005a      	lsls	r2, r3, #1
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d916      	bls.n	8005fbc <UART_SetConfig+0xb28>
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d212      	bcs.n	8005fbc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f023 030f 	bic.w	r3, r3, #15
 8005f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e0bc      	b.n	8006136 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fc2:	e0b8      	b.n	8006136 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	dc4b      	bgt.n	8006064 <UART_SetConfig+0xbd0>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f2c0 8087 	blt.w	80060e0 <UART_SetConfig+0xc4c>
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	f200 8084 	bhi.w	80060e0 <UART_SetConfig+0xc4c>
 8005fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <UART_SetConfig+0xb4c>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	0800606b 	.word	0x0800606b
 8005fe4:	08006073 	.word	0x08006073
 8005fe8:	080060e1 	.word	0x080060e1
 8005fec:	080060e1 	.word	0x080060e1
 8005ff0:	0800607b 	.word	0x0800607b
 8005ff4:	080060e1 	.word	0x080060e1
 8005ff8:	080060e1 	.word	0x080060e1
 8005ffc:	080060e1 	.word	0x080060e1
 8006000:	0800608b 	.word	0x0800608b
 8006004:	080060e1 	.word	0x080060e1
 8006008:	080060e1 	.word	0x080060e1
 800600c:	080060e1 	.word	0x080060e1
 8006010:	080060e1 	.word	0x080060e1
 8006014:	080060e1 	.word	0x080060e1
 8006018:	080060e1 	.word	0x080060e1
 800601c:	080060e1 	.word	0x080060e1
 8006020:	0800609b 	.word	0x0800609b
 8006024:	080060e1 	.word	0x080060e1
 8006028:	080060e1 	.word	0x080060e1
 800602c:	080060e1 	.word	0x080060e1
 8006030:	080060e1 	.word	0x080060e1
 8006034:	080060e1 	.word	0x080060e1
 8006038:	080060e1 	.word	0x080060e1
 800603c:	080060e1 	.word	0x080060e1
 8006040:	080060e1 	.word	0x080060e1
 8006044:	080060e1 	.word	0x080060e1
 8006048:	080060e1 	.word	0x080060e1
 800604c:	080060e1 	.word	0x080060e1
 8006050:	080060e1 	.word	0x080060e1
 8006054:	080060e1 	.word	0x080060e1
 8006058:	080060e1 	.word	0x080060e1
 800605c:	080060e1 	.word	0x080060e1
 8006060:	080060d3 	.word	0x080060d3
 8006064:	2b40      	cmp	r3, #64	@ 0x40
 8006066:	d037      	beq.n	80060d8 <UART_SetConfig+0xc44>
 8006068:	e03a      	b.n	80060e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800606a:	f7fd f813 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 800606e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006070:	e03c      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006072:	f7fd f825 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8006076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006078:	e038      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe f9ea 	bl	8004458 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006088:	e030      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608a:	f107 0318 	add.w	r3, r7, #24
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fb36 	bl	8004700 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006098:	e028      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800609a:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <UART_SetConfig+0xc2c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d012      	beq.n	80060cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <UART_SetConfig+0xc2c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	08db      	lsrs	r3, r3, #3
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <UART_SetConfig+0xc30>)
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060b8:	e018      	b.n	80060ec <UART_SetConfig+0xc58>
 80060ba:	bf00      	nop
 80060bc:	08007640 	.word	0x08007640
 80060c0:	58024400 	.word	0x58024400
 80060c4:	03d09000 	.word	0x03d09000
 80060c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <UART_SetConfig+0xccc>)
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060d2:	4b24      	ldr	r3, [pc, #144]	@ (8006164 <UART_SetConfig+0xcd0>)
 80060d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d6:	e009      	b.n	80060ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060de:	e005      	b.n	80060ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060ea:	bf00      	nop
    }

    if (pclk != 0U)
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d021      	beq.n	8006136 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <UART_SetConfig+0xcd4>)
 80060f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006100:	fbb3 f2f2 	udiv	r2, r3, r2
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	441a      	add	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d909      	bls.n	8006130 <UART_SetConfig+0xc9c>
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006122:	d205      	bcs.n	8006130 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	b29a      	uxth	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60da      	str	r2, [r3, #12]
 800612e:	e002      	b.n	8006136 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2201      	movs	r2, #1
 800613a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2201      	movs	r2, #1
 8006142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006152:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006156:	4618      	mov	r0, r3
 8006158:	3748      	adds	r7, #72	@ 0x48
 800615a:	46bd      	mov	sp, r7
 800615c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006160:	03d09000 	.word	0x03d09000
 8006164:	003d0900 	.word	0x003d0900
 8006168:	08007640 	.word	0x08007640

0800616c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01a      	beq.n	8006282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626a:	d10a      	bne.n	8006282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b098      	sub	sp, #96	@ 0x60
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062c0:	f7fb fc0e 	bl	8001ae0 <HAL_GetTick>
 80062c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d12f      	bne.n	8006334 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f88e 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d022      	beq.n	8006334 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006302:	653b      	str	r3, [r7, #80]	@ 0x50
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800631a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e6      	bne.n	80062ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e063      	b.n	80063fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d149      	bne.n	80063d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006342:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	2200      	movs	r2, #0
 800634c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f857 	bl	8006404 <UART_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d03c      	beq.n	80063d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	623b      	str	r3, [r7, #32]
   return(result);
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637a:	633b      	str	r3, [r7, #48]	@ 0x30
 800637c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	60fb      	str	r3, [r7, #12]
   return(result);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ae:	61fa      	str	r2, [r7, #28]
 80063b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	617b      	str	r3, [r7, #20]
   return(result);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e012      	b.n	80063fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3758      	adds	r7, #88	@ 0x58
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	e04f      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d04b      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fb fb5f 	bl	8001ae0 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <UART_WaitOnFlagUntilTimeout+0x30>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e04e      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d037      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b80      	cmp	r3, #128	@ 0x80
 800644a:	d034      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d031      	beq.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b08      	cmp	r3, #8
 800645e:	d110      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f839 	bl	80064e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2208      	movs	r2, #8
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e029      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800648c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006490:	d111      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800649a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f81f 	bl	80064e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e00f      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0a0      	beq.n	8006416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b095      	sub	sp, #84	@ 0x54
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006506:	643b      	str	r3, [r7, #64]	@ 0x40
 8006508:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800650c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	61fb      	str	r3, [r7, #28]
   return(result);
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <UART_EndRxTransfer+0xc8>)
 800652e:	4013      	ands	r3, r2
 8006530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800653a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d118      	bne.n	8006588 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	60bb      	str	r3, [r7, #8]
   return(result);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 0310 	bic.w	r3, r3, #16
 800656a:	647b      	str	r3, [r7, #68]	@ 0x44
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6979      	ldr	r1, [r7, #20]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	613b      	str	r3, [r7, #16]
   return(result);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e6      	bne.n	8006556 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800659c:	bf00      	nop
 800659e:	3754      	adds	r7, #84	@ 0x54
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	effffffe 	.word	0xeffffffe

080065ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065be:	2302      	movs	r3, #2
 80065c0:	e027      	b.n	8006612 <HAL_UARTEx_DisableFifoMode+0x66>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2224      	movs	r2, #36	@ 0x24
 80065ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006632:	2302      	movs	r3, #2
 8006634:	e02d      	b.n	8006692 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	@ 0x24
 8006642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f850 	bl	8006718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e02d      	b.n	800670e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	@ 0x24
 80066be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f812 	bl	8006718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006738:	e031      	b.n	800679e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800673a:	2310      	movs	r3, #16
 800673c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800673e:	2310      	movs	r3, #16
 8006740:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	0e5b      	lsrs	r3, r3, #25
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	0f5b      	lsrs	r3, r3, #29
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	7b3a      	ldrb	r2, [r7, #12]
 8006766:	4911      	ldr	r1, [pc, #68]	@ (80067ac <UARTEx_SetNbDataToProcess+0x94>)
 8006768:	5c8a      	ldrb	r2, [r1, r2]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800676e:	7b3a      	ldrb	r2, [r7, #12]
 8006770:	490f      	ldr	r1, [pc, #60]	@ (80067b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006772:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006774:	fb93 f3f2 	sdiv	r3, r3, r2
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	7b7a      	ldrb	r2, [r7, #13]
 8006784:	4909      	ldr	r1, [pc, #36]	@ (80067ac <UARTEx_SetNbDataToProcess+0x94>)
 8006786:	5c8a      	ldrb	r2, [r1, r2]
 8006788:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800678c:	7b7a      	ldrb	r2, [r7, #13]
 800678e:	4908      	ldr	r1, [pc, #32]	@ (80067b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006790:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006792:	fb93 f3f2 	sdiv	r3, r3, r2
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	08007658 	.word	0x08007658
 80067b0:	08007660 	.word	0x08007660

080067b4 <std>:
 80067b4:	2300      	movs	r3, #0
 80067b6:	b510      	push	{r4, lr}
 80067b8:	4604      	mov	r4, r0
 80067ba:	e9c0 3300 	strd	r3, r3, [r0]
 80067be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067c2:	6083      	str	r3, [r0, #8]
 80067c4:	8181      	strh	r1, [r0, #12]
 80067c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067c8:	81c2      	strh	r2, [r0, #14]
 80067ca:	6183      	str	r3, [r0, #24]
 80067cc:	4619      	mov	r1, r3
 80067ce:	2208      	movs	r2, #8
 80067d0:	305c      	adds	r0, #92	@ 0x5c
 80067d2:	f000 f906 	bl	80069e2 <memset>
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <std+0x58>)
 80067d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <std+0x5c>)
 80067dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <std+0x60>)
 80067e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <std+0x64>)
 80067e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <std+0x68>)
 80067e8:	6224      	str	r4, [r4, #32]
 80067ea:	429c      	cmp	r4, r3
 80067ec:	d006      	beq.n	80067fc <std+0x48>
 80067ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067f2:	4294      	cmp	r4, r2
 80067f4:	d002      	beq.n	80067fc <std+0x48>
 80067f6:	33d0      	adds	r3, #208	@ 0xd0
 80067f8:	429c      	cmp	r4, r3
 80067fa:	d105      	bne.n	8006808 <std+0x54>
 80067fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006804:	f000 b966 	b.w	8006ad4 <__retarget_lock_init_recursive>
 8006808:	bd10      	pop	{r4, pc}
 800680a:	bf00      	nop
 800680c:	0800695d 	.word	0x0800695d
 8006810:	0800697f 	.word	0x0800697f
 8006814:	080069b7 	.word	0x080069b7
 8006818:	080069db 	.word	0x080069db
 800681c:	2400029c 	.word	0x2400029c

08006820 <stdio_exit_handler>:
 8006820:	4a02      	ldr	r2, [pc, #8]	@ (800682c <stdio_exit_handler+0xc>)
 8006822:	4903      	ldr	r1, [pc, #12]	@ (8006830 <stdio_exit_handler+0x10>)
 8006824:	4803      	ldr	r0, [pc, #12]	@ (8006834 <stdio_exit_handler+0x14>)
 8006826:	f000 b869 	b.w	80068fc <_fwalk_sglue>
 800682a:	bf00      	nop
 800682c:	24000010 	.word	0x24000010
 8006830:	08007375 	.word	0x08007375
 8006834:	24000020 	.word	0x24000020

08006838 <cleanup_stdio>:
 8006838:	6841      	ldr	r1, [r0, #4]
 800683a:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <cleanup_stdio+0x34>)
 800683c:	4299      	cmp	r1, r3
 800683e:	b510      	push	{r4, lr}
 8006840:	4604      	mov	r4, r0
 8006842:	d001      	beq.n	8006848 <cleanup_stdio+0x10>
 8006844:	f000 fd96 	bl	8007374 <_fflush_r>
 8006848:	68a1      	ldr	r1, [r4, #8]
 800684a:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <cleanup_stdio+0x38>)
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <cleanup_stdio+0x1e>
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fd8f 	bl	8007374 <_fflush_r>
 8006856:	68e1      	ldr	r1, [r4, #12]
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <cleanup_stdio+0x3c>)
 800685a:	4299      	cmp	r1, r3
 800685c:	d004      	beq.n	8006868 <cleanup_stdio+0x30>
 800685e:	4620      	mov	r0, r4
 8006860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006864:	f000 bd86 	b.w	8007374 <_fflush_r>
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	2400029c 	.word	0x2400029c
 8006870:	24000304 	.word	0x24000304
 8006874:	2400036c 	.word	0x2400036c

08006878 <global_stdio_init.part.0>:
 8006878:	b510      	push	{r4, lr}
 800687a:	4b0b      	ldr	r3, [pc, #44]	@ (80068a8 <global_stdio_init.part.0+0x30>)
 800687c:	4c0b      	ldr	r4, [pc, #44]	@ (80068ac <global_stdio_init.part.0+0x34>)
 800687e:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <global_stdio_init.part.0+0x38>)
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	4620      	mov	r0, r4
 8006884:	2200      	movs	r2, #0
 8006886:	2104      	movs	r1, #4
 8006888:	f7ff ff94 	bl	80067b4 <std>
 800688c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006890:	2201      	movs	r2, #1
 8006892:	2109      	movs	r1, #9
 8006894:	f7ff ff8e 	bl	80067b4 <std>
 8006898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800689c:	2202      	movs	r2, #2
 800689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a2:	2112      	movs	r1, #18
 80068a4:	f7ff bf86 	b.w	80067b4 <std>
 80068a8:	240003d4 	.word	0x240003d4
 80068ac:	2400029c 	.word	0x2400029c
 80068b0:	08006821 	.word	0x08006821

080068b4 <__sfp_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	@ (80068bc <__sfp_lock_acquire+0x8>)
 80068b6:	f000 b90e 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	240003dd 	.word	0x240003dd

080068c0 <__sfp_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	@ (80068c8 <__sfp_lock_release+0x8>)
 80068c2:	f000 b909 	b.w	8006ad8 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	240003dd 	.word	0x240003dd

080068cc <__sinit>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	f7ff fff0 	bl	80068b4 <__sfp_lock_acquire>
 80068d4:	6a23      	ldr	r3, [r4, #32]
 80068d6:	b11b      	cbz	r3, 80068e0 <__sinit+0x14>
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f7ff bff0 	b.w	80068c0 <__sfp_lock_release>
 80068e0:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <__sinit+0x28>)
 80068e2:	6223      	str	r3, [r4, #32]
 80068e4:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <__sinit+0x2c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f5      	bne.n	80068d8 <__sinit+0xc>
 80068ec:	f7ff ffc4 	bl	8006878 <global_stdio_init.part.0>
 80068f0:	e7f2      	b.n	80068d8 <__sinit+0xc>
 80068f2:	bf00      	nop
 80068f4:	08006839 	.word	0x08006839
 80068f8:	240003d4 	.word	0x240003d4

080068fc <_fwalk_sglue>:
 80068fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006900:	4607      	mov	r7, r0
 8006902:	4688      	mov	r8, r1
 8006904:	4614      	mov	r4, r2
 8006906:	2600      	movs	r6, #0
 8006908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800690c:	f1b9 0901 	subs.w	r9, r9, #1
 8006910:	d505      	bpl.n	800691e <_fwalk_sglue+0x22>
 8006912:	6824      	ldr	r4, [r4, #0]
 8006914:	2c00      	cmp	r4, #0
 8006916:	d1f7      	bne.n	8006908 <_fwalk_sglue+0xc>
 8006918:	4630      	mov	r0, r6
 800691a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d907      	bls.n	8006934 <_fwalk_sglue+0x38>
 8006924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006928:	3301      	adds	r3, #1
 800692a:	d003      	beq.n	8006934 <_fwalk_sglue+0x38>
 800692c:	4629      	mov	r1, r5
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	4306      	orrs	r6, r0
 8006934:	3568      	adds	r5, #104	@ 0x68
 8006936:	e7e9      	b.n	800690c <_fwalk_sglue+0x10>

08006938 <iprintf>:
 8006938:	b40f      	push	{r0, r1, r2, r3}
 800693a:	b507      	push	{r0, r1, r2, lr}
 800693c:	4906      	ldr	r1, [pc, #24]	@ (8006958 <iprintf+0x20>)
 800693e:	ab04      	add	r3, sp, #16
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	6881      	ldr	r1, [r0, #8]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f000 f9e9 	bl	8006d20 <_vfiprintf_r>
 800694e:	b003      	add	sp, #12
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr
 8006958:	2400001c 	.word	0x2400001c

0800695c <__sread>:
 800695c:	b510      	push	{r4, lr}
 800695e:	460c      	mov	r4, r1
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	f000 f868 	bl	8006a38 <_read_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	bfab      	itete	ge
 800696c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800696e:	89a3      	ldrhlt	r3, [r4, #12]
 8006970:	181b      	addge	r3, r3, r0
 8006972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006976:	bfac      	ite	ge
 8006978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800697a:	81a3      	strhlt	r3, [r4, #12]
 800697c:	bd10      	pop	{r4, pc}

0800697e <__swrite>:
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	461f      	mov	r7, r3
 8006984:	898b      	ldrh	r3, [r1, #12]
 8006986:	05db      	lsls	r3, r3, #23
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	4616      	mov	r6, r2
 800698e:	d505      	bpl.n	800699c <__swrite+0x1e>
 8006990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006994:	2302      	movs	r3, #2
 8006996:	2200      	movs	r2, #0
 8006998:	f000 f83c 	bl	8006a14 <_lseek_r>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	4632      	mov	r2, r6
 80069aa:	463b      	mov	r3, r7
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	f000 b853 	b.w	8006a5c <_write_r>

080069b6 <__sseek>:
 80069b6:	b510      	push	{r4, lr}
 80069b8:	460c      	mov	r4, r1
 80069ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069be:	f000 f829 	bl	8006a14 <_lseek_r>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	bf15      	itete	ne
 80069c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069d2:	81a3      	strheq	r3, [r4, #12]
 80069d4:	bf18      	it	ne
 80069d6:	81a3      	strhne	r3, [r4, #12]
 80069d8:	bd10      	pop	{r4, pc}

080069da <__sclose>:
 80069da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069de:	f000 b809 	b.w	80069f4 <_close_r>

080069e2 <memset>:
 80069e2:	4402      	add	r2, r0
 80069e4:	4603      	mov	r3, r0
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d100      	bne.n	80069ec <memset+0xa>
 80069ea:	4770      	bx	lr
 80069ec:	f803 1b01 	strb.w	r1, [r3], #1
 80069f0:	e7f9      	b.n	80069e6 <memset+0x4>
	...

080069f4 <_close_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	@ (8006a10 <_close_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fa fedc 	bl	80017bc <_close>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_close_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_close_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	240003d8 	.word	0x240003d8

08006a14 <_lseek_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4d07      	ldr	r5, [pc, #28]	@ (8006a34 <_lseek_r+0x20>)
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	602a      	str	r2, [r5, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7fa fef1 	bl	800180a <_lseek>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_lseek_r+0x1e>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_lseek_r+0x1e>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	240003d8 	.word	0x240003d8

08006a38 <_read_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d07      	ldr	r5, [pc, #28]	@ (8006a58 <_read_r+0x20>)
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	4608      	mov	r0, r1
 8006a40:	4611      	mov	r1, r2
 8006a42:	2200      	movs	r2, #0
 8006a44:	602a      	str	r2, [r5, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f7fa fe7f 	bl	800174a <_read>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_read_r+0x1e>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_read_r+0x1e>
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	240003d8 	.word	0x240003d8

08006a5c <_write_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d07      	ldr	r5, [pc, #28]	@ (8006a7c <_write_r+0x20>)
 8006a60:	4604      	mov	r4, r0
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f7fa fe8a 	bl	8001784 <_write>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_write_r+0x1e>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_write_r+0x1e>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	240003d8 	.word	0x240003d8

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	@ (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	2400001c 	.word	0x2400001c

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f000 fdb8 	bl	8007614 <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	080076a4 	.word	0x080076a4
 8006ac8:	080076a4 	.word	0x080076a4
 8006acc:	080076a4 	.word	0x080076a4
 8006ad0:	080076a8 	.word	0x080076a8

08006ad4 <__retarget_lock_init_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_acquire_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <__retarget_lock_release_recursive>:
 8006ad8:	4770      	bx	lr
	...

08006adc <_free_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4605      	mov	r5, r0
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d041      	beq.n	8006b68 <_free_r+0x8c>
 8006ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae8:	1f0c      	subs	r4, r1, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bfb8      	it	lt
 8006aee:	18e4      	addlt	r4, r4, r3
 8006af0:	f000 f8e0 	bl	8006cb4 <__malloc_lock>
 8006af4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b6c <_free_r+0x90>)
 8006af6:	6813      	ldr	r3, [r2, #0]
 8006af8:	b933      	cbnz	r3, 8006b08 <_free_r+0x2c>
 8006afa:	6063      	str	r3, [r4, #4]
 8006afc:	6014      	str	r4, [r2, #0]
 8006afe:	4628      	mov	r0, r5
 8006b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b04:	f000 b8dc 	b.w	8006cc0 <__malloc_unlock>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d908      	bls.n	8006b1e <_free_r+0x42>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	1821      	adds	r1, r4, r0
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf01      	itttt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	1809      	addeq	r1, r1, r0
 8006b1a:	6021      	streq	r1, [r4, #0]
 8006b1c:	e7ed      	b.n	8006afa <_free_r+0x1e>
 8006b1e:	461a      	mov	r2, r3
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	b10b      	cbz	r3, 8006b28 <_free_r+0x4c>
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d9fa      	bls.n	8006b1e <_free_r+0x42>
 8006b28:	6811      	ldr	r1, [r2, #0]
 8006b2a:	1850      	adds	r0, r2, r1
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d10b      	bne.n	8006b48 <_free_r+0x6c>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	4401      	add	r1, r0
 8006b34:	1850      	adds	r0, r2, r1
 8006b36:	4283      	cmp	r3, r0
 8006b38:	6011      	str	r1, [r2, #0]
 8006b3a:	d1e0      	bne.n	8006afe <_free_r+0x22>
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	6053      	str	r3, [r2, #4]
 8006b42:	4408      	add	r0, r1
 8006b44:	6010      	str	r0, [r2, #0]
 8006b46:	e7da      	b.n	8006afe <_free_r+0x22>
 8006b48:	d902      	bls.n	8006b50 <_free_r+0x74>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	602b      	str	r3, [r5, #0]
 8006b4e:	e7d6      	b.n	8006afe <_free_r+0x22>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	1821      	adds	r1, r4, r0
 8006b54:	428b      	cmp	r3, r1
 8006b56:	bf04      	itt	eq
 8006b58:	6819      	ldreq	r1, [r3, #0]
 8006b5a:	685b      	ldreq	r3, [r3, #4]
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	bf04      	itt	eq
 8006b60:	1809      	addeq	r1, r1, r0
 8006b62:	6021      	streq	r1, [r4, #0]
 8006b64:	6054      	str	r4, [r2, #4]
 8006b66:	e7ca      	b.n	8006afe <_free_r+0x22>
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	bf00      	nop
 8006b6c:	240003e4 	.word	0x240003e4

08006b70 <sbrk_aligned>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	4e0f      	ldr	r6, [pc, #60]	@ (8006bb0 <sbrk_aligned+0x40>)
 8006b74:	460c      	mov	r4, r1
 8006b76:	6831      	ldr	r1, [r6, #0]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	b911      	cbnz	r1, 8006b82 <sbrk_aligned+0x12>
 8006b7c:	f000 fcb6 	bl	80074ec <_sbrk_r>
 8006b80:	6030      	str	r0, [r6, #0]
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fcb1 	bl	80074ec <_sbrk_r>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	d103      	bne.n	8006b96 <sbrk_aligned+0x26>
 8006b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b92:	4620      	mov	r0, r4
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	1cc4      	adds	r4, r0, #3
 8006b98:	f024 0403 	bic.w	r4, r4, #3
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d0f8      	beq.n	8006b92 <sbrk_aligned+0x22>
 8006ba0:	1a21      	subs	r1, r4, r0
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fca2 	bl	80074ec <_sbrk_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d1f2      	bne.n	8006b92 <sbrk_aligned+0x22>
 8006bac:	e7ef      	b.n	8006b8e <sbrk_aligned+0x1e>
 8006bae:	bf00      	nop
 8006bb0:	240003e0 	.word	0x240003e0

08006bb4 <_malloc_r>:
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb8:	1ccd      	adds	r5, r1, #3
 8006bba:	f025 0503 	bic.w	r5, r5, #3
 8006bbe:	3508      	adds	r5, #8
 8006bc0:	2d0c      	cmp	r5, #12
 8006bc2:	bf38      	it	cc
 8006bc4:	250c      	movcc	r5, #12
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	4606      	mov	r6, r0
 8006bca:	db01      	blt.n	8006bd0 <_malloc_r+0x1c>
 8006bcc:	42a9      	cmp	r1, r5
 8006bce:	d904      	bls.n	8006bda <_malloc_r+0x26>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cb0 <_malloc_r+0xfc>
 8006bde:	f000 f869 	bl	8006cb4 <__malloc_lock>
 8006be2:	f8d8 3000 	ldr.w	r3, [r8]
 8006be6:	461c      	mov	r4, r3
 8006be8:	bb44      	cbnz	r4, 8006c3c <_malloc_r+0x88>
 8006bea:	4629      	mov	r1, r5
 8006bec:	4630      	mov	r0, r6
 8006bee:	f7ff ffbf 	bl	8006b70 <sbrk_aligned>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	d158      	bne.n	8006caa <_malloc_r+0xf6>
 8006bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8006bfc:	4627      	mov	r7, r4
 8006bfe:	2f00      	cmp	r7, #0
 8006c00:	d143      	bne.n	8006c8a <_malloc_r+0xd6>
 8006c02:	2c00      	cmp	r4, #0
 8006c04:	d04b      	beq.n	8006c9e <_malloc_r+0xea>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	eb04 0903 	add.w	r9, r4, r3
 8006c10:	f000 fc6c 	bl	80074ec <_sbrk_r>
 8006c14:	4581      	cmp	r9, r0
 8006c16:	d142      	bne.n	8006c9e <_malloc_r+0xea>
 8006c18:	6821      	ldr	r1, [r4, #0]
 8006c1a:	1a6d      	subs	r5, r5, r1
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7ff ffa6 	bl	8006b70 <sbrk_aligned>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d03a      	beq.n	8006c9e <_malloc_r+0xea>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	442b      	add	r3, r5
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	bb62      	cbnz	r2, 8006c90 <_malloc_r+0xdc>
 8006c36:	f8c8 7000 	str.w	r7, [r8]
 8006c3a:	e00f      	b.n	8006c5c <_malloc_r+0xa8>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	1b52      	subs	r2, r2, r5
 8006c40:	d420      	bmi.n	8006c84 <_malloc_r+0xd0>
 8006c42:	2a0b      	cmp	r2, #11
 8006c44:	d917      	bls.n	8006c76 <_malloc_r+0xc2>
 8006c46:	1961      	adds	r1, r4, r5
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	6025      	str	r5, [r4, #0]
 8006c4c:	bf18      	it	ne
 8006c4e:	6059      	strne	r1, [r3, #4]
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	bf08      	it	eq
 8006c54:	f8c8 1000 	streq.w	r1, [r8]
 8006c58:	5162      	str	r2, [r4, r5]
 8006c5a:	604b      	str	r3, [r1, #4]
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 f82f 	bl	8006cc0 <__malloc_unlock>
 8006c62:	f104 000b 	add.w	r0, r4, #11
 8006c66:	1d23      	adds	r3, r4, #4
 8006c68:	f020 0007 	bic.w	r0, r0, #7
 8006c6c:	1ac2      	subs	r2, r0, r3
 8006c6e:	bf1c      	itt	ne
 8006c70:	1a1b      	subne	r3, r3, r0
 8006c72:	50a3      	strne	r3, [r4, r2]
 8006c74:	e7af      	b.n	8006bd6 <_malloc_r+0x22>
 8006c76:	6862      	ldr	r2, [r4, #4]
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	bf0c      	ite	eq
 8006c7c:	f8c8 2000 	streq.w	r2, [r8]
 8006c80:	605a      	strne	r2, [r3, #4]
 8006c82:	e7eb      	b.n	8006c5c <_malloc_r+0xa8>
 8006c84:	4623      	mov	r3, r4
 8006c86:	6864      	ldr	r4, [r4, #4]
 8006c88:	e7ae      	b.n	8006be8 <_malloc_r+0x34>
 8006c8a:	463c      	mov	r4, r7
 8006c8c:	687f      	ldr	r7, [r7, #4]
 8006c8e:	e7b6      	b.n	8006bfe <_malloc_r+0x4a>
 8006c90:	461a      	mov	r2, r3
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d1fb      	bne.n	8006c90 <_malloc_r+0xdc>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6053      	str	r3, [r2, #4]
 8006c9c:	e7de      	b.n	8006c5c <_malloc_r+0xa8>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f000 f80c 	bl	8006cc0 <__malloc_unlock>
 8006ca8:	e794      	b.n	8006bd4 <_malloc_r+0x20>
 8006caa:	6005      	str	r5, [r0, #0]
 8006cac:	e7d6      	b.n	8006c5c <_malloc_r+0xa8>
 8006cae:	bf00      	nop
 8006cb0:	240003e4 	.word	0x240003e4

08006cb4 <__malloc_lock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__malloc_lock+0x8>)
 8006cb6:	f7ff bf0e 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	240003dc 	.word	0x240003dc

08006cc0 <__malloc_unlock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	@ (8006cc8 <__malloc_unlock+0x8>)
 8006cc2:	f7ff bf09 	b.w	8006ad8 <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	240003dc 	.word	0x240003dc

08006ccc <__sfputc_r>:
 8006ccc:	6893      	ldr	r3, [r2, #8]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	b410      	push	{r4}
 8006cd4:	6093      	str	r3, [r2, #8]
 8006cd6:	da08      	bge.n	8006cea <__sfputc_r+0x1e>
 8006cd8:	6994      	ldr	r4, [r2, #24]
 8006cda:	42a3      	cmp	r3, r4
 8006cdc:	db01      	blt.n	8006ce2 <__sfputc_r+0x16>
 8006cde:	290a      	cmp	r1, #10
 8006ce0:	d103      	bne.n	8006cea <__sfputc_r+0x1e>
 8006ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce6:	f000 bb6d 	b.w	80073c4 <__swbuf_r>
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	1c58      	adds	r0, r3, #1
 8006cee:	6010      	str	r0, [r2, #0]
 8006cf0:	7019      	strb	r1, [r3, #0]
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <__sfputs_r>:
 8006cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	18d5      	adds	r5, r2, r3
 8006d04:	42ac      	cmp	r4, r5
 8006d06:	d101      	bne.n	8006d0c <__sfputs_r+0x12>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e007      	b.n	8006d1c <__sfputs_r+0x22>
 8006d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d10:	463a      	mov	r2, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	f7ff ffda 	bl	8006ccc <__sfputc_r>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d1f3      	bne.n	8006d04 <__sfputs_r+0xa>
 8006d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d20 <_vfiprintf_r>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	460d      	mov	r5, r1
 8006d26:	b09d      	sub	sp, #116	@ 0x74
 8006d28:	4614      	mov	r4, r2
 8006d2a:	4698      	mov	r8, r3
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	b118      	cbz	r0, 8006d38 <_vfiprintf_r+0x18>
 8006d30:	6a03      	ldr	r3, [r0, #32]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_vfiprintf_r+0x18>
 8006d34:	f7ff fdca 	bl	80068cc <__sinit>
 8006d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d3a:	07d9      	lsls	r1, r3, #31
 8006d3c:	d405      	bmi.n	8006d4a <_vfiprintf_r+0x2a>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	059a      	lsls	r2, r3, #22
 8006d42:	d402      	bmi.n	8006d4a <_vfiprintf_r+0x2a>
 8006d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d46:	f7ff fec6 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	071b      	lsls	r3, r3, #28
 8006d4e:	d501      	bpl.n	8006d54 <_vfiprintf_r+0x34>
 8006d50:	692b      	ldr	r3, [r5, #16]
 8006d52:	b99b      	cbnz	r3, 8006d7c <_vfiprintf_r+0x5c>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4630      	mov	r0, r6
 8006d58:	f000 fb72 	bl	8007440 <__swsetup_r>
 8006d5c:	b170      	cbz	r0, 8006d7c <_vfiprintf_r+0x5c>
 8006d5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d60:	07dc      	lsls	r4, r3, #31
 8006d62:	d504      	bpl.n	8006d6e <_vfiprintf_r+0x4e>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	b01d      	add	sp, #116	@ 0x74
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	0598      	lsls	r0, r3, #22
 8006d72:	d4f7      	bmi.n	8006d64 <_vfiprintf_r+0x44>
 8006d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d76:	f7ff feaf 	bl	8006ad8 <__retarget_lock_release_recursive>
 8006d7a:	e7f3      	b.n	8006d64 <_vfiprintf_r+0x44>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d80:	2320      	movs	r3, #32
 8006d82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d8a:	2330      	movs	r3, #48	@ 0x30
 8006d8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f3c <_vfiprintf_r+0x21c>
 8006d90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d94:	f04f 0901 	mov.w	r9, #1
 8006d98:	4623      	mov	r3, r4
 8006d9a:	469a      	mov	sl, r3
 8006d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006da0:	b10a      	cbz	r2, 8006da6 <_vfiprintf_r+0x86>
 8006da2:	2a25      	cmp	r2, #37	@ 0x25
 8006da4:	d1f9      	bne.n	8006d9a <_vfiprintf_r+0x7a>
 8006da6:	ebba 0b04 	subs.w	fp, sl, r4
 8006daa:	d00b      	beq.n	8006dc4 <_vfiprintf_r+0xa4>
 8006dac:	465b      	mov	r3, fp
 8006dae:	4622      	mov	r2, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ffa1 	bl	8006cfa <__sfputs_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	f000 80a7 	beq.w	8006f0c <_vfiprintf_r+0x1ec>
 8006dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dc0:	445a      	add	r2, fp
 8006dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 809f 	beq.w	8006f0c <_vfiprintf_r+0x1ec>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd8:	f10a 0a01 	add.w	sl, sl, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006de6:	4654      	mov	r4, sl
 8006de8:	2205      	movs	r2, #5
 8006dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dee:	4853      	ldr	r0, [pc, #332]	@ (8006f3c <_vfiprintf_r+0x21c>)
 8006df0:	f7f9 fa8e 	bl	8000310 <memchr>
 8006df4:	9a04      	ldr	r2, [sp, #16]
 8006df6:	b9d8      	cbnz	r0, 8006e30 <_vfiprintf_r+0x110>
 8006df8:	06d1      	lsls	r1, r2, #27
 8006dfa:	bf44      	itt	mi
 8006dfc:	2320      	movmi	r3, #32
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e02:	0713      	lsls	r3, r2, #28
 8006e04:	bf44      	itt	mi
 8006e06:	232b      	movmi	r3, #43	@ 0x2b
 8006e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e12:	d015      	beq.n	8006e40 <_vfiprintf_r+0x120>
 8006e14:	9a07      	ldr	r2, [sp, #28]
 8006e16:	4654      	mov	r4, sl
 8006e18:	2000      	movs	r0, #0
 8006e1a:	f04f 0c0a 	mov.w	ip, #10
 8006e1e:	4621      	mov	r1, r4
 8006e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e24:	3b30      	subs	r3, #48	@ 0x30
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d94b      	bls.n	8006ec2 <_vfiprintf_r+0x1a2>
 8006e2a:	b1b0      	cbz	r0, 8006e5a <_vfiprintf_r+0x13a>
 8006e2c:	9207      	str	r2, [sp, #28]
 8006e2e:	e014      	b.n	8006e5a <_vfiprintf_r+0x13a>
 8006e30:	eba0 0308 	sub.w	r3, r0, r8
 8006e34:	fa09 f303 	lsl.w	r3, r9, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	46a2      	mov	sl, r4
 8006e3e:	e7d2      	b.n	8006de6 <_vfiprintf_r+0xc6>
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	1d19      	adds	r1, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bfbb      	ittet	lt
 8006e4c:	425b      	neglt	r3, r3
 8006e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e52:	9307      	strge	r3, [sp, #28]
 8006e54:	9307      	strlt	r3, [sp, #28]
 8006e56:	bfb8      	it	lt
 8006e58:	9204      	strlt	r2, [sp, #16]
 8006e5a:	7823      	ldrb	r3, [r4, #0]
 8006e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e5e:	d10a      	bne.n	8006e76 <_vfiprintf_r+0x156>
 8006e60:	7863      	ldrb	r3, [r4, #1]
 8006e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e64:	d132      	bne.n	8006ecc <_vfiprintf_r+0x1ac>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	1d1a      	adds	r2, r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	9203      	str	r2, [sp, #12]
 8006e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e72:	3402      	adds	r4, #2
 8006e74:	9305      	str	r3, [sp, #20]
 8006e76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f4c <_vfiprintf_r+0x22c>
 8006e7a:	7821      	ldrb	r1, [r4, #0]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	4650      	mov	r0, sl
 8006e80:	f7f9 fa46 	bl	8000310 <memchr>
 8006e84:	b138      	cbz	r0, 8006e96 <_vfiprintf_r+0x176>
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	eba0 000a 	sub.w	r0, r0, sl
 8006e8c:	2240      	movs	r2, #64	@ 0x40
 8006e8e:	4082      	lsls	r2, r0
 8006e90:	4313      	orrs	r3, r2
 8006e92:	3401      	adds	r4, #1
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9a:	4829      	ldr	r0, [pc, #164]	@ (8006f40 <_vfiprintf_r+0x220>)
 8006e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	f7f9 fa35 	bl	8000310 <memchr>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d03f      	beq.n	8006f2a <_vfiprintf_r+0x20a>
 8006eaa:	4b26      	ldr	r3, [pc, #152]	@ (8006f44 <_vfiprintf_r+0x224>)
 8006eac:	bb1b      	cbnz	r3, 8006ef6 <_vfiprintf_r+0x1d6>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	f023 0307 	bic.w	r3, r3, #7
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	9303      	str	r3, [sp, #12]
 8006eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ebc:	443b      	add	r3, r7
 8006ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec0:	e76a      	b.n	8006d98 <_vfiprintf_r+0x78>
 8006ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	2001      	movs	r0, #1
 8006eca:	e7a8      	b.n	8006e1e <_vfiprintf_r+0xfe>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	3401      	adds	r4, #1
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f04f 0c0a 	mov.w	ip, #10
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ede:	3a30      	subs	r2, #48	@ 0x30
 8006ee0:	2a09      	cmp	r2, #9
 8006ee2:	d903      	bls.n	8006eec <_vfiprintf_r+0x1cc>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0c6      	beq.n	8006e76 <_vfiprintf_r+0x156>
 8006ee8:	9105      	str	r1, [sp, #20]
 8006eea:	e7c4      	b.n	8006e76 <_vfiprintf_r+0x156>
 8006eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e7f0      	b.n	8006ed8 <_vfiprintf_r+0x1b8>
 8006ef6:	ab03      	add	r3, sp, #12
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	462a      	mov	r2, r5
 8006efc:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <_vfiprintf_r+0x228>)
 8006efe:	a904      	add	r1, sp, #16
 8006f00:	4630      	mov	r0, r6
 8006f02:	f3af 8000 	nop.w
 8006f06:	4607      	mov	r7, r0
 8006f08:	1c78      	adds	r0, r7, #1
 8006f0a:	d1d6      	bne.n	8006eba <_vfiprintf_r+0x19a>
 8006f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f0e:	07d9      	lsls	r1, r3, #31
 8006f10:	d405      	bmi.n	8006f1e <_vfiprintf_r+0x1fe>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	059a      	lsls	r2, r3, #22
 8006f16:	d402      	bmi.n	8006f1e <_vfiprintf_r+0x1fe>
 8006f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f1a:	f7ff fddd 	bl	8006ad8 <__retarget_lock_release_recursive>
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	065b      	lsls	r3, r3, #25
 8006f22:	f53f af1f 	bmi.w	8006d64 <_vfiprintf_r+0x44>
 8006f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f28:	e71e      	b.n	8006d68 <_vfiprintf_r+0x48>
 8006f2a:	ab03      	add	r3, sp, #12
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	462a      	mov	r2, r5
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <_vfiprintf_r+0x228>)
 8006f32:	a904      	add	r1, sp, #16
 8006f34:	4630      	mov	r0, r6
 8006f36:	f000 f879 	bl	800702c <_printf_i>
 8006f3a:	e7e4      	b.n	8006f06 <_vfiprintf_r+0x1e6>
 8006f3c:	08007668 	.word	0x08007668
 8006f40:	08007672 	.word	0x08007672
 8006f44:	00000000 	.word	0x00000000
 8006f48:	08006cfb 	.word	0x08006cfb
 8006f4c:	0800766e 	.word	0x0800766e

08006f50 <_printf_common>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	4616      	mov	r6, r2
 8006f56:	4698      	mov	r8, r3
 8006f58:	688a      	ldr	r2, [r1, #8]
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bfb8      	it	lt
 8006f64:	4613      	movlt	r3, r2
 8006f66:	6033      	str	r3, [r6, #0]
 8006f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b10a      	cbz	r2, 8006f76 <_printf_common+0x26>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	0699      	lsls	r1, r3, #26
 8006f7a:	bf42      	ittt	mi
 8006f7c:	6833      	ldrmi	r3, [r6, #0]
 8006f7e:	3302      	addmi	r3, #2
 8006f80:	6033      	strmi	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	f015 0506 	ands.w	r5, r5, #6
 8006f88:	d106      	bne.n	8006f98 <_printf_common+0x48>
 8006f8a:	f104 0a19 	add.w	sl, r4, #25
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	6832      	ldr	r2, [r6, #0]
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dc26      	bgt.n	8006fe6 <_printf_common+0x96>
 8006f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	3b00      	subs	r3, #0
 8006fa0:	bf18      	it	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d42b      	bmi.n	8007000 <_printf_common+0xb0>
 8006fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fac:	4641      	mov	r1, r8
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c8      	blx	r9
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d01e      	beq.n	8006ff4 <_printf_common+0xa4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	f003 0306 	and.w	r3, r3, #6
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	bf02      	ittt	eq
 8006fc2:	68e5      	ldreq	r5, [r4, #12]
 8006fc4:	6833      	ldreq	r3, [r6, #0]
 8006fc6:	1aed      	subeq	r5, r5, r3
 8006fc8:	68a3      	ldr	r3, [r4, #8]
 8006fca:	bf0c      	ite	eq
 8006fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd0:	2500      	movne	r5, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bfc4      	itt	gt
 8006fd6:	1a9b      	subgt	r3, r3, r2
 8006fd8:	18ed      	addgt	r5, r5, r3
 8006fda:	2600      	movs	r6, #0
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xa8>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4641      	mov	r1, r8
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c8      	blx	r9
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xac>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c6      	b.n	8006f8e <_printf_common+0x3e>
 8007000:	18e1      	adds	r1, r4, r3
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	2030      	movs	r0, #48	@ 0x30
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700a:	4422      	add	r2, r4
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007014:	3302      	adds	r3, #2
 8007016:	e7c7      	b.n	8006fa8 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4641      	mov	r1, r8
 800701e:	4638      	mov	r0, r7
 8007020:	47c8      	blx	r9
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa4>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x8e>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	7e0f      	ldrb	r7, [r1, #24]
 8007032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007034:	2f78      	cmp	r7, #120	@ 0x78
 8007036:	4691      	mov	r9, r2
 8007038:	4680      	mov	r8, r0
 800703a:	460c      	mov	r4, r1
 800703c:	469a      	mov	sl, r3
 800703e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	@ 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d2 	beq.w	80071f2 <_printf_i+0x1c6>
 800704e:	2f58      	cmp	r7, #88	@ 0x58
 8007050:	f000 80b9 	beq.w	80071c6 <_printf_i+0x19a>
 8007054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a101      	add	r1, pc, #4	@ (adr r1, 800706c <_printf_i+0x40>)
 8007068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071d9 	.word	0x080071d9
 800709c:	08007103 	.word	0x08007103
 80070a0:	08007193 	.word	0x08007193
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	080071fb 	.word	0x080071fb
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007103 	.word	0x08007103
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	0800719b 	.word	0x0800719b
 80070c4:	6833      	ldr	r3, [r6, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6032      	str	r2, [r6, #0]
 80070cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e09d      	b.n	8007214 <_printf_i+0x1e8>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	6031      	str	r1, [r6, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	d501      	bpl.n	80070e8 <_printf_i+0xbc>
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	e003      	b.n	80070f0 <_printf_i+0xc4>
 80070e8:	0645      	lsls	r5, r0, #25
 80070ea:	d5fb      	bpl.n	80070e4 <_printf_i+0xb8>
 80070ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	da03      	bge.n	80070fc <_printf_i+0xd0>
 80070f4:	232d      	movs	r3, #45	@ 0x2d
 80070f6:	426d      	negs	r5, r5
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fc:	4859      	ldr	r0, [pc, #356]	@ (8007264 <_printf_i+0x238>)
 80070fe:	230a      	movs	r3, #10
 8007100:	e011      	b.n	8007126 <_printf_i+0xfa>
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	0608      	lsls	r0, r1, #24
 8007108:	f853 5b04 	ldr.w	r5, [r3], #4
 800710c:	d402      	bmi.n	8007114 <_printf_i+0xe8>
 800710e:	0649      	lsls	r1, r1, #25
 8007110:	bf48      	it	mi
 8007112:	b2ad      	uxthmi	r5, r5
 8007114:	2f6f      	cmp	r7, #111	@ 0x6f
 8007116:	4853      	ldr	r0, [pc, #332]	@ (8007264 <_printf_i+0x238>)
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	bf14      	ite	ne
 800711c:	230a      	movne	r3, #10
 800711e:	2308      	moveq	r3, #8
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007126:	6866      	ldr	r6, [r4, #4]
 8007128:	60a6      	str	r6, [r4, #8]
 800712a:	2e00      	cmp	r6, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90d      	cbnz	r5, 800713c <_printf_i+0x110>
 8007138:	2e00      	cmp	r6, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1a8>
 800713c:	4616      	mov	r6, r2
 800713e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007142:	fb03 5711 	mls	r7, r3, r1, r5
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800714c:	462f      	mov	r7, r5
 800714e:	42bb      	cmp	r3, r7
 8007150:	460d      	mov	r5, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x112>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x144>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07df      	lsls	r7, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x144>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	@ 0x30
 8007168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800716c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007170:	1b92      	subs	r2, r2, r6
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee6 	bl	8006f50 <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f2>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	@ (8007268 <_printf_i+0x23c>)
 800719c:	2778      	movs	r7, #120	@ 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6831      	ldr	r1, [r6, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x188>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2ad      	uxthmi	r5, r5
 80071b4:	6031      	str	r1, [r6, #0]
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	bf44      	itt	mi
 80071ba:	f043 0320 	orrmi.w	r3, r3, #32
 80071be:	6023      	strmi	r3, [r4, #0]
 80071c0:	b11d      	cbz	r5, 80071ca <_printf_i+0x19e>
 80071c2:	2310      	movs	r3, #16
 80071c4:	e7ac      	b.n	8007120 <_printf_i+0xf4>
 80071c6:	4827      	ldr	r0, [pc, #156]	@ (8007264 <_printf_i+0x238>)
 80071c8:	e7e9      	b.n	800719e <_printf_i+0x172>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f023 0320 	bic.w	r3, r3, #32
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	e7f6      	b.n	80071c2 <_printf_i+0x196>
 80071d4:	4616      	mov	r6, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x128>
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	062e      	lsls	r6, r5, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c0>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1c6>
 80071ec:	0668      	lsls	r0, r5, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1bc>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4616      	mov	r6, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x148>
 80071fa:	6833      	ldr	r3, [r6, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	6032      	str	r2, [r6, #0]
 8007200:	681e      	ldr	r6, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4630      	mov	r0, r6
 8007208:	f7f9 f882 	bl	8000310 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1e6>
 800720e:	1b80      	subs	r0, r0, r6
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x148>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	4632      	mov	r2, r6
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x15c>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x22e>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x160>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x15c>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x212>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x206>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x222>
 8007262:	bf00      	nop
 8007264:	08007679 	.word	0x08007679
 8007268:	0800768a 	.word	0x0800768a

0800726c <__sflush_r>:
 800726c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007274:	0716      	lsls	r6, r2, #28
 8007276:	4605      	mov	r5, r0
 8007278:	460c      	mov	r4, r1
 800727a:	d454      	bmi.n	8007326 <__sflush_r+0xba>
 800727c:	684b      	ldr	r3, [r1, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc02      	bgt.n	8007288 <__sflush_r+0x1c>
 8007282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd48      	ble.n	800731a <__sflush_r+0xae>
 8007288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800728a:	2e00      	cmp	r6, #0
 800728c:	d045      	beq.n	800731a <__sflush_r+0xae>
 800728e:	2300      	movs	r3, #0
 8007290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007294:	682f      	ldr	r7, [r5, #0]
 8007296:	6a21      	ldr	r1, [r4, #32]
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	d030      	beq.n	80072fe <__sflush_r+0x92>
 800729c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	0759      	lsls	r1, r3, #29
 80072a2:	d505      	bpl.n	80072b0 <__sflush_r+0x44>
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072aa:	b10b      	cbz	r3, 80072b0 <__sflush_r+0x44>
 80072ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072b4:	6a21      	ldr	r1, [r4, #32]
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b0      	blx	r6
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	d106      	bne.n	80072ce <__sflush_r+0x62>
 80072c0:	6829      	ldr	r1, [r5, #0]
 80072c2:	291d      	cmp	r1, #29
 80072c4:	d82b      	bhi.n	800731e <__sflush_r+0xb2>
 80072c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007370 <__sflush_r+0x104>)
 80072c8:	410a      	asrs	r2, r1
 80072ca:	07d6      	lsls	r6, r2, #31
 80072cc:	d427      	bmi.n	800731e <__sflush_r+0xb2>
 80072ce:	2200      	movs	r2, #0
 80072d0:	6062      	str	r2, [r4, #4]
 80072d2:	04d9      	lsls	r1, r3, #19
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	d504      	bpl.n	80072e4 <__sflush_r+0x78>
 80072da:	1c42      	adds	r2, r0, #1
 80072dc:	d101      	bne.n	80072e2 <__sflush_r+0x76>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	b903      	cbnz	r3, 80072e4 <__sflush_r+0x78>
 80072e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80072e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072e6:	602f      	str	r7, [r5, #0]
 80072e8:	b1b9      	cbz	r1, 800731a <__sflush_r+0xae>
 80072ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d002      	beq.n	80072f8 <__sflush_r+0x8c>
 80072f2:	4628      	mov	r0, r5
 80072f4:	f7ff fbf2 	bl	8006adc <_free_r>
 80072f8:	2300      	movs	r3, #0
 80072fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80072fc:	e00d      	b.n	800731a <__sflush_r+0xae>
 80072fe:	2301      	movs	r3, #1
 8007300:	4628      	mov	r0, r5
 8007302:	47b0      	blx	r6
 8007304:	4602      	mov	r2, r0
 8007306:	1c50      	adds	r0, r2, #1
 8007308:	d1c9      	bne.n	800729e <__sflush_r+0x32>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0c6      	beq.n	800729e <__sflush_r+0x32>
 8007310:	2b1d      	cmp	r3, #29
 8007312:	d001      	beq.n	8007318 <__sflush_r+0xac>
 8007314:	2b16      	cmp	r3, #22
 8007316:	d11e      	bne.n	8007356 <__sflush_r+0xea>
 8007318:	602f      	str	r7, [r5, #0]
 800731a:	2000      	movs	r0, #0
 800731c:	e022      	b.n	8007364 <__sflush_r+0xf8>
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	b21b      	sxth	r3, r3
 8007324:	e01b      	b.n	800735e <__sflush_r+0xf2>
 8007326:	690f      	ldr	r7, [r1, #16]
 8007328:	2f00      	cmp	r7, #0
 800732a:	d0f6      	beq.n	800731a <__sflush_r+0xae>
 800732c:	0793      	lsls	r3, r2, #30
 800732e:	680e      	ldr	r6, [r1, #0]
 8007330:	bf08      	it	eq
 8007332:	694b      	ldreq	r3, [r1, #20]
 8007334:	600f      	str	r7, [r1, #0]
 8007336:	bf18      	it	ne
 8007338:	2300      	movne	r3, #0
 800733a:	eba6 0807 	sub.w	r8, r6, r7
 800733e:	608b      	str	r3, [r1, #8]
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	dde9      	ble.n	800731a <__sflush_r+0xae>
 8007346:	6a21      	ldr	r1, [r4, #32]
 8007348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800734a:	4643      	mov	r3, r8
 800734c:	463a      	mov	r2, r7
 800734e:	4628      	mov	r0, r5
 8007350:	47b0      	blx	r6
 8007352:	2800      	cmp	r0, #0
 8007354:	dc08      	bgt.n	8007368 <__sflush_r+0xfc>
 8007356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	4407      	add	r7, r0
 800736a:	eba8 0800 	sub.w	r8, r8, r0
 800736e:	e7e7      	b.n	8007340 <__sflush_r+0xd4>
 8007370:	dfbffffe 	.word	0xdfbffffe

08007374 <_fflush_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	690b      	ldr	r3, [r1, #16]
 8007378:	4605      	mov	r5, r0
 800737a:	460c      	mov	r4, r1
 800737c:	b913      	cbnz	r3, 8007384 <_fflush_r+0x10>
 800737e:	2500      	movs	r5, #0
 8007380:	4628      	mov	r0, r5
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	b118      	cbz	r0, 800738e <_fflush_r+0x1a>
 8007386:	6a03      	ldr	r3, [r0, #32]
 8007388:	b90b      	cbnz	r3, 800738e <_fflush_r+0x1a>
 800738a:	f7ff fa9f 	bl	80068cc <__sinit>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f3      	beq.n	800737e <_fflush_r+0xa>
 8007396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007398:	07d0      	lsls	r0, r2, #31
 800739a:	d404      	bmi.n	80073a6 <_fflush_r+0x32>
 800739c:	0599      	lsls	r1, r3, #22
 800739e:	d402      	bmi.n	80073a6 <_fflush_r+0x32>
 80073a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a2:	f7ff fb98 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 80073a6:	4628      	mov	r0, r5
 80073a8:	4621      	mov	r1, r4
 80073aa:	f7ff ff5f 	bl	800726c <__sflush_r>
 80073ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073b0:	07da      	lsls	r2, r3, #31
 80073b2:	4605      	mov	r5, r0
 80073b4:	d4e4      	bmi.n	8007380 <_fflush_r+0xc>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	059b      	lsls	r3, r3, #22
 80073ba:	d4e1      	bmi.n	8007380 <_fflush_r+0xc>
 80073bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073be:	f7ff fb8b 	bl	8006ad8 <__retarget_lock_release_recursive>
 80073c2:	e7dd      	b.n	8007380 <_fflush_r+0xc>

080073c4 <__swbuf_r>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	460e      	mov	r6, r1
 80073c8:	4614      	mov	r4, r2
 80073ca:	4605      	mov	r5, r0
 80073cc:	b118      	cbz	r0, 80073d6 <__swbuf_r+0x12>
 80073ce:	6a03      	ldr	r3, [r0, #32]
 80073d0:	b90b      	cbnz	r3, 80073d6 <__swbuf_r+0x12>
 80073d2:	f7ff fa7b 	bl	80068cc <__sinit>
 80073d6:	69a3      	ldr	r3, [r4, #24]
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	071a      	lsls	r2, r3, #28
 80073de:	d501      	bpl.n	80073e4 <__swbuf_r+0x20>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	b943      	cbnz	r3, 80073f6 <__swbuf_r+0x32>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f82a 	bl	8007440 <__swsetup_r>
 80073ec:	b118      	cbz	r0, 80073f6 <__swbuf_r+0x32>
 80073ee:	f04f 37ff 	mov.w	r7, #4294967295
 80073f2:	4638      	mov	r0, r7
 80073f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	6922      	ldr	r2, [r4, #16]
 80073fa:	1a98      	subs	r0, r3, r2
 80073fc:	6963      	ldr	r3, [r4, #20]
 80073fe:	b2f6      	uxtb	r6, r6
 8007400:	4283      	cmp	r3, r0
 8007402:	4637      	mov	r7, r6
 8007404:	dc05      	bgt.n	8007412 <__swbuf_r+0x4e>
 8007406:	4621      	mov	r1, r4
 8007408:	4628      	mov	r0, r5
 800740a:	f7ff ffb3 	bl	8007374 <_fflush_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	d1ed      	bne.n	80073ee <__swbuf_r+0x2a>
 8007412:	68a3      	ldr	r3, [r4, #8]
 8007414:	3b01      	subs	r3, #1
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	701e      	strb	r6, [r3, #0]
 8007420:	6962      	ldr	r2, [r4, #20]
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d004      	beq.n	8007432 <__swbuf_r+0x6e>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	07db      	lsls	r3, r3, #31
 800742c:	d5e1      	bpl.n	80073f2 <__swbuf_r+0x2e>
 800742e:	2e0a      	cmp	r6, #10
 8007430:	d1df      	bne.n	80073f2 <__swbuf_r+0x2e>
 8007432:	4621      	mov	r1, r4
 8007434:	4628      	mov	r0, r5
 8007436:	f7ff ff9d 	bl	8007374 <_fflush_r>
 800743a:	2800      	cmp	r0, #0
 800743c:	d0d9      	beq.n	80073f2 <__swbuf_r+0x2e>
 800743e:	e7d6      	b.n	80073ee <__swbuf_r+0x2a>

08007440 <__swsetup_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4b29      	ldr	r3, [pc, #164]	@ (80074e8 <__swsetup_r+0xa8>)
 8007444:	4605      	mov	r5, r0
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	460c      	mov	r4, r1
 800744a:	b118      	cbz	r0, 8007454 <__swsetup_r+0x14>
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	b90b      	cbnz	r3, 8007454 <__swsetup_r+0x14>
 8007450:	f7ff fa3c 	bl	80068cc <__sinit>
 8007454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007458:	0719      	lsls	r1, r3, #28
 800745a:	d422      	bmi.n	80074a2 <__swsetup_r+0x62>
 800745c:	06da      	lsls	r2, r3, #27
 800745e:	d407      	bmi.n	8007470 <__swsetup_r+0x30>
 8007460:	2209      	movs	r2, #9
 8007462:	602a      	str	r2, [r5, #0]
 8007464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	e033      	b.n	80074d8 <__swsetup_r+0x98>
 8007470:	0758      	lsls	r0, r3, #29
 8007472:	d512      	bpl.n	800749a <__swsetup_r+0x5a>
 8007474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007476:	b141      	cbz	r1, 800748a <__swsetup_r+0x4a>
 8007478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800747c:	4299      	cmp	r1, r3
 800747e:	d002      	beq.n	8007486 <__swsetup_r+0x46>
 8007480:	4628      	mov	r0, r5
 8007482:	f7ff fb2b 	bl	8006adc <_free_r>
 8007486:	2300      	movs	r3, #0
 8007488:	6363      	str	r3, [r4, #52]	@ 0x34
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	2300      	movs	r3, #0
 8007494:	6063      	str	r3, [r4, #4]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f043 0308 	orr.w	r3, r3, #8
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	b94b      	cbnz	r3, 80074ba <__swsetup_r+0x7a>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b0:	d003      	beq.n	80074ba <__swsetup_r+0x7a>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f84f 	bl	8007558 <__smakebuf_r>
 80074ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074be:	f013 0201 	ands.w	r2, r3, #1
 80074c2:	d00a      	beq.n	80074da <__swsetup_r+0x9a>
 80074c4:	2200      	movs	r2, #0
 80074c6:	60a2      	str	r2, [r4, #8]
 80074c8:	6962      	ldr	r2, [r4, #20]
 80074ca:	4252      	negs	r2, r2
 80074cc:	61a2      	str	r2, [r4, #24]
 80074ce:	6922      	ldr	r2, [r4, #16]
 80074d0:	b942      	cbnz	r2, 80074e4 <__swsetup_r+0xa4>
 80074d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074d6:	d1c5      	bne.n	8007464 <__swsetup_r+0x24>
 80074d8:	bd38      	pop	{r3, r4, r5, pc}
 80074da:	0799      	lsls	r1, r3, #30
 80074dc:	bf58      	it	pl
 80074de:	6962      	ldrpl	r2, [r4, #20]
 80074e0:	60a2      	str	r2, [r4, #8]
 80074e2:	e7f4      	b.n	80074ce <__swsetup_r+0x8e>
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7f7      	b.n	80074d8 <__swsetup_r+0x98>
 80074e8:	2400001c 	.word	0x2400001c

080074ec <_sbrk_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d06      	ldr	r5, [pc, #24]	@ (8007508 <_sbrk_r+0x1c>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7fa f994 	bl	8001824 <_sbrk>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_sbrk_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_sbrk_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	240003d8 	.word	0x240003d8

0800750c <__swhatbuf_r>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007514:	2900      	cmp	r1, #0
 8007516:	b096      	sub	sp, #88	@ 0x58
 8007518:	4615      	mov	r5, r2
 800751a:	461e      	mov	r6, r3
 800751c:	da0d      	bge.n	800753a <__swhatbuf_r+0x2e>
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	bf14      	ite	ne
 800752a:	2340      	movne	r3, #64	@ 0x40
 800752c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007530:	2000      	movs	r0, #0
 8007532:	6031      	str	r1, [r6, #0]
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	b016      	add	sp, #88	@ 0x58
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	466a      	mov	r2, sp
 800753c:	f000 f848 	bl	80075d0 <_fstat_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	dbec      	blt.n	800751e <__swhatbuf_r+0x12>
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800754a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800754e:	4259      	negs	r1, r3
 8007550:	4159      	adcs	r1, r3
 8007552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007556:	e7eb      	b.n	8007530 <__swhatbuf_r+0x24>

08007558 <__smakebuf_r>:
 8007558:	898b      	ldrh	r3, [r1, #12]
 800755a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800755c:	079d      	lsls	r5, r3, #30
 800755e:	4606      	mov	r6, r0
 8007560:	460c      	mov	r4, r1
 8007562:	d507      	bpl.n	8007574 <__smakebuf_r+0x1c>
 8007564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	2301      	movs	r3, #1
 800756e:	6163      	str	r3, [r4, #20]
 8007570:	b003      	add	sp, #12
 8007572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007574:	ab01      	add	r3, sp, #4
 8007576:	466a      	mov	r2, sp
 8007578:	f7ff ffc8 	bl	800750c <__swhatbuf_r>
 800757c:	9f00      	ldr	r7, [sp, #0]
 800757e:	4605      	mov	r5, r0
 8007580:	4639      	mov	r1, r7
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff fb16 	bl	8006bb4 <_malloc_r>
 8007588:	b948      	cbnz	r0, 800759e <__smakebuf_r+0x46>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	059a      	lsls	r2, r3, #22
 8007590:	d4ee      	bmi.n	8007570 <__smakebuf_r+0x18>
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	e7e2      	b.n	8007564 <__smakebuf_r+0xc>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	6020      	str	r0, [r4, #0]
 80075a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ae:	b15b      	cbz	r3, 80075c8 <__smakebuf_r+0x70>
 80075b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b4:	4630      	mov	r0, r6
 80075b6:	f000 f81d 	bl	80075f4 <_isatty_r>
 80075ba:	b128      	cbz	r0, 80075c8 <__smakebuf_r+0x70>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f023 0303 	bic.w	r3, r3, #3
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	431d      	orrs	r5, r3
 80075cc:	81a5      	strh	r5, [r4, #12]
 80075ce:	e7cf      	b.n	8007570 <__smakebuf_r+0x18>

080075d0 <_fstat_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_fstat_r+0x20>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	f7fa f8f9 	bl	80017d4 <_fstat>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	d102      	bne.n	80075ec <_fstat_r+0x1c>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	b103      	cbz	r3, 80075ec <_fstat_r+0x1c>
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
 80075ee:	bf00      	nop
 80075f0:	240003d8 	.word	0x240003d8

080075f4 <_isatty_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	@ (8007610 <_isatty_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fa f8f8 	bl	80017f4 <_isatty>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_isatty_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_isatty_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	240003d8 	.word	0x240003d8

08007614 <_init>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr

08007620 <_fini>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr
