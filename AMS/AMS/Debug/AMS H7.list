
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b604  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800b8d4  0800b8d4  0000c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcb4  0800bcb4  0000ccb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800bcc8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d50  24000068  0800bd30  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000db8  0800bd30  0000ddb8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021964  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003518  00000000  00000000  0002e9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001370  00000000  00000000  00031f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eff  00000000  00000000  00033288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039e13  00000000  00000000  00034187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a5ae  00000000  00000000  0006df9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167dbd  00000000  00000000  00088548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0305  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058dc  00000000  00000000  001f0348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001f5c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b8bc 	.word	0x0800b8bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b8bc 	.word	0x0800b8bc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3308      	adds	r3, #8
 800070c:	224c      	movs	r2, #76	@ 0x4c
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f00a fc55 	bl	800afc0 <memset>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3354      	adds	r3, #84	@ 0x54
 800071a:	2298      	movs	r2, #152	@ 0x98
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fc4e 	bl	800afc0 <memset>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000754:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800075e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2213      	movs	r2, #19
 80007a6:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80007b8:	2230      	movs	r2, #48	@ 0x30
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f00a fbff 	bl	800afc0 <memset>
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007e0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
	CANID = _ID;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	LIMIT_MIN_V = _MINV;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	683a      	ldr	r2, [r7, #0]
 800080e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	LIMIT_MAX_T = _MAXT;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	NUM_CELLS = _NUMCELLS;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	7f3a      	ldrb	r2, [r7, #28]
 800081e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	time_lim_plotted += _LAG;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082a:	441a      	add	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	time_lim_sended += _LAG;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	441a      	add	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	time_lim_received += _LAG;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	441a      	add	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
}
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000866:	f001 fa73 	bl	8001d50 <getUARTState>
 800086a:	4603      	mov	r3, r0
 800086c:	2b20      	cmp	r3, #32
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8083 	beq.w	8000982 <_ZN7BMS_MOD12voltage_infoEPc+0x126>
		print((char*) "\n***********************");
 800087c:	4851      	ldr	r0, [pc, #324]	@ (80009c4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 800087e:	f001 fa2b 	bl	8001cd8 <print>
		print((char*) "         BMS");
 8000882:	4851      	ldr	r0, [pc, #324]	@ (80009c8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 8000884:	f001 fa28 	bl	8001cd8 <print>
		print((char*) "***********************");
 8000888:	4850      	ldr	r0, [pc, #320]	@ (80009cc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 800088a:	f001 fa25 	bl	8001cd8 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	494e      	ldr	r1, [pc, #312]	@ (80009d0 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f00a fb70 	bl	800af7c <siprintf>
		print(buffer);
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f001 fa1b 	bl	8001cd8 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	494a      	ldr	r1, [pc, #296]	@ (80009d4 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008aa:	6838      	ldr	r0, [r7, #0]
 80008ac:	f00a fb66 	bl	800af7c <siprintf>
		print(buffer);
 80008b0:	6838      	ldr	r0, [r7, #0]
 80008b2:	f001 fa11 	bl	8001cd8 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80008bc:	461a      	mov	r2, r3
 80008be:	4946      	ldr	r1, [pc, #280]	@ (80009d8 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f00a fb5b 	bl	800af7c <siprintf>
		print(buffer);
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f001 fa06 	bl	8001cd8 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80008d2:	461a      	mov	r2, r3
 80008d4:	4941      	ldr	r1, [pc, #260]	@ (80009dc <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	f00a fb50 	bl	800af7c <siprintf>
		print(buffer);
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f001 f9fb 	bl	8001cd8 <print>
		print((char*) "-----------------------");
 80008e2:	483f      	ldr	r0, [pc, #252]	@ (80009e0 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 80008e4:	f001 f9f8 	bl	8001cd8 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	461a      	mov	r2, r3
 80008ee:	493d      	ldr	r1, [pc, #244]	@ (80009e4 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f00a fb43 	bl	800af7c <siprintf>
		printnl(buffer);
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	f001 fa0c 	bl	8001d14 <printnl>
		for (int i = 1; i < NUM_CELLS; i++) {
 80008fc:	2301      	movs	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e00f      	b.n	8000922 <_ZN7BMS_MOD12voltage_infoEPc+0xc6>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	3202      	adds	r2, #2
 8000908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090c:	461a      	mov	r2, r3
 800090e:	4936      	ldr	r1, [pc, #216]	@ (80009e8 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f00a fb33 	bl	800af7c <siprintf>
			printnl(buffer);
 8000916:	6838      	ldr	r0, [r7, #0]
 8000918:	f001 f9fc 	bl	8001d14 <printnl>
		for (int i = 1; i < NUM_CELLS; i++) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4293      	cmp	r3, r2
 800092e:	dbe8      	blt.n	8000902 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	e00e      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xf8>
			voltage_acum += cellVoltagemV[i];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	3102      	adds	r1, #2
 8000942:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000946:	441a      	add	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3301      	adds	r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800095a:	461a      	mov	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe9      	blt.n	8000936 <_ZN7BMS_MOD12voltage_infoEPc+0xda>
		}

		print((char*) "]");
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000964:	f001 f9b8 	bl	8001cd8 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000974:	491e      	ldr	r1, [pc, #120]	@ (80009f0 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f00a fb00 	bl	800af7c <siprintf>
		print(buffer);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 f9ab 	bl	8001cd8 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000988:	461a      	mov	r2, r3
 800098a:	491a      	ldr	r1, [pc, #104]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f00a faf5 	bl	800af7c <siprintf>
	print(buffer);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f001 f9a0 	bl	8001cd8 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800099e:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1192      	asrs	r2, r2, #6
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	4913      	ldr	r1, [pc, #76]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f00a fae4 	bl	800af7c <siprintf>
	print(buffer);
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 f98f 	bl	8001cd8 <print>
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	0800b8d4 	.word	0x0800b8d4
 80009c8:	0800b8f0 	.word	0x0800b8f0
 80009cc:	0800b900 	.word	0x0800b900
 80009d0:	0800b918 	.word	0x0800b918
 80009d4:	0800b92c 	.word	0x0800b92c
 80009d8:	0800b940 	.word	0x0800b940
 80009dc:	0800b954 	.word	0x0800b954
 80009e0:	0800b968 	.word	0x0800b968
 80009e4:	0800b980 	.word	0x0800b980
 80009e8:	0800b990 	.word	0x0800b990
 80009ec:	0800b998 	.word	0x0800b998
 80009f0:	0800b99c 	.word	0x0800b99c
 80009f4:	0800b9c0 	.word	0x0800b9c0
 80009f8:	10624dd3 	.word	0x10624dd3
 80009fc:	0800b9d8 	.word	0x0800b9d8

08000a00 <_ZN7BMS_MOD16temperature_infoEPc>:

// ********************************************************************************************************
// **Function name:           info
// **Descriptions:            Function for printing the class data
// **********************************************************************************************************
void BMS_MOD::temperature_info(char *buffer) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	if (getUARTState() == HAL_UART_STATE_READY) //Send the message just if there is a serial por connected
 8000a0a:	f001 f9a1 	bl	8001d50 <getUARTState>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d061      	beq.n	8000ae2 <_ZN7BMS_MOD16temperature_infoEPc+0xe2>
	{
		print((char*) "\n***********************");
 8000a1e:	4833      	ldr	r0, [pc, #204]	@ (8000aec <_ZN7BMS_MOD16temperature_infoEPc+0xec>)
 8000a20:	f001 f95a 	bl	8001cd8 <print>
		print((char*) "     Temperatures");
 8000a24:	4832      	ldr	r0, [pc, #200]	@ (8000af0 <_ZN7BMS_MOD16temperature_infoEPc+0xf0>)
 8000a26:	f001 f957 	bl	8001cd8 <print>
		print((char*) "***********************");
 8000a2a:	4832      	ldr	r0, [pc, #200]	@ (8000af4 <_ZN7BMS_MOD16temperature_infoEPc+0xf4>)
 8000a2c:	f001 f954 	bl	8001cd8 <print>
		sprintf(buffer, " - ERROR:     %i", error);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <_ZN7BMS_MOD16temperature_infoEPc+0xf8>)
 8000a38:	6838      	ldr	r0, [r7, #0]
 8000a3a:	f00a fa9f 	bl	800af7c <siprintf>
		print(buffer);
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f001 f94a 	bl	8001cd8 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	492c      	ldr	r1, [pc, #176]	@ (8000afc <_ZN7BMS_MOD16temperature_infoEPc+0xfc>)
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	f00a fa95 	bl	800af7c <siprintf>
		print(buffer);
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f001 f940 	bl	8001cd8 <print>
		sprintf(buffer, " - MAX T =    %i ºC", MAX_T);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4927      	ldr	r1, [pc, #156]	@ (8000b00 <_ZN7BMS_MOD16temperature_infoEPc+0x100>)
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f00a fa8a 	bl	800af7c <siprintf>
		print(buffer);
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f001 f935 	bl	8001cd8 <print>
		sprintf(buffer, " - MIN T =    %i ºC", MIN_T);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000a74:	461a      	mov	r2, r3
 8000a76:	4923      	ldr	r1, [pc, #140]	@ (8000b04 <_ZN7BMS_MOD16temperature_infoEPc+0x104>)
 8000a78:	6838      	ldr	r0, [r7, #0]
 8000a7a:	f00a fa7f 	bl	800af7c <siprintf>
		print(buffer);
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f001 f92a 	bl	8001cd8 <print>
		sprintf(buffer, " - LIM T =    %i ºC", LIMIT_MAX_T);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	491e      	ldr	r1, [pc, #120]	@ (8000b08 <_ZN7BMS_MOD16temperature_infoEPc+0x108>)
 8000a8e:	6838      	ldr	r0, [r7, #0]
 8000a90:	f00a fa74 	bl	800af7c <siprintf>
		print((char*) "-----------------------");
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <_ZN7BMS_MOD16temperature_infoEPc+0x10c>)
 8000a96:	f001 f91f 	bl	8001cd8 <print>
		sprintf(buffer, "Temperatures (ºC): [%i", cellTemperature[0]);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	491b      	ldr	r1, [pc, #108]	@ (8000b10 <_ZN7BMS_MOD16temperature_infoEPc+0x110>)
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f00a fa6a 	bl	800af7c <siprintf>
		printnl(buffer);
 8000aa8:	6838      	ldr	r0, [r7, #0]
 8000aaa:	f001 f933 	bl	8001d14 <printnl>
		for (int i = 1; i < 38; i++) {
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e010      	b.n	8000ad6 <_ZN7BMS_MOD16temperature_infoEPc+0xd6>
			sprintf(buffer, ", %i", cellTemperature[i]);
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3314      	adds	r3, #20
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4914      	ldr	r1, [pc, #80]	@ (8000b14 <_ZN7BMS_MOD16temperature_infoEPc+0x114>)
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	f00a fa59 	bl	800af7c <siprintf>
			printnl(buffer);
 8000aca:	6838      	ldr	r0, [r7, #0]
 8000acc:	f001 f922 	bl	8001d14 <printnl>
		for (int i = 1; i < 38; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b25      	cmp	r3, #37	@ 0x25
 8000ada:	ddeb      	ble.n	8000ab4 <_ZN7BMS_MOD16temperature_infoEPc+0xb4>
		}
		print((char*) "]");
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <_ZN7BMS_MOD16temperature_infoEPc+0x118>)
 8000ade:	f001 f8fb 	bl	8001cd8 <print>

	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	0800b8d4 	.word	0x0800b8d4
 8000af0:	0800b9f0 	.word	0x0800b9f0
 8000af4:	0800b900 	.word	0x0800b900
 8000af8:	0800b918 	.word	0x0800b918
 8000afc:	0800b92c 	.word	0x0800b92c
 8000b00:	0800ba04 	.word	0x0800ba04
 8000b04:	0800ba1c 	.word	0x0800ba1c
 8000b08:	0800ba34 	.word	0x0800ba34
 8000b0c:	0800b968 	.word	0x0800b968
 8000b10:	0800ba4c 	.word	0x0800ba4c
 8000b14:	0800b990 	.word	0x0800b990
 8000b18:	0800b998 	.word	0x0800b998

08000b1c <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocl
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	@ 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]

	if (id > CANID && id < CANID + 30) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f240 817b 	bls.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	331e      	adds	r3, #30
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	f080 8174 	bcs.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
		int m = id % CANID;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	61fb      	str	r3, [r7, #28]
		int pos = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
		if ((m > 0 && m < 5) || (m > 10 && m < 15)) {
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dd02      	ble.n	8000b66 <_ZN7BMS_MOD5parseEmPhm+0x4a>
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	dd07      	ble.n	8000b76 <_ZN7BMS_MOD5parseEmPhm+0x5a>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b0a      	cmp	r3, #10
 8000b6a:	f340 815f 	ble.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b0e      	cmp	r3, #14
 8000b72:	f300 815b 	bgt.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
			time_lim_received = t + TIME_LIM_RECV; // Reset the timer flag for checking if the data is received
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	441a      	add	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			if (m < 14) {
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b0d      	cmp	r3, #13
 8000b8a:	f300 80ae 	bgt.w	8000cea <_ZN7BMS_MOD5parseEmPhm+0x1ce>
				if (flag_charger == 1) { // New charger doesn't have CAN bus
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10f      	bne.n	8000bb8 <_ZN7BMS_MOD5parseEmPhm+0x9c>
					if (module_send_message_CAN1(id, buf, 8) != HAL_OK)
 8000b98:	2208      	movs	r2, #8
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f001 f857 	bl	8001c50 <module_send_message_CAN1>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <_ZN7BMS_MOD5parseEmPhm+0x9c>
						error = BMS_ERROR_COMMUNICATION;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
				}
				for (int i = 0; i < 14; i++) // i = number of cell within message
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bbc:	e055      	b.n	8000c6a <_ZN7BMS_MOD5parseEmPhm+0x14e>
						{
					pos = (m - 1) * 4 + i;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bc6:	4413      	add	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
					cellVoltagemV[pos] = (buf[2 * i] << 8) + buf[2 * i + 1];
 8000bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	461a      	mov	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	440a      	add	r2, r1
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	1899      	adds	r1, r3, r2
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	3202      	adds	r2, #2
 8000bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	3202      	adds	r2, #2
 8000bf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dc09      	bgt.n	8000c18 <_ZN7BMS_MOD5parseEmPhm+0xfc>
							|| cellVoltagemV[pos] < LIMIT_MIN_V)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	3202      	adds	r2, #2
 8000c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c14:	429a      	cmp	r2, r3
 8000c16:	da1f      	bge.n	8000c58 <_ZN7BMS_MOD5parseEmPhm+0x13c>
							&& pos < NUM_CELLS) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000c1e:	461a      	mov	r2, r3
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	4293      	cmp	r3, r2
 8000c24:	da18      	bge.n	8000c58 <_ZN7BMS_MOD5parseEmPhm+0x13c>
						flag_error_volt[pos] = flag_error_volt[pos] + 1;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	3248      	adds	r2, #72	@ 0x48
 8000c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c30:	1c59      	adds	r1, r3, #1
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	3248      	adds	r2, #72	@ 0x48
 8000c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (flag_error_volt[pos] >= max_flag)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	3248      	adds	r2, #72	@ 0x48
 8000c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	db09      	blt.n	8000c64 <_ZN7BMS_MOD5parseEmPhm+0x148>
							error = BMS_ERROR_VOLTS;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2202      	movs	r2, #2
 8000c54:	605a      	str	r2, [r3, #4]
						if (flag_error_volt[pos] >= max_flag)
 8000c56:	e005      	b.n	8000c64 <_ZN7BMS_MOD5parseEmPhm+0x148>
					} else
						flag_error_volt[pos] = 0;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	3248      	adds	r2, #72	@ 0x48
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int i = 0; i < 14; i++) // i = number of cell within message
 8000c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c66:	3301      	adds	r3, #1
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6c:	2b0d      	cmp	r3, #13
 8000c6e:	dda6      	ble.n	8000bbe <_ZN7BMS_MOD5parseEmPhm+0xa2>
				}
				MAX_V = cellVoltagemV[0];
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
				MIN_V = cellVoltagemV[0];
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c88:	e027      	b.n	8000cda <_ZN7BMS_MOD5parseEmPhm+0x1be>
						{
					if (cellVoltagemV[i] > MAX_V)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8e:	3202      	adds	r2, #2
 8000c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dd08      	ble.n	8000cb0 <_ZN7BMS_MOD5parseEmPhm+0x194>
						MAX_V = cellVoltagemV[i];
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ca2:	3202      	adds	r2, #2
 8000ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000cae:	e011      	b.n	8000cd4 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
					else if (cellVoltagemV[i] < MIN_V)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb4:	3202      	adds	r2, #2
 8000cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	da07      	bge.n	8000cd4 <_ZN7BMS_MOD5parseEmPhm+0x1b8>
						MIN_V = cellVoltagemV[i];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cc8:	3202      	adds	r2, #2
 8000cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 8000cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dbd0      	blt.n	8000c8a <_ZN7BMS_MOD5parseEmPhm+0x16e>
 8000ce8:	e0a0      	b.n	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
				}
				//message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
				//message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing

			} else if (m > 20 && m < 27) { //New BMS send temeratures at 21, 22, 23, 24, 25, 26
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b14      	cmp	r3, #20
 8000cee:	f340 809d 	ble.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	2b1a      	cmp	r3, #26
 8000cf6:	f300 8099 	bgt.w	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>

				if (flag_charger == 1) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d104      	bne.n	8000d0e <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					module_send_message_CAN1(id, buf, 8); //Reenviar temperaturas por CAN1 tanto en cargador como en coche
 8000d04:	2208      	movs	r2, #8
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	68b8      	ldr	r0, [r7, #8]
 8000d0a:	f000 ffa1 	bl	8001c50 <module_send_message_CAN1>
				}

				if (m < 26) {
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	dc28      	bgt.n	8000d66 <_ZN7BMS_MOD5parseEmPhm+0x24a>
					for (int i = 0; i < 8; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d18:	e021      	b.n	8000d5e <_ZN7BMS_MOD5parseEmPhm+0x242>
						pos = (m - 1) * 8 + i;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d22:	4413      	add	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
						cellTemperature[pos] = buf[i];
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3314      	adds	r3, #20
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	6059      	str	r1, [r3, #4]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	3314      	adds	r3, #20
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dd02      	ble.n	8000d58 <_ZN7BMS_MOD5parseEmPhm+0x23c>
							error = BMS_ERROR_TEMP;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2203      	movs	r2, #3
 8000d56:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 8; i++) {
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	ddda      	ble.n	8000d1a <_ZN7BMS_MOD5parseEmPhm+0x1fe>
 8000d64:	e01f      	b.n	8000da6 <_ZN7BMS_MOD5parseEmPhm+0x28a>

					}
				} else if (m == 26) {
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	2b1a      	cmp	r3, #26
 8000d6a:	d11c      	bne.n	8000da6 <_ZN7BMS_MOD5parseEmPhm+0x28a>

					for (int i = 0; i < 3; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	e016      	b.n	8000da0 <_ZN7BMS_MOD5parseEmPhm+0x284>
						pos = (m - 1) * 8 + i;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3314      	adds	r3, #20
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dd02      	ble.n	8000d9a <_ZN7BMS_MOD5parseEmPhm+0x27e>
							error = BMS_ERROR_TEMP;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2203      	movs	r2, #3
 8000d98:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 3; i++) {
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	dde5      	ble.n	8000d72 <_ZN7BMS_MOD5parseEmPhm+0x256>

					}

				}

				MAX_T = cellTemperature[0];
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
				MIN_T = cellTemperature[0];
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
				for (int i = 0; i < 38; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	bf00      	nop
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b25      	cmp	r3, #37	@ 0x25
 8000dc4:	dc32      	bgt.n	8000e2c <_ZN7BMS_MOD5parseEmPhm+0x310>
					if (cellTemperature[i] > MAX_T)
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3314      	adds	r3, #20
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dd09      	ble.n	8000df0 <_ZN7BMS_MOD5parseEmPhm+0x2d4>
						MAX_T = cellTemperature[i];
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3314      	adds	r3, #20
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8000dee:	e01b      	b.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
					else if (cellTemperature[i] < MIN_T
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3314      	adds	r3, #20
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000e02:	429a      	cmp	r2, r3
 8000e04:	da10      	bge.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
							&& cellTemperature[i] != 0) {
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3314      	adds	r3, #20
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d008      	beq.n	8000e28 <_ZN7BMS_MOD5parseEmPhm+0x30c>
						MIN_T = cellTemperature[i];
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

					}
					return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <_ZN7BMS_MOD5parseEmPhm+0x312>
				}
			}
		}
	}
	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3730      	adds	r7, #48	@ 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
	//INT8U message_balancing[2] = {0,0}; // Voltage in mV
// Function for performing a correct behavior
	if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d921      	bls.n	8000e92 <_ZN7BMS_MOD13query_voltageEmPc+0x5c>
		time_lim_sended += TIME_LIM_SEND;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000e5a:	441a      	add	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

		// Two messages (one per LTC in the BMS) -> to evaluate if its better to group everything into one message
		if (module_send_message_CAN2(CANID, message_balancing, 2) != HAL_OK) {
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f000 ff10 	bl	8001c94 <module_send_message_CAN2>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
			//error = BMS_ERROR_COMMUNICATION; // If the message is not sent then, error
		}

		if (module_send_message_CAN2(CANID + 10, message_balancing, 2)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f103 000a 	add.w	r0, r3, #10
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8000e86:	2202      	movs	r2, #2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f000 ff03 	bl	8001c94 <module_send_message_CAN2>
 8000e8e:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000e90:	2b00      	cmp	r3, #0
			//error = BMS_ERROR_COMMUNICATION; // If the message is not sent then, error
		}
	}
	if (time > time_lim_received) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d902      	bls.n	8000ea4 <_ZN7BMS_MOD13query_voltageEmPc+0x6e>
		error = BMS_ERROR_COMMUNICATION;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
	}
	if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d013      	beq.n	8000ed6 <_ZN7BMS_MOD13query_voltageEmPc+0xa0>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90d      	bls.n	8000ed6 <_ZN7BMS_MOD13query_voltageEmPc+0xa0>
		time_lim_plotted += TIME_LIM_PLOT;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000ec6:	441a      	add	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
		voltage_info(buffer);
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff fcc3 	bl	800085c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e00e      	b.n	8000efa <_ZN7BMS_MOD13query_voltageEmPc+0xc4>
		voltage_acum += cellVoltagemV[i];
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6979      	ldr	r1, [r7, #20]
 8000ee6:	3102      	adds	r1, #2
 8000ee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000eec:	441a      	add	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
	for (int i = 0; i < NUM_CELLS; i++) {
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000f00:	461a      	mov	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	dbe9      	blt.n	8000edc <_ZN7BMS_MOD13query_voltageEmPc+0xa6>
	}
	return error;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	685b      	ldr	r3, [r3, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d933      	bls.n	8000f94 <_ZN7BMS_MOD17query_temperatureEmPc+0x80>
	time_lim_sended += TIME_LIM_SEND;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f38:	441a      	add	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f103 0014 	add.w	r0, r3, #20
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f000 fe9f 	bl	8001c94 <module_send_message_CAN2>
 8000f56:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
	if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <_ZN7BMS_MOD17query_temperatureEmPc+0x58>
		error = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	605a      	str	r2, [r3, #4]
	} else {
		/*       Serial.print("Ennvado solicitud a: ");
		 Serial.println(MODULEID,HEX); */
	}

	for (int i = 0; i < 38; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00d      	b.n	8000f8e <_ZN7BMS_MOD17query_temperatureEmPc+0x7a>
		if (cellTemperature[i] > 55) {
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3314      	adds	r3, #20
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b37      	cmp	r3, #55	@ 0x37
 8000f80:	dd02      	ble.n	8000f88 <_ZN7BMS_MOD17query_temperatureEmPc+0x74>
			error = 2;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 38; i++) {
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b25      	cmp	r3, #37	@ 0x25
 8000f92:	ddee      	ble.n	8000f72 <_ZN7BMS_MOD17query_temperatureEmPc+0x5e>
	// time_lim_sended += TIME_LIM_SEND; //Si actualizas dos veces, el mensaje se envía en la mitad del periodo
}
if (time > time_lim_received) {
	//error = Temperatures_ERROR_COMMUNICATION;
}
if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d013      	beq.n	8000fc6 <_ZN7BMS_MOD17query_temperatureEmPc+0xb2>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d90d      	bls.n	8000fc6 <_ZN7BMS_MOD17query_temperatureEmPc+0xb2>
	time_lim_plotted += TIME_LIM_PLOT;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8000fb6:	441a      	add	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	temperature_info(buffer);
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fd1d 	bl	8000a00 <_ZN7BMS_MOD16temperature_infoEPc>
 message_temperatures[0] = 0;
 message_temperatures[1] = MAX_T & 0xFF;
 module_send_message_CAN1(CANIDTEL, 0, 2, message_temperatures);
 } */

return error;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]

}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	731a      	strb	r2, [r3, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4a18      	ldr	r2, [pc, #96]	@ (8001074 <_ZN7CPU_MODC1Emmi+0xa0>)
 8001012:	61da      	str	r2, [r3, #28]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	441a      	add	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	441a      	add	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	441a      	add	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	000f4240 	.word	0x000f4240

08001078 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800108c:	d131      	bne.n	80010f2 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	441a      	add	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80010ba:	dd18      	ble.n	80010ee <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2202      	movs	r2, #2
 80010c0:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	330c      	adds	r3, #12
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	f000 fdbf 	bl	8001c50 <module_send_message_CAN1>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 80010e8:	4804      	ldr	r0, [pc, #16]	@ (80010fc <_ZN7CPU_MOD5parseEmPhm+0x84>)
 80010ea:	f000 fdf5 	bl	8001cd8 <print>
            }

        }
        return true;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800bb4c 	.word	0x0800bb4c

08001100 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	429a      	cmp	r2, r3
 8001114:	d906      	bls.n	8001124 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	441a      	add	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	d902      	bls.n	8001134 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <_ZN7CPU_MOD5queryEmPc+0x54>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d906      	bls.n	8001154 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	689b      	ldr	r3, [r3, #8]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	611a      	str	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	721a      	strb	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	22fa      	movs	r2, #250	@ 0xfa
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2232      	movs	r2, #50	@ 0x32
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2232      	movs	r2, #50	@ 0x32
 80011e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	621a      	str	r2, [r3, #32]
}
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8001236:	f000 fd95 	bl	8001d64 <readAnalogValue>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edd3 7a04 	vldr	s15, [r3, #16]
 800124a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800128c <_ZN11Current_MOD5queryEiPc+0x68>
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d509      	bpl.n	800126c <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2201      	movs	r2, #1
 800125c:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
 800126a:	e008      	b.n	800127e <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	43c80000 	.word	0x43c80000

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f001 fb5d 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f89d 	bl	80013d8 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800129e:	f000 f917 	bl	80014d0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 fbc1 	bl	8001a28 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 80012a6:	f000 fad5 	bl	8001854 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 80012aa:	f000 fa49 	bl	8001740 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 80012ae:	f000 fb5b 	bl	8001968 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80012b2:	f000 f941 	bl	8001538 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 80012b6:	f000 f9c9 	bl	800164c <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x120>)
 80012bc:	f003 ff00 	bl	80050c0 <HAL_FDCAN_Start>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf0c      	ite	eq
 80012c6:	2301      	moveq	r3, #1
 80012c8:	2300      	movne	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 80012d0:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <main+0x124>)
 80012d2:	f000 fd01 	bl	8001cd8 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	4835      	ldr	r0, [pc, #212]	@ (80013b0 <main+0x120>)
 80012dc:	f004 f8e2 	bl	80054a4 <HAL_FDCAN_ActivateNotification>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 80012f0:	4831      	ldr	r0, [pc, #196]	@ (80013b8 <main+0x128>)
 80012f2:	f000 fcf1 	bl	8001cd8 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 80012f6:	4831      	ldr	r0, [pc, #196]	@ (80013bc <main+0x12c>)
 80012f8:	f003 fee2 	bl	80050c0 <HAL_FDCAN_Start>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <main+0x130>)
 800130e:	f000 fce3 	bl	8001cd8 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8001312:	482c      	ldr	r0, [pc, #176]	@ (80013c4 <main+0x134>)
 8001314:	f002 f8a4 	bl	8003460 <HAL_ADC_Start>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <main+0x9e>
	  print((char*)"ADC iniciado");
 8001328:	4827      	ldr	r0, [pc, #156]	@ (80013c8 <main+0x138>)
 800132a:	f000 fcd5 	bl	8001cd8 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 800132e:	f000 fd43 	bl	8001db8 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <main+0x13c>)
 8001334:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <main+0x140>)
 8001336:	2140      	movs	r1, #64	@ 0x40
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <main+0x12c>)
 800133a:	f003 ff47 	bl	80051cc <HAL_FDCAN_GetRxMessage>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ef      	beq.n	800132e <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <main+0x140>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a20      	ldr	r2, [pc, #128]	@ (80013d4 <main+0x144>)
 8001354:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <main+0x140>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <main+0x144>)
 800135e:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	e00c      	b.n	8001380 <main+0xf0>
 8001366:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <main+0x13c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	7819      	ldrb	r1, [r3, #0]
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <main+0x144>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	3305      	adds	r3, #5
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b07      	cmp	r3, #7
 8001384:	ddef      	ble.n	8001366 <main+0xd6>
		  msg_bms.bus = 2;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <main+0x144>)
 8001388:	2202      	movs	r2, #2
 800138a:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 800138c:	f001 fb68 	bl	8002a60 <HAL_GetTick>
 8001390:	4603      	mov	r3, r0
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <main+0x144>)
 8001394:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <main+0x144>)
 8001398:	466c      	mov	r4, sp
 800139a:	f103 0210 	add.w	r2, r3, #16
 800139e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	f000 fefe 	bl	80021a8 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80013ac:	e7bf      	b.n	800132e <main+0x9e>
 80013ae:	bf00      	nop
 80013b0:	24000164 	.word	0x24000164
 80013b4:	0800bb5c 	.word	0x0800bb5c
 80013b8:	0800bb70 	.word	0x0800bb70
 80013bc:	24000204 	.word	0x24000204
 80013c0:	0800bb88 	.word	0x0800bb88
 80013c4:	240000f4 	.word	0x240000f4
 80013c8:	0800bb9c 	.word	0x0800bb9c
 80013cc:	240003d0 	.word	0x240003d0
 80013d0:	240003a8 	.word	0x240003a8
 80013d4:	2400043c 	.word	0x2400043c

080013d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09c      	sub	sp, #112	@ 0x70
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	224c      	movs	r2, #76	@ 0x4c
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 fdea 	bl	800afc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2220      	movs	r2, #32
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 fde4 	bl	800afc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f004 ffb5 	bl	8006368 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001408:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800141a:	bf00      	nop
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <_Z18SystemClock_Configv+0xf4>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f3      	bne.n	800141c <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800144a:	232c      	movs	r3, #44	@ 0x2c
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800145a:	230c      	movs	r3, #12
 800145c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800145e:	2300      	movs	r3, #0
 8001460:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ffb6 	bl	80063dc <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001480:	f000 fc92 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	233f      	movs	r3, #63	@ 0x3f
 8001486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2303      	movs	r3, #3
 800148a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001490:	2308      	movs	r3, #8
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001494:	2340      	movs	r3, #64	@ 0x40
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800149c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2103      	movs	r1, #3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fb70 	bl	8006b90 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 80014c0:	f000 fc72 	bl	8001da8 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3770      	adds	r7, #112	@ 0x70
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58024800 	.word	0x58024800

080014d0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ae      	sub	sp, #184	@ 0xb8
 80014d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	22b8      	movs	r2, #184	@ 0xb8
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f009 fd6f 	bl	800afc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014f2:	2310      	movs	r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001502:	23c0      	movs	r3, #192	@ 0xc0
 8001504:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fec6 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf14      	ite	ne
 8001522:	2301      	movne	r3, #1
 8001524:	2300      	moveq	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 800152c:	f000 fc3c 	bl	8001da8 <Error_Handler>
  }
}
 8001530:	bf00      	nop
 8001532:	37b8      	adds	r7, #184	@ 0xb8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800153e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2224      	movs	r2, #36	@ 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f009 fd35 	bl	800afc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001558:	4a3a      	ldr	r2, [pc, #232]	@ (8001644 <_ZL12MX_ADC1_Initv+0x10c>)
 800155a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800155c:	4b38      	ldr	r3, [pc, #224]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001564:	2208      	movs	r2, #8
 8001566:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001570:	2204      	movs	r2, #4
 8001572:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001574:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001576:	2200      	movs	r2, #0
 8001578:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800157c:	2200      	movs	r2, #0
 800157e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001582:	2201      	movs	r2, #1
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ba:	4821      	ldr	r0, [pc, #132]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015bc:	f001 fd48 	bl	8003050 <HAL_ADC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80015d0:	f000 fbea 	bl	8001da8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4818      	ldr	r0, [pc, #96]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 80015e0:	f003 f928 	bl	8004834 <HAL_ADCEx_MultiModeConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80015f4:	f000 fbd8 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <_ZL12MX_ADC1_Initv+0x110>)
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015fc:	2306      	movs	r3, #6
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001604:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001608:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800160a:	2304      	movs	r3, #4
 800160c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	4808      	ldr	r0, [pc, #32]	@ (8001640 <_ZL12MX_ADC1_Initv+0x108>)
 800161e:	f002 f91f 	bl	8003860 <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 8001632:	f000 fbb9 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	@ 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24000084 	.word	0x24000084
 8001644:	40022000 	.word	0x40022000
 8001648:	08600004 	.word	0x08600004

0800164c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2224      	movs	r2, #36	@ 0x24
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f009 fcb1 	bl	800afc0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800165e:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001660:	4a35      	ldr	r2, [pc, #212]	@ (8001738 <_ZL12MX_ADC3_Initv+0xec>)
 8001662:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 800166a:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800166c:	220c      	movs	r2, #12
 800166e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167c:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800167e:	2204      	movs	r2, #4
 8001680:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800168e:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001690:	2201      	movs	r2, #1
 8001692:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80016c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016d6:	4817      	ldr	r0, [pc, #92]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 80016d8:	f001 fcba 	bl	8003050 <HAL_ADC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80016ec:	f000 fb5c 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <_ZL12MX_ADC3_Initv+0xf0>)
 80016f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f4:	2306      	movs	r3, #6
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016fc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001700:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001702:	2304      	movs	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4808      	ldr	r0, [pc, #32]	@ (8001734 <_ZL12MX_ADC3_Initv+0xe8>)
 8001714:	f002 f8a4 	bl	8003860 <HAL_ADC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 8001728:	f000 fb3e 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240000f4 	.word	0x240000f4
 8001738:	58026000 	.word	0x58026000
 800173c:	1d500080 	.word	0x1d500080

08001740 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001748:	4a41      	ldr	r2, [pc, #260]	@ (8001850 <_ZL14MX_FDCAN1_Initv+0x110>)
 800174a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800174c:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001752:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001754:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800175a:	4b3c      	ldr	r3, [pc, #240]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175c:	2200      	movs	r2, #0
 800175e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001760:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001762:	2200      	movs	r2, #0
 8001764:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001766:	4b39      	ldr	r3, [pc, #228]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001768:	2200      	movs	r2, #0
 800176a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 800176c:	4b37      	ldr	r3, [pc, #220]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176e:	2206      	movs	r2, #6
 8001770:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001772:	4b36      	ldr	r3, [pc, #216]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001774:	2201      	movs	r2, #1
 8001776:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001778:	4b34      	ldr	r3, [pc, #208]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800177a:	220a      	movs	r2, #10
 800177c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001780:	2205      	movs	r2, #5
 8001782:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001784:	4b31      	ldr	r3, [pc, #196]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001786:	2201      	movs	r2, #1
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800178a:	4b30      	ldr	r3, [pc, #192]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800178c:	2201      	movs	r2, #1
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001792:	2201      	movs	r2, #1
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001798:	2201      	movs	r2, #1
 800179a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 80017a8:	4b28      	ldr	r3, [pc, #160]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017aa:	2205      	movs	r2, #5
 80017ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b0:	2220      	movs	r2, #32
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80017b4:	4b25      	ldr	r3, [pc, #148]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017bc:	2220      	movs	r2, #32
 80017be:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c2:	2204      	movs	r2, #4
 80017c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ce:	2204      	movs	r2, #4
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017da:	2220      	movs	r2, #32
 80017dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80017de:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017e0:	2220      	movs	r2, #32
 80017e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017ec:	2204      	movs	r2, #4
 80017ee:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80017f0:	4816      	ldr	r0, [pc, #88]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017f2:	f003 fa11 	bl	8004c18 <HAL_FDCAN_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 8001806:	f000 facf 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800180a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800180e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001814:	2302      	movs	r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001818:	2301      	movs	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	4808      	ldr	r0, [pc, #32]	@ (800184c <_ZL14MX_FDCAN1_Initv+0x10c>)
 800182a:	f003 fbd3 	bl	8004fd4 <HAL_FDCAN_ConfigFilter>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 800183e:	f000 fab3 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000164 	.word	0x24000164
 8001850:	4000a000 	.word	0x4000a000

08001854 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185c:	4a41      	ldr	r2, [pc, #260]	@ (8001964 <_ZL14MX_FDCAN2_Initv+0x110>)
 800185e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001860:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001866:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800186e:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001870:	2200      	movs	r2, #0
 8001872:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001874:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001876:	2200      	movs	r2, #0
 8001878:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800187a:	4b39      	ldr	r3, [pc, #228]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187c:	2200      	movs	r2, #0
 800187e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001880:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001882:	2206      	movs	r2, #6
 8001884:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001886:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001888:	2201      	movs	r2, #1
 800188a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 800188c:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800188e:	220a      	movs	r2, #10
 8001890:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001894:	2205      	movs	r2, #5
 8001896:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001898:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800189a:	2201      	movs	r2, #1
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800189e:	4b30      	ldr	r3, [pc, #192]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80018a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80018b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018be:	2205      	movs	r2, #5
 80018c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018c4:	2220      	movs	r2, #32
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ca:	2204      	movs	r2, #4
 80018cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d0:	2220      	movs	r2, #32
 80018d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018ee:	2220      	movs	r2, #32
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018f4:	2220      	movs	r2, #32
 80018f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001900:	2204      	movs	r2, #4
 8001902:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001904:	4816      	ldr	r0, [pc, #88]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001906:	f003 f987 	bl	8004c18 <HAL_FDCAN_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 800191a:	f000 fa45 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800191e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001922:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001928:	2302      	movs	r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800192c:	2301      	movs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 8001930:	2310      	movs	r3, #16
 8001932:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 8001934:	2310      	movs	r3, #16
 8001936:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4808      	ldr	r0, [pc, #32]	@ (8001960 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800193e:	f003 fb49 	bl	8004fd4 <HAL_FDCAN_ConfigFilter>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 8001952:	f000 fa29 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	24000204 	.word	0x24000204
 8001964:	4000a400 	.word	0x4000a400

08001968 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800196e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b0:	481b      	ldr	r0, [pc, #108]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019b2:	f008 f85f 	bl	8009a74 <HAL_UART_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80019c6:	f000 f9ef 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ce:	f009 fa0a 	bl	800ade6 <HAL_UARTEx_SetTxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf14      	ite	ne
 80019d8:	2301      	movne	r3, #1
 80019da:	2300      	moveq	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80019e2:	f000 f9e1 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e6:	2100      	movs	r1, #0
 80019e8:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80019ea:	f009 fa3a 	bl	800ae62 <HAL_UARTEx_SetRxFifoThreshold>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 80019fe:	f000 f9d3 	bl	8001da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a04:	f009 f9b6 	bl	800ad74 <HAL_UARTEx_DisableFifoMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001a18:	f000 f9c6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	240002a4 	.word	0x240002a4
 8001a24:	40004400 	.word	0x40004400

08001a28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	@ 0x30
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a44:	4a4e      	ldr	r2, [pc, #312]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a46:	f043 0320 	orr.w	r3, r3, #32
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5c:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	4a47      	ldr	r2, [pc, #284]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6c:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b41      	ldr	r3, [pc, #260]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a80:	4a3f      	ldr	r2, [pc, #252]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a98:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abc:	4a30      	ldr	r2, [pc, #192]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ada:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af8:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <_ZL12MX_GPIO_Initv+0x158>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	481b      	ldr	r0, [pc, #108]	@ (8001b84 <_ZL12MX_GPIO_Initv+0x15c>)
 8001b16:	f004 fc0d 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2138      	movs	r1, #56	@ 0x38
 8001b1e:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x160>)
 8001b20:	f004 fc08 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4814      	ldr	r0, [pc, #80]	@ (8001b8c <_ZL12MX_GPIO_Initv+0x164>)
 8001b3a:	f004 fa3b 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <_ZL12MX_GPIO_Initv+0x15c>)
 8001b56:	f004 fa2d 	bl	8005fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001b5a:	2338      	movs	r3, #56	@ 0x38
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <_ZL12MX_GPIO_Initv+0x160>)
 8001b72:	f004 fa1f 	bl	8005fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	@ 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	58024400 	.word	0x58024400
 8001b84:	58021800 	.word	0x58021800
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	58021000 	.word	0x58021000

08001b90 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d04b      	beq.n	8001c3c <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ba6:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f003 fb0e 	bl	80051cc <HAL_FDCAN_GetRxMessage>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02e      	beq.n	8001c1e <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bc6:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bd0:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e00c      	b.n	8001bf2 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4413      	add	r3, r2
 8001bde:	7819      	ldrb	r1, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	3305      	adds	r3, #5
 8001be8:	460a      	mov	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	ddef      	ble.n	8001bd8 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001bfe:	f000 ff2f 	bl	8002a60 <HAL_GetTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c06:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001c08:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c0a:	466c      	mov	r4, sp
 8001c0c:	f103 0210 	add.w	r2, r3, #16
 8001c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1a:	f000 fac5 	bl	80021a8 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f003 fc3e 	bl	80054a4 <HAL_FDCAN_ActivateNotification>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001c38:	f000 f8b6 	bl	8001da8 <Error_Handler>
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	240003d0 	.word	0x240003d0
 8001c48:	24000380 	.word	0x24000380
 8001c4c:	24000454 	.word	0x24000454

08001c50 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6a:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c70:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4905      	ldr	r1, [pc, #20]	@ (8001c8c <module_send_message_CAN1+0x3c>)
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <module_send_message_CAN1+0x40>)
 8001c78:	f003 fa4d 	bl	8005116 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	75fb      	strb	r3, [r7, #23]

	return status;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	24000338 	.word	0x24000338
 8001c90:	24000164 	.word	0x24000164

08001c94 <module_send_message_CAN2>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);

	return status;
}

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_EXTENDED_ID;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cae:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001cb4:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4905      	ldr	r1, [pc, #20]	@ (8001cd0 <module_send_message_CAN2+0x3c>)
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <module_send_message_CAN2+0x40>)
 8001cbc:	f003 fa2b 	bl	8005116 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	75fb      	strb	r3, [r7, #23]

	return status;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2400035c 	.word	0x2400035c
 8001cd4:	24000204 	.word	0x24000204

08001cd8 <print>:

void print(char uart_buffer[]){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4909      	ldr	r1, [pc, #36]	@ (8001d08 <print+0x30>)
 8001ce4:	4809      	ldr	r0, [pc, #36]	@ (8001d0c <print+0x34>)
 8001ce6:	f009 f949 	bl	800af7c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001cea:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <print+0x34>)
 8001cec:	f7fe fb10 	bl	8000310 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	4904      	ldr	r1, [pc, #16]	@ (8001d0c <print+0x34>)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <print+0x38>)
 8001cfc:	f007 ff0a 	bl	8009b14 <HAL_UART_Transmit>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800bbac 	.word	0x0800bbac
 8001d0c:	240003d8 	.word	0x240003d8
 8001d10:	240002a4 	.word	0x240002a4

08001d14 <printnl>:

void printnl(char uart_buffer[]){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4909      	ldr	r1, [pc, #36]	@ (8001d44 <printnl+0x30>)
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <printnl+0x34>)
 8001d22:	f009 f92b 	bl	800af7c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001d26:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <printnl+0x34>)
 8001d28:	f7fe faf2 	bl	8000310 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <printnl+0x34>)
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <printnl+0x38>)
 8001d38:	f007 feec 	bl	8009b14 <HAL_UART_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	0800bbb4 	.word	0x0800bbb4
 8001d48:	240003d8 	.word	0x240003d8
 8001d4c:	240002a4 	.word	0x240002a4

08001d50 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <getUARTState+0x10>)
 8001d56:	f007 ff6b 	bl	8009c30 <HAL_UART_GetState>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	240002a4 	.word	0x240002a4

08001d64 <readAnalogValue>:

float readAnalogValue(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001d6a:	480e      	ldr	r0, [pc, #56]	@ (8001da4 <readAnalogValue+0x40>)
 8001d6c:	f001 fb78 	bl	8003460 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <readAnalogValue+0x40>)
 8001d76:	f001 fc71 	bl	800365c <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001d7a:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <readAnalogValue+0x40>)
 8001d7c:	f001 fd62 	bl	8003844 <HAL_ADC_GetValue>
 8001d80:	ee07 0a90 	vmov	s15, r0
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001d8c:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <readAnalogValue+0x40>)
 8001d8e:	f001 fc31 	bl	80035f4 <HAL_ADC_Stop>
	return analogValue;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	ee07 3a90 	vmov	s15, r3
}
 8001d98:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000f4 	.word	0x240000f4

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <Error_Handler+0x8>
 8001db4:	0000      	movs	r0, r0
	...

08001db8 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001dd2:	f000 fe45 	bl	8002a60 <HAL_GetTick>
 8001dd6:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 8001dd8:	f000 fe42 	bl	8002a60 <HAL_GetTick>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 8001de0:	4ba7      	ldr	r3, [pc, #668]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001de6:	4ba7      	ldr	r3, [pc, #668]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001de8:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001dec:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001dee:	4ba6      	ldr	r3, [pc, #664]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e07e      	b.n	8001ef8 <_Z12select_statev+0x140>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001dfa:	4aa4      	ldr	r2, [pc, #656]	@ (800208c <_Z12select_statev+0x2d4>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a9c      	ldr	r2, [pc, #624]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a9c      	ldr	r2, [pc, #624]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f807 	bl	8000e36 <_ZN7BMS_MOD13query_voltageEmPc>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <_Z12select_statev+0x86>
		{
			state = error;
 8001e38:	4b96      	ldr	r3, [pc, #600]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	701a      	strb	r2, [r3, #0]
		}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001e3e:	4b90      	ldr	r3, [pc, #576]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e42:	4992      	ldr	r1, [pc, #584]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a89      	ldr	r2, [pc, #548]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001e5c:	4a8b      	ldr	r2, [pc, #556]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b84      	ldr	r3, [pc, #528]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	da0b      	bge.n	8001e90 <_Z12select_statev+0xd8>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001e78:	4a84      	ldr	r2, [pc, #528]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001e8e:	6013      	str	r3, [r2, #0]

		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800208c <_Z12select_statev+0x2d4>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f836 	bl	8000f14 <_ZN7BMS_MOD17query_temperatureEmPc>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_Z12select_statev+0x106>
			state = error;
 8001eb8:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001eba:	2204      	movs	r2, #4
 8001ebc:	701a      	strb	r2, [r3, #0]
		}

		if (BMS[i].MAX_T > MAX_T)
 8001ebe:	4a73      	ldr	r2, [pc, #460]	@ (800208c <_Z12select_statev+0x2d4>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dd0b      	ble.n	8001ef2 <_Z12select_statev+0x13a>
			MAX_T = BMS[i].MAX_T;
 8001eda:	4a6c      	ldr	r2, [pc, #432]	@ (800208c <_Z12select_statev+0x2d4>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a66      	ldr	r2, [pc, #408]	@ (8002088 <_Z12select_statev+0x2d0>)
 8001ef0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	4b67      	ldr	r3, [pc, #412]	@ (8002098 <_Z12select_statev+0x2e0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	f6ff af7b 	blt.w	8001dfa <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 8001f04:	4b65      	ldr	r3, [pc, #404]	@ (800209c <_Z12select_statev+0x2e4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd23      	ble.n	8001f5a <_Z12select_statev+0x1a2>
		message_MINV[1] = MIN_V & 0xFF;
 8001f12:	4b5c      	ldr	r3, [pc, #368]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b61      	ldr	r3, [pc, #388]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f1a:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	121b      	asrs	r3, r3, #8
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b5e      	ldr	r3, [pc, #376]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f26:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 8001f28:	4b58      	ldr	r3, [pc, #352]	@ (800208c <_Z12select_statev+0x2d4>)
 8001f2a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d010      	beq.n	8001f54 <_Z12select_statev+0x19c>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8001f32:	2202      	movs	r2, #2
 8001f34:	495a      	ldr	r1, [pc, #360]	@ (80020a0 <_Z12select_statev+0x2e8>)
 8001f36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f3a:	f7ff fe89 	bl	8001c50 <module_send_message_CAN1>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <_Z12select_statev+0x19c>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8001f4e:	4855      	ldr	r0, [pc, #340]	@ (80020a4 <_Z12select_statev+0x2ec>)
 8001f50:	f7ff fec2 	bl	8001cd8 <print>
		}
		time_sending_minV = time_s;
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <_Z12select_statev+0x2e4>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00e      	b.n	8001f7e <_Z12select_statev+0x1c6>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001f60:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <_Z12select_statev+0x2cc>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4949      	ldr	r1, [pc, #292]	@ (800208c <_Z12select_statev+0x2d4>)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f44f 70b6 	mov.w	r0, #364	@ 0x16c
 8001f6c:	fb00 f303 	mul.w	r3, r0, r3
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8001f76:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <_Z12select_statev+0x2e0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbeb      	blt.n	8001f60 <_Z12select_statev+0x1a8>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001f88:	4a41      	ldr	r2, [pc, #260]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	483c      	ldr	r0, [pc, #240]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001f8e:	f7ff f8b7 	bl	8001100 <_ZN7CPU_MOD5queryEmPc>
 8001f92:	6138      	str	r0, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	@ (8002090 <_Z12select_statev+0x2d8>)
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4843      	ldr	r0, [pc, #268]	@ (80020a8 <_Z12select_statev+0x2f0>)
 8001f9c:	f7ff f942 	bl	8001224 <_ZN11Current_MOD5queryEiPc>
 8001fa0:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	f200 80bd 	bhi.w	8002126 <_Z12select_statev+0x36e>
 8001fac:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <_Z12select_statev+0x1fc>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc9 	.word	0x08001fc9
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	0800201f 	.word	0x0800201f
 8001fc0:	080020b1 	.word	0x080020b1
 8001fc4:	08002107 	.word	0x08002107
	case start:
		state_air_n = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	482a      	ldr	r0, [pc, #168]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001fd8:	f7ff f8c4 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	f000 809c 	beq.w	800211c <_Z12select_statev+0x364>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <_Z12select_statev+0x2dc>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
		break;
 8001fea:	e097      	b.n	800211c <_Z12select_statev+0x364>
	case precharge:
		state_air_n = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4821      	ldr	r0, [pc, #132]	@ (8002080 <_Z12select_statev+0x2c8>)
 8001ffc:	f7ff f8b2 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <_Z12select_statev+0x256>
			state = transition;
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <_Z12select_statev+0x2dc>)
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 800200c:	e088      	b.n	8002120 <_Z12select_statev+0x368>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f040 8085 	bne.w	8002120 <_Z12select_statev+0x368>
			state = error;
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <_Z12select_statev+0x2dc>)
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
		break;
 800201c:	e080      	b.n	8002120 <_Z12select_statev+0x368>
	case transition:
		state_air_n = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 800202a:	2101      	movs	r1, #1
 800202c:	4814      	ldr	r0, [pc, #80]	@ (8002080 <_Z12select_statev+0x2c8>)
 800202e:	f7ff f899 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS)){//&&(CPU.voltage_acum != 0)){
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <_Z12select_statev+0x2c8>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <_Z12select_statev+0x2f4>)
 8002038:	fb82 1203 	smull	r1, r2, r2, r3
 800203c:	1192      	asrs	r2, r2, #6
 800203e:	17db      	asrs	r3, r3, #31
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800204a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002078 <_Z12select_statev+0x2c0>
 800204e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <_Z12select_statev+0x2c8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800205e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d400      	bmi.n	800206a <_Z12select_statev+0x2b2>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		// else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		// else if(flag_current != Current_OK) state = error;
		}
		break;
 8002068:	e05d      	b.n	8002126 <_Z12select_statev+0x36e>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <_Z12select_statev+0x2dc>)
 800206c:	2203      	movs	r2, #3
 800206e:	701a      	strb	r2, [r3, #0]
		break;
 8002070:	e059      	b.n	8002126 <_Z12select_statev+0x36e>
 8002072:	bf00      	nop
 8002074:	f3af 8000 	nop.w
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	3feccccc 	.word	0x3feccccc
 8002080:	24000b94 	.word	0x24000b94
 8002084:	24000004 	.word	0x24000004
 8002088:	24000b88 	.word	0x24000b88
 800208c:	2400046c 	.word	0x2400046c
 8002090:	24000c14 	.word	0x24000c14
 8002094:	24000c10 	.word	0x24000c10
 8002098:	24000000 	.word	0x24000000
 800209c:	24000b90 	.word	0x24000b90
 80020a0:	24000b8c 	.word	0x24000b8c
 80020a4:	0800bbc0 	.word	0x0800bbc0
 80020a8:	24000bcc 	.word	0x24000bcc
 80020ac:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 80020bc:	2100      	movs	r1, #0
 80020be:	4832      	ldr	r0, [pc, #200]	@ (8002188 <_Z12select_statev+0x3d0>)
 80020c0:	f7ff f850 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d109      	bne.n	80020de <_Z12select_statev+0x326>
 80020ca:	4b30      	ldr	r3, [pc, #192]	@ (800218c <_Z12select_statev+0x3d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <_Z12select_statev+0x326>
			state = error; //If I disconnect the charger, error
 80020d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <_Z12select_statev+0x3d8>)
 80020d4:	2204      	movs	r2, #4
 80020d6:	701a      	strb	r2, [r3, #0]
			print((char*)"CPU");
 80020d8:	482e      	ldr	r0, [pc, #184]	@ (8002194 <_Z12select_statev+0x3dc>)
 80020da:	f7ff fdfd 	bl	8001cd8 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 80020de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020e2:	482d      	ldr	r0, [pc, #180]	@ (8002198 <_Z12select_statev+0x3e0>)
 80020e4:	f004 f90e 	bl	8006304 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <_Z12select_statev+0x36c>
			state = error;
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <_Z12select_statev+0x3d8>)
 80020fa:	2204      	movs	r2, #4
 80020fc:	701a      	strb	r2, [r3, #0]
			print((char*)"DIGITAL");
 80020fe:	4827      	ldr	r0, [pc, #156]	@ (800219c <_Z12select_statev+0x3e4>)
 8002100:	f7ff fdea 	bl	8001cd8 <print>
		}
		break;
 8002104:	e00e      	b.n	8002124 <_Z12select_statev+0x36c>
	case error:
		state_air_n = 0; //All relés closed
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8002112:	2103      	movs	r1, #3
 8002114:	481c      	ldr	r0, [pc, #112]	@ (8002188 <_Z12select_statev+0x3d0>)
 8002116:	f7ff f825 	bl	8001164 <_ZN7CPU_MOD11updateStateEi>
		break;
 800211a:	e004      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 800211c:	bf00      	nop
 800211e:	e002      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 8002120:	bf00      	nop
 8002122:	e000      	b.n	8002126 <_Z12select_statev+0x36e>
		break;
 8002124:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <_Z12select_statev+0x378>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <_Z12select_statev+0x37a>
 8002130:	2300      	movs	r3, #0
 8002132:	461a      	mov	r2, r3
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	481a      	ldr	r0, [pc, #104]	@ (80021a0 <_Z12select_statev+0x3e8>)
 8002138:	f004 f8fc 	bl	8006334 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_Z12select_statev+0x38e>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <_Z12select_statev+0x390>
 8002146:	2300      	movs	r3, #0
 8002148:	461a      	mov	r2, r3
 800214a:	2108      	movs	r1, #8
 800214c:	4815      	ldr	r0, [pc, #84]	@ (80021a4 <_Z12select_statev+0x3ec>)
 800214e:	f004 f8f1 	bl	8006334 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <_Z12select_statev+0x3a4>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <_Z12select_statev+0x3a6>
 800215c:	2300      	movs	r3, #0
 800215e:	461a      	mov	r2, r3
 8002160:	2110      	movs	r1, #16
 8002162:	4810      	ldr	r0, [pc, #64]	@ (80021a4 <_Z12select_statev+0x3ec>)
 8002164:	f004 f8e6 	bl	8006334 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <_Z12select_statev+0x3ba>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <_Z12select_statev+0x3bc>
 8002172:	2300      	movs	r3, #0
 8002174:	461a      	mov	r2, r3
 8002176:	2120      	movs	r1, #32
 8002178:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <_Z12select_statev+0x3ec>)
 800217a:	f004 f8db 	bl	8006334 <HAL_GPIO_WritePin>
		printnl((char*)"Relee Prec:");
		printValue(state_precharge);
	}


}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	24000b94 	.word	0x24000b94
 800218c:	24000bc8 	.word	0x24000bc8
 8002190:	24000c10 	.word	0x24000c10
 8002194:	0800bbe0 	.word	0x0800bbe0
 8002198:	58021000 	.word	0x58021000
 800219c:	0800bbe4 	.word	0x0800bbe4
 80021a0:	58021800 	.word	0x58021800
 80021a4:	58020c00 	.word	0x58020c00

080021a8 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 80021a8:	b084      	sub	sp, #16
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f107 0c18 	add.w	ip, r7, #24
 80021b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 80021b8:	f000 fc52 	bl	8002a60 <HAL_GetTick>
 80021bc:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	e017      	b.n	80021f8 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	4a26      	ldr	r2, [pc, #152]	@ (800226c <_Z11parse_state6CANMsg+0xc4>)
 80021d4:	1898      	adds	r0, r3, r2
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	f107 021d 	add.w	r2, r7, #29
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f7fe fc9d 	bl	8000b1c <_ZN7BMS_MOD5parseEmPhm>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbe2      	blt.n	80021c8 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d026      	beq.n	800225c <_Z11parse_state6CANMsg+0xb4>
		if (CPU.parse(data.id, &data.buf[0], time))
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f107 021d 	add.w	r2, r7, #29
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <_Z11parse_state6CANMsg+0xcc>)
 8002218:	f7fe ff2e 	bl	8001078 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <_Z11parse_state6CANMsg+0xd0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d11b      	bne.n	800225c <_Z11parse_state6CANMsg+0xb4>
				{
			for (int i = 0; i < BMS_N; i++) {
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e00d      	b.n	8002246 <_Z11parse_state6CANMsg+0x9e>
				BMS[i].flag_charger = 1;
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <_Z11parse_state6CANMsg+0xc4>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <_Z11parse_state6CANMsg+0xc8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbec      	blt.n	800222a <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <_Z11parse_state6CANMsg+0xd4>)
 8002252:	2201      	movs	r2, #1
 8002254:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8002256:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <_Z11parse_state6CANMsg+0xd8>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002266:	b004      	add	sp, #16
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	2400046c 	.word	0x2400046c
 8002270:	24000000 	.word	0x24000000
 8002274:	24000b94 	.word	0x24000b94
 8002278:	18ff50e7 	.word	0x18ff50e7
 800227c:	24000bcc 	.word	0x24000bcc
 8002280:	24000bc8 	.word	0x24000bc8

08002284 <_Z41__static_initialization_and_destruction_0v>:
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af04      	add	r7, sp, #16
		};
 800228a:	4c3a      	ldr	r4, [pc, #232]	@ (8002374 <_Z41__static_initialization_and_destruction_0v+0xf0>)
 800228c:	2300      	movs	r3, #0
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	2313      	movs	r3, #19
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	233c      	movs	r3, #60	@ 0x3c
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022a2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022a6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7fe fa1e 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 80022b0:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 80022b4:	2332      	movs	r3, #50	@ 0x32
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	2313      	movs	r3, #19
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	233c      	movs	r3, #60	@ 0x3c
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022ca:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022ce:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7fe fa0a 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 80022d8:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 80022dc:	2364      	movs	r3, #100	@ 0x64
 80022de:	9303      	str	r3, [sp, #12]
 80022e0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2313      	movs	r3, #19
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	233c      	movs	r3, #60	@ 0x3c
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80022f2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80022f6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7fe f9f6 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002300:	f504 74b6 	add.w	r4, r4, #364	@ 0x16c
 8002304:	2396      	movs	r3, #150	@ 0x96
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2313      	movs	r3, #19
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	233c      	movs	r3, #60	@ 0x3c
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800231a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800231e:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8002322:	4620      	mov	r0, r4
 8002324:	f7fe f9e2 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
 8002328:	f504 70b6 	add.w	r0, r4, #364	@ 0x16c
 800232c:	23c8      	movs	r3, #200	@ 0xc8
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2313      	movs	r3, #19
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	233c      	movs	r3, #60	@ 0x3c
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002342:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002346:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800234a:	f7fe f9cf 	bl	80006ec <_ZN7BMS_MODC1Emiiihji>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 800234e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002356:	2120      	movs	r1, #32
 8002358:	4807      	ldr	r0, [pc, #28]	@ (8002378 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 800235a:	f7fe fe3b 	bl	8000fd4 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 800235e:	22c8      	movs	r2, #200	@ 0xc8
 8002360:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <_Z41__static_initialization_and_destruction_0v+0xf8>)
 8002366:	f7fe ff0f 	bl	8001188 <_ZN11Current_MODC1Emi>
}
 800236a:	bf00      	nop
 800236c:	3704      	adds	r7, #4
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	2400046c 	.word	0x2400046c
 8002378:	24000b94 	.word	0x24000b94
 800237c:	24000bcc 	.word	0x24000bcc

08002380 <_GLOBAL__sub_I_BMS>:
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
 8002384:	f7ff ff7e 	bl	8002284 <_Z41__static_initialization_and_destruction_0v>
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_MspInit+0x30>)
 8002394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002398:	4a08      	ldr	r2, [pc, #32]	@ (80023bc <HAL_MspInit+0x30>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_MspInit+0x30>)
 80023a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58024400 	.word	0x58024400

080023c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a31      	ldr	r2, [pc, #196]	@ (80024a4 <HAL_ADC_MspInit+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12b      	bne.n	800243a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b31      	ldr	r3, [pc, #196]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a2f      	ldr	r2, [pc, #188]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800241e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002424:	2303      	movs	r3, #3
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	481e      	ldr	r0, [pc, #120]	@ (80024ac <HAL_ADC_MspInit+0xec>)
 8002434:	f003 fdbe 	bl	8005fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002438:	e02f      	b.n	800249a <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_ADC_MspInit+0xf0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12a      	bne.n	800249a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002444:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 800244c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800245a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_ADC_MspInit+0xe8>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_ADC_MspInit+0xec>)
 8002496:	f003 fd8d 	bl	8005fb4 <HAL_GPIO_Init>
}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	@ 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40022000 	.word	0x40022000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58021400 	.word	0x58021400
 80024b0:	58026000 	.word	0x58026000

080024b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0ba      	sub	sp, #232	@ 0xe8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	22b8      	movs	r2, #184	@ 0xb8
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f008 fd73 	bl	800afc0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5a      	ldr	r2, [pc, #360]	@ (8002648 <HAL_FDCAN_MspInit+0x194>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d157      	bne.n	8002594 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 fed4 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002506:	f7ff fc4f 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800250a:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a4e      	ldr	r2, [pc, #312]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 8002512:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002514:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10e      	bne.n	800253a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800251c:	4b4c      	ldr	r3, [pc, #304]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 800251e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002522:	4a4b      	ldr	r2, [pc, #300]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002528:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800252c:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 800252e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800253a:	4b45      	ldr	r3, [pc, #276]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002540:	4a43      	ldr	r2, [pc, #268]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002558:	2303      	movs	r3, #3
 800255a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002570:	2309      	movs	r3, #9
 8002572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002576:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800257a:	4619      	mov	r1, r3
 800257c:	4835      	ldr	r0, [pc, #212]	@ (8002654 <HAL_FDCAN_MspInit+0x1a0>)
 800257e:	f003 fd19 	bl	8005fb4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2013      	movs	r0, #19
 8002588:	f002 fb11 	bl	8004bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800258c:	2013      	movs	r0, #19
 800258e:	f002 fb28 	bl	8004be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002592:	e054      	b.n	800263e <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <HAL_FDCAN_MspInit+0x1a4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d14f      	bne.n	800263e <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800259e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 fe77 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80025c0:	f7ff fbf2 	bl	8001da8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a20      	ldr	r2, [pc, #128]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 80025cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025ce:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_FDCAN_MspInit+0x198>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10e      	bne.n	80025f4 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 80025d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 80025e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fa:	4a15      	ldr	r2, [pc, #84]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_FDCAN_MspInit+0x19c>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002612:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800262c:	2309      	movs	r3, #9
 800262e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	@ (800265c <HAL_FDCAN_MspInit+0x1a8>)
 800263a:	f003 fcbb 	bl	8005fb4 <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	37e8      	adds	r7, #232	@ 0xe8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	4000a000 	.word	0x4000a000
 800264c:	24000c64 	.word	0x24000c64
 8002650:	58024400 	.word	0x58024400
 8002654:	58020c00 	.word	0x58020c00
 8002658:	4000a400 	.word	0x4000a400
 800265c:	58020400 	.word	0x58020400

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0b8      	sub	sp, #224	@ 0xe0
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	22b8      	movs	r2, #184	@ 0xb8
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f008 fc9d 	bl	800afc0 <memset>
  if(huart->Instance==USART2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <HAL_UART_MspInit+0xc4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d145      	bne.n	800271c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002690:	f04f 0202 	mov.w	r2, #2
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fdfe 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026b2:	f7ff fb79 	bl	8001da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026c6:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026da:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_UART_MspInit+0xc8>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f2:	230c      	movs	r3, #12
 80026f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270a:	2307      	movs	r3, #7
 800270c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002714:	4619      	mov	r1, r3
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <HAL_UART_MspInit+0xcc>)
 8002718:	f003 fc4c 	bl	8005fb4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800271c:	bf00      	nop
 800271e:	37e0      	adds	r7, #224	@ 0xe0
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40004400 	.word	0x40004400
 8002728:	58024400 	.word	0x58024400
 800272c:	58020000 	.word	0x58020000

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <NMI_Handler+0x4>

08002738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <HardFault_Handler+0x4>

08002740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <MemManage_Handler+0x4>

08002748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <UsageFault_Handler+0x4>

08002758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002786:	f000 f957 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <FDCAN1_IT0_IRQHandler+0x10>)
 8002796:	f002 feff 	bl	8005598 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	24000164 	.word	0x24000164

080027a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ac:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <_sbrk+0x5c>)
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <_sbrk+0x60>)
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <_sbrk+0x64>)
 80027c2:	4a12      	ldr	r2, [pc, #72]	@ (800280c <_sbrk+0x68>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d4:	f008 fbfc 	bl	800afd0 <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	220c      	movs	r2, #12
 80027dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e009      	b.n	80027f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ea:	4b07      	ldr	r3, [pc, #28]	@ (8002808 <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <_sbrk+0x64>)
 80027f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	24050000 	.word	0x24050000
 8002804:	00000400 	.word	0x00000400
 8002808:	24000c68 	.word	0x24000c68
 800280c:	24000db8 	.word	0x24000db8

08002810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002814:	4b32      	ldr	r3, [pc, #200]	@ (80028e0 <SystemInit+0xd0>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	4a31      	ldr	r2, [pc, #196]	@ (80028e0 <SystemInit+0xd0>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002824:	4b2f      	ldr	r3, [pc, #188]	@ (80028e4 <SystemInit+0xd4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b06      	cmp	r3, #6
 800282e:	d807      	bhi.n	8002840 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002830:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <SystemInit+0xd4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 030f 	bic.w	r3, r3, #15
 8002838:	4a2a      	ldr	r2, [pc, #168]	@ (80028e4 <SystemInit+0xd4>)
 800283a:	f043 0307 	orr.w	r3, r3, #7
 800283e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002840:	4b29      	ldr	r3, [pc, #164]	@ (80028e8 <SystemInit+0xd8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <SystemInit+0xd8>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800284c:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <SystemInit+0xd8>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <SystemInit+0xd8>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4924      	ldr	r1, [pc, #144]	@ (80028e8 <SystemInit+0xd8>)
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <SystemInit+0xdc>)
 800285a:	4013      	ands	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <SystemInit+0xd4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800286a:	4b1e      	ldr	r3, [pc, #120]	@ (80028e4 <SystemInit+0xd4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 030f 	bic.w	r3, r3, #15
 8002872:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <SystemInit+0xd4>)
 8002874:	f043 0307 	orr.w	r3, r3, #7
 8002878:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <SystemInit+0xd8>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <SystemInit+0xd8>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002886:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <SystemInit+0xd8>)
 8002888:	2200      	movs	r2, #0
 800288a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <SystemInit+0xd8>)
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <SystemInit+0xe0>)
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <SystemInit+0xd8>)
 8002894:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <SystemInit+0xe4>)
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <SystemInit+0xd8>)
 800289a:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <SystemInit+0xe8>)
 800289c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <SystemInit+0xd8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028a4:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <SystemInit+0xd8>)
 80028a6:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <SystemInit+0xe8>)
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <SystemInit+0xd8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <SystemInit+0xd8>)
 80028b2:	4a11      	ldr	r2, [pc, #68]	@ (80028f8 <SystemInit+0xe8>)
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <SystemInit+0xd8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <SystemInit+0xd8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <SystemInit+0xd8>)
 80028c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <SystemInit+0xd8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <SystemInit+0xec>)
 80028d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00
 80028e4:	52002000 	.word	0x52002000
 80028e8:	58024400 	.word	0x58024400
 80028ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80028f0:	02020200 	.word	0x02020200
 80028f4:	01ff0000 	.word	0x01ff0000
 80028f8:	01010280 	.word	0x01010280
 80028fc:	52004000 	.word	0x52004000

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002904:	f7ff ff84 	bl	8002810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480c      	ldr	r0, [pc, #48]	@ (800293c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290a:	490d      	ldr	r1, [pc, #52]	@ (8002940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002920:	4c0a      	ldr	r4, [pc, #40]	@ (800294c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800292e:	f008 fb55 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7fe fcad 	bl	8001290 <main>
  bx  lr
 8002936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002938:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800293c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002940:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002944:	0800bcc8 	.word	0x0800bcc8
  ldr r2, =_sbss
 8002948:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800294c:	24000db8 	.word	0x24000db8

08002950 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC3_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295a:	2003      	movs	r0, #3
 800295c:	f002 f91c 	bl	8004b98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002960:	f004 facc 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <HAL_Init+0x68>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4913      	ldr	r1, [pc, #76]	@ (80029c0 <HAL_Init+0x6c>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800297e:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_Init+0x68>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <HAL_Init+0x6c>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <HAL_Init+0x70>)
 8002996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <HAL_Init+0x74>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 f814 	bl	80029cc <HAL_InitTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e002      	b.n	80029b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ae:	f7ff fced 	bl	800238c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	58024400 	.word	0x58024400
 80029c0:	0800bc38 	.word	0x0800bc38
 80029c4:	2400000c 	.word	0x2400000c
 80029c8:	24000008 	.word	0x24000008

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_InitTick+0x60>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e021      	b.n	8002a24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <HAL_InitTick+0x64>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_InitTick+0x60>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 f901 	bl	8004bfe <HAL_SYSTICK_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00e      	b.n	8002a24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d80a      	bhi.n	8002a22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f002 f8cb 	bl	8004bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <HAL_InitTick+0x68>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	24000014 	.word	0x24000014
 8002a30:	24000008 	.word	0x24000008
 8002a34:	24000010 	.word	0x24000010

08002a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_IncTick+0x20>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x24>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_IncTick+0x24>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	24000014 	.word	0x24000014
 8002a5c:	24000c6c 	.word	0x24000c6c

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_GetTick+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	24000c6c 	.word	0x24000c6c

08002a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <LL_ADC_SetOffset+0x60>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10b      	bne.n	8002b1c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b1a:	e00b      	b.n	8002b34 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	58026000 	.word	0x58026000

08002b44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3360      	adds	r3, #96	@ 0x60
 8002b52:	461a      	mov	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	611a      	str	r2, [r3, #16]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3360      	adds	r3, #96	@ 0x60
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	58026000 	.word	0x58026000

08002be8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c28 <LL_ADC_SetOffsetSaturation+0x40>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10e      	bne.n	8002c1a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3360      	adds	r3, #96	@ 0x60
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	58026000 	.word	0x58026000

08002c2c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c6c <LL_ADC_SetOffsetSign+0x40>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10e      	bne.n	8002c5e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3360      	adds	r3, #96	@ 0x60
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	58026000 	.word	0x58026000

08002c70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3360      	adds	r3, #96	@ 0x60
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <LL_ADC_SetOffsetState+0x50>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ca2:	e007      	b.n	8002cb4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	58026000 	.word	0x58026000

08002cc4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3330      	adds	r3, #48	@ 0x30
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	211f      	movs	r1, #31
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	f003 011f 	and.w	r1, r3, #31
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	431a      	orrs	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3314      	adds	r3, #20
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	0e5b      	lsrs	r3, r3, #25
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	0d1b      	lsrs	r3, r3, #20
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2107      	movs	r1, #7
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	0d1b      	lsrs	r3, r3, #20
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	431a      	orrs	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d115      	bne.n	8002dd8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0318 	and.w	r3, r3, #24
 8002dc2:	4914      	ldr	r1, [pc, #80]	@ (8002e14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dc4:	40d9      	lsrs	r1, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	400b      	ands	r3, r1
 8002dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002dd6:	e014      	b.n	8002e02 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0318 	and.w	r3, r3, #24
 8002dee:	4909      	ldr	r1, [pc, #36]	@ (8002e14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	400b      	ands	r3, r1
 8002df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	58026000 	.word	0x58026000
 8002e14:	000fffff 	.word	0x000fffff

08002e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6093      	str	r3, [r2, #8]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	5fffffc0 	.word	0x5fffffc0

08002e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	6fffffc0 	.word	0x6fffffc0

08002ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed8:	d101      	bne.n	8002ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <LL_ADC_Enable+0x24>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	7fffffc0 	.word	0x7fffffc0

08002f14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <LL_ADC_Disable+0x24>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	7fffffc0 	.word	0x7fffffc0

08002f3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <LL_ADC_IsEnabled+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_ADC_IsEnabled+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d101      	bne.n	8002f7a <LL_ADC_IsDisableOngoing+0x18>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <LL_ADC_IsDisableOngoing+0x1a>
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <LL_ADC_REG_StartConversion+0x24>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	7fffffc0 	.word	0x7fffffc0

08002fb0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <LL_ADC_REG_StopConversion+0x24>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	7fffffc0 	.word	0x7fffffc0

08002fd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <LL_ADC_INJ_StopConversion+0x24>)
 800300e:	4013      	ands	r3, r2
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	7fffffc0 	.word	0x7fffffc0

08003028 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d101      	bne.n	8003040 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b089      	sub	sp, #36	@ 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1ee      	b.n	8003448 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff f9a1 	bl	80023c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff feef 	bl	8002e74 <LL_ADC_IsDeepPowerDownEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fed5 	bl	8002e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff0a 	bl	8002ec4 <LL_ADC_IsInternalRegulatorEnabled>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d114      	bne.n	80030e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff feee 	bl	8002e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c0:	4b8e      	ldr	r3, [pc, #568]	@ (80032fc <HAL_ADC_Init+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	4a8e      	ldr	r2, [pc, #568]	@ (8003300 <HAL_ADC_Init+0x2b0>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030d2:	e002      	b.n	80030da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f9      	bne.n	80030d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff feed 	bl	8002ec4 <LL_ADC_IsInternalRegulatorEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10d      	bne.n	800310c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff61 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 8003116:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 8188 	bne.w	8003436 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 8184 	bne.w	8003436 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003132:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fefa 	bl	8002f3c <LL_ADC_IsEnabled>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d136      	bne.n	80031bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6c      	ldr	r2, [pc, #432]	@ (8003304 <HAL_ADC_Init+0x2b4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_ADC_Init+0x112>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6a      	ldr	r2, [pc, #424]	@ (8003308 <HAL_ADC_Init+0x2b8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10e      	bne.n	8003180 <HAL_ADC_Init+0x130>
 8003162:	4868      	ldr	r0, [pc, #416]	@ (8003304 <HAL_ADC_Init+0x2b4>)
 8003164:	f7ff feea 	bl	8002f3c <LL_ADC_IsEnabled>
 8003168:	4604      	mov	r4, r0
 800316a:	4867      	ldr	r0, [pc, #412]	@ (8003308 <HAL_ADC_Init+0x2b8>)
 800316c:	f7ff fee6 	bl	8002f3c <LL_ADC_IsEnabled>
 8003170:	4603      	mov	r3, r0
 8003172:	4323      	orrs	r3, r4
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e008      	b.n	8003192 <HAL_ADC_Init+0x142>
 8003180:	4862      	ldr	r0, [pc, #392]	@ (800330c <HAL_ADC_Init+0x2bc>)
 8003182:	f7ff fedb 	bl	8002f3c <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d012      	beq.n	80031bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5a      	ldr	r2, [pc, #360]	@ (8003304 <HAL_ADC_Init+0x2b4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_ADC_Init+0x15a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_ADC_Init+0x2b8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_Init+0x15e>
 80031aa:	4a59      	ldr	r2, [pc, #356]	@ (8003310 <HAL_ADC_Init+0x2c0>)
 80031ac:	e000      	b.n	80031b0 <HAL_ADC_Init+0x160>
 80031ae:	4a59      	ldr	r2, [pc, #356]	@ (8003314 <HAL_ADC_Init+0x2c4>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f7ff fc5e 	bl	8002a78 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a52      	ldr	r2, [pc, #328]	@ (800330c <HAL_ADC_Init+0x2bc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d129      	bne.n	800321a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7e5b      	ldrb	r3, [r3, #25]
 80031ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80031d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d013      	beq.n	8003208 <HAL_ADC_Init+0x1b8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d00d      	beq.n	8003204 <HAL_ADC_Init+0x1b4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b1c      	cmp	r3, #28
 80031ee:	d007      	beq.n	8003200 <HAL_ADC_Init+0x1b0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b18      	cmp	r3, #24
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_Init+0x1ac>
 80031f8:	2318      	movs	r3, #24
 80031fa:	e006      	b.n	800320a <HAL_ADC_Init+0x1ba>
 80031fc:	2300      	movs	r3, #0
 80031fe:	e004      	b.n	800320a <HAL_ADC_Init+0x1ba>
 8003200:	2310      	movs	r3, #16
 8003202:	e002      	b.n	800320a <HAL_ADC_Init+0x1ba>
 8003204:	2308      	movs	r3, #8
 8003206:	e000      	b.n	800320a <HAL_ADC_Init+0x1ba>
 8003208:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800320a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003212:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e00e      	b.n	8003238 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7e5b      	ldrb	r3, [r3, #25]
 800321e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003224:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800322a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003232:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	3b01      	subs	r3, #1
 8003248:	045b      	lsls	r3, r3, #17
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a26      	ldr	r2, [pc, #152]	@ (800330c <HAL_ADC_Init+0x2bc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d115      	bne.n	80032a2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b26      	ldr	r3, [pc, #152]	@ (8003318 <HAL_ADC_Init+0x2c8>)
 800327e:	4013      	ands	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	69b9      	ldr	r1, [r7, #24]
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	e009      	b.n	80032b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <HAL_ADC_Init+0x2cc>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	430b      	orrs	r3, r1
 80032b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe8c 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 80032c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff feae 	bl	8003028 <LL_ADC_INJ_IsConversionOngoing>
 80032cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 808e 	bne.w	80033f2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 808a 	bne.w	80033f2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <HAL_ADC_Init+0x2bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d11b      	bne.n	8003320 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7e1b      	ldrb	r3, [r3, #24]
 80032ec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e018      	b.n	800332e <HAL_ADC_Init+0x2de>
 80032fc:	24000008 	.word	0x24000008
 8003300:	053e2d63 	.word	0x053e2d63
 8003304:	40022000 	.word	0x40022000
 8003308:	40022100 	.word	0x40022100
 800330c:	58026000 	.word	0x58026000
 8003310:	40022300 	.word	0x40022300
 8003314:	58026300 	.word	0x58026300
 8003318:	fff04007 	.word	0xfff04007
 800331c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7e1b      	ldrb	r3, [r3, #24]
 8003324:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_ADC_Init+0x400>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	430b      	orrs	r3, r1
 8003340:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003348:	2b01      	cmp	r3, #1
 800334a:	d137      	bne.n	80033bc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3f      	ldr	r2, [pc, #252]	@ (8003454 <HAL_ADC_Init+0x404>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d116      	bne.n	800338a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	4b3d      	ldr	r3, [pc, #244]	@ (8003458 <HAL_ADC_Init+0x408>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800337a:	430a      	orrs	r2, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	611a      	str	r2, [r3, #16]
 8003388:	e020      	b.n	80033cc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_ADC_Init+0x40c>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003398:	3a01      	subs	r2, #1
 800339a:	0411      	lsls	r1, r2, #16
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80033ac:	430a      	orrs	r2, r1
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	611a      	str	r2, [r3, #16]
 80033ba:	e007      	b.n	80033cc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_ADC_Init+0x404>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d002      	beq.n	80033f2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 f90d 	bl	800460c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10c      	bne.n	8003414 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	f023 010f 	bic.w	r1, r3, #15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	1e5a      	subs	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
 8003412:	e007      	b.n	8003424 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 020f 	bic.w	r2, r2, #15
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	f023 0303 	bic.w	r3, r3, #3
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
 8003434:	e007      	b.n	8003446 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003446:	7ffb      	ldrb	r3, [r7, #31]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3724      	adds	r7, #36	@ 0x24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	ffffbffc 	.word	0xffffbffc
 8003454:	58026000 	.word	0x58026000
 8003458:	fc00f81f 	.word	0xfc00f81f
 800345c:	fc00f81e 	.word	0xfc00f81e

08003460 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5c      	ldr	r2, [pc, #368]	@ (80035e0 <HAL_ADC_Start+0x180>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_ADC_Start+0x1c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5b      	ldr	r2, [pc, #364]	@ (80035e4 <HAL_ADC_Start+0x184>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_ADC_Start+0x20>
 800347c:	4b5a      	ldr	r3, [pc, #360]	@ (80035e8 <HAL_ADC_Start+0x188>)
 800347e:	e000      	b.n	8003482 <HAL_ADC_Start+0x22>
 8003480:	4b5a      	ldr	r3, [pc, #360]	@ (80035ec <HAL_ADC_Start+0x18c>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fcc8 	bl	8002e18 <LL_ADC_GetMultimode>
 8003488:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fda2 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 809a 	bne.w	80035d0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Start+0x4a>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e095      	b.n	80035d6 <HAL_ADC_Start+0x176>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ffc0 	bl	8004438 <ADC_Enable>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 8081 	bne.w	80035c6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <HAL_ADC_Start+0x190>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a42      	ldr	r2, [pc, #264]	@ (80035e4 <HAL_ADC_Start+0x184>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d002      	beq.n	80034e4 <HAL_ADC_Start+0x84>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_Start+0x86>
 80034e4:	4b3e      	ldr	r3, [pc, #248]	@ (80035e0 <HAL_ADC_Start+0x180>)
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d002      	beq.n	80034f4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350c:	d106      	bne.n	800351c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003512:	f023 0206 	bic.w	r2, r3, #6
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	665a      	str	r2, [r3, #100]	@ 0x64
 800351a:	e002      	b.n	8003522 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	221c      	movs	r2, #28
 8003528:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2b      	ldr	r2, [pc, #172]	@ (80035e4 <HAL_ADC_Start+0x184>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d002      	beq.n	8003542 <HAL_ADC_Start+0xe2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e000      	b.n	8003544 <HAL_ADC_Start+0xe4>
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <HAL_ADC_Start+0x180>)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	4293      	cmp	r3, r2
 800354a:	d008      	beq.n	800355e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d002      	beq.n	800355e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b09      	cmp	r3, #9
 800355c:	d114      	bne.n	8003588 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003570:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003574:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fd01 	bl	8002f88 <LL_ADC_REG_StartConversion>
 8003586:	e025      	b.n	80035d4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <HAL_ADC_Start+0x184>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d002      	beq.n	80035a4 <HAL_ADC_Start+0x144>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_Start+0x146>
 80035a4:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <HAL_ADC_Start+0x180>)
 80035a6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00f      	beq.n	80035d4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80035c4:	e006      	b.n	80035d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80035ce:	e001      	b.n	80035d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
 80035d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40022100 	.word	0x40022100
 80035e8:	40022300 	.word	0x40022300
 80035ec:	58026300 	.word	0x58026300
 80035f0:	fffff0fe 	.word	0xfffff0fe

080035f4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_ADC_Stop+0x16>
 8003606:	2302      	movs	r3, #2
 8003608:	e021      	b.n	800364e <HAL_ADC_Stop+0x5a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003612:	2103      	movs	r1, #3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fe53 	bl	80042c0 <ADC_ConversionStop>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 ff91 	bl	800454c <ADC_Disable>
 800362a:	4603      	mov	r3, r0
 800362c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003638:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <HAL_ADC_Stop+0x64>)
 800363a:	4013      	ands	r3, r2
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	ffffeefe 	.word	0xffffeefe

0800365c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a72      	ldr	r2, [pc, #456]	@ (8003834 <HAL_ADC_PollForConversion+0x1d8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_ADC_PollForConversion+0x1e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a70      	ldr	r2, [pc, #448]	@ (8003838 <HAL_ADC_PollForConversion+0x1dc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_ADC_PollForConversion+0x22>
 800367a:	4b70      	ldr	r3, [pc, #448]	@ (800383c <HAL_ADC_PollForConversion+0x1e0>)
 800367c:	e000      	b.n	8003680 <HAL_ADC_PollForConversion+0x24>
 800367e:	4b70      	ldr	r3, [pc, #448]	@ (8003840 <HAL_ADC_PollForConversion+0x1e4>)
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fbc9 	bl	8002e18 <LL_ADC_GetMultimode>
 8003686:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d102      	bne.n	8003696 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003690:	2308      	movs	r3, #8
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	e037      	b.n	8003706 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d002      	beq.n	80036a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d111      	bne.n	80036cc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0b1      	b.n	800382a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80036c6:	2304      	movs	r3, #4
 80036c8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80036ca:	e01c      	b.n	8003706 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a58      	ldr	r2, [pc, #352]	@ (8003834 <HAL_ADC_PollForConversion+0x1d8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_ADC_PollForConversion+0x84>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a57      	ldr	r2, [pc, #348]	@ (8003838 <HAL_ADC_PollForConversion+0x1dc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x88>
 80036e0:	4b56      	ldr	r3, [pc, #344]	@ (800383c <HAL_ADC_PollForConversion+0x1e0>)
 80036e2:	e000      	b.n	80036e6 <HAL_ADC_PollForConversion+0x8a>
 80036e4:	4b56      	ldr	r3, [pc, #344]	@ (8003840 <HAL_ADC_PollForConversion+0x1e4>)
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fba4 	bl	8002e34 <LL_ADC_GetMultiDMATransfer>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e093      	b.n	800382a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003702:	2304      	movs	r3, #4
 8003704:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003706:	f7ff f9ab 	bl	8002a60 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800370c:	e021      	b.n	8003752 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d01d      	beq.n	8003752 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003716:	f7ff f9a3 	bl	8002a60 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <HAL_ADC_PollForConversion+0xd0>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d112      	bne.n	8003752 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e06b      	b.n	800382a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0d6      	beq.n	800370e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff faa7 	bl	8002cc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7e5b      	ldrb	r3, [r3, #25]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d118      	bne.n	80037b6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d111      	bne.n	80037b6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003796:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d105      	bne.n	80037b6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <HAL_ADC_PollForConversion+0x1dc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d002      	beq.n	80037c6 <HAL_ADC_PollForConversion+0x16a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	e000      	b.n	80037c8 <HAL_ADC_PollForConversion+0x16c>
 80037c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_ADC_PollForConversion+0x1d8>)
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d008      	beq.n	80037e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d002      	beq.n	80037e2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b09      	cmp	r3, #9
 80037e0:	d104      	bne.n	80037ec <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e00c      	b.n	8003806 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <HAL_ADC_PollForConversion+0x1dc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d002      	beq.n	80037fc <HAL_ADC_PollForConversion+0x1a0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	e000      	b.n	80037fe <HAL_ADC_PollForConversion+0x1a2>
 80037fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_ADC_PollForConversion+0x1d8>)
 80037fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e008      	b.n	8003828 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	220c      	movs	r2, #12
 8003826:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40022000 	.word	0x40022000
 8003838:	40022100 	.word	0x40022100
 800383c:	40022300 	.word	0x40022300
 8003840:	58026300 	.word	0x58026300

08003844 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b0b9      	sub	sp, #228	@ 0xe4
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800387a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4aab      	ldr	r2, [pc, #684]	@ (8003b30 <HAL_ADC_ConfigChannel+0x2d0>)
 8003882:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x34>
 800388e:	2302      	movs	r3, #2
 8003890:	f000 bcfe 	b.w	8004290 <HAL_ADC_ConfigChannel+0xa30>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fb99 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 84e2 	bne.w	8004272 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db38      	blt.n	8003928 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a9e      	ldr	r2, [pc, #632]	@ (8003b34 <HAL_ADC_ConfigChannel+0x2d4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d033      	beq.n	8003928 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d108      	bne.n	80038de <HAL_ADC_ConfigChannel+0x7e>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	0e9b      	lsrs	r3, r3, #26
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2201      	movs	r2, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	e01d      	b.n	800391a <HAL_ADC_ConfigChannel+0xba>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e004      	b.n	8003910 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2201      	movs	r2, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	69d1      	ldr	r1, [r2, #28]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	430b      	orrs	r3, r1
 8003926:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	f7ff f9d8 	bl	8002cea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fb4a 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 8003944:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fb6b 	bl	8003028 <LL_ADC_INJ_IsConversionOngoing>
 8003952:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8270 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003960:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 826b 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	461a      	mov	r2, r3
 8003978:	f7ff f9e3 	bl	8002d42 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6c      	ldr	r2, [pc, #432]	@ (8003b34 <HAL_ADC_ConfigChannel+0x2d4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039a0:	e032      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039a2:	4b65      	ldr	r3, [pc, #404]	@ (8003b38 <HAL_ADC_ConfigChannel+0x2d8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ae:	d10b      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x168>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	e01d      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x1a4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x18e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	e00a      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x1a4>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d048      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6919      	ldr	r1, [r3, #16]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a20:	f7ff f85e 	bl	8002ae0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a42      	ldr	r2, [pc, #264]	@ (8003b34 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d119      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6919      	ldr	r1, [r3, #16]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f7ff f8f6 	bl	8002c2c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6919      	ldr	r1, [r3, #16]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1f8>
 8003a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a56:	e000      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x1fa>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f7ff f8c4 	bl	8002be8 <LL_ADC_SetOffsetSaturation>
 8003a60:	e1ee      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x21a>
 8003a74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a78:	e000      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x21c>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f7ff f891 	bl	8002ba4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6919      	ldr	r1, [r3, #16]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	7e1b      	ldrb	r3, [r3, #24]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x238>
 8003a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a96:	e000      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x23a>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f7ff f868 	bl	8002b70 <LL_ADC_SetDataRightShift>
 8003aa0:	e1ce      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a23      	ldr	r2, [pc, #140]	@ (8003b34 <HAL_ADC_ConfigChannel+0x2d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	f040 8181 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f845 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x27a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f83a 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	0e9b      	lsrs	r3, r3, #26
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	e01e      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x2b8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f82f 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e004      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x2dc>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	e01e      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x30e>
 8003b30:	47ff0000 	.word	0x47ff0000
 8003b34:	58026000 	.word	0x58026000
 8003b38:	5c001000 	.word	0x5c001000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e004      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003b64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d106      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f878 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe ffdc 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x34c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ffd1 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	f003 021f 	and.w	r2, r3, #31
 8003baa:	e01e      	b.n	8003bea <HAL_ADC_ConfigChannel+0x38a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe ffc6 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e004      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x3a2>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0e9b      	lsrs	r3, r3, #26
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	e018      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x3d4>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e004      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff f815 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe ff79 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x412>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe ff6e 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	e01e      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x450>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe ff63 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e004      	b.n	8003cae <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x468>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e9b      	lsrs	r3, r3, #26
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	e014      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x492>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	e004      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe ffb6 	bl	8002c70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2103      	movs	r1, #3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe ff1a 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x4d0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2103      	movs	r1, #3
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe ff0f 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003d26:	4603      	mov	r3, r0
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	f003 021f 	and.w	r2, r3, #31
 8003d2e:	e017      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x500>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2103      	movs	r1, #3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe ff04 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003d52:	2320      	movs	r3, #32
 8003d54:	e003      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x518>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	e011      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x53c>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003d8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003d90:	2320      	movs	r3, #32
 8003d92:	e003      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d14f      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2103      	movs	r1, #3
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe ff61 	bl	8002c70 <LL_ADC_SetOffsetState>
 8003dae:	e047      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	069b      	lsls	r3, r3, #26
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	069b      	lsls	r3, r3, #26
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003df6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	069b      	lsls	r3, r3, #26
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d107      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e1a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	069b      	lsls	r3, r3, #26
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d107      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff f879 	bl	8002f3c <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 8219 	bne.w	8004284 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fe ff9a 	bl	8002d98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4aa1      	ldr	r2, [pc, #644]	@ (80040f0 <HAL_ADC_ConfigChannel+0x890>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f040 812e 	bne.w	80040cc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x638>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	bf94      	ite	ls
 8003e90:	2301      	movls	r3, #1
 8003e92:	2300      	movhi	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e019      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x66c>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	bf94      	ite	ls
 8003ec6:	2301      	movls	r3, #1
 8003ec8:	2300      	movhi	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d079      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x68c>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eea:	e015      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x6b8>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x6d8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	e017      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x708>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x72e>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	051b      	lsls	r3, r3, #20
 8003f8c:	e018      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x760>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4613      	mov	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	e07e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x780>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	069b      	lsls	r3, r3, #26
 8003fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fde:	e015      	b.n	800400c <HAL_ADC_ConfigChannel+0x7ac>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_ADC_ConfigChannel+0x7cc>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	e017      	b.n	800405c <HAL_ADC_ConfigChannel+0x7fc>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	61bb      	str	r3, [r7, #24]
  return result;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x828>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0e9b      	lsrs	r3, r3, #26
 8004072:	3301      	adds	r3, #1
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	3b1e      	subs	r3, #30
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004086:	e01b      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x860>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	60fb      	str	r3, [r7, #12]
  return result;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f003 021f 	and.w	r2, r3, #31
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	3b1e      	subs	r3, #30
 80040ba:	051b      	lsls	r3, r3, #20
 80040bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c0:	430b      	orrs	r3, r1
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	6892      	ldr	r2, [r2, #8]
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7fe fe3b 	bl	8002d42 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f280 80d7 	bge.w	8004284 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a06      	ldr	r2, [pc, #24]	@ (80040f4 <HAL_ADC_ConfigChannel+0x894>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_ADC_ConfigChannel+0x88a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_ADC_ConfigChannel+0x898>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10a      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x8a0>
 80040ea:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <HAL_ADC_ConfigChannel+0x89c>)
 80040ec:	e009      	b.n	8004102 <HAL_ADC_ConfigChannel+0x8a2>
 80040ee:	bf00      	nop
 80040f0:	47ff0000 	.word	0x47ff0000
 80040f4:	40022000 	.word	0x40022000
 80040f8:	40022100 	.word	0x40022100
 80040fc:	40022300 	.word	0x40022300
 8004100:	4b65      	ldr	r3, [pc, #404]	@ (8004298 <HAL_ADC_ConfigChannel+0xa38>)
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fcde 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8004108:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a62      	ldr	r2, [pc, #392]	@ (800429c <HAL_ADC_ConfigChannel+0xa3c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_ADC_ConfigChannel+0x8c0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a61      	ldr	r2, [pc, #388]	@ (80042a0 <HAL_ADC_ConfigChannel+0xa40>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10e      	bne.n	800413e <HAL_ADC_ConfigChannel+0x8de>
 8004120:	485e      	ldr	r0, [pc, #376]	@ (800429c <HAL_ADC_ConfigChannel+0xa3c>)
 8004122:	f7fe ff0b 	bl	8002f3c <LL_ADC_IsEnabled>
 8004126:	4604      	mov	r4, r0
 8004128:	485d      	ldr	r0, [pc, #372]	@ (80042a0 <HAL_ADC_ConfigChannel+0xa40>)
 800412a:	f7fe ff07 	bl	8002f3c <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	4323      	orrs	r3, r4
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e008      	b.n	8004150 <HAL_ADC_ConfigChannel+0x8f0>
 800413e:	4859      	ldr	r0, [pc, #356]	@ (80042a4 <HAL_ADC_ConfigChannel+0xa44>)
 8004140:	f7fe fefc 	bl	8002f3c <LL_ADC_IsEnabled>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8084 	beq.w	800425e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a53      	ldr	r2, [pc, #332]	@ (80042a8 <HAL_ADC_ConfigChannel+0xa48>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d132      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x966>
 8004160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12c      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a4c      	ldr	r2, [pc, #304]	@ (80042a4 <HAL_ADC_ConfigChannel+0xa44>)
 8004172:	4293      	cmp	r3, r2
 8004174:	f040 8086 	bne.w	8004284 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a47      	ldr	r2, [pc, #284]	@ (800429c <HAL_ADC_ConfigChannel+0xa3c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_ADC_ConfigChannel+0x92c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a46      	ldr	r2, [pc, #280]	@ (80042a0 <HAL_ADC_ConfigChannel+0xa40>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x930>
 800418c:	4a47      	ldr	r2, [pc, #284]	@ (80042ac <HAL_ADC_ConfigChannel+0xa4c>)
 800418e:	e000      	b.n	8004192 <HAL_ADC_ConfigChannel+0x932>
 8004190:	4a41      	ldr	r2, [pc, #260]	@ (8004298 <HAL_ADC_ConfigChannel+0xa38>)
 8004192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004196:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fe fc7e 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041a2:	4b43      	ldr	r3, [pc, #268]	@ (80042b0 <HAL_ADC_ConfigChannel+0xa50>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	4a42      	ldr	r2, [pc, #264]	@ (80042b4 <HAL_ADC_ConfigChannel+0xa54>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	3301      	adds	r3, #1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80041b6:	e002      	b.n	80041be <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f9      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041c4:	e05e      	b.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <HAL_ADC_ConfigChannel+0xa58>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d120      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x9b2>
 80041d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11a      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a30      	ldr	r2, [pc, #192]	@ (80042a4 <HAL_ADC_ConfigChannel+0xa44>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d14e      	bne.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	@ (800429c <HAL_ADC_ConfigChannel+0xa3c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_ADC_ConfigChannel+0x99a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2a      	ldr	r2, [pc, #168]	@ (80042a0 <HAL_ADC_ConfigChannel+0xa40>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x99e>
 80041fa:	4a2c      	ldr	r2, [pc, #176]	@ (80042ac <HAL_ADC_ConfigChannel+0xa4c>)
 80041fc:	e000      	b.n	8004200 <HAL_ADC_ConfigChannel+0x9a0>
 80041fe:	4a26      	ldr	r2, [pc, #152]	@ (8004298 <HAL_ADC_ConfigChannel+0xa38>)
 8004200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004204:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fe fc47 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004210:	e038      	b.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_ADC_ConfigChannel+0xa5c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d133      	bne.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
 800421c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d12d      	bne.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	@ (80042a4 <HAL_ADC_ConfigChannel+0xa44>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d128      	bne.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a19      	ldr	r2, [pc, #100]	@ (800429c <HAL_ADC_ConfigChannel+0xa3c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x9e6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a17      	ldr	r2, [pc, #92]	@ (80042a0 <HAL_ADC_ConfigChannel+0xa40>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x9ea>
 8004246:	4a19      	ldr	r2, [pc, #100]	@ (80042ac <HAL_ADC_ConfigChannel+0xa4c>)
 8004248:	e000      	b.n	800424c <HAL_ADC_ConfigChannel+0x9ec>
 800424a:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <HAL_ADC_ConfigChannel+0xa38>)
 800424c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004250:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fc21 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
 800425c:	e012      	b.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004270:	e008      	b.n	8004284 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800428c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004290:	4618      	mov	r0, r3
 8004292:	37e4      	adds	r7, #228	@ 0xe4
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}
 8004298:	58026300 	.word	0x58026300
 800429c:	40022000 	.word	0x40022000
 80042a0:	40022100 	.word	0x40022100
 80042a4:	58026000 	.word	0x58026000
 80042a8:	c7520000 	.word	0xc7520000
 80042ac:	40022300 	.word	0x40022300
 80042b0:	24000008 	.word	0x24000008
 80042b4:	053e2d63 	.word	0x053e2d63
 80042b8:	c3210000 	.word	0xc3210000
 80042bc:	cb840000 	.word	0xcb840000

080042c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fe7e 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 80042dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fea0 	bl	8003028 <LL_ADC_INJ_IsConversionOngoing>
 80042e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8098 	beq.w	8004428 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02a      	beq.n	800435c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7e5b      	ldrb	r3, [r3, #25]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d126      	bne.n	800435c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7e1b      	ldrb	r3, [r3, #24]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d122      	bne.n	800435c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800431a:	e014      	b.n	8004346 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4a45      	ldr	r2, [pc, #276]	@ (8004434 <ADC_ConversionStop+0x174>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d90d      	bls.n	8004340 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004328:	f043 0210 	orr.w	r2, r3, #16
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e074      	b.n	800442a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d1e3      	bne.n	800431c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2240      	movs	r2, #64	@ 0x40
 800435a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d014      	beq.n	800438c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fe36 	bl	8002fd8 <LL_ADC_REG_IsConversionOngoing>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fdf3 	bl	8002f62 <LL_ADC_IsDisableOngoing>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fe12 	bl	8002fb0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d014      	beq.n	80043bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fe46 	bl	8003028 <LL_ADC_INJ_IsConversionOngoing>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00c      	beq.n	80043bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fddb 	bl	8002f62 <LL_ADC_IsDisableOngoing>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fe22 	bl	8003000 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d005      	beq.n	80043ce <ADC_ConversionStop+0x10e>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d105      	bne.n	80043d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80043c8:	230c      	movs	r3, #12
 80043ca:	617b      	str	r3, [r7, #20]
        break;
 80043cc:	e005      	b.n	80043da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80043ce:	2308      	movs	r3, #8
 80043d0:	617b      	str	r3, [r7, #20]
        break;
 80043d2:	e002      	b.n	80043da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80043d4:	2304      	movs	r3, #4
 80043d6:	617b      	str	r3, [r7, #20]
        break;
 80043d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80043da:	f7fe fb41 	bl	8002a60 <HAL_GetTick>
 80043de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043e0:	e01b      	b.n	800441a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043e2:	f7fe fb3d 	bl	8002a60 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d914      	bls.n	800441a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e007      	b.n	800442a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1dc      	bne.n	80043e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	000cdbff 	.word	0x000cdbff

08004438 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fd79 	bl	8002f3c <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d16e      	bne.n	800452e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <ADC_Enable+0x100>)
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f043 0210 	orr.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e05a      	b.n	8004530 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fd34 	bl	8002eec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004484:	f7fe faec 	bl	8002a60 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2b      	ldr	r2, [pc, #172]	@ (800453c <ADC_Enable+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <ADC_Enable+0x66>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <ADC_Enable+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <ADC_Enable+0x6a>
 800449e:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <ADC_Enable+0x10c>)
 80044a0:	e000      	b.n	80044a4 <ADC_Enable+0x6c>
 80044a2:	4b29      	ldr	r3, [pc, #164]	@ (8004548 <ADC_Enable+0x110>)
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fcb7 	bl	8002e18 <LL_ADC_GetMultimode>
 80044aa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a23      	ldr	r2, [pc, #140]	@ (8004540 <ADC_Enable+0x108>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d002      	beq.n	80044bc <ADC_Enable+0x84>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	e000      	b.n	80044be <ADC_Enable+0x86>
 80044bc:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <ADC_Enable+0x104>)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02c      	beq.n	8004520 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d130      	bne.n	800452e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044cc:	e028      	b.n	8004520 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fd32 	bl	8002f3c <LL_ADC_IsEnabled>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fd02 	bl	8002eec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044e8:	f7fe faba 	bl	8002a60 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d914      	bls.n	8004520 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d00d      	beq.n	8004520 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004508:	f043 0210 	orr.w	r2, r3, #16
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e007      	b.n	8004530 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d1cf      	bne.n	80044ce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	8000003f 	.word	0x8000003f
 800453c:	40022000 	.word	0x40022000
 8004540:	40022100 	.word	0x40022100
 8004544:	40022300 	.word	0x40022300
 8004548:	58026300 	.word	0x58026300

0800454c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fd02 	bl	8002f62 <LL_ADC_IsDisableOngoing>
 800455e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fce9 	bl	8002f3c <LL_ADC_IsEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d047      	beq.n	8004600 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d144      	bne.n	8004600 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030d 	and.w	r3, r3, #13
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10c      	bne.n	800459e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fcc3 	bl	8002f14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2203      	movs	r2, #3
 8004594:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004596:	f7fe fa63 	bl	8002a60 <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800459c:	e029      	b.n	80045f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e023      	b.n	8004602 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045ba:	f7fe fa51 	bl	8002a60 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d914      	bls.n	80045f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f043 0210 	orr.w	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e007      	b.n	8004602 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1dc      	bne.n	80045ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6c      	ldr	r2, [pc, #432]	@ (80047cc <ADC_ConfigureBoostMode+0x1c0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <ADC_ConfigureBoostMode+0x1c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6b      	ldr	r2, [pc, #428]	@ (80047d0 <ADC_ConfigureBoostMode+0x1c4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d109      	bne.n	800463c <ADC_ConfigureBoostMode+0x30>
 8004628:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <ADC_ConfigureBoostMode+0x1c8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004630:	2b00      	cmp	r3, #0
 8004632:	bf14      	ite	ne
 8004634:	2301      	movne	r3, #1
 8004636:	2300      	moveq	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e008      	b.n	800464e <ADC_ConfigureBoostMode+0x42>
 800463c:	4b66      	ldr	r3, [pc, #408]	@ (80047d8 <ADC_ConfigureBoostMode+0x1cc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01c      	beq.n	800468c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004652:	f002 fdcd 	bl	80071f0 <HAL_RCC_GetHCLKFreq>
 8004656:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004660:	d010      	beq.n	8004684 <ADC_ConfigureBoostMode+0x78>
 8004662:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004666:	d873      	bhi.n	8004750 <ADC_ConfigureBoostMode+0x144>
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466c:	d002      	beq.n	8004674 <ADC_ConfigureBoostMode+0x68>
 800466e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004672:	d16d      	bne.n	8004750 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	60fb      	str	r3, [r7, #12]
        break;
 8004682:	e068      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	60fb      	str	r3, [r7, #12]
        break;
 800468a:	e064      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800468c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	f003 ffa8 	bl	80085e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004698:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046a2:	d051      	beq.n	8004748 <ADC_ConfigureBoostMode+0x13c>
 80046a4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046a8:	d854      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046aa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046ae:	d047      	beq.n	8004740 <ADC_ConfigureBoostMode+0x134>
 80046b0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046b4:	d84e      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046b6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046ba:	d03d      	beq.n	8004738 <ADC_ConfigureBoostMode+0x12c>
 80046bc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046c0:	d848      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c6:	d033      	beq.n	8004730 <ADC_ConfigureBoostMode+0x124>
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046cc:	d842      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046ce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046d2:	d029      	beq.n	8004728 <ADC_ConfigureBoostMode+0x11c>
 80046d4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046d8:	d83c      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046de:	d01a      	beq.n	8004716 <ADC_ConfigureBoostMode+0x10a>
 80046e0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046e4:	d836      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046ea:	d014      	beq.n	8004716 <ADC_ConfigureBoostMode+0x10a>
 80046ec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046f0:	d830      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f6:	d00e      	beq.n	8004716 <ADC_ConfigureBoostMode+0x10a>
 80046f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046fc:	d82a      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 80046fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004702:	d008      	beq.n	8004716 <ADC_ConfigureBoostMode+0x10a>
 8004704:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004708:	d824      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800470e:	d002      	beq.n	8004716 <ADC_ConfigureBoostMode+0x10a>
 8004710:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004714:	d11e      	bne.n	8004754 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	0c9b      	lsrs	r3, r3, #18
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	60fb      	str	r3, [r7, #12]
        break;
 8004726:	e016      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
        break;
 800472e:	e012      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	60fb      	str	r3, [r7, #12]
        break;
 8004736:	e00e      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	60fb      	str	r3, [r7, #12]
        break;
 800473e:	e00a      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	09db      	lsrs	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
        break;
 8004746:	e006      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	60fb      	str	r3, [r7, #12]
        break;
 800474e:	e002      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004754:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <ADC_ConfigureBoostMode+0x1d0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d808      	bhi.n	8004776 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004772:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004774:	e025      	b.n	80047c2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a19      	ldr	r2, [pc, #100]	@ (80047e0 <ADC_ConfigureBoostMode+0x1d4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d80a      	bhi.n	8004794 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	e016      	b.n	80047c2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <ADC_ConfigureBoostMode+0x1d8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d80a      	bhi.n	80047b2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	e007      	b.n	80047c2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022100 	.word	0x40022100
 80047d4:	40022300 	.word	0x40022300
 80047d8:	58026300 	.word	0x58026300
 80047dc:	005f5e10 	.word	0x005f5e10
 80047e0:	00bebc20 	.word	0x00bebc20
 80047e4:	017d7840 	.word	0x017d7840

080047e8 <LL_ADC_IsEnabled>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <LL_ADC_IsEnabled+0x18>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <LL_ADC_IsEnabled+0x1a>
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <LL_ADC_REG_IsConversionOngoing>:
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b04      	cmp	r3, #4
 8004820:	d101      	bne.n	8004826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b0a3      	sub	sp, #140	@ 0x8c
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800484e:	2302      	movs	r3, #2
 8004850:	e0c1      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
 8004860:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5e      	ldr	r2, [pc, #376]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d102      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800486c:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e001      	b.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0a0      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ffb9 	bl	800480e <LL_ADC_REG_IsConversionOngoing>
 800489c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff ffb2 	bl	800480e <LL_ADC_REG_IsConversionOngoing>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8081 	bne.w	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d17c      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a48      	ldr	r2, [pc, #288]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a46      	ldr	r2, [pc, #280]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048ce:	4b46      	ldr	r3, [pc, #280]	@ (80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048d0:	e000      	b.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048d2:	4b46      	ldr	r3, [pc, #280]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048d4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d039      	beq.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a39      	ldr	r2, [pc, #228]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10e      	bne.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004904:	4836      	ldr	r0, [pc, #216]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004906:	f7ff ff6f 	bl	80047e8 <LL_ADC_IsEnabled>
 800490a:	4604      	mov	r4, r0
 800490c:	4835      	ldr	r0, [pc, #212]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800490e:	f7ff ff6b 	bl	80047e8 <LL_ADC_IsEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	4323      	orrs	r3, r4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e008      	b.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004922:	4833      	ldr	r0, [pc, #204]	@ (80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004924:	f7ff ff60 	bl	80047e8 <LL_ADC_IsEnabled>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d047      	beq.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004938:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b2d      	ldr	r3, [pc, #180]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800493e:	4013      	ands	r3, r2
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	6811      	ldr	r1, [r2, #0]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	430a      	orrs	r2, r1
 800494a:	431a      	orrs	r2, r3
 800494c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800494e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004950:	e03a      	b.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004952:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800495a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800495c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10e      	bne.n	8004990 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004972:	481b      	ldr	r0, [pc, #108]	@ (80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004974:	f7ff ff38 	bl	80047e8 <LL_ADC_IsEnabled>
 8004978:	4604      	mov	r4, r0
 800497a:	481a      	ldr	r0, [pc, #104]	@ (80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800497c:	f7ff ff34 	bl	80047e8 <LL_ADC_IsEnabled>
 8004980:	4603      	mov	r3, r0
 8004982:	4323      	orrs	r3, r4
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e008      	b.n	80049a2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004990:	4817      	ldr	r0, [pc, #92]	@ (80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004992:	f7ff ff29 	bl	80047e8 <LL_ADC_IsEnabled>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b2:	e009      	b.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049c6:	e000      	b.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049d2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	378c      	adds	r7, #140	@ 0x8c
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	bf00      	nop
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40022100 	.word	0x40022100
 80049e8:	40022300 	.word	0x40022300
 80049ec:	58026300 	.word	0x58026300
 80049f0:	58026000 	.word	0x58026000
 80049f4:	fffff0e0 	.word	0xfffff0e0

080049f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <__NVIC_SetPriorityGrouping+0x40>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a14:	4013      	ands	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a20:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <__NVIC_SetPriorityGrouping+0x44>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a26:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <__NVIC_SetPriorityGrouping+0x40>)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	60d3      	str	r3, [r2, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00
 8004a3c:	05fa0000 	.word	0x05fa0000

08004a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a44:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <__NVIC_GetPriorityGrouping+0x18>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	f003 0307 	and.w	r3, r3, #7
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	db0b      	blt.n	8004a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f003 021f 	and.w	r2, r3, #31
 8004a74:	4907      	ldr	r1, [pc, #28]	@ (8004a94 <__NVIC_EnableIRQ+0x38>)
 8004a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000e100 	.word	0xe000e100

08004a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db0a      	blt.n	8004ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	490c      	ldr	r1, [pc, #48]	@ (8004ae4 <__NVIC_SetPriority+0x4c>)
 8004ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	440b      	add	r3, r1
 8004abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac0:	e00a      	b.n	8004ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4908      	ldr	r1, [pc, #32]	@ (8004ae8 <__NVIC_SetPriority+0x50>)
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	0112      	lsls	r2, r2, #4
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	761a      	strb	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	.word	0xe000e100
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f1c3 0307 	rsb	r3, r3, #7
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	bf28      	it	cs
 8004b0a:	2304      	movcs	r3, #4
 8004b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d902      	bls.n	8004b1c <NVIC_EncodePriority+0x30>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3b03      	subs	r3, #3
 8004b1a:	e000      	b.n	8004b1e <NVIC_EncodePriority+0x32>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	401a      	ands	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b34:	f04f 31ff 	mov.w	r1, #4294967295
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	4313      	orrs	r3, r2
         );
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3724      	adds	r7, #36	@ 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b64:	d301      	bcc.n	8004b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00f      	b.n	8004b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <SysTick_Config+0x40>)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b72:	210f      	movs	r1, #15
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	f7ff ff8e 	bl	8004a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <SysTick_Config+0x40>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <SysTick_Config+0x40>)
 8004b84:	2207      	movs	r2, #7
 8004b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	e000e010 	.word	0xe000e010

08004b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff29 	bl	80049f8 <__NVIC_SetPriorityGrouping>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bbc:	f7ff ff40 	bl	8004a40 <__NVIC_GetPriorityGrouping>
 8004bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	6978      	ldr	r0, [r7, #20]
 8004bc8:	f7ff ff90 	bl	8004aec <NVIC_EncodePriority>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff ff5f 	bl	8004a98 <__NVIC_SetPriority>
}
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ff33 	bl	8004a5c <__NVIC_EnableIRQ>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ffa4 	bl	8004b54 <SysTick_Config>
 8004c0c:	4603      	mov	r3, r0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b098      	sub	sp, #96	@ 0x60
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004c20:	4a84      	ldr	r2, [pc, #528]	@ (8004e34 <HAL_FDCAN_Init+0x21c>)
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	4611      	mov	r1, r2
 8004c28:	224c      	movs	r2, #76	@ 0x4c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f006 f9fc 	bl	800b028 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1c6      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e38 <HAL_FDCAN_Init+0x220>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d106      	bne.n	8004c52 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd fc24 	bl	80024b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c7c:	f7fd fef0 	bl	8002a60 <HAL_GetTick>
 8004c80:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c82:	e014      	b.n	8004cae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c84:	f7fd feec 	bl	8002a60 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b0a      	cmp	r3, #10
 8004c90:	d90d      	bls.n	8004cae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e18c      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d0e3      	beq.n	8004c84 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ccc:	f7fd fec8 	bl	8002a60 <HAL_GetTick>
 8004cd0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cd2:	e014      	b.n	8004cfe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cd4:	f7fd fec4 	bl	8002a60 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b0a      	cmp	r3, #10
 8004ce0:	d90d      	bls.n	8004cfe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e164      	b.n	8004fc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0e3      	beq.n	8004cd4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0202 	orr.w	r2, r2, #2
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	7c1b      	ldrb	r3, [r3, #16]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d32:	619a      	str	r2, [r3, #24]
 8004d34:	e007      	b.n	8004d46 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d44:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7c5b      	ldrb	r3, [r3, #17]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d108      	bne.n	8004d60 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5c:	619a      	str	r2, [r3, #24]
 8004d5e:	e007      	b.n	8004d70 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7c9b      	ldrb	r3, [r3, #18]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d108      	bne.n	8004d8a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d86:	619a      	str	r2, [r3, #24]
 8004d88:	e007      	b.n	8004d9a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d98:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004dbe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0210 	bic.w	r2, r2, #16
 8004dce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0204 	orr.w	r2, r2, #4
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	e030      	b.n	8004e4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d02c      	beq.n	8004e4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d020      	beq.n	8004e3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d114      	bne.n	8004e4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0220 	orr.w	r2, r2, #32
 8004e30:	619a      	str	r2, [r3, #24]
 8004e32:	e00b      	b.n	8004e4c <HAL_FDCAN_Init+0x234>
 8004e34:	0800bbec 	.word	0x0800bbec
 8004e38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0220 	orr.w	r2, r2, #32
 8004e4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e80:	d115      	bne.n	8004eae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004e9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004eaa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004eac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed4:	4413      	add	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ee2:	f023 0107 	bic.w	r1, r3, #7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3360      	adds	r3, #96	@ 0x60
 8004eee:	443b      	add	r3, r7
 8004ef0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f0e:	f023 0107 	bic.w	r1, r3, #7
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3360      	adds	r3, #96	@ 0x60
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f3a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	3360      	adds	r3, #96	@ 0x60
 8004f46:	443b      	add	r3, r7
 8004f48:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d012      	beq.n	8004f86 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	3360      	adds	r3, #96	@ 0x60
 8004f74:	443b      	add	r3, r7
 8004f76:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a11      	ldr	r2, [pc, #68]	@ (8004fd0 <HAL_FDCAN_Init+0x3b8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d107      	bne.n	8004fa0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f022 0203 	bic.w	r2, r2, #3
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fdf7 	bl	8005bac <FDCAN_CalcultateRamBlockAddresses>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004fc4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3760      	adds	r7, #96	@ 0x60
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	4000a000 	.word	0x4000a000

08004fd4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004fe4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d002      	beq.n	8004ff2 <HAL_FDCAN_ConfigFilter+0x1e>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d157      	bne.n	80050a2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d12b      	bne.n	8005052 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b07      	cmp	r3, #7
 8005000:	d10d      	bne.n	800501e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800500e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005014:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005016:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e00e      	b.n	800503c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800502a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005032:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e025      	b.n	800509e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	075a      	lsls	r2, r3, #29
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b07      	cmp	r3, #7
 8005066:	d103      	bne.n	8005070 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e006      	b.n	800507e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	079a      	lsls	r2, r3, #30
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3304      	adds	r3, #4
 8005096:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	e008      	b.n	80050b4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050a8:	f043 0202 	orr.w	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d111      	bne.n	80050f8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e008      	b.n	800510a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050fe:	f043 0204 	orr.w	r2, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d141      	bne.n	80051b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005136:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e038      	b.n	80051c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800515a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005168:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e026      	b.n	80051c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fe93 	bl	8005eb8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2101      	movs	r1, #1
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	fa01 f202 	lsl.w	r2, r1, r2
 800519e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80051a2:	2201      	movs	r2, #1
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e008      	b.n	80051c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b8:	f043 0208 	orr.w	r2, r3, #8
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b08b      	sub	sp, #44	@ 0x2c
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80051e4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80051e6:	7efb      	ldrb	r3, [r7, #27]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	f040 8149 	bne.w	8005480 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b40      	cmp	r3, #64	@ 0x40
 80051f2:	d14c      	bne.n	800528e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e13c      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e12a      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800524c:	d10a      	bne.n	8005264 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525e:	d101      	bne.n	8005264 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005260:	2301      	movs	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
 800528c:	e068      	b.n	8005360 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b41      	cmp	r3, #65	@ 0x41
 8005292:	d14c      	bne.n	800532e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800529c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0ec      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0da      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052ec:	d10a      	bne.n	8005304 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052fe:	d101      	bne.n	8005304 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
 800532c:	e018      	b.n	8005360 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	d309      	bcc.n	800534c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0a2      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d107      	bne.n	8005384 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0c9b      	lsrs	r3, r3, #18
 800537a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e005      	b.n	8005390 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	3304      	adds	r3, #4
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	f003 020f 	and.w	r2, r3, #15
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	0e1b      	lsrs	r3, r3, #24
 80053e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0fda      	lsrs	r2, r3, #31
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	3304      	adds	r3, #4
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	e00a      	b.n	800541c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	441a      	add	r2, r3
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	440b      	add	r3, r1
 8005412:	7812      	ldrb	r2, [r2, #0]
 8005414:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	3301      	adds	r3, #1
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	461a      	mov	r2, r3
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	4293      	cmp	r3, r2
 800542a:	d3ec      	bcc.n	8005406 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d105      	bne.n	800543e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800543c:	e01e      	b.n	800547c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b41      	cmp	r3, #65	@ 0x41
 8005442:	d105      	bne.n	8005450 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800544e:	e015      	b.n	800547c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b1f      	cmp	r3, #31
 8005454:	d808      	bhi.n	8005468 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	fa01 f202 	lsl.w	r2, r1, r2
 8005462:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005466:	e009      	b.n	800547c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 021f 	and.w	r2, r3, #31
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e008      	b.n	8005492 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005486:	f043 0208 	orr.w	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	372c      	adds	r7, #44	@ 0x2c
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	0800bc48 	.word	0x0800bc48

080054a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d002      	beq.n	80054c4 <HAL_FDCAN_ActivateNotification+0x20>
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d155      	bne.n	8005570 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054e2:	e014      	b.n	800550e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d108      	bne.n	8005506 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0202 	orr.w	r2, r2, #2
 8005502:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005504:	e003      	b.n	800550e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2203      	movs	r2, #3
 800550c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	430a      	orrs	r2, r1
 8005528:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	430a      	orrs	r2, r1
 8005546:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <HAL_FDCAN_ActivateNotification+0xec>)
 8005554:	4013      	ands	r3, r2
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	430b      	orrs	r3, r1
 800555c:	6553      	str	r3, [r2, #84]	@ 0x54
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	0f9b      	lsrs	r3, r3, #30
 8005566:	490b      	ldr	r1, [pc, #44]	@ (8005594 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e008      	b.n	8005582 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005576:	f043 0202 	orr.w	r2, r3, #2
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	3fcfffff 	.word	0x3fcfffff
 8005594:	4000a800 	.word	0x4000a800

08005598 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b096      	sub	sp, #88	@ 0x58
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80055a0:	4b9a      	ldr	r3, [pc, #616]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	079b      	lsls	r3, r3, #30
 80055a6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80055a8:	4b98      	ldr	r3, [pc, #608]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	079b      	lsls	r3, r3, #30
 80055ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055b0:	4013      	ands	r3, r2
 80055b2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80055be:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055c8:	4013      	ands	r3, r2
 80055ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055e0:	4013      	ands	r3, r2
 80055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f8:	4013      	ands	r3, r2
 80055fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8005606:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005610:	4013      	ands	r3, r2
 8005612:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800561e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005626:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005628:	4013      	ands	r3, r2
 800562a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d010      	beq.n	800566a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800565c:	651a      	str	r2, [r3, #80]	@ 0x50
 800565e:	4b6b      	ldr	r3, [pc, #428]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 8005660:	2200      	movs	r2, #0
 8005662:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa54 	bl	8005b12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800566a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800566c:	0a9b      	lsrs	r3, r3, #10
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01d      	beq.n	80056b2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005678:	0a9b      	lsrs	r3, r3, #10
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005696:	4013      	ands	r3, r2
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80056a4:	4b59      	ldr	r3, [pc, #356]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80056aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa07 	bl	8005ac0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80056b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056be:	4b54      	ldr	r3, [pc, #336]	@ (8005810 <HAL_FDCAN_IRQHandler+0x278>)
 80056c0:	400b      	ands	r3, r1
 80056c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80056c4:	4a51      	ldr	r2, [pc, #324]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	0f9b      	lsrs	r3, r3, #30
 80056ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80056cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9c0 	bl	8005a54 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80056d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005810 <HAL_FDCAN_IRQHandler+0x278>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80056e6:	4a49      	ldr	r2, [pc, #292]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80056e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ea:	0f9b      	lsrs	r3, r3, #30
 80056ec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80056ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9ba 	bl	8005a6a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80056f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005702:	4b43      	ldr	r3, [pc, #268]	@ (8005810 <HAL_FDCAN_IRQHandler+0x278>)
 8005704:	400b      	ands	r3, r1
 8005706:	6513      	str	r3, [r2, #80]	@ 0x50
 8005708:	4a40      	ldr	r2, [pc, #256]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 800570a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570c:	0f9b      	lsrs	r3, r3, #30
 800570e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005710:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fc fa3c 	bl	8001b90 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005724:	4b3a      	ldr	r3, [pc, #232]	@ (8005810 <HAL_FDCAN_IRQHandler+0x278>)
 8005726:	400b      	ands	r3, r1
 8005728:	6513      	str	r3, [r2, #80]	@ 0x50
 800572a:	4a38      	ldr	r2, [pc, #224]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 800572c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800572e:	0f9b      	lsrs	r3, r3, #30
 8005730:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005732:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f9a3 	bl	8005a80 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800573a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573c:	0adb      	lsrs	r3, r3, #11
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	0adb      	lsrs	r3, r3, #11
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800575a:	651a      	str	r2, [r3, #80]	@ 0x50
 800575c:	4b2b      	ldr	r3, [pc, #172]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f997 	bl	8005a96 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	0a5b      	lsrs	r3, r3, #9
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01d      	beq.n	80057b0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	0a5b      	lsrs	r3, r3, #9
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005788:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005794:	4013      	ands	r3, r2
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80057a2:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80057a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f97d 	bl	8005aaa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b2:	0cdb      	lsrs	r3, r3, #19
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80057bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057be:	0cdb      	lsrs	r3, r3, #19
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80057d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80057d2:	4b0e      	ldr	r3, [pc, #56]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f97c 	bl	8005ad6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80057de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80057fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8005800:	4b02      	ldr	r3, [pc, #8]	@ (800580c <HAL_FDCAN_IRQHandler+0x274>)
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	e004      	b.n	8005814 <HAL_FDCAN_IRQHandler+0x27c>
 800580a:	bf00      	nop
 800580c:	4000a800 	.word	0x4000a800
 8005810:	3fcfffff 	.word	0x3fcfffff
 8005814:	f000 f969 	bl	8005aea <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581a:	0c9b      	lsrs	r3, r3, #18
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	0c9b      	lsrs	r3, r3, #18
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005838:	651a      	str	r2, [r3, #80]	@ 0x50
 800583a:	4b83      	ldr	r3, [pc, #524]	@ (8005a48 <HAL_FDCAN_IRQHandler+0x4b0>)
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f95c 	bl	8005afe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005848:	0c5b      	lsrs	r3, r3, #17
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d015      	beq.n	800587e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	0c5b      	lsrs	r3, r3, #17
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005866:	651a      	str	r2, [r3, #80]	@ 0x50
 8005868:	4b77      	ldr	r3, [pc, #476]	@ (8005a48 <HAL_FDCAN_IRQHandler+0x4b0>)
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005874:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800587e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800588a:	4b70      	ldr	r3, [pc, #448]	@ (8005a4c <HAL_FDCAN_IRQHandler+0x4b4>)
 800588c:	400b      	ands	r3, r1
 800588e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005890:	4a6d      	ldr	r2, [pc, #436]	@ (8005a48 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005894:	0f9b      	lsrs	r3, r3, #30
 8005896:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f94d 	bl	8005b3a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80058a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058ac:	4b67      	ldr	r3, [pc, #412]	@ (8005a4c <HAL_FDCAN_IRQHandler+0x4b4>)
 80058ae:	400b      	ands	r3, r1
 80058b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80058b2:	4a65      	ldr	r2, [pc, #404]	@ (8005a48 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b6:	0f9b      	lsrs	r3, r3, #30
 80058b8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80058c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a60      	ldr	r2, [pc, #384]	@ (8005a50 <HAL_FDCAN_IRQHandler+0x4b8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f040 80ac 	bne.w	8005a2e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80a4 	beq.w	8005a2e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fa:	4013      	ands	r3, r2
 80058fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005912:	4013      	ands	r3, r2
 8005914:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592a:	4013      	ands	r3, r2
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005938:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	4013      	ands	r3, r2
 8005944:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005950:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	4013      	ands	r3, r2
 800595c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800597a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800597c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8e6 	bl	8005b50 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005990:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8e6 	bl	8005b66 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	099b      	lsrs	r3, r3, #6
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	099b      	lsrs	r3, r3, #6
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d014      	beq.n	80059dc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2240      	movs	r2, #64	@ 0x40
 80059d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	6939      	ldr	r1, [r7, #16]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8d0 	bl	8005b7c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80059ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8d1 	bl	8005b94 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f874 	bl	8005b26 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3758      	adds	r7, #88	@ 0x58
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	4000a800 	.word	0x4000a800
 8005a4c:	3fcfffff 	.word	0x3fcfffff
 8005a50:	4000a000 	.word	0x4000a000

08005a54 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	0091      	lsls	r1, r2, #2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bdc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	041a      	lsls	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c02:	4b97      	ldr	r3, [pc, #604]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0091      	lsls	r1, r2, #2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	041a      	lsls	r2, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005c44:	4b86      	ldr	r3, [pc, #536]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0091      	lsls	r1, r2, #2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	041a      	lsls	r2, r3, #16
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	4413      	add	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c8c:	4b74      	ldr	r3, [pc, #464]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	0091      	lsls	r1, r2, #2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ca6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cae:	041a      	lsls	r2, r3, #16
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4413      	add	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005cd4:	4b62      	ldr	r3, [pc, #392]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	0091      	lsls	r1, r2, #2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d00:	4b57      	ldr	r3, [pc, #348]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	0091      	lsls	r1, r2, #2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d1a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d22:	041a      	lsls	r2, r3, #16
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	4413      	add	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d42:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0091      	lsls	r1, r2, #2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d5c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d64:	041a      	lsls	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d78:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	061a      	lsls	r2, r3, #24
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d90:	4b34      	ldr	r3, [pc, #208]	@ (8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d92:	4413      	add	r3, r2
 8005d94:	009a      	lsls	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e48:	441a      	add	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e56:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d915      	bls.n	8005e88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e5c:	e006      	b.n	8005e6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e5e:	bf00      	nop
 8005e60:	ffff0003 	.word	0xffff0003
 8005e64:	10002b00 	.word	0x10002b00
 8005e68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e010      	b.n	8005eaa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e005      	b.n	8005e9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3f3      	bcc.n	8005e90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005ed6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	e00a      	b.n	8005efa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005eec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005ef2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ef8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f04:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005f0a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005f10:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3304      	adds	r3, #4
 8005f48:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e020      	b.n	8005f92 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3303      	adds	r3, #3
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3302      	adds	r3, #2
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	440b      	add	r3, r1
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f68:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	440b      	add	r3, r1
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005f76:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005f80:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4a06      	ldr	r2, [pc, #24]	@ (8005fb0 <FDCAN_CopyMessageToRAM+0xf8>)
 8005f98:	5cd3      	ldrb	r3, [r2, r3]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d3d6      	bcc.n	8005f50 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	3724      	adds	r7, #36	@ 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	0800bc48 	.word	0x0800bc48

08005fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	@ 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fc2:	4b86      	ldr	r3, [pc, #536]	@ (80061dc <HAL_GPIO_Init+0x228>)
 8005fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fc6:	e18c      	b.n	80062e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	2101      	movs	r1, #1
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 817e 	beq.w	80062dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d005      	beq.n	8005ff8 <HAL_GPIO_Init+0x44>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d130      	bne.n	800605a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	2203      	movs	r2, #3
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4013      	ands	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800602e:	2201      	movs	r2, #1
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0201 	and.w	r2, r3, #1
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b03      	cmp	r3, #3
 8006064:	d017      	beq.n	8006096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	2203      	movs	r2, #3
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4013      	ands	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d123      	bne.n	80060ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	08da      	lsrs	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3208      	adds	r2, #8
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	220f      	movs	r2, #15
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	08da      	lsrs	r2, r3, #3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3208      	adds	r2, #8
 80060e4:	69b9      	ldr	r1, [r7, #24]
 80060e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	2203      	movs	r2, #3
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 0203 	and.w	r2, r3, #3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80d8 	beq.w	80062dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612c:	4b2c      	ldr	r3, [pc, #176]	@ (80061e0 <HAL_GPIO_Init+0x22c>)
 800612e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006132:	4a2b      	ldr	r2, [pc, #172]	@ (80061e0 <HAL_GPIO_Init+0x22c>)
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800613c:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <HAL_GPIO_Init+0x22c>)
 800613e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800614a:	4a26      	ldr	r2, [pc, #152]	@ (80061e4 <HAL_GPIO_Init+0x230>)
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	3302      	adds	r3, #2
 8006152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	220f      	movs	r2, #15
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a1d      	ldr	r2, [pc, #116]	@ (80061e8 <HAL_GPIO_Init+0x234>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04a      	beq.n	800620c <HAL_GPIO_Init+0x258>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1c      	ldr	r2, [pc, #112]	@ (80061ec <HAL_GPIO_Init+0x238>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d02b      	beq.n	80061d6 <HAL_GPIO_Init+0x222>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1b      	ldr	r2, [pc, #108]	@ (80061f0 <HAL_GPIO_Init+0x23c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d025      	beq.n	80061d2 <HAL_GPIO_Init+0x21e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1a      	ldr	r2, [pc, #104]	@ (80061f4 <HAL_GPIO_Init+0x240>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01f      	beq.n	80061ce <HAL_GPIO_Init+0x21a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <HAL_GPIO_Init+0x244>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d019      	beq.n	80061ca <HAL_GPIO_Init+0x216>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a18      	ldr	r2, [pc, #96]	@ (80061fc <HAL_GPIO_Init+0x248>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_GPIO_Init+0x212>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a17      	ldr	r2, [pc, #92]	@ (8006200 <HAL_GPIO_Init+0x24c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00d      	beq.n	80061c2 <HAL_GPIO_Init+0x20e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a16      	ldr	r2, [pc, #88]	@ (8006204 <HAL_GPIO_Init+0x250>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <HAL_GPIO_Init+0x20a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a15      	ldr	r2, [pc, #84]	@ (8006208 <HAL_GPIO_Init+0x254>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <HAL_GPIO_Init+0x206>
 80061b6:	2309      	movs	r3, #9
 80061b8:	e029      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061ba:	230a      	movs	r3, #10
 80061bc:	e027      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061be:	2307      	movs	r3, #7
 80061c0:	e025      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061c2:	2306      	movs	r3, #6
 80061c4:	e023      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061c6:	2305      	movs	r3, #5
 80061c8:	e021      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061ca:	2304      	movs	r3, #4
 80061cc:	e01f      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061ce:	2303      	movs	r3, #3
 80061d0:	e01d      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e01b      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e019      	b.n	800620e <HAL_GPIO_Init+0x25a>
 80061da:	bf00      	nop
 80061dc:	58000080 	.word	0x58000080
 80061e0:	58024400 	.word	0x58024400
 80061e4:	58000400 	.word	0x58000400
 80061e8:	58020000 	.word	0x58020000
 80061ec:	58020400 	.word	0x58020400
 80061f0:	58020800 	.word	0x58020800
 80061f4:	58020c00 	.word	0x58020c00
 80061f8:	58021000 	.word	0x58021000
 80061fc:	58021400 	.word	0x58021400
 8006200:	58021800 	.word	0x58021800
 8006204:	58021c00 	.word	0x58021c00
 8006208:	58022400 	.word	0x58022400
 800620c:	2300      	movs	r3, #0
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	f002 0203 	and.w	r2, r2, #3
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	4093      	lsls	r3, r2
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800621e:	4938      	ldr	r1, [pc, #224]	@ (8006300 <HAL_GPIO_Init+0x34c>)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	43db      	mvns	r3, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4013      	ands	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	43db      	mvns	r3, r3
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4013      	ands	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	43db      	mvns	r3, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4013      	ands	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f ae6b 	bne.w	8005fc8 <HAL_GPIO_Init+0x14>
  }
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	3724      	adds	r7, #36	@ 0x24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	58000400 	.word	0x58000400

08006304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	887b      	ldrh	r3, [r7, #2]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e001      	b.n	8006326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
 8006340:	4613      	mov	r3, r2
 8006342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006350:	e003      	b.n	800635a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	041a      	lsls	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	619a      	str	r2, [r3, #24]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006370:	4b19      	ldr	r3, [pc, #100]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x70>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d00a      	beq.n	8006392 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800637c:	4b16      	ldr	r3, [pc, #88]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x70>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d001      	beq.n	800638e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e01f      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e01d      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006392:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x70>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f023 0207 	bic.w	r2, r3, #7
 800639a:	490f      	ldr	r1, [pc, #60]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x70>)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063a2:	f7fc fb5d 	bl	8002a60 <HAL_GetTick>
 80063a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063a8:	e009      	b.n	80063be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063aa:	f7fc fb59 	bl	8002a60 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063b8:	d901      	bls.n	80063be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e007      	b.n	80063ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063be:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <HAL_PWREx_ConfigSupply+0x70>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ca:	d1ee      	bne.n	80063aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	58024800 	.word	0x58024800

080063dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	@ 0x30
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e3c8      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8087 	beq.w	800650a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063fc:	4b88      	ldr	r3, [pc, #544]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006406:	4b86      	ldr	r3, [pc, #536]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800640c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640e:	2b10      	cmp	r3, #16
 8006410:	d007      	beq.n	8006422 <HAL_RCC_OscConfig+0x46>
 8006412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006414:	2b18      	cmp	r3, #24
 8006416:	d110      	bne.n	800643a <HAL_RCC_OscConfig+0x5e>
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d10b      	bne.n	800643a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006422:	4b7f      	ldr	r3, [pc, #508]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d06c      	beq.n	8006508 <HAL_RCC_OscConfig+0x12c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d168      	bne.n	8006508 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e3a2      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006442:	d106      	bne.n	8006452 <HAL_RCC_OscConfig+0x76>
 8006444:	4b76      	ldr	r3, [pc, #472]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a75      	ldr	r2, [pc, #468]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800644a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e02e      	b.n	80064b0 <HAL_RCC_OscConfig+0xd4>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x98>
 800645a:	4b71      	ldr	r3, [pc, #452]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a70      	ldr	r2, [pc, #448]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6e      	ldr	r3, [pc, #440]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6d      	ldr	r2, [pc, #436]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800646c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <HAL_RCC_OscConfig+0xd4>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0xbc>
 800647e:	4b68      	ldr	r3, [pc, #416]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a67      	ldr	r2, [pc, #412]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b65      	ldr	r3, [pc, #404]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a64      	ldr	r2, [pc, #400]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xd4>
 8006498:	4b61      	ldr	r3, [pc, #388]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a60      	ldr	r2, [pc, #384]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80064aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fc fad2 	bl	8002a60 <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fc face 	bl	8002a60 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	@ 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e356      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064d2:	4b53      	ldr	r3, [pc, #332]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0xe4>
 80064de:	e014      	b.n	800650a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc fabe 	bl	8002a60 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fc faba 	bl	8002a60 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	@ 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e342      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064fa:	4b49      	ldr	r3, [pc, #292]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0x10c>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 808c 	beq.w	8006630 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006518:	4b41      	ldr	r3, [pc, #260]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006520:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006522:	4b3f      	ldr	r3, [pc, #252]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <HAL_RCC_OscConfig+0x162>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	2b18      	cmp	r3, #24
 8006532:	d137      	bne.n	80065a4 <HAL_RCC_OscConfig+0x1c8>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d132      	bne.n	80065a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800653e:	4b38      	ldr	r3, [pc, #224]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_RCC_OscConfig+0x17a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e314      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006556:	4b32      	ldr	r3, [pc, #200]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 0219 	bic.w	r2, r3, #25
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	492f      	ldr	r1, [pc, #188]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fc fa7a 	bl	8002a60 <HAL_GetTick>
 800656c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006570:	f7fc fa76 	bl	8002a60 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e2fe      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006582:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658e:	4b24      	ldr	r3, [pc, #144]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	061b      	lsls	r3, r3, #24
 800659c:	4920      	ldr	r1, [pc, #128]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a2:	e045      	b.n	8006630 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d026      	beq.n	80065fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f023 0219 	bic.w	r2, r3, #25
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4919      	ldr	r1, [pc, #100]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fc fa4f 	bl	8002a60 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c6:	f7fc fa4b 	bl	8002a60 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e2d3      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d8:	4b11      	ldr	r3, [pc, #68]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	490b      	ldr	r1, [pc, #44]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	604b      	str	r3, [r1, #4]
 80065f8:	e01a      	b.n	8006630 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a08      	ldr	r2, [pc, #32]	@ (8006620 <HAL_RCC_OscConfig+0x244>)
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006606:	f7fc fa2b 	bl	8002a60 <HAL_GetTick>
 800660a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800660c:	e00a      	b.n	8006624 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660e:	f7fc fa27 	bl	8002a60 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d903      	bls.n	8006624 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e2af      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
 8006620:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006624:	4b96      	ldr	r3, [pc, #600]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ee      	bne.n	800660e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d06a      	beq.n	8006712 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800663c:	4b90      	ldr	r3, [pc, #576]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006644:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006646:	4b8e      	ldr	r3, [pc, #568]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b08      	cmp	r3, #8
 8006650:	d007      	beq.n	8006662 <HAL_RCC_OscConfig+0x286>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b18      	cmp	r3, #24
 8006656:	d11b      	bne.n	8006690 <HAL_RCC_OscConfig+0x2b4>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d116      	bne.n	8006690 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006662:	4b87      	ldr	r3, [pc, #540]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_RCC_OscConfig+0x29e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	2b80      	cmp	r3, #128	@ 0x80
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e282      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800667a:	4b81      	ldr	r3, [pc, #516]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	061b      	lsls	r3, r3, #24
 8006688:	497d      	ldr	r1, [pc, #500]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800668e:	e040      	b.n	8006712 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d023      	beq.n	80066e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006698:	4b79      	ldr	r3, [pc, #484]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a78      	ldr	r2, [pc, #480]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800669e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fc f9dc 	bl	8002a60 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066ac:	f7fc f9d8 	bl	8002a60 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e260      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066be:	4b70      	ldr	r3, [pc, #448]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	061b      	lsls	r3, r3, #24
 80066d8:	4969      	ldr	r1, [pc, #420]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	60cb      	str	r3, [r1, #12]
 80066de:	e018      	b.n	8006712 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066e0:	4b67      	ldr	r3, [pc, #412]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a66      	ldr	r2, [pc, #408]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80066e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fc f9b8 	bl	8002a60 <HAL_GetTick>
 80066f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066f4:	f7fc f9b4 	bl	8002a60 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e23c      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006706:	4b5e      	ldr	r3, [pc, #376]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d036      	beq.n	800678c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d019      	beq.n	800675a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006726:	4b56      	ldr	r3, [pc, #344]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800672a:	4a55      	ldr	r2, [pc, #340]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006732:	f7fc f995 	bl	8002a60 <HAL_GetTick>
 8006736:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673a:	f7fc f991 	bl	8002a60 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e219      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800674c:	4b4c      	ldr	r3, [pc, #304]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800674e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x35e>
 8006758:	e018      	b.n	800678c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800675a:	4b49      	ldr	r3, [pc, #292]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675e:	4a48      	ldr	r2, [pc, #288]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006766:	f7fc f97b 	bl	8002a60 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676e:	f7fc f977 	bl	8002a60 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e1ff      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006780:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f0      	bne.n	800676e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d036      	beq.n	8006806 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d019      	beq.n	80067d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067a0:	4b37      	ldr	r3, [pc, #220]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a36      	ldr	r2, [pc, #216]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ac:	f7fc f958 	bl	8002a60 <HAL_GetTick>
 80067b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b4:	f7fc f954 	bl	8002a60 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e1dc      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x3d8>
 80067d2:	e018      	b.n	8006806 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a29      	ldr	r2, [pc, #164]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067e0:	f7fc f93e 	bl	8002a60 <HAL_GetTick>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e8:	f7fc f93a 	bl	8002a60 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e1c2      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067fa:	4b21      	ldr	r3, [pc, #132]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8086 	beq.w	8006920 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006814:	4b1b      	ldr	r3, [pc, #108]	@ (8006884 <HAL_RCC_OscConfig+0x4a8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <HAL_RCC_OscConfig+0x4a8>)
 800681a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800681e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006820:	f7fc f91e 	bl	8002a60 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006828:	f7fc f91a 	bl	8002a60 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	@ 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e1a2      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800683a:	4b12      	ldr	r3, [pc, #72]	@ (8006884 <HAL_RCC_OscConfig+0x4a8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d106      	bne.n	800685c <HAL_RCC_OscConfig+0x480>
 800684e:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006852:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	6713      	str	r3, [r2, #112]	@ 0x70
 800685a:	e032      	b.n	80068c2 <HAL_RCC_OscConfig+0x4e6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d111      	bne.n	8006888 <HAL_RCC_OscConfig+0x4ac>
 8006864:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006868:	4a05      	ldr	r2, [pc, #20]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006870:	4b03      	ldr	r3, [pc, #12]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006874:	4a02      	ldr	r2, [pc, #8]	@ (8006880 <HAL_RCC_OscConfig+0x4a4>)
 8006876:	f023 0304 	bic.w	r3, r3, #4
 800687a:	6713      	str	r3, [r2, #112]	@ 0x70
 800687c:	e021      	b.n	80068c2 <HAL_RCC_OscConfig+0x4e6>
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
 8006884:	58024800 	.word	0x58024800
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b05      	cmp	r3, #5
 800688e:	d10c      	bne.n	80068aa <HAL_RCC_OscConfig+0x4ce>
 8006890:	4b83      	ldr	r3, [pc, #524]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a82      	ldr	r2, [pc, #520]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006896:	f043 0304 	orr.w	r3, r3, #4
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	4b80      	ldr	r3, [pc, #512]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a0:	4a7f      	ldr	r2, [pc, #508]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a8:	e00b      	b.n	80068c2 <HAL_RCC_OscConfig+0x4e6>
 80068aa:	4b7d      	ldr	r3, [pc, #500]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	4a7c      	ldr	r2, [pc, #496]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b6:	4b7a      	ldr	r3, [pc, #488]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ba:	4a79      	ldr	r2, [pc, #484]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d015      	beq.n	80068f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ca:	f7fc f8c9 	bl	8002a60 <HAL_GetTick>
 80068ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fc f8c5 	bl	8002a60 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e14b      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068e8:	4b6d      	ldr	r3, [pc, #436]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ee      	beq.n	80068d2 <HAL_RCC_OscConfig+0x4f6>
 80068f4:	e014      	b.n	8006920 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fc f8b3 	bl	8002a60 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fc f8af 	bl	8002a60 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e135      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006914:	4b62      	ldr	r3, [pc, #392]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ee      	bne.n	80068fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 812a 	beq.w	8006b7e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800692a:	4b5d      	ldr	r3, [pc, #372]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006932:	2b18      	cmp	r3, #24
 8006934:	f000 80ba 	beq.w	8006aac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	2b02      	cmp	r3, #2
 800693e:	f040 8095 	bne.w	8006a6c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b57      	ldr	r3, [pc, #348]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a56      	ldr	r2, [pc, #344]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006948:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800694c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fc f887 	bl	8002a60 <HAL_GetTick>
 8006952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006956:	f7fc f883 	bl	8002a60 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e10b      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006968:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f0      	bne.n	8006956 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006974:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006976:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006978:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa4 <HAL_RCC_OscConfig+0x6c8>)
 800697a:	4013      	ands	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006984:	0112      	lsls	r2, r2, #4
 8006986:	430a      	orrs	r2, r1
 8006988:	4945      	ldr	r1, [pc, #276]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 800698a:	4313      	orrs	r3, r2
 800698c:	628b      	str	r3, [r1, #40]	@ 0x28
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	3b01      	subs	r3, #1
 8006994:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699c:	3b01      	subs	r3, #1
 800699e:	025b      	lsls	r3, r3, #9
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	3b01      	subs	r3, #1
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b6:	3b01      	subs	r3, #1
 80069b8:	061b      	lsls	r3, r3, #24
 80069ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069be:	4938      	ldr	r1, [pc, #224]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80069c4:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	4a35      	ldr	r2, [pc, #212]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069d0:	4b33      	ldr	r3, [pc, #204]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069d4:	4b34      	ldr	r3, [pc, #208]	@ (8006aa8 <HAL_RCC_OscConfig+0x6cc>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069dc:	00d2      	lsls	r2, r2, #3
 80069de:	4930      	ldr	r1, [pc, #192]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069e4:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e8:	f023 020c 	bic.w	r2, r3, #12
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f0:	492b      	ldr	r1, [pc, #172]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069f6:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	f023 0202 	bic.w	r2, r3, #2
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a02:	4927      	ldr	r1, [pc, #156]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a08:	4b25      	ldr	r3, [pc, #148]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a24      	ldr	r2, [pc, #144]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a14:	4b22      	ldr	r3, [pc, #136]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a21      	ldr	r2, [pc, #132]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a38:	4b19      	ldr	r3, [pc, #100]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fc f80c 	bl	8002a60 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4c:	f7fc f808 	bl	8002a60 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e090      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a5e:	4b10      	ldr	r3, [pc, #64]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x670>
 8006a6a:	e088      	b.n	8006b7e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0b      	ldr	r2, [pc, #44]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fb fff2 	bl	8002a60 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fb ffee 	bl	8002a60 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e076      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a92:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <HAL_RCC_OscConfig+0x6c4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a4>
 8006a9e:	e06e      	b.n	8006b7e <HAL_RCC_OscConfig+0x7a2>
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	fffffc0c 	.word	0xfffffc0c
 8006aa8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006aac:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ab2:	4b35      	ldr	r3, [pc, #212]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d031      	beq.n	8006b24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f003 0203 	and.w	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d12a      	bne.n	8006b24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d122      	bne.n	8006b24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d11a      	bne.n	8006b24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d111      	bne.n	8006b24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d108      	bne.n	8006b24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e02b      	b.n	8006b80 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b28:	4b17      	ldr	r3, [pc, #92]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2c:	08db      	lsrs	r3, r3, #3
 8006b2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d01f      	beq.n	8006b7e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b3e:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	4a11      	ldr	r2, [pc, #68]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b4a:	f7fb ff89 	bl	8002a60 <HAL_GetTick>
 8006b4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b50:	bf00      	nop
 8006b52:	f7fb ff85 	bl	8002a60 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d0f9      	beq.n	8006b52 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <HAL_RCC_OscConfig+0x7b0>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b6a:	00d2      	lsls	r2, r2, #3
 8006b6c:	4906      	ldr	r1, [pc, #24]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b72:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <HAL_RCC_OscConfig+0x7ac>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3730      	adds	r7, #48	@ 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	ffff0007 	.word	0xffff0007

08006b90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e19c      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b8a      	ldr	r3, [pc, #552]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d910      	bls.n	8006bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b87      	ldr	r3, [pc, #540]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f023 020f 	bic.w	r2, r3, #15
 8006bba:	4985      	ldr	r1, [pc, #532]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc2:	4b83      	ldr	r3, [pc, #524]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e184      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d010      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d908      	bls.n	8006c02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bf0:	4b78      	ldr	r3, [pc, #480]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	4975      	ldr	r1, [pc, #468]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d010      	beq.n	8006c30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	4b70      	ldr	r3, [pc, #448]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d908      	bls.n	8006c30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	496a      	ldr	r1, [pc, #424]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d010      	beq.n	8006c5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699a      	ldr	r2, [r3, #24]
 8006c40:	4b64      	ldr	r3, [pc, #400]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d908      	bls.n	8006c5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c4c:	4b61      	ldr	r3, [pc, #388]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	495e      	ldr	r1, [pc, #376]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d010      	beq.n	8006c8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69da      	ldr	r2, [r3, #28]
 8006c6e:	4b59      	ldr	r3, [pc, #356]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d908      	bls.n	8006c8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c7a:	4b56      	ldr	r3, [pc, #344]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	4953      	ldr	r1, [pc, #332]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d908      	bls.n	8006cba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f023 020f 	bic.w	r2, r3, #15
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4947      	ldr	r1, [pc, #284]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d055      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cc6:	4b43      	ldr	r3, [pc, #268]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	4940      	ldr	r1, [pc, #256]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d121      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0f6      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d107      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cf8:	4b36      	ldr	r3, [pc, #216]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d115      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0ea      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d10:	4b30      	ldr	r3, [pc, #192]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0de      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d20:	4b2c      	ldr	r3, [pc, #176]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0d6      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d30:	4b28      	ldr	r3, [pc, #160]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f023 0207 	bic.w	r2, r3, #7
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4925      	ldr	r1, [pc, #148]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d42:	f7fb fe8d 	bl	8002a60 <HAL_GetTick>
 8006d46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4a:	f7fb fe89 	bl	8002a60 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0be      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d60:	4b1c      	ldr	r3, [pc, #112]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d1eb      	bne.n	8006d4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d010      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	4b14      	ldr	r3, [pc, #80]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d208      	bcs.n	8006da0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d8e:	4b11      	ldr	r3, [pc, #68]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f023 020f 	bic.w	r2, r3, #15
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	490e      	ldr	r1, [pc, #56]	@ (8006dd4 <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da0:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d214      	bcs.n	8006dd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 020f 	bic.w	r2, r3, #15
 8006db6:	4906      	ldr	r1, [pc, #24]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b04      	ldr	r3, [pc, #16]	@ (8006dd0 <HAL_RCC_ClockConfig+0x240>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e086      	b.n	8006ede <HAL_RCC_ClockConfig+0x34e>
 8006dd0:	52002000 	.word	0x52002000
 8006dd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d208      	bcs.n	8006e06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006df4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	4939      	ldr	r1, [pc, #228]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d010      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	4b34      	ldr	r3, [pc, #208]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d208      	bcs.n	8006e34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e22:	4b31      	ldr	r3, [pc, #196]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	492e      	ldr	r1, [pc, #184]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	4b28      	ldr	r3, [pc, #160]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d208      	bcs.n	8006e62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e50:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	4922      	ldr	r1, [pc, #136]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d010      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d208      	bcs.n	8006e90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	4917      	ldr	r1, [pc, #92]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e90:	f000 f834 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	4912      	ldr	r1, [pc, #72]	@ (8006eec <HAL_RCC_ClockConfig+0x35c>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee8 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <HAL_RCC_ClockConfig+0x35c>)
 8006eb8:	5cd3      	ldrb	r3, [r2, r3]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef0 <HAL_RCC_ClockConfig+0x360>)
 8006ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef4 <HAL_RCC_ClockConfig+0x364>)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ece:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <HAL_RCC_ClockConfig+0x368>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fb fd7a 	bl	80029cc <HAL_InitTick>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	0800bc38 	.word	0x0800bc38
 8006ef0:	2400000c 	.word	0x2400000c
 8006ef4:	24000008 	.word	0x24000008
 8006ef8:	24000010 	.word	0x24000010

08006efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f02:	4bb3      	ldr	r3, [pc, #716]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f0a:	2b18      	cmp	r3, #24
 8006f0c:	f200 8155 	bhi.w	80071ba <HAL_RCC_GetSysClockFreq+0x2be>
 8006f10:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	080071bb 	.word	0x080071bb
 8006f20:	080071bb 	.word	0x080071bb
 8006f24:	080071bb 	.word	0x080071bb
 8006f28:	080071bb 	.word	0x080071bb
 8006f2c:	080071bb 	.word	0x080071bb
 8006f30:	080071bb 	.word	0x080071bb
 8006f34:	080071bb 	.word	0x080071bb
 8006f38:	08006fa3 	.word	0x08006fa3
 8006f3c:	080071bb 	.word	0x080071bb
 8006f40:	080071bb 	.word	0x080071bb
 8006f44:	080071bb 	.word	0x080071bb
 8006f48:	080071bb 	.word	0x080071bb
 8006f4c:	080071bb 	.word	0x080071bb
 8006f50:	080071bb 	.word	0x080071bb
 8006f54:	080071bb 	.word	0x080071bb
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	080071bb 	.word	0x080071bb
 8006f60:	080071bb 	.word	0x080071bb
 8006f64:	080071bb 	.word	0x080071bb
 8006f68:	080071bb 	.word	0x080071bb
 8006f6c:	080071bb 	.word	0x080071bb
 8006f70:	080071bb 	.word	0x080071bb
 8006f74:	080071bb 	.word	0x080071bb
 8006f78:	08006faf 	.word	0x08006faf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f7c:	4b94      	ldr	r3, [pc, #592]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f88:	4b91      	ldr	r3, [pc, #580]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	08db      	lsrs	r3, r3, #3
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	4a90      	ldr	r2, [pc, #576]	@ (80071d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
 8006f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f9a:	e111      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80071d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f9e:	61bb      	str	r3, [r7, #24]
      break;
 8006fa0:	e10e      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80071d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fa4:	61bb      	str	r3, [r7, #24]
      break;
 8006fa6:	e10b      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80071dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006faa:	61bb      	str	r3, [r7, #24]
      break;
 8006fac:	e108      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fae:	4b88      	ldr	r3, [pc, #544]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006fb8:	4b85      	ldr	r3, [pc, #532]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006fc4:	4b82      	ldr	r3, [pc, #520]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006fce:	4b80      	ldr	r3, [pc, #512]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80e1 	beq.w	80071b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	f000 8083 	beq.w	8007100 <HAL_RCC_GetSysClockFreq+0x204>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	f200 80a1 	bhi.w	8007144 <HAL_RCC_GetSysClockFreq+0x248>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_RCC_GetSysClockFreq+0x114>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d056      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800700e:	e099      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007010:	4b6f      	ldr	r3, [pc, #444]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02d      	beq.n	8007078 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800701c:	4b6c      	ldr	r3, [pc, #432]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	08db      	lsrs	r3, r3, #3
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	4a6b      	ldr	r2, [pc, #428]	@ (80071d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
 800702c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007046:	4b62      	ldr	r3, [pc, #392]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007056:	ed97 6a02 	vldr	s12, [r7, #8]
 800705a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80071e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800706a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007072:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007076:	e087      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80071e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708a:	4b51      	ldr	r3, [pc, #324]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	ed97 6a02 	vldr	s12, [r7, #8]
 800709e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80071e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ba:	e065      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80071e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ce:	4b40      	ldr	r3, [pc, #256]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80071e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070fe:	e043      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80071ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800710e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007112:	4b2f      	ldr	r3, [pc, #188]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a02 	vldr	s12, [r7, #8]
 8007126:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80071e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007142:	e021      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80071e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a02 	vldr	s12, [r7, #8]
 800716a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80071e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007186:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007188:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007192:	3301      	adds	r3, #1
 8007194:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 3a90 	vmov	r3, s15
 80071b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071b2:	e005      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
      break;
 80071b8:	e002      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071ba:	4b07      	ldr	r3, [pc, #28]	@ (80071d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071bc:	61bb      	str	r3, [r7, #24]
      break;
 80071be:	bf00      	nop
  }

  return sysclockfreq;
 80071c0:	69bb      	ldr	r3, [r7, #24]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3724      	adds	r7, #36	@ 0x24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	58024400 	.word	0x58024400
 80071d4:	03d09000 	.word	0x03d09000
 80071d8:	003d0900 	.word	0x003d0900
 80071dc:	016e3600 	.word	0x016e3600
 80071e0:	46000000 	.word	0x46000000
 80071e4:	4c742400 	.word	0x4c742400
 80071e8:	4a742400 	.word	0x4a742400
 80071ec:	4bb71b00 	.word	0x4bb71b00

080071f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071f6:	f7ff fe81 	bl	8006efc <HAL_RCC_GetSysClockFreq>
 80071fa:	4602      	mov	r2, r0
 80071fc:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <HAL_RCC_GetHCLKFreq+0x50>)
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	0a1b      	lsrs	r3, r3, #8
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	490f      	ldr	r1, [pc, #60]	@ (8007244 <HAL_RCC_GetHCLKFreq+0x54>)
 8007208:	5ccb      	ldrb	r3, [r1, r3]
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007214:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <HAL_RCC_GetHCLKFreq+0x50>)
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	4a09      	ldr	r2, [pc, #36]	@ (8007244 <HAL_RCC_GetHCLKFreq+0x54>)
 800721e:	5cd3      	ldrb	r3, [r2, r3]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	4a07      	ldr	r2, [pc, #28]	@ (8007248 <HAL_RCC_GetHCLKFreq+0x58>)
 800722c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800722e:	4a07      	ldr	r2, [pc, #28]	@ (800724c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007234:	4b04      	ldr	r3, [pc, #16]	@ (8007248 <HAL_RCC_GetHCLKFreq+0x58>)
 8007236:	681b      	ldr	r3, [r3, #0]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	58024400 	.word	0x58024400
 8007244:	0800bc38 	.word	0x0800bc38
 8007248:	2400000c 	.word	0x2400000c
 800724c:	24000008 	.word	0x24000008

08007250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007254:	f7ff ffcc 	bl	80071f0 <HAL_RCC_GetHCLKFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b06      	ldr	r3, [pc, #24]	@ (8007274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	091b      	lsrs	r3, r3, #4
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	4904      	ldr	r1, [pc, #16]	@ (8007278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007270:	4618      	mov	r0, r3
 8007272:	bd80      	pop	{r7, pc}
 8007274:	58024400 	.word	0x58024400
 8007278:	0800bc38 	.word	0x0800bc38

0800727c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007280:	f7ff ffb6 	bl	80071f0 <HAL_RCC_GetHCLKFreq>
 8007284:	4602      	mov	r2, r0
 8007286:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	0a1b      	lsrs	r3, r3, #8
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	4904      	ldr	r1, [pc, #16]	@ (80072a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007292:	5ccb      	ldrb	r3, [r1, r3]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800729c:	4618      	mov	r0, r3
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	58024400 	.word	0x58024400
 80072a4:	0800bc38 	.word	0x0800bc38

080072a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072ac:	b0c6      	sub	sp, #280	@ 0x118
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80072cc:	2500      	movs	r5, #0
 80072ce:	ea54 0305 	orrs.w	r3, r4, r5
 80072d2:	d049      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072de:	d02f      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80072e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80072e4:	d828      	bhi.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ea:	d01a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80072ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072f0:	d822      	bhi.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fa:	d007      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072fc:	e01c      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fe:	4bab      	ldr	r3, [pc, #684]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	4aaa      	ldr	r2, [pc, #680]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800730a:	e01a      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	3308      	adds	r3, #8
 8007312:	2102      	movs	r1, #2
 8007314:	4618      	mov	r0, r3
 8007316:	f002 fa49 	bl	80097ac <RCCEx_PLL2_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007320:	e00f      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007326:	3328      	adds	r3, #40	@ 0x28
 8007328:	2102      	movs	r1, #2
 800732a:	4618      	mov	r0, r3
 800732c:	f002 faf0 	bl	8009910 <RCCEx_PLL3_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007336:	e004      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800734a:	4b98      	ldr	r3, [pc, #608]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800734c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800734e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007358:	4a94      	ldr	r2, [pc, #592]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800735a:	430b      	orrs	r3, r1
 800735c:	6513      	str	r3, [r2, #80]	@ 0x50
 800735e:	e003      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	ea58 0309 	orrs.w	r3, r8, r9
 800737c:	d047      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007384:	2b04      	cmp	r3, #4
 8007386:	d82a      	bhi.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007388:	a201      	add	r2, pc, #4	@ (adr r2, 8007390 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a5 	.word	0x080073a5
 8007394:	080073b3 	.word	0x080073b3
 8007398:	080073c9 	.word	0x080073c9
 800739c:	080073e7 	.word	0x080073e7
 80073a0:	080073e7 	.word	0x080073e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a4:	4b81      	ldr	r3, [pc, #516]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	4a80      	ldr	r2, [pc, #512]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073b0:	e01a      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	3308      	adds	r3, #8
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f002 f9f6 	bl	80097ac <RCCEx_PLL2_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073c6:	e00f      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	3328      	adds	r3, #40	@ 0x28
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f002 fa9d 	bl	8009910 <RCCEx_PLL3_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073dc:	e004      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073e4:	e000      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80073e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f0:	4b6e      	ldr	r3, [pc, #440]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	f023 0107 	bic.w	r1, r3, #7
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fe:	4a6b      	ldr	r2, [pc, #428]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007400:	430b      	orrs	r3, r1
 8007402:	6513      	str	r3, [r2, #80]	@ 0x50
 8007404:	e003      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800741a:	f04f 0b00 	mov.w	fp, #0
 800741e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007422:	d05b      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800742c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007430:	d03b      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007432:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007436:	d834      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007438:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800743c:	d037      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800743e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007442:	d82e      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007444:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007448:	d033      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800744a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800744e:	d828      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007454:	d01a      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800745a:	d822      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007464:	d007      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007466:	e01c      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007468:	4b50      	ldr	r3, [pc, #320]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a4f      	ldr	r2, [pc, #316]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800746e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007474:	e01e      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	3308      	adds	r3, #8
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f002 f994 	bl	80097ac <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800748a:	e013      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800748c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007490:	3328      	adds	r3, #40	@ 0x28
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f002 fa3b 	bl	8009910 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074a0:	e008      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074a8:	e004      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80074b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10b      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074bc:	4b3b      	ldr	r3, [pc, #236]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074cc:	4a37      	ldr	r2, [pc, #220]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80074ce:	430b      	orrs	r3, r1
 80074d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d2:	e003      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80074e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074ec:	2300      	movs	r3, #0
 80074ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074f6:	460b      	mov	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	d05d      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007504:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007508:	d03b      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800750a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800750e:	d834      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007514:	d037      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800751a:	d82e      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800751c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007520:	d033      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007522:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007526:	d828      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800752c:	d01a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800752e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007532:	d822      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800753c:	d007      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800753e:	e01c      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800754a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800754c:	e01e      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	3308      	adds	r3, #8
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f002 f928 	bl	80097ac <RCCEx_PLL2_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007562:	e013      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	3328      	adds	r3, #40	@ 0x28
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f002 f9cf 	bl	8009910 <RCCEx_PLL3_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007578:	e008      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007580:	e004      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007582:	bf00      	nop
 8007584:	e002      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800758a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10d      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007594:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007598:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075a4:	4a01      	ldr	r2, [pc, #4]	@ (80075ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a6:	430b      	orrs	r3, r1
 80075a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075aa:	e005      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80075ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80075c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075c8:	2300      	movs	r3, #0
 80075ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d03a      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075de:	2b30      	cmp	r3, #48	@ 0x30
 80075e0:	d01f      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80075e2:	2b30      	cmp	r3, #48	@ 0x30
 80075e4:	d819      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d00c      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d815      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d019      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d111      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f6:	4baa      	ldr	r3, [pc, #680]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fa:	4aa9      	ldr	r2, [pc, #676]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80075fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007602:	e011      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	3308      	adds	r3, #8
 800760a:	2102      	movs	r1, #2
 800760c:	4618      	mov	r0, r3
 800760e:	f002 f8cd 	bl	80097ac <RCCEx_PLL2_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007620:	e002      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007630:	4b9b      	ldr	r3, [pc, #620]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007634:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763e:	4a98      	ldr	r2, [pc, #608]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007640:	430b      	orrs	r3, r1
 8007642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007644:	e003      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007646:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800764a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800765a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007664:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007668:	460b      	mov	r3, r1
 800766a:	4313      	orrs	r3, r2
 800766c:	d051      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007678:	d035      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800767a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767e:	d82e      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007680:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007684:	d031      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007686:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800768a:	d828      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800768c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007690:	d01a      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007696:	d822      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076a0:	d007      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80076a2:	e01c      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a4:	4b7e      	ldr	r3, [pc, #504]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	4a7d      	ldr	r2, [pc, #500]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076b0:	e01c      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	3308      	adds	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f002 f876 	bl	80097ac <RCCEx_PLL2_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076c6:	e011      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	3328      	adds	r3, #40	@ 0x28
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f002 f91d 	bl	8009910 <RCCEx_PLL3_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80076dc:	e006      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076e4:	e002      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80076ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076f4:	4b6a      	ldr	r3, [pc, #424]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007702:	4a67      	ldr	r2, [pc, #412]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007704:	430b      	orrs	r3, r1
 8007706:	6513      	str	r3, [r2, #80]	@ 0x50
 8007708:	e003      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800770e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800771e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007728:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800772c:	460b      	mov	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	d053      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800773c:	d033      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800773e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007742:	d82c      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007748:	d02f      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800774a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800774e:	d826      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007754:	d02b      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800775a:	d820      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007760:	d012      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007766:	d81a      	bhi.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d022      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800776c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007770:	d115      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	3308      	adds	r3, #8
 8007778:	2101      	movs	r1, #1
 800777a:	4618      	mov	r0, r3
 800777c:	f002 f816 	bl	80097ac <RCCEx_PLL2_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007786:	e015      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	3328      	adds	r3, #40	@ 0x28
 800778e:	2101      	movs	r1, #1
 8007790:	4618      	mov	r0, r3
 8007792:	f002 f8bd 	bl	8009910 <RCCEx_PLL3_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800779c:	e00a      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80077b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077bc:	4b38      	ldr	r3, [pc, #224]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ca:	4a35      	ldr	r2, [pc, #212]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80077e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077f4:	460b      	mov	r3, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	d058      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007806:	d033      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800780c:	d82c      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	d02f      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007818:	d826      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800781a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800781e:	d02b      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007820:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007824:	d820      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800782a:	d012      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800782c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007830:	d81a      	bhi.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d022      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800783a:	d115      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007840:	3308      	adds	r3, #8
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f001 ffb1 	bl	80097ac <RCCEx_PLL2_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007850:	e015      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	3328      	adds	r3, #40	@ 0x28
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f002 f858 	bl	8009910 <RCCEx_PLL3_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007866:	e00a      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800786e:	e006      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007870:	bf00      	nop
 8007872:	e004      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800787c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10e      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007886:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007896:	4a02      	ldr	r2, [pc, #8]	@ (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007898:	430b      	orrs	r3, r1
 800789a:	6593      	str	r3, [r2, #88]	@ 0x58
 800789c:	e006      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80078b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	d037      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d6:	d00e      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80078d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078dc:	d816      	bhi.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d018      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80078e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078e6:	d111      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e8:	4bc4      	ldr	r3, [pc, #784]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4ac3      	ldr	r2, [pc, #780]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078f4:	e00f      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	3308      	adds	r3, #8
 80078fc:	2101      	movs	r1, #1
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 ff54 	bl	80097ac <RCCEx_PLL2_Config>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800791e:	4bb7      	ldr	r3, [pc, #732]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800792c:	4ab3      	ldr	r2, [pc, #716]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800792e:	430b      	orrs	r3, r1
 8007930:	6513      	str	r3, [r2, #80]	@ 0x50
 8007932:	e003      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007952:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d039      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007962:	2b03      	cmp	r3, #3
 8007964:	d81c      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	080079a9 	.word	0x080079a9
 8007970:	0800797d 	.word	0x0800797d
 8007974:	0800798b 	.word	0x0800798b
 8007978:	080079a9 	.word	0x080079a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800797c:	4b9f      	ldr	r3, [pc, #636]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	4a9e      	ldr	r2, [pc, #632]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007988:	e00f      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	3308      	adds	r3, #8
 8007990:	2102      	movs	r1, #2
 8007992:	4618      	mov	r0, r3
 8007994:	f001 ff0a 	bl	80097ac <RCCEx_PLL2_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800799e:	e004      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079a6:	e000      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80079a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079b2:	4b92      	ldr	r3, [pc, #584]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b6:	f023 0103 	bic.w	r1, r3, #3
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c0:	4a8e      	ldr	r2, [pc, #568]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079c2:	430b      	orrs	r3, r1
 80079c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079c6:	e003      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80079dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079e0:	2300      	movs	r3, #0
 80079e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f000 8099 	beq.w	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f2:	4b83      	ldr	r3, [pc, #524]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a82      	ldr	r2, [pc, #520]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079fe:	f7fb f82f 	bl	8002a60 <HAL_GetTick>
 8007a02:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a06:	e00b      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a08:	f7fb f82a 	bl	8002a60 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b64      	cmp	r3, #100	@ 0x64
 8007a16:	d903      	bls.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a1e:	e005      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a20:	4b77      	ldr	r3, [pc, #476]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0ed      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d173      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a34:	4b71      	ldr	r3, [pc, #452]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a40:	4053      	eors	r3, r2
 8007a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d015      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a56:	4b69      	ldr	r3, [pc, #420]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5a:	4a68      	ldr	r2, [pc, #416]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a62:	4b66      	ldr	r3, [pc, #408]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a66:	4a65      	ldr	r2, [pc, #404]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a6e:	4a63      	ldr	r2, [pc, #396]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a82:	d118      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fa ffec 	bl	8002a60 <HAL_GetTick>
 8007a88:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a8c:	e00d      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a8e:	f7fa ffe7 	bl	8002a60 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d903      	bls.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007aa8:	e005      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aaa:	4b54      	ldr	r3, [pc, #336]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0eb      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d129      	bne.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ace:	d10e      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ae0:	091a      	lsrs	r2, r3, #4
 8007ae2:	4b48      	ldr	r3, [pc, #288]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	4a45      	ldr	r2, [pc, #276]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6113      	str	r3, [r2, #16]
 8007aec:	e005      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007aee:	4b43      	ldr	r3, [pc, #268]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4a42      	ldr	r2, [pc, #264]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007af8:	6113      	str	r3, [r2, #16]
 8007afa:	4b40      	ldr	r3, [pc, #256]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007afc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b10:	e008      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007b1a:	e003      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f002 0301 	and.w	r3, r2, #1
 8007b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f000 808f 	beq.w	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b4c:	2b28      	cmp	r3, #40	@ 0x28
 8007b4e:	d871      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007b50:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007c3d 	.word	0x08007c3d
 8007b5c:	08007c35 	.word	0x08007c35
 8007b60:	08007c35 	.word	0x08007c35
 8007b64:	08007c35 	.word	0x08007c35
 8007b68:	08007c35 	.word	0x08007c35
 8007b6c:	08007c35 	.word	0x08007c35
 8007b70:	08007c35 	.word	0x08007c35
 8007b74:	08007c35 	.word	0x08007c35
 8007b78:	08007c09 	.word	0x08007c09
 8007b7c:	08007c35 	.word	0x08007c35
 8007b80:	08007c35 	.word	0x08007c35
 8007b84:	08007c35 	.word	0x08007c35
 8007b88:	08007c35 	.word	0x08007c35
 8007b8c:	08007c35 	.word	0x08007c35
 8007b90:	08007c35 	.word	0x08007c35
 8007b94:	08007c35 	.word	0x08007c35
 8007b98:	08007c1f 	.word	0x08007c1f
 8007b9c:	08007c35 	.word	0x08007c35
 8007ba0:	08007c35 	.word	0x08007c35
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c35 	.word	0x08007c35
 8007bac:	08007c35 	.word	0x08007c35
 8007bb0:	08007c35 	.word	0x08007c35
 8007bb4:	08007c35 	.word	0x08007c35
 8007bb8:	08007c3d 	.word	0x08007c3d
 8007bbc:	08007c35 	.word	0x08007c35
 8007bc0:	08007c35 	.word	0x08007c35
 8007bc4:	08007c35 	.word	0x08007c35
 8007bc8:	08007c35 	.word	0x08007c35
 8007bcc:	08007c35 	.word	0x08007c35
 8007bd0:	08007c35 	.word	0x08007c35
 8007bd4:	08007c35 	.word	0x08007c35
 8007bd8:	08007c3d 	.word	0x08007c3d
 8007bdc:	08007c35 	.word	0x08007c35
 8007be0:	08007c35 	.word	0x08007c35
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c35 	.word	0x08007c35
 8007bf0:	08007c35 	.word	0x08007c35
 8007bf4:	08007c35 	.word	0x08007c35
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	58024800 	.word	0x58024800
 8007c04:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 fdcb 	bl	80097ac <RCCEx_PLL2_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c1c:	e00f      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	3328      	adds	r3, #40	@ 0x28
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fe72 	bl	8009910 <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007c32:	e004      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c46:	4bbf      	ldr	r3, [pc, #764]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c54:	4abb      	ldr	r2, [pc, #748]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c5a:	e003      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f002 0302 	and.w	r3, r2, #2
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d041      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d824      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ce1 	.word	0x08007ce1
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cc3 	.word	0x08007cc3
 8007ca0:	08007ce1 	.word	0x08007ce1
 8007ca4:	08007ce1 	.word	0x08007ce1
 8007ca8:	08007ce1 	.word	0x08007ce1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 fd79 	bl	80097ac <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc6:	3328      	adds	r3, #40	@ 0x28
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 fe20 	bl	8009910 <RCCEx_PLL3_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e004      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cde:	e000      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cea:	4b96      	ldr	r3, [pc, #600]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cee:	f023 0107 	bic.w	r1, r3, #7
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf8:	4a92      	ldr	r2, [pc, #584]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cfe:	e003      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f002 0304 	and.w	r3, r2, #4
 8007d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d044      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d825      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d55 	.word	0x08007d55
 8007d44:	08007d6b 	.word	0x08007d6b
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007d89 	.word	0x08007d89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	3308      	adds	r3, #8
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 fd25 	bl	80097ac <RCCEx_PLL2_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d68:	e00f      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6e:	3328      	adds	r3, #40	@ 0x28
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fdcc 	bl	8009910 <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d7e:	e004      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10b      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d92:	4b6c      	ldr	r3, [pc, #432]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d96:	f023 0107 	bic.w	r1, r3, #7
 8007d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	4a68      	ldr	r2, [pc, #416]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007da8:	e003      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f002 0320 	and.w	r3, r2, #32
 8007dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	d055      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007dde:	d033      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007de4:	d82c      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d02f      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df0:	d826      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007df6:	d02b      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007df8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dfc:	d820      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e02:	d012      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e08:	d81a      	bhi.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d022      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e12:	d115      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	3308      	adds	r3, #8
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f001 fcc5 	bl	80097ac <RCCEx_PLL2_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e28:	e015      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2e:	3328      	adds	r3, #40	@ 0x28
 8007e30:	2102      	movs	r1, #2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fd6c 	bl	8009910 <RCCEx_PLL3_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007e3e:	e00a      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e46:	e006      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e5e:	4b39      	ldr	r3, [pc, #228]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e6e:	4a35      	ldr	r2, [pc, #212]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e70:	430b      	orrs	r3, r1
 8007e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e74:	e003      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d058      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ea6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eaa:	d033      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007eac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007eb0:	d82c      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb6:	d02f      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebc:	d826      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ec2:	d02b      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ec8:	d820      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ece:	d012      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ed4:	d81a      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d022      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ede:	d115      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fc5f 	bl	80097ac <RCCEx_PLL2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ef4:	e015      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efa:	3328      	adds	r3, #40	@ 0x28
 8007efc:	2102      	movs	r1, #2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fd06 	bl	8009910 <RCCEx_PLL3_Config>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f0a:	e00a      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f12:	e006      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f14:	bf00      	nop
 8007f16:	e004      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e002      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e000      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10e      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f2a:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f3a:	4a02      	ldr	r2, [pc, #8]	@ (8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f40:	e006      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007f42:	bf00      	nop
 8007f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d055      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f7c:	d033      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007f7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f82:	d82c      	bhi.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f88:	d02f      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8e:	d826      	bhi.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007f90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f94:	d02b      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007f96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f9a:	d820      	bhi.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa0:	d012      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa6:	d81a      	bhi.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d022      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb0:	d115      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 fbf6 	bl	80097ac <RCCEx_PLL2_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fc6:	e015      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fcc:	3328      	adds	r3, #40	@ 0x28
 8007fce:	2102      	movs	r1, #2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fc9d 	bl	8009910 <RCCEx_PLL3_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007fdc:	e00a      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fe4:	e006      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007fe6:	bf00      	nop
 8007fe8:	e004      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007fea:	bf00      	nop
 8007fec:	e002      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007fee:	bf00      	nop
 8007ff0:	e000      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ffc:	4ba0      	ldr	r3, [pc, #640]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008000:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800800c:	4a9c      	ldr	r2, [pc, #624]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800800e:	430b      	orrs	r3, r1
 8008010:	6593      	str	r3, [r2, #88]	@ 0x58
 8008012:	e003      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f002 0308 	and.w	r3, r2, #8
 8008028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800802c:	2300      	movs	r3, #0
 800802e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008032:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008036:	460b      	mov	r3, r1
 8008038:	4313      	orrs	r3, r2
 800803a:	d01e      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008048:	d10c      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804e:	3328      	adds	r3, #40	@ 0x28
 8008050:	2102      	movs	r1, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc5c 	bl	8009910 <RCCEx_PLL3_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008064:	4b86      	ldr	r3, [pc, #536]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008068:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008074:	4a82      	ldr	r2, [pc, #520]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008076:	430b      	orrs	r3, r1
 8008078:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	f002 0310 	and.w	r3, r2, #16
 8008086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800808a:	2300      	movs	r3, #0
 800808c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008090:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008094:	460b      	mov	r3, r1
 8008096:	4313      	orrs	r3, r2
 8008098:	d01e      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a6:	d10c      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ac:	3328      	adds	r3, #40	@ 0x28
 80080ae:	2102      	movs	r1, #2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 fc2d 	bl	8009910 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080d2:	4a6b      	ldr	r2, [pc, #428]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80080e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080e6:	2300      	movs	r3, #0
 80080e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080ee:	460b      	mov	r3, r1
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d03e      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80080f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008100:	d022      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008102:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008106:	d81b      	bhi.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008110:	d00b      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008112:	e015      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008118:	3308      	adds	r3, #8
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fb45 	bl	80097ac <RCCEx_PLL2_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008128:	e00f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800812a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812e:	3328      	adds	r3, #40	@ 0x28
 8008130:	2102      	movs	r1, #2
 8008132:	4618      	mov	r0, r3
 8008134:	f001 fbec 	bl	8009910 <RCCEx_PLL3_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800813e:	e004      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008146:	e000      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008152:	4b4b      	ldr	r3, [pc, #300]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008156:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008162:	4a47      	ldr	r2, [pc, #284]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008164:	430b      	orrs	r3, r1
 8008166:	6593      	str	r3, [r2, #88]	@ 0x58
 8008168:	e003      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800817e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008180:	2300      	movs	r3, #0
 8008182:	677b      	str	r3, [r7, #116]	@ 0x74
 8008184:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008188:	460b      	mov	r3, r1
 800818a:	4313      	orrs	r3, r2
 800818c:	d03b      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008196:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800819a:	d01f      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800819c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081a0:	d818      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80081a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081a6:	d003      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80081a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081ac:	d007      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80081ae:	e011      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b0:	4b33      	ldr	r3, [pc, #204]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b4:	4a32      	ldr	r2, [pc, #200]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c2:	3328      	adds	r3, #40	@ 0x28
 80081c4:	2101      	movs	r1, #1
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fba2 	bl	8009910 <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081e6:	4b26      	ldr	r3, [pc, #152]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081f6:	4a22      	ldr	r2, [pc, #136]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80081fc:	e003      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008202:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008212:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008214:	2300      	movs	r3, #0
 8008216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008218:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800821c:	460b      	mov	r3, r1
 800821e:	4313      	orrs	r3, r2
 8008220:	d034      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008230:	d007      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008232:	e011      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008234:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	4a11      	ldr	r2, [pc, #68]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800823a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008240:	e00e      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	3308      	adds	r3, #8
 8008248:	2102      	movs	r1, #2
 800824a:	4618      	mov	r0, r3
 800824c:	f001 faae 	bl	80097ac <RCCEx_PLL2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008256:	e003      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800825e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10d      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800826a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008276:	4a02      	ldr	r2, [pc, #8]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008278:	430b      	orrs	r3, r1
 800827a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800827c:	e006      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008298:	663b      	str	r3, [r7, #96]	@ 0x60
 800829a:	2300      	movs	r3, #0
 800829c:	667b      	str	r3, [r7, #100]	@ 0x64
 800829e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80082a2:	460b      	mov	r3, r1
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d00c      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	3328      	adds	r3, #40	@ 0x28
 80082ae:	2102      	movs	r1, #2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fb2d 	bl	8009910 <RCCEx_PLL3_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80082ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082d0:	2300      	movs	r3, #0
 80082d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80082d8:	460b      	mov	r3, r1
 80082da:	4313      	orrs	r3, r2
 80082dc:	d036      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e8:	d018      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80082ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082ee:	d811      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80082f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f4:	d014      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80082f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082fa:	d80b      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008304:	d106      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008306:	4bb7      	ldr	r3, [pc, #732]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	4ab6      	ldr	r2, [pc, #728]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800830c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008312:	e008      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800831a:	e004      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800831c:	bf00      	nop
 800831e:	e002      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008320:	bf00      	nop
 8008322:	e000      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008326:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800832e:	4bad      	ldr	r3, [pc, #692]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008332:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833c:	4aa9      	ldr	r2, [pc, #676]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800833e:	430b      	orrs	r3, r1
 8008340:	6553      	str	r3, [r2, #84]	@ 0x54
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008358:	653b      	str	r3, [r7, #80]	@ 0x50
 800835a:	2300      	movs	r3, #0
 800835c:	657b      	str	r3, [r7, #84]	@ 0x54
 800835e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008368:	4b9e      	ldr	r3, [pc, #632]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800836a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008376:	4a9b      	ldr	r2, [pc, #620]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008378:	430b      	orrs	r3, r1
 800837a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800838a:	2300      	movs	r3, #0
 800838c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800838e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008392:	460b      	mov	r3, r1
 8008394:	4313      	orrs	r3, r2
 8008396:	d009      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008398:	4b92      	ldr	r3, [pc, #584]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800839a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800839c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a6:	4a8f      	ldr	r2, [pc, #572]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80083b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083ba:	2300      	movs	r3, #0
 80083bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083c2:	460b      	mov	r3, r1
 80083c4:	4313      	orrs	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083c8:	4b86      	ldr	r3, [pc, #536]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	4a85      	ldr	r2, [pc, #532]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083d2:	6113      	str	r3, [r2, #16]
 80083d4:	4b83      	ldr	r3, [pc, #524]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083d6:	6919      	ldr	r1, [r3, #16]
 80083d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083e0:	4a80      	ldr	r2, [pc, #512]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80083e2:	430b      	orrs	r3, r1
 80083e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80083f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80083fc:	460b      	mov	r3, r1
 80083fe:	4313      	orrs	r3, r2
 8008400:	d009      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008402:	4b78      	ldr	r3, [pc, #480]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	4a74      	ldr	r2, [pc, #464]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008412:	430b      	orrs	r3, r1
 8008414:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008422:	633b      	str	r3, [r7, #48]	@ 0x30
 8008424:	2300      	movs	r3, #0
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
 8008428:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d00a      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008432:	4b6c      	ldr	r3, [pc, #432]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008436:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008442:	4a68      	ldr	r2, [pc, #416]	@ (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008444:	430b      	orrs	r3, r1
 8008446:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	2100      	movs	r1, #0
 8008452:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800845a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800845e:	460b      	mov	r3, r1
 8008460:	4313      	orrs	r3, r2
 8008462:	d011      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	3308      	adds	r3, #8
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f001 f99d 	bl	80097ac <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	2100      	movs	r1, #0
 8008492:	6239      	str	r1, [r7, #32]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
 800849a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d011      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a8:	3308      	adds	r3, #8
 80084aa:	2101      	movs	r1, #1
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 f97d 	bl	80097ac <RCCEx_PLL2_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	2100      	movs	r1, #0
 80084d2:	61b9      	str	r1, [r7, #24]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80084de:	460b      	mov	r3, r1
 80084e0:	4313      	orrs	r3, r2
 80084e2:	d011      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	3308      	adds	r3, #8
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f95d 	bl	80097ac <RCCEx_PLL2_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80084f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	2100      	movs	r1, #0
 8008512:	6139      	str	r1, [r7, #16]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d011      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	3328      	adds	r3, #40	@ 0x28
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f9ef 	bl	8009910 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	2100      	movs	r1, #0
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d011      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	3328      	adds	r3, #40	@ 0x28
 800856a:	2101      	movs	r1, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f001 f9cf 	bl	8009910 <RCCEx_PLL3_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	2100      	movs	r1, #0
 8008592:	6039      	str	r1, [r7, #0]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d011      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f9af 	bl	8009910 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80085b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80085c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	e000      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	58024400 	.word	0x58024400

080085e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b090      	sub	sp, #64	@ 0x40
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80085fa:	430b      	orrs	r3, r1
 80085fc:	f040 8094 	bne.w	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008600:	4b9b      	ldr	r3, [pc, #620]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	2b04      	cmp	r3, #4
 800860e:	f200 8087 	bhi.w	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	0800862d 	.word	0x0800862d
 800861c:	08008655 	.word	0x08008655
 8008620:	0800867d 	.word	0x0800867d
 8008624:	08008719 	.word	0x08008719
 8008628:	080086a5 	.word	0x080086a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862c:	4b90      	ldr	r3, [pc, #576]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008634:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008638:	d108      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 ff62 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008648:	f000 bc93 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008650:	f000 bc8f 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008654:	4b86      	ldr	r3, [pc, #536]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800865c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008660:	d108      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008662:	f107 0318 	add.w	r3, r7, #24
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fca6 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008670:	f000 bc7f 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	f000 bc7b 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867c:	4b7c      	ldr	r3, [pc, #496]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008688:	d108      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868a:	f107 030c 	add.w	r3, r7, #12
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fde6 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008698:	f000 bc6b 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a0:	f000 bc67 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a4:	4b72      	ldr	r3, [pc, #456]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086ae:	4b70      	ldr	r3, [pc, #448]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d10c      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c0:	4b6b      	ldr	r3, [pc, #428]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	08db      	lsrs	r3, r3, #3
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	4a6a      	ldr	r2, [pc, #424]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d2:	e01f      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d4:	4b66      	ldr	r3, [pc, #408]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e0:	d106      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80086e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086e8:	d102      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086ea:	4b63      	ldr	r3, [pc, #396]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ee:	e011      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086fc:	d106      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80086fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008704:	d102      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008706:	4b5d      	ldr	r3, [pc, #372]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800870a:	e003      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008710:	f000 bc2f 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008714:	f000 bc2d 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008718:	4b59      	ldr	r3, [pc, #356]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871c:	f000 bc29 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008724:	f000 bc25 	b.w	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008730:	430b      	orrs	r3, r1
 8008732:	f040 80a7 	bne.w	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008736:	4b4e      	ldr	r3, [pc, #312]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800873e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008746:	d054      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800874e:	f200 808b 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008758:	f000 8083 	beq.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008762:	f200 8081 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800876c:	d02f      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008774:	d878      	bhi.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008782:	d012      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008784:	e070      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008786:	4b3a      	ldr	r3, [pc, #232]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800878e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008792:	d107      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f000 feb5 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800879e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a2:	e3e6      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e3e3      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087aa:	4b31      	ldr	r3, [pc, #196]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b6:	d107      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b8:	f107 0318 	add.w	r3, r7, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fbfb 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c6:	e3d4      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087cc:	e3d1      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ce:	4b28      	ldr	r3, [pc, #160]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087da:	d107      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fd3d 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ea:	e3c2      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f0:	e3bf      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b04      	cmp	r3, #4
 8008806:	d10c      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800880e:	4b18      	ldr	r3, [pc, #96]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	08db      	lsrs	r3, r3, #3
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	4a16      	ldr	r2, [pc, #88]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800881a:	fa22 f303 	lsr.w	r3, r2, r3
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008820:	e01e      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008822:	4b13      	ldr	r3, [pc, #76]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882e:	d106      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008836:	d102      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008838:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800883c:	e010      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884a:	d106      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800884c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008852:	d102      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008854:	4b09      	ldr	r3, [pc, #36]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800885e:	e388      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008860:	e387      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008862:	4b07      	ldr	r3, [pc, #28]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e384      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886c:	e381      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
 8008874:	03d09000 	.word	0x03d09000
 8008878:	003d0900 	.word	0x003d0900
 800887c:	016e3600 	.word	0x016e3600
 8008880:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008888:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800888c:	430b      	orrs	r3, r1
 800888e:	f040 809c 	bne.w	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008892:	4b9e      	ldr	r3, [pc, #632]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008896:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800889a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088a2:	d054      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088aa:	f200 808b 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088b4:	f000 8083 	beq.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088be:	f200 8081 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088c8:	d02f      	beq.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088d0:	d878      	bhi.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d004      	beq.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088de:	d012      	beq.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80088e0:	e070      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088e2:	4b8a      	ldr	r3, [pc, #552]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ee:	d107      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fe07 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fe:	e338      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008904:	e335      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008906:	4b81      	ldr	r3, [pc, #516]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008912:	d107      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fb4d 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008922:	e326      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	e323      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800892a:	4b78      	ldr	r3, [pc, #480]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008936:	d107      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fc8f 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008946:	e314      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894c:	e311      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800894e:	4b6f      	ldr	r3, [pc, #444]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008958:	4b6c      	ldr	r3, [pc, #432]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b04      	cmp	r3, #4
 8008962:	d10c      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800896a:	4b68      	ldr	r3, [pc, #416]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	08db      	lsrs	r3, r3, #3
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	4a66      	ldr	r2, [pc, #408]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008976:	fa22 f303 	lsr.w	r3, r2, r3
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800897c:	e01e      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800897e:	4b63      	ldr	r3, [pc, #396]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800898a:	d106      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008992:	d102      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008994:	4b5f      	ldr	r3, [pc, #380]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008998:	e010      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800899a:	4b5c      	ldr	r3, [pc, #368]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089b0:	4b59      	ldr	r3, [pc, #356]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b4:	e002      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089ba:	e2da      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089bc:	e2d9      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089be:	4b57      	ldr	r3, [pc, #348]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80089c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c2:	e2d6      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c8:	e2d3      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80089d2:	430b      	orrs	r3, r1
 80089d4:	f040 80a7 	bne.w	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089d8:	4b4c      	ldr	r3, [pc, #304]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089e8:	d055      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f0:	f200 8096 	bhi.w	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089fa:	f000 8084 	beq.w	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a04:	f200 808c 	bhi.w	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0e:	d030      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a16:	f200 8083 	bhi.w	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a26:	d012      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008a28:	e07a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a2a:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a36:	d107      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fd63 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a46:	e294      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a4c:	e291      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5c:	f107 0318 	add.w	r3, r7, #24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 faa9 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6a:	e282      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a70:	e27f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a72:	4b26      	ldr	r3, [pc, #152]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a80:	f107 030c 	add.w	r3, r7, #12
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fbeb 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8e:	e270      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e26d      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a96:	4b1d      	ldr	r3, [pc, #116]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d10c      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab2:	4b16      	ldr	r3, [pc, #88]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	4a14      	ldr	r2, [pc, #80]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008abe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac4:	e01e      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac6:	4b11      	ldr	r3, [pc, #68]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ada:	d102      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008adc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae0:	e010      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aee:	d106      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008af6:	d102      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008af8:	4b07      	ldr	r3, [pc, #28]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afc:	e002      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b02:	e236      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b04:	e235      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0a:	e232      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	03d09000 	.word	0x03d09000
 8008b14:	003d0900 	.word	0x003d0900
 8008b18:	016e3600 	.word	0x016e3600
 8008b1c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b24:	e225      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	f040 8085 	bne.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b34:	4b9c      	ldr	r3, [pc, #624]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b44:	d06b      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b4c:	d874      	bhi.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b54:	d056      	beq.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b5c:	d86c      	bhi.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b64:	d03b      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b6c:	d864      	bhi.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b74:	d021      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b7c:	d85c      	bhi.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8a:	d004      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008b8c:	e054      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b8e:	f7fe fb5f 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 8008b92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b94:	e1ed      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b96:	4b84      	ldr	r3, [pc, #528]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba4:	f107 0318 	add.w	r3, r7, #24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fa05 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb2:	e1de      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb8:	e1db      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bba:	4b7b      	ldr	r3, [pc, #492]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fb47 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd6:	e1cc      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bdc:	e1c9      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bde:	4b72      	ldr	r3, [pc, #456]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0304 	and.w	r3, r3, #4
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d109      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bea:	4b6f      	ldr	r3, [pc, #444]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	08db      	lsrs	r3, r3, #3
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	4a6d      	ldr	r2, [pc, #436]	@ (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfc:	e1b9      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c02:	e1b6      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c04:	4b68      	ldr	r3, [pc, #416]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c10:	d102      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008c12:	4b67      	ldr	r3, [pc, #412]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e1ac      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e1a9      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c1e:	4b62      	ldr	r3, [pc, #392]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008c2c:	4b61      	ldr	r3, [pc, #388]	@ (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c30:	e19f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e19c      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e199      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c42:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c46:	430b      	orrs	r3, r1
 8008c48:	d173      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c4a:	4b57      	ldr	r3, [pc, #348]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c5a:	d02f      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c62:	d863      	bhi.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c70:	d012      	beq.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008c72:	e05b      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c74:	4b4c      	ldr	r3, [pc, #304]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c80:	d107      	bne.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c82:	f107 0318 	add.w	r3, r7, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f996 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c90:	e16f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c96:	e16c      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c98:	4b43      	ldr	r3, [pc, #268]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca6:	f107 030c 	add.w	r3, r7, #12
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fad8 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb4:	e15d      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cba:	e15a      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc6:	4b38      	ldr	r3, [pc, #224]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d10c      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d109      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cd8:	4b33      	ldr	r3, [pc, #204]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	08db      	lsrs	r3, r3, #3
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	4a32      	ldr	r2, [pc, #200]	@ (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cea:	e01e      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cec:	4b2e      	ldr	r3, [pc, #184]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cf8:	d106      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d00:	d102      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d02:	4b2b      	ldr	r3, [pc, #172]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d06:	e010      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d08:	4b27      	ldr	r3, [pc, #156]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d14:	d106      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d1c:	d102      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d1e:	4b25      	ldr	r3, [pc, #148]	@ (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d22:	e002      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d28:	e123      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d2a:	e122      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d30:	e11f      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d36:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	d13c      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d54:	d012      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008d56:	e023      	b.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d58:	4b13      	ldr	r3, [pc, #76]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d64:	d107      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fbcc 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d74:	e0fd      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7a:	e0fa      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d88:	d107      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8a:	f107 0318 	add.w	r3, r7, #24
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 f912 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d98:	e0eb      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9e:	e0e8      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da4:	e0e5      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008da6:	bf00      	nop
 8008da8:	58024400 	.word	0x58024400
 8008dac:	03d09000 	.word	0x03d09000
 8008db0:	003d0900 	.word	0x003d0900
 8008db4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	f040 8085 	bne.w	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dd6:	d06b      	beq.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dde:	d874      	bhi.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de6:	d056      	beq.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dee:	d86c      	bhi.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008df6:	d03b      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008dfe:	d864      	bhi.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e06:	d021      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e0e:	d85c      	bhi.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d004      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e1c:	d004      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008e1e:	e054      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e20:	f000 f8b4 	bl	8008f8c <HAL_RCCEx_GetD3PCLK1Freq>
 8008e24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e26:	e0a4      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e28:	4b54      	ldr	r3, [pc, #336]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e34:	d107      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e36:	f107 0318 	add.w	r3, r7, #24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f8bc 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e44:	e095      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4a:	e092      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e58:	d107      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f9fe 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	e083      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6e:	e080      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e70:	4b42      	ldr	r3, [pc, #264]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b04      	cmp	r3, #4
 8008e7a:	d109      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	08db      	lsrs	r3, r3, #3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	4a3e      	ldr	r2, [pc, #248]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8e:	e070      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e94:	e06d      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e96:	4b39      	ldr	r3, [pc, #228]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008ea4:	4b37      	ldr	r3, [pc, #220]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ea8:	e063      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eae:	e060      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eb0:	4b32      	ldr	r3, [pc, #200]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008ebe:	4b32      	ldr	r3, [pc, #200]	@ (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec2:	e056      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e053      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ece:	e050      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	d148      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008edc:	4b27      	ldr	r3, [pc, #156]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ee4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eec:	d02a      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ef4:	d838      	bhi.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f02:	d00d      	beq.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008f04:	e030      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f06:	4b1d      	ldr	r3, [pc, #116]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008f14:	4b1c      	ldr	r3, [pc, #112]	@ (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f18:	e02b      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1e:	e028      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f20:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2c:	d107      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fae8 	bl	8009508 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f3c:	e019      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f42:	e016      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f44:	4b0d      	ldr	r3, [pc, #52]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f50:	d107      	bne.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f52:	f107 0318 	add.w	r3, r7, #24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f82e 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f60:	e007      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f66:	e004      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	e001      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3740      	adds	r7, #64	@ 0x40
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	03d09000 	.word	0x03d09000
 8008f84:	003d0900 	.word	0x003d0900
 8008f88:	016e3600 	.word	0x016e3600

08008f8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f90:	f7fe f92e 	bl	80071f0 <HAL_RCC_GetHCLKFreq>
 8008f94:	4602      	mov	r2, r0
 8008f96:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	091b      	lsrs	r3, r3, #4
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	4904      	ldr	r1, [pc, #16]	@ (8008fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fa2:	5ccb      	ldrb	r3, [r1, r3]
 8008fa4:	f003 031f 	and.w	r3, r3, #31
 8008fa8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	0800bc38 	.word	0x0800bc38

08008fb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b089      	sub	sp, #36	@ 0x24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fc0:	4ba1      	ldr	r3, [pc, #644]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc4:	f003 0303 	and.w	r3, r3, #3
 8008fc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fca:	4b9f      	ldr	r3, [pc, #636]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fce:	0b1b      	lsrs	r3, r3, #12
 8008fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fda:	091b      	lsrs	r3, r3, #4
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fe2:	4b99      	ldr	r3, [pc, #612]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe6:	08db      	lsrs	r3, r3, #3
 8008fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 8111 	beq.w	8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b02      	cmp	r3, #2
 800900a:	f000 8083 	beq.w	8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b02      	cmp	r3, #2
 8009012:	f200 80a1 	bhi.w	8009158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d056      	beq.n	80090d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009022:	e099      	b.n	8009158 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009024:	4b88      	ldr	r3, [pc, #544]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02d      	beq.n	800908c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009030:	4b85      	ldr	r3, [pc, #532]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	08db      	lsrs	r3, r3, #3
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	4a84      	ldr	r2, [pc, #528]	@ (800924c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
 8009040:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905a:	4b7b      	ldr	r3, [pc, #492]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800905c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906a:	ed97 6a03 	vldr	s12, [r7, #12]
 800906e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800907e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009086:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800908a:	e087      	b.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009096:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800909a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800909e:	4b6a      	ldr	r3, [pc, #424]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ce:	e065      	b.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e2:	4b59      	ldr	r3, [pc, #356]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009112:	e043      	b.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009126:	4b48      	ldr	r3, [pc, #288]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009136:	ed97 6a03 	vldr	s12, [r7, #12]
 800913a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800913e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800914a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009156:	e021      	b.n	800919c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b37      	ldr	r3, [pc, #220]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800916c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a03 	vldr	s12, [r7, #12]
 800917e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800919a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800919c:	4b2a      	ldr	r3, [pc, #168]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	0a5b      	lsrs	r3, r3, #9
 80091a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c2:	ee17 2a90 	vmov	r2, s15
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	0c1b      	lsrs	r3, r3, #16
 80091d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d4:	ee07 3a90 	vmov	s15, r3
 80091d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f0:	ee17 2a90 	vmov	r2, s15
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80091f8:	4b13      	ldr	r3, [pc, #76]	@ (8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800920e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009212:	edd7 6a07 	vldr	s13, [r7, #28]
 8009216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800921e:	ee17 2a90 	vmov	r2, s15
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009226:	e008      	b.n	800923a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	609a      	str	r2, [r3, #8]
}
 800923a:	bf00      	nop
 800923c:	3724      	adds	r7, #36	@ 0x24
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400
 800924c:	03d09000 	.word	0x03d09000
 8009250:	46000000 	.word	0x46000000
 8009254:	4c742400 	.word	0x4c742400
 8009258:	4a742400 	.word	0x4a742400
 800925c:	4bb71b00 	.word	0x4bb71b00

08009260 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009260:	b480      	push	{r7}
 8009262:	b089      	sub	sp, #36	@ 0x24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009268:	4ba1      	ldr	r3, [pc, #644]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800926a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009272:	4b9f      	ldr	r3, [pc, #636]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	0d1b      	lsrs	r3, r3, #20
 8009278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800927c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800927e:	4b9c      	ldr	r3, [pc, #624]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800928a:	4b99      	ldr	r3, [pc, #612]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928e:	08db      	lsrs	r3, r3, #3
 8009290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8111 	beq.w	80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f000 8083 	beq.w	80093bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f200 80a1 	bhi.w	8009400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d056      	beq.n	8009378 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092ca:	e099      	b.n	8009400 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092cc:	4b88      	ldr	r3, [pc, #544]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02d      	beq.n	8009334 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092d8:	4b85      	ldr	r3, [pc, #532]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	08db      	lsrs	r3, r3, #3
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	4a84      	ldr	r2, [pc, #528]	@ (80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
 80092e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009302:	4b7b      	ldr	r3, [pc, #492]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	ed97 6a03 	vldr	s12, [r7, #12]
 8009316:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800931a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009332:	e087      	b.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009346:	4b6a      	ldr	r3, [pc, #424]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009356:	ed97 6a03 	vldr	s12, [r7, #12]
 800935a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800935e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800936a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009376:	e065      	b.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938a:	4b59      	ldr	r3, [pc, #356]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939a:	ed97 6a03 	vldr	s12, [r7, #12]
 800939e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ba:	e043      	b.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ce:	4b48      	ldr	r3, [pc, #288]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093de:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fe:	e021      	b.n	8009444 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009412:	4b37      	ldr	r3, [pc, #220]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009422:	ed97 6a03 	vldr	s12, [r7, #12]
 8009426:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800942a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009442:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009444:	4b2a      	ldr	r3, [pc, #168]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009448:	0a5b      	lsrs	r3, r3, #9
 800944a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800945a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800945e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946a:	ee17 2a90 	vmov	r2, s15
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009472:	4b1f      	ldr	r3, [pc, #124]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009498:	ee17 2a90 	vmov	r2, s15
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094a0:	4b13      	ldr	r3, [pc, #76]	@ (80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a4:	0e1b      	lsrs	r3, r3, #24
 80094a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80094be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c6:	ee17 2a90 	vmov	r2, s15
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094ce:	e008      	b.n	80094e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	609a      	str	r2, [r3, #8]
}
 80094e2:	bf00      	nop
 80094e4:	3724      	adds	r7, #36	@ 0x24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	58024400 	.word	0x58024400
 80094f4:	03d09000 	.word	0x03d09000
 80094f8:	46000000 	.word	0x46000000
 80094fc:	4c742400 	.word	0x4c742400
 8009500:	4a742400 	.word	0x4a742400
 8009504:	4bb71b00 	.word	0x4bb71b00

08009508 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009508:	b480      	push	{r7}
 800950a:	b089      	sub	sp, #36	@ 0x24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009510:	4ba0      	ldr	r3, [pc, #640]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800951a:	4b9e      	ldr	r3, [pc, #632]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951e:	091b      	lsrs	r3, r3, #4
 8009520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009524:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009526:	4b9b      	ldr	r3, [pc, #620]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009530:	4b98      	ldr	r3, [pc, #608]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009534:	08db      	lsrs	r3, r3, #3
 8009536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	fb02 f303 	mul.w	r3, r2, r3
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 8111 	beq.w	8009776 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b02      	cmp	r3, #2
 8009558:	f000 8083 	beq.w	8009662 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b02      	cmp	r3, #2
 8009560:	f200 80a1 	bhi.w	80096a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d056      	beq.n	800961e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009570:	e099      	b.n	80096a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009572:	4b88      	ldr	r3, [pc, #544]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d02d      	beq.n	80095da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800957e:	4b85      	ldr	r3, [pc, #532]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	08db      	lsrs	r3, r3, #3
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	4a83      	ldr	r2, [pc, #524]	@ (8009798 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a8:	4b7a      	ldr	r3, [pc, #488]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80095bc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095d8:	e087      	b.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	ee07 3a90 	vmov	s15, r3
 80095e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ec:	4b69      	ldr	r3, [pc, #420]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009600:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800961c:	e065      	b.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	ee07 3a90 	vmov	s15, r3
 8009624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009628:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800962c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009630:	4b58      	ldr	r3, [pc, #352]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009638:	ee07 3a90 	vmov	s15, r3
 800963c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009640:	ed97 6a03 	vldr	s12, [r7, #12]
 8009644:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009650:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009660:	e043      	b.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009674:	4b47      	ldr	r3, [pc, #284]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967c:	ee07 3a90 	vmov	s15, r3
 8009680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009684:	ed97 6a03 	vldr	s12, [r7, #12]
 8009688:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800968c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a4:	e021      	b.n	80096ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b8:	4b36      	ldr	r3, [pc, #216]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096cc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096ea:	4b2a      	ldr	r3, [pc, #168]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	0a5b      	lsrs	r3, r3, #9
 80096f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096f4:	ee07 3a90 	vmov	s15, r3
 80096f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009704:	edd7 6a07 	vldr	s13, [r7, #28]
 8009708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800970c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009710:	ee17 2a90 	vmov	r2, s15
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009718:	4b1e      	ldr	r3, [pc, #120]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	0c1b      	lsrs	r3, r3, #16
 800971e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800972e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009732:	edd7 6a07 	vldr	s13, [r7, #28]
 8009736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973e:	ee17 2a90 	vmov	r2, s15
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009746:	4b13      	ldr	r3, [pc, #76]	@ (8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009750:	ee07 3a90 	vmov	s15, r3
 8009754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009758:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800975c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009760:	edd7 6a07 	vldr	s13, [r7, #28]
 8009764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800976c:	ee17 2a90 	vmov	r2, s15
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009774:	e008      	b.n	8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	609a      	str	r2, [r3, #8]
}
 8009788:	bf00      	nop
 800978a:	3724      	adds	r7, #36	@ 0x24
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	58024400 	.word	0x58024400
 8009798:	03d09000 	.word	0x03d09000
 800979c:	46000000 	.word	0x46000000
 80097a0:	4c742400 	.word	0x4c742400
 80097a4:	4a742400 	.word	0x4a742400
 80097a8:	4bb71b00 	.word	0x4bb71b00

080097ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097ba:	4b53      	ldr	r3, [pc, #332]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80097bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d101      	bne.n	80097ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e099      	b.n	80098fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80097d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097d6:	f7f9 f943 	bl	8002a60 <HAL_GetTick>
 80097da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097dc:	e008      	b.n	80097f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097de:	f7f9 f93f 	bl	8002a60 <HAL_GetTick>
 80097e2:	4602      	mov	r2, r0
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d901      	bls.n	80097f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e086      	b.n	80098fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097f0:	4b45      	ldr	r3, [pc, #276]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1f0      	bne.n	80097de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097fc:	4b42      	ldr	r3, [pc, #264]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	031b      	lsls	r3, r3, #12
 800980a:	493f      	ldr	r1, [pc, #252]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 800980c:	4313      	orrs	r3, r2
 800980e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	3b01      	subs	r3, #1
 8009816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	3b01      	subs	r3, #1
 8009820:	025b      	lsls	r3, r3, #9
 8009822:	b29b      	uxth	r3, r3
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	3b01      	subs	r3, #1
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	3b01      	subs	r3, #1
 800983a:	061b      	lsls	r3, r3, #24
 800983c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009840:	4931      	ldr	r1, [pc, #196]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009842:	4313      	orrs	r3, r2
 8009844:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009846:	4b30      	ldr	r3, [pc, #192]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	492d      	ldr	r1, [pc, #180]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009854:	4313      	orrs	r3, r2
 8009856:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009858:	4b2b      	ldr	r3, [pc, #172]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	f023 0220 	bic.w	r2, r3, #32
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	4928      	ldr	r1, [pc, #160]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009866:	4313      	orrs	r3, r2
 8009868:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800986a:	4b27      	ldr	r3, [pc, #156]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	4a26      	ldr	r2, [pc, #152]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009870:	f023 0310 	bic.w	r3, r3, #16
 8009874:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009876:	4b24      	ldr	r3, [pc, #144]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800987a:	4b24      	ldr	r3, [pc, #144]	@ (800990c <RCCEx_PLL2_Config+0x160>)
 800987c:	4013      	ands	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	69d2      	ldr	r2, [r2, #28]
 8009882:	00d2      	lsls	r2, r2, #3
 8009884:	4920      	ldr	r1, [pc, #128]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009886:	4313      	orrs	r3, r2
 8009888:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800988a:	4b1f      	ldr	r3, [pc, #124]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 800988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988e:	4a1e      	ldr	r2, [pc, #120]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 8009890:	f043 0310 	orr.w	r3, r3, #16
 8009894:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800989c:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 800989e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a0:	4a19      	ldr	r2, [pc, #100]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098a8:	e00f      	b.n	80098ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d106      	bne.n	80098be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098b0:	4b15      	ldr	r3, [pc, #84]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	4a14      	ldr	r2, [pc, #80]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098bc:	e005      	b.n	80098ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098be:	4b12      	ldr	r3, [pc, #72]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	4a11      	ldr	r2, [pc, #68]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098d6:	f7f9 f8c3 	bl	8002a60 <HAL_GetTick>
 80098da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098dc:	e008      	b.n	80098f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098de:	f7f9 f8bf 	bl	8002a60 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d901      	bls.n	80098f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e006      	b.n	80098fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098f0:	4b05      	ldr	r3, [pc, #20]	@ (8009908 <RCCEx_PLL2_Config+0x15c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0f0      	beq.n	80098de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	58024400 	.word	0x58024400
 800990c:	ffff0007 	.word	0xffff0007

08009910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800991e:	4b53      	ldr	r3, [pc, #332]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	2b03      	cmp	r3, #3
 8009928:	d101      	bne.n	800992e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e099      	b.n	8009a62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800992e:	4b4f      	ldr	r3, [pc, #316]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a4e      	ldr	r2, [pc, #312]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800993a:	f7f9 f891 	bl	8002a60 <HAL_GetTick>
 800993e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009940:	e008      	b.n	8009954 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009942:	f7f9 f88d 	bl	8002a60 <HAL_GetTick>
 8009946:	4602      	mov	r2, r0
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	2b02      	cmp	r3, #2
 800994e:	d901      	bls.n	8009954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e086      	b.n	8009a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009954:	4b45      	ldr	r3, [pc, #276]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1f0      	bne.n	8009942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009960:	4b42      	ldr	r3, [pc, #264]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	051b      	lsls	r3, r3, #20
 800996e:	493f      	ldr	r1, [pc, #252]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009970:	4313      	orrs	r3, r2
 8009972:	628b      	str	r3, [r1, #40]	@ 0x28
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	3b01      	subs	r3, #1
 800997a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	3b01      	subs	r3, #1
 8009984:	025b      	lsls	r3, r3, #9
 8009986:	b29b      	uxth	r3, r3
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	3b01      	subs	r3, #1
 8009990:	041b      	lsls	r3, r3, #16
 8009992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	3b01      	subs	r3, #1
 800999e:	061b      	lsls	r3, r3, #24
 80099a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099a4:	4931      	ldr	r1, [pc, #196]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099aa:	4b30      	ldr	r3, [pc, #192]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	492d      	ldr	r1, [pc, #180]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099bc:	4b2b      	ldr	r3, [pc, #172]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	4928      	ldr	r1, [pc, #160]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099ce:	4b27      	ldr	r3, [pc, #156]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d2:	4a26      	ldr	r2, [pc, #152]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099da:	4b24      	ldr	r3, [pc, #144]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099de:	4b24      	ldr	r3, [pc, #144]	@ (8009a70 <RCCEx_PLL3_Config+0x160>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	69d2      	ldr	r2, [r2, #28]
 80099e6:	00d2      	lsls	r2, r2, #3
 80099e8:	4920      	ldr	r1, [pc, #128]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099ee:	4b1f      	ldr	r3, [pc, #124]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 80099f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d106      	bne.n	8009a0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a00:	4b1a      	ldr	r3, [pc, #104]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	4a19      	ldr	r2, [pc, #100]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a0c:	e00f      	b.n	8009a2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d106      	bne.n	8009a22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a14:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	4a14      	ldr	r2, [pc, #80]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a20:	e005      	b.n	8009a2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a22:	4b12      	ldr	r3, [pc, #72]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	4a11      	ldr	r2, [pc, #68]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a0e      	ldr	r2, [pc, #56]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a3a:	f7f9 f811 	bl	8002a60 <HAL_GetTick>
 8009a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a40:	e008      	b.n	8009a54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a42:	f7f9 f80d 	bl	8002a60 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d901      	bls.n	8009a54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e006      	b.n	8009a62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a54:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <RCCEx_PLL3_Config+0x15c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0f0      	beq.n	8009a42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	ffff0007 	.word	0xffff0007

08009a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e042      	b.n	8009b0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d106      	bne.n	8009a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7f8 fde1 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2224      	movs	r2, #36	@ 0x24
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0201 	bic.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 ff38 	bl	800a934 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f8c9 	bl	8009c5c <UART_SetConfig>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d101      	bne.n	8009ad4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e01b      	b.n	8009b0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0201 	orr.w	r2, r2, #1
 8009b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 ffb7 	bl	800aa78 <UART_CheckIdleState>
 8009b0a:	4603      	mov	r3, r0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08a      	sub	sp, #40	@ 0x28
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d17b      	bne.n	8009c26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <HAL_UART_Transmit+0x26>
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e074      	b.n	8009c28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2221      	movs	r2, #33	@ 0x21
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b4e:	f7f8 ff87 	bl	8002a60 <HAL_GetTick>
 8009b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	88fa      	ldrh	r2, [r7, #6]
 8009b58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	88fa      	ldrh	r2, [r7, #6]
 8009b60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b6c:	d108      	bne.n	8009b80 <HAL_UART_Transmit+0x6c>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	e003      	b.n	8009b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b88:	e030      	b.n	8009bec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2200      	movs	r2, #0
 8009b92:	2180      	movs	r1, #128	@ 0x80
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f001 f819 	bl	800abcc <UART_WaitOnFlagUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e03d      	b.n	8009c28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	61bb      	str	r3, [r7, #24]
 8009bc8:	e007      	b.n	8009bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	781a      	ldrb	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1c8      	bne.n	8009b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2140      	movs	r1, #64	@ 0x40
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 ffe2 	bl	800abcc <UART_WaitOnFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d005      	beq.n	8009c1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e006      	b.n	8009c28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	e000      	b.n	8009c28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c26:	2302      	movs	r3, #2
  }
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3720      	adds	r7, #32
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c46:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	4313      	orrs	r3, r2
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
	...

08009c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c60:	b092      	sub	sp, #72	@ 0x48
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	431a      	orrs	r2, r3
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	4bbe      	ldr	r3, [pc, #760]	@ (8009f84 <UART_SetConfig+0x328>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	6812      	ldr	r2, [r2, #0]
 8009c92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4ab3      	ldr	r2, [pc, #716]	@ (8009f88 <UART_SetConfig+0x32c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	4baf      	ldr	r3, [pc, #700]	@ (8009f8c <UART_SetConfig+0x330>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	6812      	ldr	r2, [r2, #0]
 8009cd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce2:	f023 010f 	bic.w	r1, r3, #15
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4aa6      	ldr	r2, [pc, #664]	@ (8009f90 <UART_SetConfig+0x334>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d177      	bne.n	8009dec <UART_SetConfig+0x190>
 8009cfc:	4ba5      	ldr	r3, [pc, #660]	@ (8009f94 <UART_SetConfig+0x338>)
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d04:	2b28      	cmp	r3, #40	@ 0x28
 8009d06:	d86d      	bhi.n	8009de4 <UART_SetConfig+0x188>
 8009d08:	a201      	add	r2, pc, #4	@ (adr r2, 8009d10 <UART_SetConfig+0xb4>)
 8009d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0e:	bf00      	nop
 8009d10:	08009db5 	.word	0x08009db5
 8009d14:	08009de5 	.word	0x08009de5
 8009d18:	08009de5 	.word	0x08009de5
 8009d1c:	08009de5 	.word	0x08009de5
 8009d20:	08009de5 	.word	0x08009de5
 8009d24:	08009de5 	.word	0x08009de5
 8009d28:	08009de5 	.word	0x08009de5
 8009d2c:	08009de5 	.word	0x08009de5
 8009d30:	08009dbd 	.word	0x08009dbd
 8009d34:	08009de5 	.word	0x08009de5
 8009d38:	08009de5 	.word	0x08009de5
 8009d3c:	08009de5 	.word	0x08009de5
 8009d40:	08009de5 	.word	0x08009de5
 8009d44:	08009de5 	.word	0x08009de5
 8009d48:	08009de5 	.word	0x08009de5
 8009d4c:	08009de5 	.word	0x08009de5
 8009d50:	08009dc5 	.word	0x08009dc5
 8009d54:	08009de5 	.word	0x08009de5
 8009d58:	08009de5 	.word	0x08009de5
 8009d5c:	08009de5 	.word	0x08009de5
 8009d60:	08009de5 	.word	0x08009de5
 8009d64:	08009de5 	.word	0x08009de5
 8009d68:	08009de5 	.word	0x08009de5
 8009d6c:	08009de5 	.word	0x08009de5
 8009d70:	08009dcd 	.word	0x08009dcd
 8009d74:	08009de5 	.word	0x08009de5
 8009d78:	08009de5 	.word	0x08009de5
 8009d7c:	08009de5 	.word	0x08009de5
 8009d80:	08009de5 	.word	0x08009de5
 8009d84:	08009de5 	.word	0x08009de5
 8009d88:	08009de5 	.word	0x08009de5
 8009d8c:	08009de5 	.word	0x08009de5
 8009d90:	08009dd5 	.word	0x08009dd5
 8009d94:	08009de5 	.word	0x08009de5
 8009d98:	08009de5 	.word	0x08009de5
 8009d9c:	08009de5 	.word	0x08009de5
 8009da0:	08009de5 	.word	0x08009de5
 8009da4:	08009de5 	.word	0x08009de5
 8009da8:	08009de5 	.word	0x08009de5
 8009dac:	08009de5 	.word	0x08009de5
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e326      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e322      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e31e      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e31a      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e316      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009ddc:	2340      	movs	r3, #64	@ 0x40
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e312      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009de4:	2380      	movs	r3, #128	@ 0x80
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e30e      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a69      	ldr	r2, [pc, #420]	@ (8009f98 <UART_SetConfig+0x33c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d130      	bne.n	8009e58 <UART_SetConfig+0x1fc>
 8009df6:	4b67      	ldr	r3, [pc, #412]	@ (8009f94 <UART_SetConfig+0x338>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b05      	cmp	r3, #5
 8009e00:	d826      	bhi.n	8009e50 <UART_SetConfig+0x1f4>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <UART_SetConfig+0x1ac>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e29 	.word	0x08009e29
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e41 	.word	0x08009e41
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e2f0      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e2ec      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e2e8      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e2e4      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e2e0      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e48:	2340      	movs	r3, #64	@ 0x40
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e2dc      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e50:	2380      	movs	r3, #128	@ 0x80
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e2d8      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8009f9c <UART_SetConfig+0x340>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d130      	bne.n	8009ec4 <UART_SetConfig+0x268>
 8009e62:	4b4c      	ldr	r3, [pc, #304]	@ (8009f94 <UART_SetConfig+0x338>)
 8009e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d826      	bhi.n	8009ebc <UART_SetConfig+0x260>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <UART_SetConfig+0x218>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e9d 	.word	0x08009e9d
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e2ba      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e2b6      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e2b2      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e2ae      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e2aa      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009eb4:	2340      	movs	r3, #64	@ 0x40
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e2a6      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009ebc:	2380      	movs	r3, #128	@ 0x80
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ec2:	e2a2      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a35      	ldr	r2, [pc, #212]	@ (8009fa0 <UART_SetConfig+0x344>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d130      	bne.n	8009f30 <UART_SetConfig+0x2d4>
 8009ece:	4b31      	ldr	r3, [pc, #196]	@ (8009f94 <UART_SetConfig+0x338>)
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d826      	bhi.n	8009f28 <UART_SetConfig+0x2cc>
 8009eda:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee0 <UART_SetConfig+0x284>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	08009f11 	.word	0x08009f11
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e284      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e280      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e27c      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e278      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e274      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f20:	2340      	movs	r3, #64	@ 0x40
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e270      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f28:	2380      	movs	r3, #128	@ 0x80
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e26c      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa4 <UART_SetConfig+0x348>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d142      	bne.n	8009fc0 <UART_SetConfig+0x364>
 8009f3a:	4b16      	ldr	r3, [pc, #88]	@ (8009f94 <UART_SetConfig+0x338>)
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d838      	bhi.n	8009fb8 <UART_SetConfig+0x35c>
 8009f46:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <UART_SetConfig+0x2f0>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f65 	.word	0x08009f65
 8009f50:	08009f6d 	.word	0x08009f6d
 8009f54:	08009f75 	.word	0x08009f75
 8009f58:	08009f7d 	.word	0x08009f7d
 8009f5c:	08009fa9 	.word	0x08009fa9
 8009f60:	08009fb1 	.word	0x08009fb1
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e24e      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e24a      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f74:	2308      	movs	r3, #8
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e246      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e242      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009f84:	cfff69f3 	.word	0xcfff69f3
 8009f88:	58000c00 	.word	0x58000c00
 8009f8c:	11fff4ff 	.word	0x11fff4ff
 8009f90:	40011000 	.word	0x40011000
 8009f94:	58024400 	.word	0x58024400
 8009f98:	40004400 	.word	0x40004400
 8009f9c:	40004800 	.word	0x40004800
 8009fa0:	40004c00 	.word	0x40004c00
 8009fa4:	40005000 	.word	0x40005000
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fae:	e22c      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009fb0:	2340      	movs	r3, #64	@ 0x40
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb6:	e228      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009fb8:	2380      	movs	r3, #128	@ 0x80
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fbe:	e224      	b.n	800a40a <UART_SetConfig+0x7ae>
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4ab1      	ldr	r2, [pc, #708]	@ (800a28c <UART_SetConfig+0x630>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d176      	bne.n	800a0b8 <UART_SetConfig+0x45c>
 8009fca:	4bb1      	ldr	r3, [pc, #708]	@ (800a290 <UART_SetConfig+0x634>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fd2:	2b28      	cmp	r3, #40	@ 0x28
 8009fd4:	d86c      	bhi.n	800a0b0 <UART_SetConfig+0x454>
 8009fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fdc <UART_SetConfig+0x380>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	0800a081 	.word	0x0800a081
 8009fe0:	0800a0b1 	.word	0x0800a0b1
 8009fe4:	0800a0b1 	.word	0x0800a0b1
 8009fe8:	0800a0b1 	.word	0x0800a0b1
 8009fec:	0800a0b1 	.word	0x0800a0b1
 8009ff0:	0800a0b1 	.word	0x0800a0b1
 8009ff4:	0800a0b1 	.word	0x0800a0b1
 8009ff8:	0800a0b1 	.word	0x0800a0b1
 8009ffc:	0800a089 	.word	0x0800a089
 800a000:	0800a0b1 	.word	0x0800a0b1
 800a004:	0800a0b1 	.word	0x0800a0b1
 800a008:	0800a0b1 	.word	0x0800a0b1
 800a00c:	0800a0b1 	.word	0x0800a0b1
 800a010:	0800a0b1 	.word	0x0800a0b1
 800a014:	0800a0b1 	.word	0x0800a0b1
 800a018:	0800a0b1 	.word	0x0800a0b1
 800a01c:	0800a091 	.word	0x0800a091
 800a020:	0800a0b1 	.word	0x0800a0b1
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0b1 	.word	0x0800a0b1
 800a02c:	0800a0b1 	.word	0x0800a0b1
 800a030:	0800a0b1 	.word	0x0800a0b1
 800a034:	0800a0b1 	.word	0x0800a0b1
 800a038:	0800a0b1 	.word	0x0800a0b1
 800a03c:	0800a099 	.word	0x0800a099
 800a040:	0800a0b1 	.word	0x0800a0b1
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a0b1 	.word	0x0800a0b1
 800a04c:	0800a0b1 	.word	0x0800a0b1
 800a050:	0800a0b1 	.word	0x0800a0b1
 800a054:	0800a0b1 	.word	0x0800a0b1
 800a058:	0800a0b1 	.word	0x0800a0b1
 800a05c:	0800a0a1 	.word	0x0800a0a1
 800a060:	0800a0b1 	.word	0x0800a0b1
 800a064:	0800a0b1 	.word	0x0800a0b1
 800a068:	0800a0b1 	.word	0x0800a0b1
 800a06c:	0800a0b1 	.word	0x0800a0b1
 800a070:	0800a0b1 	.word	0x0800a0b1
 800a074:	0800a0b1 	.word	0x0800a0b1
 800a078:	0800a0b1 	.word	0x0800a0b1
 800a07c:	0800a0a9 	.word	0x0800a0a9
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e1c0      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a088:	2304      	movs	r3, #4
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08e:	e1bc      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a090:	2308      	movs	r3, #8
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e1b8      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a098:	2310      	movs	r3, #16
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e1b4      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e1b0      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0a8:	2340      	movs	r3, #64	@ 0x40
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e1ac      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0b0:	2380      	movs	r3, #128	@ 0x80
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e1a8      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a75      	ldr	r2, [pc, #468]	@ (800a294 <UART_SetConfig+0x638>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d130      	bne.n	800a124 <UART_SetConfig+0x4c8>
 800a0c2:	4b73      	ldr	r3, [pc, #460]	@ (800a290 <UART_SetConfig+0x634>)
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	d826      	bhi.n	800a11c <UART_SetConfig+0x4c0>
 800a0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <UART_SetConfig+0x478>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0fd 	.word	0x0800a0fd
 800a0e0:	0800a105 	.word	0x0800a105
 800a0e4:	0800a10d 	.word	0x0800a10d
 800a0e8:	0800a115 	.word	0x0800a115
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e18a      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e186      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e182      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e17e      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a10c:	2320      	movs	r3, #32
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e17a      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a114:	2340      	movs	r3, #64	@ 0x40
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e176      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a11c:	2380      	movs	r3, #128	@ 0x80
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e172      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a5b      	ldr	r2, [pc, #364]	@ (800a298 <UART_SetConfig+0x63c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d130      	bne.n	800a190 <UART_SetConfig+0x534>
 800a12e:	4b58      	ldr	r3, [pc, #352]	@ (800a290 <UART_SetConfig+0x634>)
 800a130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b05      	cmp	r3, #5
 800a138:	d826      	bhi.n	800a188 <UART_SetConfig+0x52c>
 800a13a:	a201      	add	r2, pc, #4	@ (adr r2, 800a140 <UART_SetConfig+0x4e4>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a159 	.word	0x0800a159
 800a144:	0800a161 	.word	0x0800a161
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e154      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e150      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e14c      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e148      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e144      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a180:	2340      	movs	r3, #64	@ 0x40
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e140      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a188:	2380      	movs	r3, #128	@ 0x80
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e13c      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a41      	ldr	r2, [pc, #260]	@ (800a29c <UART_SetConfig+0x640>)
 800a196:	4293      	cmp	r3, r2
 800a198:	f040 8082 	bne.w	800a2a0 <UART_SetConfig+0x644>
 800a19c:	4b3c      	ldr	r3, [pc, #240]	@ (800a290 <UART_SetConfig+0x634>)
 800a19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1a4:	2b28      	cmp	r3, #40	@ 0x28
 800a1a6:	d86d      	bhi.n	800a284 <UART_SetConfig+0x628>
 800a1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b0 <UART_SetConfig+0x554>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a255 	.word	0x0800a255
 800a1b4:	0800a285 	.word	0x0800a285
 800a1b8:	0800a285 	.word	0x0800a285
 800a1bc:	0800a285 	.word	0x0800a285
 800a1c0:	0800a285 	.word	0x0800a285
 800a1c4:	0800a285 	.word	0x0800a285
 800a1c8:	0800a285 	.word	0x0800a285
 800a1cc:	0800a285 	.word	0x0800a285
 800a1d0:	0800a25d 	.word	0x0800a25d
 800a1d4:	0800a285 	.word	0x0800a285
 800a1d8:	0800a285 	.word	0x0800a285
 800a1dc:	0800a285 	.word	0x0800a285
 800a1e0:	0800a285 	.word	0x0800a285
 800a1e4:	0800a285 	.word	0x0800a285
 800a1e8:	0800a285 	.word	0x0800a285
 800a1ec:	0800a285 	.word	0x0800a285
 800a1f0:	0800a265 	.word	0x0800a265
 800a1f4:	0800a285 	.word	0x0800a285
 800a1f8:	0800a285 	.word	0x0800a285
 800a1fc:	0800a285 	.word	0x0800a285
 800a200:	0800a285 	.word	0x0800a285
 800a204:	0800a285 	.word	0x0800a285
 800a208:	0800a285 	.word	0x0800a285
 800a20c:	0800a285 	.word	0x0800a285
 800a210:	0800a26d 	.word	0x0800a26d
 800a214:	0800a285 	.word	0x0800a285
 800a218:	0800a285 	.word	0x0800a285
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a285 	.word	0x0800a285
 800a224:	0800a285 	.word	0x0800a285
 800a228:	0800a285 	.word	0x0800a285
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a275 	.word	0x0800a275
 800a234:	0800a285 	.word	0x0800a285
 800a238:	0800a285 	.word	0x0800a285
 800a23c:	0800a285 	.word	0x0800a285
 800a240:	0800a285 	.word	0x0800a285
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a285 	.word	0x0800a285
 800a24c:	0800a285 	.word	0x0800a285
 800a250:	0800a27d 	.word	0x0800a27d
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e0d6      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e0d2      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e0ce      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e0ca      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a274:	2320      	movs	r3, #32
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e0c6      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a27c:	2340      	movs	r3, #64	@ 0x40
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e0c2      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a284:	2380      	movs	r3, #128	@ 0x80
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28a:	e0be      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a28c:	40011400 	.word	0x40011400
 800a290:	58024400 	.word	0x58024400
 800a294:	40007800 	.word	0x40007800
 800a298:	40007c00 	.word	0x40007c00
 800a29c:	40011800 	.word	0x40011800
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4aad      	ldr	r2, [pc, #692]	@ (800a55c <UART_SetConfig+0x900>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d176      	bne.n	800a398 <UART_SetConfig+0x73c>
 800a2aa:	4bad      	ldr	r3, [pc, #692]	@ (800a560 <UART_SetConfig+0x904>)
 800a2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2b2:	2b28      	cmp	r3, #40	@ 0x28
 800a2b4:	d86c      	bhi.n	800a390 <UART_SetConfig+0x734>
 800a2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2bc <UART_SetConfig+0x660>)
 800a2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2bc:	0800a361 	.word	0x0800a361
 800a2c0:	0800a391 	.word	0x0800a391
 800a2c4:	0800a391 	.word	0x0800a391
 800a2c8:	0800a391 	.word	0x0800a391
 800a2cc:	0800a391 	.word	0x0800a391
 800a2d0:	0800a391 	.word	0x0800a391
 800a2d4:	0800a391 	.word	0x0800a391
 800a2d8:	0800a391 	.word	0x0800a391
 800a2dc:	0800a369 	.word	0x0800a369
 800a2e0:	0800a391 	.word	0x0800a391
 800a2e4:	0800a391 	.word	0x0800a391
 800a2e8:	0800a391 	.word	0x0800a391
 800a2ec:	0800a391 	.word	0x0800a391
 800a2f0:	0800a391 	.word	0x0800a391
 800a2f4:	0800a391 	.word	0x0800a391
 800a2f8:	0800a391 	.word	0x0800a391
 800a2fc:	0800a371 	.word	0x0800a371
 800a300:	0800a391 	.word	0x0800a391
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a391 	.word	0x0800a391
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a391 	.word	0x0800a391
 800a314:	0800a391 	.word	0x0800a391
 800a318:	0800a391 	.word	0x0800a391
 800a31c:	0800a379 	.word	0x0800a379
 800a320:	0800a391 	.word	0x0800a391
 800a324:	0800a391 	.word	0x0800a391
 800a328:	0800a391 	.word	0x0800a391
 800a32c:	0800a391 	.word	0x0800a391
 800a330:	0800a391 	.word	0x0800a391
 800a334:	0800a391 	.word	0x0800a391
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a381 	.word	0x0800a381
 800a340:	0800a391 	.word	0x0800a391
 800a344:	0800a391 	.word	0x0800a391
 800a348:	0800a391 	.word	0x0800a391
 800a34c:	0800a391 	.word	0x0800a391
 800a350:	0800a391 	.word	0x0800a391
 800a354:	0800a391 	.word	0x0800a391
 800a358:	0800a391 	.word	0x0800a391
 800a35c:	0800a389 	.word	0x0800a389
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e050      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e04c      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e048      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e044      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a380:	2320      	movs	r3, #32
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e040      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a388:	2340      	movs	r3, #64	@ 0x40
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e03c      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a390:	2380      	movs	r3, #128	@ 0x80
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e038      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a71      	ldr	r2, [pc, #452]	@ (800a564 <UART_SetConfig+0x908>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d130      	bne.n	800a404 <UART_SetConfig+0x7a8>
 800a3a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a560 <UART_SetConfig+0x904>)
 800a3a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d826      	bhi.n	800a3fc <UART_SetConfig+0x7a0>
 800a3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <UART_SetConfig+0x758>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a3d5 	.word	0x0800a3d5
 800a3bc:	0800a3dd 	.word	0x0800a3dd
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e01a      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3d4:	2304      	movs	r3, #4
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e016      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e012      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e00e      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e00a      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3f4:	2340      	movs	r3, #64	@ 0x40
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e006      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a3fc:	2380      	movs	r3, #128	@ 0x80
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e002      	b.n	800a40a <UART_SetConfig+0x7ae>
 800a404:	2380      	movs	r3, #128	@ 0x80
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a55      	ldr	r2, [pc, #340]	@ (800a564 <UART_SetConfig+0x908>)
 800a410:	4293      	cmp	r3, r2
 800a412:	f040 80f8 	bne.w	800a606 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a416:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	dc46      	bgt.n	800a4ac <UART_SetConfig+0x850>
 800a41e:	2b02      	cmp	r3, #2
 800a420:	db75      	blt.n	800a50e <UART_SetConfig+0x8b2>
 800a422:	3b02      	subs	r3, #2
 800a424:	2b1e      	cmp	r3, #30
 800a426:	d872      	bhi.n	800a50e <UART_SetConfig+0x8b2>
 800a428:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x7d4>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a4b3 	.word	0x0800a4b3
 800a434:	0800a50f 	.word	0x0800a50f
 800a438:	0800a4bb 	.word	0x0800a4bb
 800a43c:	0800a50f 	.word	0x0800a50f
 800a440:	0800a50f 	.word	0x0800a50f
 800a444:	0800a50f 	.word	0x0800a50f
 800a448:	0800a4cb 	.word	0x0800a4cb
 800a44c:	0800a50f 	.word	0x0800a50f
 800a450:	0800a50f 	.word	0x0800a50f
 800a454:	0800a50f 	.word	0x0800a50f
 800a458:	0800a50f 	.word	0x0800a50f
 800a45c:	0800a50f 	.word	0x0800a50f
 800a460:	0800a50f 	.word	0x0800a50f
 800a464:	0800a50f 	.word	0x0800a50f
 800a468:	0800a4db 	.word	0x0800a4db
 800a46c:	0800a50f 	.word	0x0800a50f
 800a470:	0800a50f 	.word	0x0800a50f
 800a474:	0800a50f 	.word	0x0800a50f
 800a478:	0800a50f 	.word	0x0800a50f
 800a47c:	0800a50f 	.word	0x0800a50f
 800a480:	0800a50f 	.word	0x0800a50f
 800a484:	0800a50f 	.word	0x0800a50f
 800a488:	0800a50f 	.word	0x0800a50f
 800a48c:	0800a50f 	.word	0x0800a50f
 800a490:	0800a50f 	.word	0x0800a50f
 800a494:	0800a50f 	.word	0x0800a50f
 800a498:	0800a50f 	.word	0x0800a50f
 800a49c:	0800a50f 	.word	0x0800a50f
 800a4a0:	0800a50f 	.word	0x0800a50f
 800a4a4:	0800a50f 	.word	0x0800a50f
 800a4a8:	0800a501 	.word	0x0800a501
 800a4ac:	2b40      	cmp	r3, #64	@ 0x40
 800a4ae:	d02a      	beq.n	800a506 <UART_SetConfig+0x8aa>
 800a4b0:	e02d      	b.n	800a50e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4b2:	f7fe fd6b 	bl	8008f8c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4b8:	e02f      	b.n	800a51a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fd7a 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c8:	e027      	b.n	800a51a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ca:	f107 0318 	add.w	r3, r7, #24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fec6 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d8:	e01f      	b.n	800a51a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4da:	4b21      	ldr	r3, [pc, #132]	@ (800a560 <UART_SetConfig+0x904>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a560 <UART_SetConfig+0x904>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	08db      	lsrs	r3, r3, #3
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a568 <UART_SetConfig+0x90c>)
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4f8:	e00f      	b.n	800a51a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a568 <UART_SetConfig+0x90c>)
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fe:	e00c      	b.n	800a51a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a500:	4b1a      	ldr	r3, [pc, #104]	@ (800a56c <UART_SetConfig+0x910>)
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a504:	e009      	b.n	800a51a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	e005      	b.n	800a51a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 81ee 	beq.w	800a8fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a526:	4a12      	ldr	r2, [pc, #72]	@ (800a570 <UART_SetConfig+0x914>)
 800a528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a52c:	461a      	mov	r2, r3
 800a52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a530:	fbb3 f3f2 	udiv	r3, r3, r2
 800a534:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	4413      	add	r3, r2
 800a540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a542:	429a      	cmp	r2, r3
 800a544:	d305      	bcc.n	800a552 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a54c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a54e:	429a      	cmp	r2, r3
 800a550:	d910      	bls.n	800a574 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a558:	e1d1      	b.n	800a8fe <UART_SetConfig+0xca2>
 800a55a:	bf00      	nop
 800a55c:	40011c00 	.word	0x40011c00
 800a560:	58024400 	.word	0x58024400
 800a564:	58000c00 	.word	0x58000c00
 800a568:	03d09000 	.word	0x03d09000
 800a56c:	003d0900 	.word	0x003d0900
 800a570:	0800bc58 	.word	0x0800bc58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a576:	2200      	movs	r2, #0
 800a578:	60bb      	str	r3, [r7, #8]
 800a57a:	60fa      	str	r2, [r7, #12]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a580:	4ac0      	ldr	r2, [pc, #768]	@ (800a884 <UART_SetConfig+0xc28>)
 800a582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a586:	b29b      	uxth	r3, r3
 800a588:	2200      	movs	r2, #0
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a596:	f7f5 ff13 	bl	80003c0 <__aeabi_uldivmod>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4610      	mov	r0, r2
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f04f 0200 	mov.w	r2, #0
 800a5a6:	f04f 0300 	mov.w	r3, #0
 800a5aa:	020b      	lsls	r3, r1, #8
 800a5ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5b0:	0202      	lsls	r2, r0, #8
 800a5b2:	6979      	ldr	r1, [r7, #20]
 800a5b4:	6849      	ldr	r1, [r1, #4]
 800a5b6:	0849      	lsrs	r1, r1, #1
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	4605      	mov	r5, r0
 800a5be:	eb12 0804 	adds.w	r8, r2, r4
 800a5c2:	eb43 0905 	adc.w	r9, r3, r5
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	469a      	mov	sl, r3
 800a5ce:	4693      	mov	fp, r2
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f5 fef2 	bl	80003c0 <__aeabi_uldivmod>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5ea:	d308      	bcc.n	800a5fe <UART_SetConfig+0x9a2>
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5f2:	d204      	bcs.n	800a5fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	e17f      	b.n	800a8fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a604:	e17b      	b.n	800a8fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a60e:	f040 80bd 	bne.w	800a78c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a612:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a616:	2b20      	cmp	r3, #32
 800a618:	dc48      	bgt.n	800a6ac <UART_SetConfig+0xa50>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	db7b      	blt.n	800a716 <UART_SetConfig+0xaba>
 800a61e:	2b20      	cmp	r3, #32
 800a620:	d879      	bhi.n	800a716 <UART_SetConfig+0xaba>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <UART_SetConfig+0x9cc>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a6b3 	.word	0x0800a6b3
 800a62c:	0800a6bb 	.word	0x0800a6bb
 800a630:	0800a717 	.word	0x0800a717
 800a634:	0800a717 	.word	0x0800a717
 800a638:	0800a6c3 	.word	0x0800a6c3
 800a63c:	0800a717 	.word	0x0800a717
 800a640:	0800a717 	.word	0x0800a717
 800a644:	0800a717 	.word	0x0800a717
 800a648:	0800a6d3 	.word	0x0800a6d3
 800a64c:	0800a717 	.word	0x0800a717
 800a650:	0800a717 	.word	0x0800a717
 800a654:	0800a717 	.word	0x0800a717
 800a658:	0800a717 	.word	0x0800a717
 800a65c:	0800a717 	.word	0x0800a717
 800a660:	0800a717 	.word	0x0800a717
 800a664:	0800a717 	.word	0x0800a717
 800a668:	0800a6e3 	.word	0x0800a6e3
 800a66c:	0800a717 	.word	0x0800a717
 800a670:	0800a717 	.word	0x0800a717
 800a674:	0800a717 	.word	0x0800a717
 800a678:	0800a717 	.word	0x0800a717
 800a67c:	0800a717 	.word	0x0800a717
 800a680:	0800a717 	.word	0x0800a717
 800a684:	0800a717 	.word	0x0800a717
 800a688:	0800a717 	.word	0x0800a717
 800a68c:	0800a717 	.word	0x0800a717
 800a690:	0800a717 	.word	0x0800a717
 800a694:	0800a717 	.word	0x0800a717
 800a698:	0800a717 	.word	0x0800a717
 800a69c:	0800a717 	.word	0x0800a717
 800a6a0:	0800a717 	.word	0x0800a717
 800a6a4:	0800a717 	.word	0x0800a717
 800a6a8:	0800a709 	.word	0x0800a709
 800a6ac:	2b40      	cmp	r3, #64	@ 0x40
 800a6ae:	d02e      	beq.n	800a70e <UART_SetConfig+0xab2>
 800a6b0:	e031      	b.n	800a716 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6b2:	f7fc fdcd 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800a6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b8:	e033      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ba:	f7fc fddf 	bl	800727c <HAL_RCC_GetPCLK2Freq>
 800a6be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6c0:	e02f      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fc76 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d0:	e027      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6d2:	f107 0318 	add.w	r3, r7, #24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fdc2 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e0:	e01f      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6e2:	4b69      	ldr	r3, [pc, #420]	@ (800a888 <UART_SetConfig+0xc2c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d009      	beq.n	800a702 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6ee:	4b66      	ldr	r3, [pc, #408]	@ (800a888 <UART_SetConfig+0xc2c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	08db      	lsrs	r3, r3, #3
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	4a64      	ldr	r2, [pc, #400]	@ (800a88c <UART_SetConfig+0xc30>)
 800a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a700:	e00f      	b.n	800a722 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a702:	4b62      	ldr	r3, [pc, #392]	@ (800a88c <UART_SetConfig+0xc30>)
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a706:	e00c      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a708:	4b61      	ldr	r3, [pc, #388]	@ (800a890 <UART_SetConfig+0xc34>)
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	e009      	b.n	800a722 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a70e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a714:	e005      	b.n	800a722 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 80ea 	beq.w	800a8fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72e:	4a55      	ldr	r2, [pc, #340]	@ (800a884 <UART_SetConfig+0xc28>)
 800a730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a734:	461a      	mov	r2, r3
 800a736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a738:	fbb3 f3f2 	udiv	r3, r3, r2
 800a73c:	005a      	lsls	r2, r3, #1
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	085b      	lsrs	r3, r3, #1
 800a744:	441a      	add	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a74e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	2b0f      	cmp	r3, #15
 800a754:	d916      	bls.n	800a784 <UART_SetConfig+0xb28>
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a75c:	d212      	bcs.n	800a784 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a760:	b29b      	uxth	r3, r3
 800a762:	f023 030f 	bic.w	r3, r3, #15
 800a766:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	085b      	lsrs	r3, r3, #1
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	b29a      	uxth	r2, r3
 800a774:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a776:	4313      	orrs	r3, r2
 800a778:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a780:	60da      	str	r2, [r3, #12]
 800a782:	e0bc      	b.n	800a8fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a78a:	e0b8      	b.n	800a8fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a78c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a790:	2b20      	cmp	r3, #32
 800a792:	dc4b      	bgt.n	800a82c <UART_SetConfig+0xbd0>
 800a794:	2b00      	cmp	r3, #0
 800a796:	f2c0 8087 	blt.w	800a8a8 <UART_SetConfig+0xc4c>
 800a79a:	2b20      	cmp	r3, #32
 800a79c:	f200 8084 	bhi.w	800a8a8 <UART_SetConfig+0xc4c>
 800a7a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a8 <UART_SetConfig+0xb4c>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a833 	.word	0x0800a833
 800a7ac:	0800a83b 	.word	0x0800a83b
 800a7b0:	0800a8a9 	.word	0x0800a8a9
 800a7b4:	0800a8a9 	.word	0x0800a8a9
 800a7b8:	0800a843 	.word	0x0800a843
 800a7bc:	0800a8a9 	.word	0x0800a8a9
 800a7c0:	0800a8a9 	.word	0x0800a8a9
 800a7c4:	0800a8a9 	.word	0x0800a8a9
 800a7c8:	0800a853 	.word	0x0800a853
 800a7cc:	0800a8a9 	.word	0x0800a8a9
 800a7d0:	0800a8a9 	.word	0x0800a8a9
 800a7d4:	0800a8a9 	.word	0x0800a8a9
 800a7d8:	0800a8a9 	.word	0x0800a8a9
 800a7dc:	0800a8a9 	.word	0x0800a8a9
 800a7e0:	0800a8a9 	.word	0x0800a8a9
 800a7e4:	0800a8a9 	.word	0x0800a8a9
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a8a9 	.word	0x0800a8a9
 800a7f0:	0800a8a9 	.word	0x0800a8a9
 800a7f4:	0800a8a9 	.word	0x0800a8a9
 800a7f8:	0800a8a9 	.word	0x0800a8a9
 800a7fc:	0800a8a9 	.word	0x0800a8a9
 800a800:	0800a8a9 	.word	0x0800a8a9
 800a804:	0800a8a9 	.word	0x0800a8a9
 800a808:	0800a8a9 	.word	0x0800a8a9
 800a80c:	0800a8a9 	.word	0x0800a8a9
 800a810:	0800a8a9 	.word	0x0800a8a9
 800a814:	0800a8a9 	.word	0x0800a8a9
 800a818:	0800a8a9 	.word	0x0800a8a9
 800a81c:	0800a8a9 	.word	0x0800a8a9
 800a820:	0800a8a9 	.word	0x0800a8a9
 800a824:	0800a8a9 	.word	0x0800a8a9
 800a828:	0800a89b 	.word	0x0800a89b
 800a82c:	2b40      	cmp	r3, #64	@ 0x40
 800a82e:	d037      	beq.n	800a8a0 <UART_SetConfig+0xc44>
 800a830:	e03a      	b.n	800a8a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a832:	f7fc fd0d 	bl	8007250 <HAL_RCC_GetPCLK1Freq>
 800a836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a838:	e03c      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a83a:	f7fc fd1f 	bl	800727c <HAL_RCC_GetPCLK2Freq>
 800a83e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a840:	e038      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fbb6 	bl	8008fb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e030      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fd02 	bl	8009260 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	e028      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a862:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <UART_SetConfig+0xc2c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d012      	beq.n	800a894 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a86e:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <UART_SetConfig+0xc2c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	4a04      	ldr	r2, [pc, #16]	@ (800a88c <UART_SetConfig+0xc30>)
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a880:	e018      	b.n	800a8b4 <UART_SetConfig+0xc58>
 800a882:	bf00      	nop
 800a884:	0800bc58 	.word	0x0800bc58
 800a888:	58024400 	.word	0x58024400
 800a88c:	03d09000 	.word	0x03d09000
 800a890:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a894:	4b24      	ldr	r3, [pc, #144]	@ (800a928 <UART_SetConfig+0xccc>)
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a898:	e00c      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a89a:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <UART_SetConfig+0xcd0>)
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89e:	e009      	b.n	800a8b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a6:	e005      	b.n	800a8b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d021      	beq.n	800a8fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8be:	4a1c      	ldr	r2, [pc, #112]	@ (800a930 <UART_SetConfig+0xcd4>)
 800a8c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	085b      	lsrs	r3, r3, #1
 800a8d2:	441a      	add	r2, r3
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e0:	2b0f      	cmp	r3, #15
 800a8e2:	d909      	bls.n	800a8f8 <UART_SetConfig+0xc9c>
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ea:	d205      	bcs.n	800a8f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	e002      	b.n	800a8fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2201      	movs	r2, #1
 800a902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2201      	movs	r2, #1
 800a90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2200      	movs	r2, #0
 800a912:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2200      	movs	r2, #0
 800a918:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a91a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3748      	adds	r7, #72	@ 0x48
 800a922:	46bd      	mov	sp, r7
 800a924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a928:	03d09000 	.word	0x03d09000
 800a92c:	003d0900 	.word	0x003d0900
 800a930:	0800bc58 	.word	0x0800bc58

0800a934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00a      	beq.n	800a95e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00a      	beq.n	800a9e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d01a      	beq.n	800aa4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa32:	d10a      	bne.n	800aa4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	430a      	orrs	r2, r1
 800aa48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	605a      	str	r2, [r3, #4]
  }
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b098      	sub	sp, #96	@ 0x60
 800aa7c:	af02      	add	r7, sp, #8
 800aa7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa88:	f7f7 ffea 	bl	8002a60 <HAL_GetTick>
 800aa8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d12f      	bne.n	800aafc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f88e 	bl	800abcc <UART_WaitOnFlagUntilTimeout>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d022      	beq.n	800aafc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabe:	e853 3f00 	ldrex	r3, [r3]
 800aac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaca:	653b      	str	r3, [r7, #80]	@ 0x50
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aad6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aadc:	e841 2300 	strex	r3, r2, [r1]
 800aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e6      	bne.n	800aab6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e063      	b.n	800abc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0304 	and.w	r3, r3, #4
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d149      	bne.n	800ab9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab12:	2200      	movs	r2, #0
 800ab14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f857 	bl	800abcc <UART_WaitOnFlagUntilTimeout>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d03c      	beq.n	800ab9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	623b      	str	r3, [r7, #32]
   return(result);
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab42:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e6      	bne.n	800ab24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	e853 3f00 	ldrex	r3, [r3]
 800ab64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f023 0301 	bic.w	r3, r3, #1
 800ab6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3308      	adds	r3, #8
 800ab74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab76:	61fa      	str	r2, [r7, #28]
 800ab78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	69b9      	ldr	r1, [r7, #24]
 800ab7c:	69fa      	ldr	r2, [r7, #28]
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	617b      	str	r3, [r7, #20]
   return(result);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e5      	bne.n	800ab56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e012      	b.n	800abc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2220      	movs	r2, #32
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3758      	adds	r7, #88	@ 0x58
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	4613      	mov	r3, r2
 800abda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abdc:	e04f      	b.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe4:	d04b      	beq.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abe6:	f7f7 ff3b 	bl	8002a60 <HAL_GetTick>
 800abea:	4602      	mov	r2, r0
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d302      	bcc.n	800abfc <UART_WaitOnFlagUntilTimeout+0x30>
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e04e      	b.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d037      	beq.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b80      	cmp	r3, #128	@ 0x80
 800ac12:	d034      	beq.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b40      	cmp	r3, #64	@ 0x40
 800ac18:	d031      	beq.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d110      	bne.n	800ac4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2208      	movs	r2, #8
 800ac2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f839 	bl	800aca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2208      	movs	r2, #8
 800ac3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e029      	b.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac58:	d111      	bne.n	800ac7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 f81f 	bl	800aca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e00f      	b.n	800ac9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	4013      	ands	r3, r2
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	bf0c      	ite	eq
 800ac8e:	2301      	moveq	r3, #1
 800ac90:	2300      	movne	r3, #0
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	461a      	mov	r2, r3
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d0a0      	beq.n	800abde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b095      	sub	sp, #84	@ 0x54
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acce:	643b      	str	r3, [r7, #64]	@ 0x40
 800acd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e6      	bne.n	800acb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	4b1e      	ldr	r3, [pc, #120]	@ (800ad70 <UART_EndRxTransfer+0xc8>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3308      	adds	r3, #8
 800ad00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1e5      	bne.n	800ace2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d118      	bne.n	800ad50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f023 0310 	bic.w	r3, r3, #16
 800ad32:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad3c:	61bb      	str	r3, [r7, #24]
 800ad3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6979      	ldr	r1, [r7, #20]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	613b      	str	r3, [r7, #16]
   return(result);
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e6      	bne.n	800ad1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad64:	bf00      	nop
 800ad66:	3754      	adds	r7, #84	@ 0x54
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	effffffe 	.word	0xeffffffe

0800ad74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_UARTEx_DisableFifoMode+0x16>
 800ad86:	2302      	movs	r3, #2
 800ad88:	e027      	b.n	800adda <HAL_UARTEx_DisableFifoMode+0x66>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2224      	movs	r2, #36	@ 0x24
 800ad96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800adb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2220      	movs	r2, #32
 800adcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d101      	bne.n	800adfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800adfa:	2302      	movs	r3, #2
 800adfc:	e02d      	b.n	800ae5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2224      	movs	r2, #36	@ 0x24
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0201 	bic.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f850 	bl	800aee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e02d      	b.n	800aed6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2224      	movs	r2, #36	@ 0x24
 800ae86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0201 	bic.w	r2, r2, #1
 800aea0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f812 	bl	800aee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2220      	movs	r2, #32
 800aec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d108      	bne.n	800af02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af00:	e031      	b.n	800af66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af02:	2310      	movs	r3, #16
 800af04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af06:	2310      	movs	r3, #16
 800af08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	0e5b      	lsrs	r3, r3, #25
 800af12:	b2db      	uxtb	r3, r3
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	0f5b      	lsrs	r3, r3, #29
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	7b3a      	ldrb	r2, [r7, #12]
 800af2e:	4911      	ldr	r1, [pc, #68]	@ (800af74 <UARTEx_SetNbDataToProcess+0x94>)
 800af30:	5c8a      	ldrb	r2, [r1, r2]
 800af32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af36:	7b3a      	ldrb	r2, [r7, #12]
 800af38:	490f      	ldr	r1, [pc, #60]	@ (800af78 <UARTEx_SetNbDataToProcess+0x98>)
 800af3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af40:	b29a      	uxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	7b7a      	ldrb	r2, [r7, #13]
 800af4c:	4909      	ldr	r1, [pc, #36]	@ (800af74 <UARTEx_SetNbDataToProcess+0x94>)
 800af4e:	5c8a      	ldrb	r2, [r1, r2]
 800af50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af54:	7b7a      	ldrb	r2, [r7, #13]
 800af56:	4908      	ldr	r1, [pc, #32]	@ (800af78 <UARTEx_SetNbDataToProcess+0x98>)
 800af58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5e:	b29a      	uxth	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	0800bc70 	.word	0x0800bc70
 800af78:	0800bc78 	.word	0x0800bc78

0800af7c <siprintf>:
 800af7c:	b40e      	push	{r1, r2, r3}
 800af7e:	b510      	push	{r4, lr}
 800af80:	b09d      	sub	sp, #116	@ 0x74
 800af82:	ab1f      	add	r3, sp, #124	@ 0x7c
 800af84:	9002      	str	r0, [sp, #8]
 800af86:	9006      	str	r0, [sp, #24]
 800af88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af8c:	480a      	ldr	r0, [pc, #40]	@ (800afb8 <siprintf+0x3c>)
 800af8e:	9107      	str	r1, [sp, #28]
 800af90:	9104      	str	r1, [sp, #16]
 800af92:	490a      	ldr	r1, [pc, #40]	@ (800afbc <siprintf+0x40>)
 800af94:	f853 2b04 	ldr.w	r2, [r3], #4
 800af98:	9105      	str	r1, [sp, #20]
 800af9a:	2400      	movs	r4, #0
 800af9c:	a902      	add	r1, sp, #8
 800af9e:	6800      	ldr	r0, [r0, #0]
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800afa4:	f000 f9a2 	bl	800b2ec <_svfiprintf_r>
 800afa8:	9b02      	ldr	r3, [sp, #8]
 800afaa:	701c      	strb	r4, [r3, #0]
 800afac:	b01d      	add	sp, #116	@ 0x74
 800afae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb2:	b003      	add	sp, #12
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	24000018 	.word	0x24000018
 800afbc:	ffff0208 	.word	0xffff0208

0800afc0 <memset>:
 800afc0:	4402      	add	r2, r0
 800afc2:	4603      	mov	r3, r0
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d100      	bne.n	800afca <memset+0xa>
 800afc8:	4770      	bx	lr
 800afca:	f803 1b01 	strb.w	r1, [r3], #1
 800afce:	e7f9      	b.n	800afc4 <memset+0x4>

0800afd0 <__errno>:
 800afd0:	4b01      	ldr	r3, [pc, #4]	@ (800afd8 <__errno+0x8>)
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	24000018 	.word	0x24000018

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4d0d      	ldr	r5, [pc, #52]	@ (800b014 <__libc_init_array+0x38>)
 800afe0:	4c0d      	ldr	r4, [pc, #52]	@ (800b018 <__libc_init_array+0x3c>)
 800afe2:	1b64      	subs	r4, r4, r5
 800afe4:	10a4      	asrs	r4, r4, #2
 800afe6:	2600      	movs	r6, #0
 800afe8:	42a6      	cmp	r6, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	4d0b      	ldr	r5, [pc, #44]	@ (800b01c <__libc_init_array+0x40>)
 800afee:	4c0c      	ldr	r4, [pc, #48]	@ (800b020 <__libc_init_array+0x44>)
 800aff0:	f000 fc64 	bl	800b8bc <_init>
 800aff4:	1b64      	subs	r4, r4, r5
 800aff6:	10a4      	asrs	r4, r4, #2
 800aff8:	2600      	movs	r6, #0
 800affa:	42a6      	cmp	r6, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f855 3b04 	ldr.w	r3, [r5], #4
 800b004:	4798      	blx	r3
 800b006:	3601      	adds	r6, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00e:	4798      	blx	r3
 800b010:	3601      	adds	r6, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800bcbc 	.word	0x0800bcbc
 800b018:	0800bcbc 	.word	0x0800bcbc
 800b01c:	0800bcbc 	.word	0x0800bcbc
 800b020:	0800bcc4 	.word	0x0800bcc4

0800b024 <__retarget_lock_acquire_recursive>:
 800b024:	4770      	bx	lr

0800b026 <__retarget_lock_release_recursive>:
 800b026:	4770      	bx	lr

0800b028 <memcpy>:
 800b028:	440a      	add	r2, r1
 800b02a:	4291      	cmp	r1, r2
 800b02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b030:	d100      	bne.n	800b034 <memcpy+0xc>
 800b032:	4770      	bx	lr
 800b034:	b510      	push	{r4, lr}
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b03e:	4291      	cmp	r1, r2
 800b040:	d1f9      	bne.n	800b036 <memcpy+0xe>
 800b042:	bd10      	pop	{r4, pc}

0800b044 <_free_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4605      	mov	r5, r0
 800b048:	2900      	cmp	r1, #0
 800b04a:	d041      	beq.n	800b0d0 <_free_r+0x8c>
 800b04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b050:	1f0c      	subs	r4, r1, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfb8      	it	lt
 800b056:	18e4      	addlt	r4, r4, r3
 800b058:	f000 f8e0 	bl	800b21c <__malloc_lock>
 800b05c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0d4 <_free_r+0x90>)
 800b05e:	6813      	ldr	r3, [r2, #0]
 800b060:	b933      	cbnz	r3, 800b070 <_free_r+0x2c>
 800b062:	6063      	str	r3, [r4, #4]
 800b064:	6014      	str	r4, [r2, #0]
 800b066:	4628      	mov	r0, r5
 800b068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b06c:	f000 b8dc 	b.w	800b228 <__malloc_unlock>
 800b070:	42a3      	cmp	r3, r4
 800b072:	d908      	bls.n	800b086 <_free_r+0x42>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	1821      	adds	r1, r4, r0
 800b078:	428b      	cmp	r3, r1
 800b07a:	bf01      	itttt	eq
 800b07c:	6819      	ldreq	r1, [r3, #0]
 800b07e:	685b      	ldreq	r3, [r3, #4]
 800b080:	1809      	addeq	r1, r1, r0
 800b082:	6021      	streq	r1, [r4, #0]
 800b084:	e7ed      	b.n	800b062 <_free_r+0x1e>
 800b086:	461a      	mov	r2, r3
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	b10b      	cbz	r3, 800b090 <_free_r+0x4c>
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d9fa      	bls.n	800b086 <_free_r+0x42>
 800b090:	6811      	ldr	r1, [r2, #0]
 800b092:	1850      	adds	r0, r2, r1
 800b094:	42a0      	cmp	r0, r4
 800b096:	d10b      	bne.n	800b0b0 <_free_r+0x6c>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	4401      	add	r1, r0
 800b09c:	1850      	adds	r0, r2, r1
 800b09e:	4283      	cmp	r3, r0
 800b0a0:	6011      	str	r1, [r2, #0]
 800b0a2:	d1e0      	bne.n	800b066 <_free_r+0x22>
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	6053      	str	r3, [r2, #4]
 800b0aa:	4408      	add	r0, r1
 800b0ac:	6010      	str	r0, [r2, #0]
 800b0ae:	e7da      	b.n	800b066 <_free_r+0x22>
 800b0b0:	d902      	bls.n	800b0b8 <_free_r+0x74>
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	602b      	str	r3, [r5, #0]
 800b0b6:	e7d6      	b.n	800b066 <_free_r+0x22>
 800b0b8:	6820      	ldr	r0, [r4, #0]
 800b0ba:	1821      	adds	r1, r4, r0
 800b0bc:	428b      	cmp	r3, r1
 800b0be:	bf04      	itt	eq
 800b0c0:	6819      	ldreq	r1, [r3, #0]
 800b0c2:	685b      	ldreq	r3, [r3, #4]
 800b0c4:	6063      	str	r3, [r4, #4]
 800b0c6:	bf04      	itt	eq
 800b0c8:	1809      	addeq	r1, r1, r0
 800b0ca:	6021      	streq	r1, [r4, #0]
 800b0cc:	6054      	str	r4, [r2, #4]
 800b0ce:	e7ca      	b.n	800b066 <_free_r+0x22>
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	bf00      	nop
 800b0d4:	24000db4 	.word	0x24000db4

0800b0d8 <sbrk_aligned>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4e0f      	ldr	r6, [pc, #60]	@ (800b118 <sbrk_aligned+0x40>)
 800b0dc:	460c      	mov	r4, r1
 800b0de:	6831      	ldr	r1, [r6, #0]
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	b911      	cbnz	r1, 800b0ea <sbrk_aligned+0x12>
 800b0e4:	f000 fba4 	bl	800b830 <_sbrk_r>
 800b0e8:	6030      	str	r0, [r6, #0]
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 fb9f 	bl	800b830 <_sbrk_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d103      	bne.n	800b0fe <sbrk_aligned+0x26>
 800b0f6:	f04f 34ff 	mov.w	r4, #4294967295
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	1cc4      	adds	r4, r0, #3
 800b100:	f024 0403 	bic.w	r4, r4, #3
 800b104:	42a0      	cmp	r0, r4
 800b106:	d0f8      	beq.n	800b0fa <sbrk_aligned+0x22>
 800b108:	1a21      	subs	r1, r4, r0
 800b10a:	4628      	mov	r0, r5
 800b10c:	f000 fb90 	bl	800b830 <_sbrk_r>
 800b110:	3001      	adds	r0, #1
 800b112:	d1f2      	bne.n	800b0fa <sbrk_aligned+0x22>
 800b114:	e7ef      	b.n	800b0f6 <sbrk_aligned+0x1e>
 800b116:	bf00      	nop
 800b118:	24000db0 	.word	0x24000db0

0800b11c <_malloc_r>:
 800b11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b120:	1ccd      	adds	r5, r1, #3
 800b122:	f025 0503 	bic.w	r5, r5, #3
 800b126:	3508      	adds	r5, #8
 800b128:	2d0c      	cmp	r5, #12
 800b12a:	bf38      	it	cc
 800b12c:	250c      	movcc	r5, #12
 800b12e:	2d00      	cmp	r5, #0
 800b130:	4606      	mov	r6, r0
 800b132:	db01      	blt.n	800b138 <_malloc_r+0x1c>
 800b134:	42a9      	cmp	r1, r5
 800b136:	d904      	bls.n	800b142 <_malloc_r+0x26>
 800b138:	230c      	movs	r3, #12
 800b13a:	6033      	str	r3, [r6, #0]
 800b13c:	2000      	movs	r0, #0
 800b13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b218 <_malloc_r+0xfc>
 800b146:	f000 f869 	bl	800b21c <__malloc_lock>
 800b14a:	f8d8 3000 	ldr.w	r3, [r8]
 800b14e:	461c      	mov	r4, r3
 800b150:	bb44      	cbnz	r4, 800b1a4 <_malloc_r+0x88>
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff ffbf 	bl	800b0d8 <sbrk_aligned>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	4604      	mov	r4, r0
 800b15e:	d158      	bne.n	800b212 <_malloc_r+0xf6>
 800b160:	f8d8 4000 	ldr.w	r4, [r8]
 800b164:	4627      	mov	r7, r4
 800b166:	2f00      	cmp	r7, #0
 800b168:	d143      	bne.n	800b1f2 <_malloc_r+0xd6>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	d04b      	beq.n	800b206 <_malloc_r+0xea>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	4639      	mov	r1, r7
 800b172:	4630      	mov	r0, r6
 800b174:	eb04 0903 	add.w	r9, r4, r3
 800b178:	f000 fb5a 	bl	800b830 <_sbrk_r>
 800b17c:	4581      	cmp	r9, r0
 800b17e:	d142      	bne.n	800b206 <_malloc_r+0xea>
 800b180:	6821      	ldr	r1, [r4, #0]
 800b182:	1a6d      	subs	r5, r5, r1
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f7ff ffa6 	bl	800b0d8 <sbrk_aligned>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d03a      	beq.n	800b206 <_malloc_r+0xea>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	442b      	add	r3, r5
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	f8d8 3000 	ldr.w	r3, [r8]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	bb62      	cbnz	r2, 800b1f8 <_malloc_r+0xdc>
 800b19e:	f8c8 7000 	str.w	r7, [r8]
 800b1a2:	e00f      	b.n	800b1c4 <_malloc_r+0xa8>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	1b52      	subs	r2, r2, r5
 800b1a8:	d420      	bmi.n	800b1ec <_malloc_r+0xd0>
 800b1aa:	2a0b      	cmp	r2, #11
 800b1ac:	d917      	bls.n	800b1de <_malloc_r+0xc2>
 800b1ae:	1961      	adds	r1, r4, r5
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	6025      	str	r5, [r4, #0]
 800b1b4:	bf18      	it	ne
 800b1b6:	6059      	strne	r1, [r3, #4]
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	bf08      	it	eq
 800b1bc:	f8c8 1000 	streq.w	r1, [r8]
 800b1c0:	5162      	str	r2, [r4, r5]
 800b1c2:	604b      	str	r3, [r1, #4]
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f000 f82f 	bl	800b228 <__malloc_unlock>
 800b1ca:	f104 000b 	add.w	r0, r4, #11
 800b1ce:	1d23      	adds	r3, r4, #4
 800b1d0:	f020 0007 	bic.w	r0, r0, #7
 800b1d4:	1ac2      	subs	r2, r0, r3
 800b1d6:	bf1c      	itt	ne
 800b1d8:	1a1b      	subne	r3, r3, r0
 800b1da:	50a3      	strne	r3, [r4, r2]
 800b1dc:	e7af      	b.n	800b13e <_malloc_r+0x22>
 800b1de:	6862      	ldr	r2, [r4, #4]
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	bf0c      	ite	eq
 800b1e4:	f8c8 2000 	streq.w	r2, [r8]
 800b1e8:	605a      	strne	r2, [r3, #4]
 800b1ea:	e7eb      	b.n	800b1c4 <_malloc_r+0xa8>
 800b1ec:	4623      	mov	r3, r4
 800b1ee:	6864      	ldr	r4, [r4, #4]
 800b1f0:	e7ae      	b.n	800b150 <_malloc_r+0x34>
 800b1f2:	463c      	mov	r4, r7
 800b1f4:	687f      	ldr	r7, [r7, #4]
 800b1f6:	e7b6      	b.n	800b166 <_malloc_r+0x4a>
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d1fb      	bne.n	800b1f8 <_malloc_r+0xdc>
 800b200:	2300      	movs	r3, #0
 800b202:	6053      	str	r3, [r2, #4]
 800b204:	e7de      	b.n	800b1c4 <_malloc_r+0xa8>
 800b206:	230c      	movs	r3, #12
 800b208:	6033      	str	r3, [r6, #0]
 800b20a:	4630      	mov	r0, r6
 800b20c:	f000 f80c 	bl	800b228 <__malloc_unlock>
 800b210:	e794      	b.n	800b13c <_malloc_r+0x20>
 800b212:	6005      	str	r5, [r0, #0]
 800b214:	e7d6      	b.n	800b1c4 <_malloc_r+0xa8>
 800b216:	bf00      	nop
 800b218:	24000db4 	.word	0x24000db4

0800b21c <__malloc_lock>:
 800b21c:	4801      	ldr	r0, [pc, #4]	@ (800b224 <__malloc_lock+0x8>)
 800b21e:	f7ff bf01 	b.w	800b024 <__retarget_lock_acquire_recursive>
 800b222:	bf00      	nop
 800b224:	24000dac 	.word	0x24000dac

0800b228 <__malloc_unlock>:
 800b228:	4801      	ldr	r0, [pc, #4]	@ (800b230 <__malloc_unlock+0x8>)
 800b22a:	f7ff befc 	b.w	800b026 <__retarget_lock_release_recursive>
 800b22e:	bf00      	nop
 800b230:	24000dac 	.word	0x24000dac

0800b234 <__ssputs_r>:
 800b234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b238:	688e      	ldr	r6, [r1, #8]
 800b23a:	461f      	mov	r7, r3
 800b23c:	42be      	cmp	r6, r7
 800b23e:	680b      	ldr	r3, [r1, #0]
 800b240:	4682      	mov	sl, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4690      	mov	r8, r2
 800b246:	d82d      	bhi.n	800b2a4 <__ssputs_r+0x70>
 800b248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b24c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b250:	d026      	beq.n	800b2a0 <__ssputs_r+0x6c>
 800b252:	6965      	ldr	r5, [r4, #20]
 800b254:	6909      	ldr	r1, [r1, #16]
 800b256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b25a:	eba3 0901 	sub.w	r9, r3, r1
 800b25e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b262:	1c7b      	adds	r3, r7, #1
 800b264:	444b      	add	r3, r9
 800b266:	106d      	asrs	r5, r5, #1
 800b268:	429d      	cmp	r5, r3
 800b26a:	bf38      	it	cc
 800b26c:	461d      	movcc	r5, r3
 800b26e:	0553      	lsls	r3, r2, #21
 800b270:	d527      	bpl.n	800b2c2 <__ssputs_r+0x8e>
 800b272:	4629      	mov	r1, r5
 800b274:	f7ff ff52 	bl	800b11c <_malloc_r>
 800b278:	4606      	mov	r6, r0
 800b27a:	b360      	cbz	r0, 800b2d6 <__ssputs_r+0xa2>
 800b27c:	6921      	ldr	r1, [r4, #16]
 800b27e:	464a      	mov	r2, r9
 800b280:	f7ff fed2 	bl	800b028 <memcpy>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b28e:	81a3      	strh	r3, [r4, #12]
 800b290:	6126      	str	r6, [r4, #16]
 800b292:	6165      	str	r5, [r4, #20]
 800b294:	444e      	add	r6, r9
 800b296:	eba5 0509 	sub.w	r5, r5, r9
 800b29a:	6026      	str	r6, [r4, #0]
 800b29c:	60a5      	str	r5, [r4, #8]
 800b29e:	463e      	mov	r6, r7
 800b2a0:	42be      	cmp	r6, r7
 800b2a2:	d900      	bls.n	800b2a6 <__ssputs_r+0x72>
 800b2a4:	463e      	mov	r6, r7
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	f000 faa6 	bl	800b7fc <memmove>
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	1b9b      	subs	r3, r3, r6
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	4433      	add	r3, r6
 800b2ba:	6023      	str	r3, [r4, #0]
 800b2bc:	2000      	movs	r0, #0
 800b2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	f000 fac4 	bl	800b850 <_realloc_r>
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d1e0      	bne.n	800b290 <__ssputs_r+0x5c>
 800b2ce:	6921      	ldr	r1, [r4, #16]
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f7ff feb7 	bl	800b044 <_free_r>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	f8ca 3000 	str.w	r3, [sl]
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	e7e9      	b.n	800b2be <__ssputs_r+0x8a>
	...

0800b2ec <_svfiprintf_r>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	4698      	mov	r8, r3
 800b2f2:	898b      	ldrh	r3, [r1, #12]
 800b2f4:	061b      	lsls	r3, r3, #24
 800b2f6:	b09d      	sub	sp, #116	@ 0x74
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	4614      	mov	r4, r2
 800b2fe:	d510      	bpl.n	800b322 <_svfiprintf_r+0x36>
 800b300:	690b      	ldr	r3, [r1, #16]
 800b302:	b973      	cbnz	r3, 800b322 <_svfiprintf_r+0x36>
 800b304:	2140      	movs	r1, #64	@ 0x40
 800b306:	f7ff ff09 	bl	800b11c <_malloc_r>
 800b30a:	6028      	str	r0, [r5, #0]
 800b30c:	6128      	str	r0, [r5, #16]
 800b30e:	b930      	cbnz	r0, 800b31e <_svfiprintf_r+0x32>
 800b310:	230c      	movs	r3, #12
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	b01d      	add	sp, #116	@ 0x74
 800b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31e:	2340      	movs	r3, #64	@ 0x40
 800b320:	616b      	str	r3, [r5, #20]
 800b322:	2300      	movs	r3, #0
 800b324:	9309      	str	r3, [sp, #36]	@ 0x24
 800b326:	2320      	movs	r3, #32
 800b328:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b32c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b330:	2330      	movs	r3, #48	@ 0x30
 800b332:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4d0 <_svfiprintf_r+0x1e4>
 800b336:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b33a:	f04f 0901 	mov.w	r9, #1
 800b33e:	4623      	mov	r3, r4
 800b340:	469a      	mov	sl, r3
 800b342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b346:	b10a      	cbz	r2, 800b34c <_svfiprintf_r+0x60>
 800b348:	2a25      	cmp	r2, #37	@ 0x25
 800b34a:	d1f9      	bne.n	800b340 <_svfiprintf_r+0x54>
 800b34c:	ebba 0b04 	subs.w	fp, sl, r4
 800b350:	d00b      	beq.n	800b36a <_svfiprintf_r+0x7e>
 800b352:	465b      	mov	r3, fp
 800b354:	4622      	mov	r2, r4
 800b356:	4629      	mov	r1, r5
 800b358:	4638      	mov	r0, r7
 800b35a:	f7ff ff6b 	bl	800b234 <__ssputs_r>
 800b35e:	3001      	adds	r0, #1
 800b360:	f000 80a7 	beq.w	800b4b2 <_svfiprintf_r+0x1c6>
 800b364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b366:	445a      	add	r2, fp
 800b368:	9209      	str	r2, [sp, #36]	@ 0x24
 800b36a:	f89a 3000 	ldrb.w	r3, [sl]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 809f 	beq.w	800b4b2 <_svfiprintf_r+0x1c6>
 800b374:	2300      	movs	r3, #0
 800b376:	f04f 32ff 	mov.w	r2, #4294967295
 800b37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37e:	f10a 0a01 	add.w	sl, sl, #1
 800b382:	9304      	str	r3, [sp, #16]
 800b384:	9307      	str	r3, [sp, #28]
 800b386:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b38a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b38c:	4654      	mov	r4, sl
 800b38e:	2205      	movs	r2, #5
 800b390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b394:	484e      	ldr	r0, [pc, #312]	@ (800b4d0 <_svfiprintf_r+0x1e4>)
 800b396:	f7f4 ffc3 	bl	8000320 <memchr>
 800b39a:	9a04      	ldr	r2, [sp, #16]
 800b39c:	b9d8      	cbnz	r0, 800b3d6 <_svfiprintf_r+0xea>
 800b39e:	06d0      	lsls	r0, r2, #27
 800b3a0:	bf44      	itt	mi
 800b3a2:	2320      	movmi	r3, #32
 800b3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3a8:	0711      	lsls	r1, r2, #28
 800b3aa:	bf44      	itt	mi
 800b3ac:	232b      	movmi	r3, #43	@ 0x2b
 800b3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b8:	d015      	beq.n	800b3e6 <_svfiprintf_r+0xfa>
 800b3ba:	9a07      	ldr	r2, [sp, #28]
 800b3bc:	4654      	mov	r4, sl
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f04f 0c0a 	mov.w	ip, #10
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ca:	3b30      	subs	r3, #48	@ 0x30
 800b3cc:	2b09      	cmp	r3, #9
 800b3ce:	d94b      	bls.n	800b468 <_svfiprintf_r+0x17c>
 800b3d0:	b1b0      	cbz	r0, 800b400 <_svfiprintf_r+0x114>
 800b3d2:	9207      	str	r2, [sp, #28]
 800b3d4:	e014      	b.n	800b400 <_svfiprintf_r+0x114>
 800b3d6:	eba0 0308 	sub.w	r3, r0, r8
 800b3da:	fa09 f303 	lsl.w	r3, r9, r3
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	46a2      	mov	sl, r4
 800b3e4:	e7d2      	b.n	800b38c <_svfiprintf_r+0xa0>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	1d19      	adds	r1, r3, #4
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	9103      	str	r1, [sp, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	bfbb      	ittet	lt
 800b3f2:	425b      	neglt	r3, r3
 800b3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f8:	9307      	strge	r3, [sp, #28]
 800b3fa:	9307      	strlt	r3, [sp, #28]
 800b3fc:	bfb8      	it	lt
 800b3fe:	9204      	strlt	r2, [sp, #16]
 800b400:	7823      	ldrb	r3, [r4, #0]
 800b402:	2b2e      	cmp	r3, #46	@ 0x2e
 800b404:	d10a      	bne.n	800b41c <_svfiprintf_r+0x130>
 800b406:	7863      	ldrb	r3, [r4, #1]
 800b408:	2b2a      	cmp	r3, #42	@ 0x2a
 800b40a:	d132      	bne.n	800b472 <_svfiprintf_r+0x186>
 800b40c:	9b03      	ldr	r3, [sp, #12]
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	9203      	str	r2, [sp, #12]
 800b414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b418:	3402      	adds	r4, #2
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4e0 <_svfiprintf_r+0x1f4>
 800b420:	7821      	ldrb	r1, [r4, #0]
 800b422:	2203      	movs	r2, #3
 800b424:	4650      	mov	r0, sl
 800b426:	f7f4 ff7b 	bl	8000320 <memchr>
 800b42a:	b138      	cbz	r0, 800b43c <_svfiprintf_r+0x150>
 800b42c:	9b04      	ldr	r3, [sp, #16]
 800b42e:	eba0 000a 	sub.w	r0, r0, sl
 800b432:	2240      	movs	r2, #64	@ 0x40
 800b434:	4082      	lsls	r2, r0
 800b436:	4313      	orrs	r3, r2
 800b438:	3401      	adds	r4, #1
 800b43a:	9304      	str	r3, [sp, #16]
 800b43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b440:	4824      	ldr	r0, [pc, #144]	@ (800b4d4 <_svfiprintf_r+0x1e8>)
 800b442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b446:	2206      	movs	r2, #6
 800b448:	f7f4 ff6a 	bl	8000320 <memchr>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d036      	beq.n	800b4be <_svfiprintf_r+0x1d2>
 800b450:	4b21      	ldr	r3, [pc, #132]	@ (800b4d8 <_svfiprintf_r+0x1ec>)
 800b452:	bb1b      	cbnz	r3, 800b49c <_svfiprintf_r+0x1b0>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	3307      	adds	r3, #7
 800b458:	f023 0307 	bic.w	r3, r3, #7
 800b45c:	3308      	adds	r3, #8
 800b45e:	9303      	str	r3, [sp, #12]
 800b460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b462:	4433      	add	r3, r6
 800b464:	9309      	str	r3, [sp, #36]	@ 0x24
 800b466:	e76a      	b.n	800b33e <_svfiprintf_r+0x52>
 800b468:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46c:	460c      	mov	r4, r1
 800b46e:	2001      	movs	r0, #1
 800b470:	e7a8      	b.n	800b3c4 <_svfiprintf_r+0xd8>
 800b472:	2300      	movs	r3, #0
 800b474:	3401      	adds	r4, #1
 800b476:	9305      	str	r3, [sp, #20]
 800b478:	4619      	mov	r1, r3
 800b47a:	f04f 0c0a 	mov.w	ip, #10
 800b47e:	4620      	mov	r0, r4
 800b480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b484:	3a30      	subs	r2, #48	@ 0x30
 800b486:	2a09      	cmp	r2, #9
 800b488:	d903      	bls.n	800b492 <_svfiprintf_r+0x1a6>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0c6      	beq.n	800b41c <_svfiprintf_r+0x130>
 800b48e:	9105      	str	r1, [sp, #20]
 800b490:	e7c4      	b.n	800b41c <_svfiprintf_r+0x130>
 800b492:	fb0c 2101 	mla	r1, ip, r1, r2
 800b496:	4604      	mov	r4, r0
 800b498:	2301      	movs	r3, #1
 800b49a:	e7f0      	b.n	800b47e <_svfiprintf_r+0x192>
 800b49c:	ab03      	add	r3, sp, #12
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	462a      	mov	r2, r5
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b4dc <_svfiprintf_r+0x1f0>)
 800b4a4:	a904      	add	r1, sp, #16
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f3af 8000 	nop.w
 800b4ac:	1c42      	adds	r2, r0, #1
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	d1d6      	bne.n	800b460 <_svfiprintf_r+0x174>
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	065b      	lsls	r3, r3, #25
 800b4b6:	f53f af2d 	bmi.w	800b314 <_svfiprintf_r+0x28>
 800b4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4bc:	e72c      	b.n	800b318 <_svfiprintf_r+0x2c>
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4b05      	ldr	r3, [pc, #20]	@ (800b4dc <_svfiprintf_r+0x1f0>)
 800b4c6:	a904      	add	r1, sp, #16
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f000 f879 	bl	800b5c0 <_printf_i>
 800b4ce:	e7ed      	b.n	800b4ac <_svfiprintf_r+0x1c0>
 800b4d0:	0800bc80 	.word	0x0800bc80
 800b4d4:	0800bc8a 	.word	0x0800bc8a
 800b4d8:	00000000 	.word	0x00000000
 800b4dc:	0800b235 	.word	0x0800b235
 800b4e0:	0800bc86 	.word	0x0800bc86

0800b4e4 <_printf_common>:
 800b4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e8:	4616      	mov	r6, r2
 800b4ea:	4698      	mov	r8, r3
 800b4ec:	688a      	ldr	r2, [r1, #8]
 800b4ee:	690b      	ldr	r3, [r1, #16]
 800b4f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	bfb8      	it	lt
 800b4f8:	4613      	movlt	r3, r2
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b500:	4607      	mov	r7, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b10a      	cbz	r2, 800b50a <_printf_common+0x26>
 800b506:	3301      	adds	r3, #1
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	0699      	lsls	r1, r3, #26
 800b50e:	bf42      	ittt	mi
 800b510:	6833      	ldrmi	r3, [r6, #0]
 800b512:	3302      	addmi	r3, #2
 800b514:	6033      	strmi	r3, [r6, #0]
 800b516:	6825      	ldr	r5, [r4, #0]
 800b518:	f015 0506 	ands.w	r5, r5, #6
 800b51c:	d106      	bne.n	800b52c <_printf_common+0x48>
 800b51e:	f104 0a19 	add.w	sl, r4, #25
 800b522:	68e3      	ldr	r3, [r4, #12]
 800b524:	6832      	ldr	r2, [r6, #0]
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	42ab      	cmp	r3, r5
 800b52a:	dc26      	bgt.n	800b57a <_printf_common+0x96>
 800b52c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b530:	6822      	ldr	r2, [r4, #0]
 800b532:	3b00      	subs	r3, #0
 800b534:	bf18      	it	ne
 800b536:	2301      	movne	r3, #1
 800b538:	0692      	lsls	r2, r2, #26
 800b53a:	d42b      	bmi.n	800b594 <_printf_common+0xb0>
 800b53c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b540:	4641      	mov	r1, r8
 800b542:	4638      	mov	r0, r7
 800b544:	47c8      	blx	r9
 800b546:	3001      	adds	r0, #1
 800b548:	d01e      	beq.n	800b588 <_printf_common+0xa4>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	f003 0306 	and.w	r3, r3, #6
 800b552:	2b04      	cmp	r3, #4
 800b554:	bf02      	ittt	eq
 800b556:	68e5      	ldreq	r5, [r4, #12]
 800b558:	6833      	ldreq	r3, [r6, #0]
 800b55a:	1aed      	subeq	r5, r5, r3
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	bf0c      	ite	eq
 800b560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b564:	2500      	movne	r5, #0
 800b566:	4293      	cmp	r3, r2
 800b568:	bfc4      	itt	gt
 800b56a:	1a9b      	subgt	r3, r3, r2
 800b56c:	18ed      	addgt	r5, r5, r3
 800b56e:	2600      	movs	r6, #0
 800b570:	341a      	adds	r4, #26
 800b572:	42b5      	cmp	r5, r6
 800b574:	d11a      	bne.n	800b5ac <_printf_common+0xc8>
 800b576:	2000      	movs	r0, #0
 800b578:	e008      	b.n	800b58c <_printf_common+0xa8>
 800b57a:	2301      	movs	r3, #1
 800b57c:	4652      	mov	r2, sl
 800b57e:	4641      	mov	r1, r8
 800b580:	4638      	mov	r0, r7
 800b582:	47c8      	blx	r9
 800b584:	3001      	adds	r0, #1
 800b586:	d103      	bne.n	800b590 <_printf_common+0xac>
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	3501      	adds	r5, #1
 800b592:	e7c6      	b.n	800b522 <_printf_common+0x3e>
 800b594:	18e1      	adds	r1, r4, r3
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	2030      	movs	r0, #48	@ 0x30
 800b59a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b59e:	4422      	add	r2, r4
 800b5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	e7c7      	b.n	800b53c <_printf_common+0x58>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	47c8      	blx	r9
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d0e6      	beq.n	800b588 <_printf_common+0xa4>
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7d9      	b.n	800b572 <_printf_common+0x8e>
	...

0800b5c0 <_printf_i>:
 800b5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	7e0f      	ldrb	r7, [r1, #24]
 800b5c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5c8:	2f78      	cmp	r7, #120	@ 0x78
 800b5ca:	4691      	mov	r9, r2
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	469a      	mov	sl, r3
 800b5d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5d6:	d807      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5d8:	2f62      	cmp	r7, #98	@ 0x62
 800b5da:	d80a      	bhi.n	800b5f2 <_printf_i+0x32>
 800b5dc:	2f00      	cmp	r7, #0
 800b5de:	f000 80d1 	beq.w	800b784 <_printf_i+0x1c4>
 800b5e2:	2f58      	cmp	r7, #88	@ 0x58
 800b5e4:	f000 80b8 	beq.w	800b758 <_printf_i+0x198>
 800b5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5f0:	e03a      	b.n	800b668 <_printf_i+0xa8>
 800b5f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5f6:	2b15      	cmp	r3, #21
 800b5f8:	d8f6      	bhi.n	800b5e8 <_printf_i+0x28>
 800b5fa:	a101      	add	r1, pc, #4	@ (adr r1, 800b600 <_printf_i+0x40>)
 800b5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b600:	0800b659 	.word	0x0800b659
 800b604:	0800b66d 	.word	0x0800b66d
 800b608:	0800b5e9 	.word	0x0800b5e9
 800b60c:	0800b5e9 	.word	0x0800b5e9
 800b610:	0800b5e9 	.word	0x0800b5e9
 800b614:	0800b5e9 	.word	0x0800b5e9
 800b618:	0800b66d 	.word	0x0800b66d
 800b61c:	0800b5e9 	.word	0x0800b5e9
 800b620:	0800b5e9 	.word	0x0800b5e9
 800b624:	0800b5e9 	.word	0x0800b5e9
 800b628:	0800b5e9 	.word	0x0800b5e9
 800b62c:	0800b76b 	.word	0x0800b76b
 800b630:	0800b697 	.word	0x0800b697
 800b634:	0800b725 	.word	0x0800b725
 800b638:	0800b5e9 	.word	0x0800b5e9
 800b63c:	0800b5e9 	.word	0x0800b5e9
 800b640:	0800b78d 	.word	0x0800b78d
 800b644:	0800b5e9 	.word	0x0800b5e9
 800b648:	0800b697 	.word	0x0800b697
 800b64c:	0800b5e9 	.word	0x0800b5e9
 800b650:	0800b5e9 	.word	0x0800b5e9
 800b654:	0800b72d 	.word	0x0800b72d
 800b658:	6833      	ldr	r3, [r6, #0]
 800b65a:	1d1a      	adds	r2, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6032      	str	r2, [r6, #0]
 800b660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b668:	2301      	movs	r3, #1
 800b66a:	e09c      	b.n	800b7a6 <_printf_i+0x1e6>
 800b66c:	6833      	ldr	r3, [r6, #0]
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	6031      	str	r1, [r6, #0]
 800b674:	0606      	lsls	r6, r0, #24
 800b676:	d501      	bpl.n	800b67c <_printf_i+0xbc>
 800b678:	681d      	ldr	r5, [r3, #0]
 800b67a:	e003      	b.n	800b684 <_printf_i+0xc4>
 800b67c:	0645      	lsls	r5, r0, #25
 800b67e:	d5fb      	bpl.n	800b678 <_printf_i+0xb8>
 800b680:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b684:	2d00      	cmp	r5, #0
 800b686:	da03      	bge.n	800b690 <_printf_i+0xd0>
 800b688:	232d      	movs	r3, #45	@ 0x2d
 800b68a:	426d      	negs	r5, r5
 800b68c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b690:	4858      	ldr	r0, [pc, #352]	@ (800b7f4 <_printf_i+0x234>)
 800b692:	230a      	movs	r3, #10
 800b694:	e011      	b.n	800b6ba <_printf_i+0xfa>
 800b696:	6821      	ldr	r1, [r4, #0]
 800b698:	6833      	ldr	r3, [r6, #0]
 800b69a:	0608      	lsls	r0, r1, #24
 800b69c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6a0:	d402      	bmi.n	800b6a8 <_printf_i+0xe8>
 800b6a2:	0649      	lsls	r1, r1, #25
 800b6a4:	bf48      	it	mi
 800b6a6:	b2ad      	uxthmi	r5, r5
 800b6a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6aa:	4852      	ldr	r0, [pc, #328]	@ (800b7f4 <_printf_i+0x234>)
 800b6ac:	6033      	str	r3, [r6, #0]
 800b6ae:	bf14      	ite	ne
 800b6b0:	230a      	movne	r3, #10
 800b6b2:	2308      	moveq	r3, #8
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ba:	6866      	ldr	r6, [r4, #4]
 800b6bc:	60a6      	str	r6, [r4, #8]
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	db05      	blt.n	800b6ce <_printf_i+0x10e>
 800b6c2:	6821      	ldr	r1, [r4, #0]
 800b6c4:	432e      	orrs	r6, r5
 800b6c6:	f021 0104 	bic.w	r1, r1, #4
 800b6ca:	6021      	str	r1, [r4, #0]
 800b6cc:	d04b      	beq.n	800b766 <_printf_i+0x1a6>
 800b6ce:	4616      	mov	r6, r2
 800b6d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6d4:	fb03 5711 	mls	r7, r3, r1, r5
 800b6d8:	5dc7      	ldrb	r7, [r0, r7]
 800b6da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6de:	462f      	mov	r7, r5
 800b6e0:	42bb      	cmp	r3, r7
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	d9f4      	bls.n	800b6d0 <_printf_i+0x110>
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d10b      	bne.n	800b702 <_printf_i+0x142>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	07df      	lsls	r7, r3, #31
 800b6ee:	d508      	bpl.n	800b702 <_printf_i+0x142>
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	6861      	ldr	r1, [r4, #4]
 800b6f4:	4299      	cmp	r1, r3
 800b6f6:	bfde      	ittt	le
 800b6f8:	2330      	movle	r3, #48	@ 0x30
 800b6fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b702:	1b92      	subs	r2, r2, r6
 800b704:	6122      	str	r2, [r4, #16]
 800b706:	f8cd a000 	str.w	sl, [sp]
 800b70a:	464b      	mov	r3, r9
 800b70c:	aa03      	add	r2, sp, #12
 800b70e:	4621      	mov	r1, r4
 800b710:	4640      	mov	r0, r8
 800b712:	f7ff fee7 	bl	800b4e4 <_printf_common>
 800b716:	3001      	adds	r0, #1
 800b718:	d14a      	bne.n	800b7b0 <_printf_i+0x1f0>
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	b004      	add	sp, #16
 800b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	f043 0320 	orr.w	r3, r3, #32
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	4832      	ldr	r0, [pc, #200]	@ (800b7f8 <_printf_i+0x238>)
 800b72e:	2778      	movs	r7, #120	@ 0x78
 800b730:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	6831      	ldr	r1, [r6, #0]
 800b738:	061f      	lsls	r7, r3, #24
 800b73a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b73e:	d402      	bmi.n	800b746 <_printf_i+0x186>
 800b740:	065f      	lsls	r7, r3, #25
 800b742:	bf48      	it	mi
 800b744:	b2ad      	uxthmi	r5, r5
 800b746:	6031      	str	r1, [r6, #0]
 800b748:	07d9      	lsls	r1, r3, #31
 800b74a:	bf44      	itt	mi
 800b74c:	f043 0320 	orrmi.w	r3, r3, #32
 800b750:	6023      	strmi	r3, [r4, #0]
 800b752:	b11d      	cbz	r5, 800b75c <_printf_i+0x19c>
 800b754:	2310      	movs	r3, #16
 800b756:	e7ad      	b.n	800b6b4 <_printf_i+0xf4>
 800b758:	4826      	ldr	r0, [pc, #152]	@ (800b7f4 <_printf_i+0x234>)
 800b75a:	e7e9      	b.n	800b730 <_printf_i+0x170>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	f023 0320 	bic.w	r3, r3, #32
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	e7f6      	b.n	800b754 <_printf_i+0x194>
 800b766:	4616      	mov	r6, r2
 800b768:	e7bd      	b.n	800b6e6 <_printf_i+0x126>
 800b76a:	6833      	ldr	r3, [r6, #0]
 800b76c:	6825      	ldr	r5, [r4, #0]
 800b76e:	6961      	ldr	r1, [r4, #20]
 800b770:	1d18      	adds	r0, r3, #4
 800b772:	6030      	str	r0, [r6, #0]
 800b774:	062e      	lsls	r6, r5, #24
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	d501      	bpl.n	800b77e <_printf_i+0x1be>
 800b77a:	6019      	str	r1, [r3, #0]
 800b77c:	e002      	b.n	800b784 <_printf_i+0x1c4>
 800b77e:	0668      	lsls	r0, r5, #25
 800b780:	d5fb      	bpl.n	800b77a <_printf_i+0x1ba>
 800b782:	8019      	strh	r1, [r3, #0]
 800b784:	2300      	movs	r3, #0
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	4616      	mov	r6, r2
 800b78a:	e7bc      	b.n	800b706 <_printf_i+0x146>
 800b78c:	6833      	ldr	r3, [r6, #0]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	6032      	str	r2, [r6, #0]
 800b792:	681e      	ldr	r6, [r3, #0]
 800b794:	6862      	ldr	r2, [r4, #4]
 800b796:	2100      	movs	r1, #0
 800b798:	4630      	mov	r0, r6
 800b79a:	f7f4 fdc1 	bl	8000320 <memchr>
 800b79e:	b108      	cbz	r0, 800b7a4 <_printf_i+0x1e4>
 800b7a0:	1b80      	subs	r0, r0, r6
 800b7a2:	6060      	str	r0, [r4, #4]
 800b7a4:	6863      	ldr	r3, [r4, #4]
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7ae:	e7aa      	b.n	800b706 <_printf_i+0x146>
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	47d0      	blx	sl
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d0ad      	beq.n	800b71a <_printf_i+0x15a>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	079b      	lsls	r3, r3, #30
 800b7c2:	d413      	bmi.n	800b7ec <_printf_i+0x22c>
 800b7c4:	68e0      	ldr	r0, [r4, #12]
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	4298      	cmp	r0, r3
 800b7ca:	bfb8      	it	lt
 800b7cc:	4618      	movlt	r0, r3
 800b7ce:	e7a6      	b.n	800b71e <_printf_i+0x15e>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	4632      	mov	r2, r6
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	47d0      	blx	sl
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d09d      	beq.n	800b71a <_printf_i+0x15a>
 800b7de:	3501      	adds	r5, #1
 800b7e0:	68e3      	ldr	r3, [r4, #12]
 800b7e2:	9903      	ldr	r1, [sp, #12]
 800b7e4:	1a5b      	subs	r3, r3, r1
 800b7e6:	42ab      	cmp	r3, r5
 800b7e8:	dcf2      	bgt.n	800b7d0 <_printf_i+0x210>
 800b7ea:	e7eb      	b.n	800b7c4 <_printf_i+0x204>
 800b7ec:	2500      	movs	r5, #0
 800b7ee:	f104 0619 	add.w	r6, r4, #25
 800b7f2:	e7f5      	b.n	800b7e0 <_printf_i+0x220>
 800b7f4:	0800bc91 	.word	0x0800bc91
 800b7f8:	0800bca2 	.word	0x0800bca2

0800b7fc <memmove>:
 800b7fc:	4288      	cmp	r0, r1
 800b7fe:	b510      	push	{r4, lr}
 800b800:	eb01 0402 	add.w	r4, r1, r2
 800b804:	d902      	bls.n	800b80c <memmove+0x10>
 800b806:	4284      	cmp	r4, r0
 800b808:	4623      	mov	r3, r4
 800b80a:	d807      	bhi.n	800b81c <memmove+0x20>
 800b80c:	1e43      	subs	r3, r0, #1
 800b80e:	42a1      	cmp	r1, r4
 800b810:	d008      	beq.n	800b824 <memmove+0x28>
 800b812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b81a:	e7f8      	b.n	800b80e <memmove+0x12>
 800b81c:	4402      	add	r2, r0
 800b81e:	4601      	mov	r1, r0
 800b820:	428a      	cmp	r2, r1
 800b822:	d100      	bne.n	800b826 <memmove+0x2a>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b82e:	e7f7      	b.n	800b820 <memmove+0x24>

0800b830 <_sbrk_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	@ (800b84c <_sbrk_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f6 ffb2 	bl	80027a4 <_sbrk>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_sbrk_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_sbrk_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	24000da8 	.word	0x24000da8

0800b850 <_realloc_r>:
 800b850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b854:	4607      	mov	r7, r0
 800b856:	4614      	mov	r4, r2
 800b858:	460d      	mov	r5, r1
 800b85a:	b921      	cbnz	r1, 800b866 <_realloc_r+0x16>
 800b85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b860:	4611      	mov	r1, r2
 800b862:	f7ff bc5b 	b.w	800b11c <_malloc_r>
 800b866:	b92a      	cbnz	r2, 800b874 <_realloc_r+0x24>
 800b868:	f7ff fbec 	bl	800b044 <_free_r>
 800b86c:	4625      	mov	r5, r4
 800b86e:	4628      	mov	r0, r5
 800b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b874:	f000 f81a 	bl	800b8ac <_malloc_usable_size_r>
 800b878:	4284      	cmp	r4, r0
 800b87a:	4606      	mov	r6, r0
 800b87c:	d802      	bhi.n	800b884 <_realloc_r+0x34>
 800b87e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b882:	d8f4      	bhi.n	800b86e <_realloc_r+0x1e>
 800b884:	4621      	mov	r1, r4
 800b886:	4638      	mov	r0, r7
 800b888:	f7ff fc48 	bl	800b11c <_malloc_r>
 800b88c:	4680      	mov	r8, r0
 800b88e:	b908      	cbnz	r0, 800b894 <_realloc_r+0x44>
 800b890:	4645      	mov	r5, r8
 800b892:	e7ec      	b.n	800b86e <_realloc_r+0x1e>
 800b894:	42b4      	cmp	r4, r6
 800b896:	4622      	mov	r2, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	bf28      	it	cs
 800b89c:	4632      	movcs	r2, r6
 800b89e:	f7ff fbc3 	bl	800b028 <memcpy>
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7ff fbcd 	bl	800b044 <_free_r>
 800b8aa:	e7f1      	b.n	800b890 <_realloc_r+0x40>

0800b8ac <_malloc_usable_size_r>:
 800b8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b0:	1f18      	subs	r0, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bfbc      	itt	lt
 800b8b6:	580b      	ldrlt	r3, [r1, r0]
 800b8b8:	18c0      	addlt	r0, r0, r3
 800b8ba:	4770      	bx	lr

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
