
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b068  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b338  0800b338  0000c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b588  0800b588  0000c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b590  0800b590  0000c590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b598  0800b598  0000c598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b59c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d54  24000068  0800b604  0000d068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000dbc  0800b604  0000ddbc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000219d1  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003551  00000000  00000000  0002ea67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001370  00000000  00000000  00031fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eff  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d39  00000000  00000000  00034227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab69  00000000  00000000  0006df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c08  00000000  00000000  00088ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f06d1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058d4  00000000  00000000  001f0714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000042  00000000  00000000  001f5fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b320 	.word	0x0800b320

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0800b320 	.word	0x0800b320

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <_ZN7BMS_MODC1Emiiihji>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3308      	adds	r3, #8
 80006d0:	224c      	movs	r2, #76	@ 0x4c
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a f9a3 	bl	800aa20 <memset>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3354      	adds	r3, #84	@ 0x54
 80006de:	2298      	movs	r2, #152	@ 0x98
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00a f99c 	bl	800aa20 <memset>
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2200      	movs	r2, #0
 8000704:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800070e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000718:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000722:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2200      	movs	r2, #0
 8000736:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2200      	movs	r2, #0
 800073e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2200      	movs	r2, #0
 800075e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2200      	movs	r2, #0
 800076e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2213      	movs	r2, #19
 800077e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2203      	movs	r2, #3
 8000786:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8000790:	2230      	movs	r2, #48	@ 0x30
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f00a f943 	bl	800aa20 <memset>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007b8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
	CANID = _ID;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	LIMIT_MIN_V = _MINV;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	LIMIT_MAX_T = _MAXT;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	NUM_CELLS = _NUMCELLS;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	7f3a      	ldrb	r2, [r7, #28]
 80007f6:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	time_lim_plotted += _LAG;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000802:	441a      	add	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	time_lim_sended += _LAG;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8000810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000812:	441a      	add	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	time_lim_sended_temp += _LAG;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	441a      	add	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	time_lim_plotted_temp += _LAG;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8000830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000832:	441a      	add	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	time_lim_received += _LAG;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8000840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000842:	441a      	add	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
}
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocl
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	@ 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]

	if (id > CANID && id < CANID + 30) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	429a      	cmp	r2, r3
 800086a:	f240 817b 	bls.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	331e      	adds	r3, #30
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	429a      	cmp	r2, r3
 8000878:	f080 8174 	bcs.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
		int m = id % CANID;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	fbb3 f1f2 	udiv	r1, r3, r2
 8000886:	fb01 f202 	mul.w	r2, r1, r2
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	61fb      	str	r3, [r7, #28]
		int pos = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
		if ((m > 0 && m < 5) || (m > 10 && m < 15)) {
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dd02      	ble.n	800089e <_ZN7BMS_MOD5parseEmPhm+0x4a>
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	2b04      	cmp	r3, #4
 800089c:	dd07      	ble.n	80008ae <_ZN7BMS_MOD5parseEmPhm+0x5a>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	2b0a      	cmp	r3, #10
 80008a2:	f340 815f 	ble.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b0e      	cmp	r3, #14
 80008aa:	f300 815b 	bgt.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
			time_lim_received = t + TIME_LIM_RECV; // Reset the timer flag for checking if the data is received
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	441a      	add	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
			if (m < 14) {
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	2b0d      	cmp	r3, #13
 80008c2:	f300 80ae 	bgt.w	8000a22 <_ZN7BMS_MOD5parseEmPhm+0x1ce>
				if (flag_charger == 1) { // New charger doesn't have CAN bus
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d10f      	bne.n	80008f0 <_ZN7BMS_MOD5parseEmPhm+0x9c>
					if (module_send_message_CAN1(id, buf, 8) != HAL_OK)
 80008d0:	2208      	movs	r2, #8
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	68b8      	ldr	r0, [r7, #8]
 80008d6:	f000 ff89 	bl	80017ec <module_send_message_CAN1>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <_ZN7BMS_MOD5parseEmPhm+0x9c>
						error = BMS_ERROR_COMMUNICATION;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2201      	movs	r2, #1
 80008ee:	605a      	str	r2, [r3, #4]
				}
				for (int i = 0; i < 14; i++) // i = number of cell within message
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008f4:	e055      	b.n	80009a2 <_ZN7BMS_MOD5parseEmPhm+0x14e>
						{
					pos = (m - 1) * 4 + i;
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008fe:	4413      	add	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
					cellVoltagemV[pos] = (buf[2 * i] << 8) + buf[2 * i + 1];
 8000902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	3201      	adds	r2, #1
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	440a      	add	r2, r1
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	1899      	adds	r1, r3, r2
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	3202      	adds	r2, #2
 8000924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if ((cellVoltagemV[pos] > LIMIT_MAX_V
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	3202      	adds	r2, #2
 800092e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000938:	429a      	cmp	r2, r3
 800093a:	dc09      	bgt.n	8000950 <_ZN7BMS_MOD5parseEmPhm+0xfc>
							|| cellVoltagemV[pos] < LIMIT_MIN_V)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	3202      	adds	r2, #2
 8000942:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800094c:	429a      	cmp	r2, r3
 800094e:	da1f      	bge.n	8000990 <_ZN7BMS_MOD5parseEmPhm+0x13c>
							&& pos < NUM_CELLS) {
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8000956:	461a      	mov	r2, r3
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4293      	cmp	r3, r2
 800095c:	da18      	bge.n	8000990 <_ZN7BMS_MOD5parseEmPhm+0x13c>
						flag_error_volt[pos] = flag_error_volt[pos] + 1;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	324a      	adds	r2, #74	@ 0x4a
 8000964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000968:	1c59      	adds	r1, r3, #1
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	324a      	adds	r2, #74	@ 0x4a
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (flag_error_volt[pos] >= max_flag)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	324a      	adds	r2, #74	@ 0x4a
 800097a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8000984:	429a      	cmp	r2, r3
 8000986:	db09      	blt.n	800099c <_ZN7BMS_MOD5parseEmPhm+0x148>
							error = BMS_ERROR_VOLTS;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
						if (flag_error_volt[pos] >= max_flag)
 800098e:	e005      	b.n	800099c <_ZN7BMS_MOD5parseEmPhm+0x148>
					} else
						flag_error_volt[pos] = 0;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	324a      	adds	r2, #74	@ 0x4a
 8000996:	2100      	movs	r1, #0
 8000998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int i = 0; i < 14; i++) // i = number of cell within message
 800099c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099e:	3301      	adds	r3, #1
 80009a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009a4:	2b0d      	cmp	r3, #13
 80009a6:	dda6      	ble.n	80008f6 <_ZN7BMS_MOD5parseEmPhm+0xa2>
				}
				MAX_V = cellVoltagemV[0];
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
				MIN_V = cellVoltagemV[0];
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009c0:	e027      	b.n	8000a12 <_ZN7BMS_MOD5parseEmPhm+0x1be>
						{
					if (cellVoltagemV[i] > MAX_V)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009c6:	3202      	adds	r2, #2
 80009c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dd08      	ble.n	80009e8 <_ZN7BMS_MOD5parseEmPhm+0x194>
						MAX_V = cellVoltagemV[i];
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009da:	3202      	adds	r2, #2
 80009dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 80009e6:	e011      	b.n	8000a0c <_ZN7BMS_MOD5parseEmPhm+0x1b8>
					else if (cellVoltagemV[i] < MIN_V)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ec:	3202      	adds	r2, #2
 80009ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80009f8:	429a      	cmp	r2, r3
 80009fa:	da07      	bge.n	8000a0c <_ZN7BMS_MOD5parseEmPhm+0x1b8>
						MIN_V = cellVoltagemV[i];
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a00:	3202      	adds	r2, #2
 8000a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
				for (int i = 0; i < NUM_CELLS; i++) // i = number of cell within message
 8000a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a0e:	3301      	adds	r3, #1
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dbd0      	blt.n	80009c2 <_ZN7BMS_MOD5parseEmPhm+0x16e>
 8000a20:	e0a0      	b.n	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
				}
				//message_balancing[1] = BALANCING_V & 0xFF;           // Coment this two lines for disabling the balancing
				//message_balancing[0] = (BALANCING_V >> 8) & 0xFF;    // Coment this two lines for disabling the balancing

			} else if (m > 20 && m < 27) { //New BMS send temeratures at 21, 22, 23, 24, 25, 26
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	2b14      	cmp	r3, #20
 8000a26:	f340 809d 	ble.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	2b1a      	cmp	r3, #26
 8000a2e:	f300 8099 	bgt.w	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>

				if (flag_charger == 1) {
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					module_send_message_CAN1(id, buf, 8); //Reenviar temperaturas por CAN1 tanto en cargador como en coche
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f000 fed3 	bl	80017ec <module_send_message_CAN1>
				}

				if (m < 26) {
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	2b19      	cmp	r3, #25
 8000a4a:	dc28      	bgt.n	8000a9e <_ZN7BMS_MOD5parseEmPhm+0x24a>
					for (int i = 0; i < 8; i++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a50:	e021      	b.n	8000a96 <_ZN7BMS_MOD5parseEmPhm+0x242>
						pos = (m - 1) * 8 + i;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a5a:	4413      	add	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
						cellTemperature[pos] = buf[i];
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4619      	mov	r1, r3
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3314      	adds	r3, #20
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	6059      	str	r1, [r3, #4]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	3314      	adds	r3, #20
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dd02      	ble.n	8000a90 <_ZN7BMS_MOD5parseEmPhm+0x23c>
							error = BMS_ERROR_TEMP;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 8; i++) {
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	3301      	adds	r3, #1
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	2b07      	cmp	r3, #7
 8000a9a:	ddda      	ble.n	8000a52 <_ZN7BMS_MOD5parseEmPhm+0x1fe>
 8000a9c:	e01f      	b.n	8000ade <_ZN7BMS_MOD5parseEmPhm+0x28a>

					}
				} else if (m == 26) {
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b1a      	cmp	r3, #26
 8000aa2:	d11c      	bne.n	8000ade <_ZN7BMS_MOD5parseEmPhm+0x28a>

					for (int i = 0; i < 3; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	e016      	b.n	8000ad8 <_ZN7BMS_MOD5parseEmPhm+0x284>
						pos = (m - 1) * 8 + i;
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	6a3a      	ldr	r2, [r7, #32]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
						if (cellTemperature[pos] > LIMIT_MAX_T)
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	3314      	adds	r3, #20
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dd02      	ble.n	8000ad2 <_ZN7BMS_MOD5parseEmPhm+0x27e>
							error = BMS_ERROR_TEMP;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < 3; i++) {
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	dde5      	ble.n	8000aaa <_ZN7BMS_MOD5parseEmPhm+0x256>

					}

				}

				MAX_T = cellTemperature[0];
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
				MIN_T = cellTemperature[0];
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
				for (int i = 0; i < 38; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	bf00      	nop
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b25      	cmp	r3, #37	@ 0x25
 8000afc:	dc32      	bgt.n	8000b64 <_ZN7BMS_MOD5parseEmPhm+0x310>
					if (cellTemperature[i] > MAX_T)
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3314      	adds	r3, #20
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dd09      	ble.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0x2d4>
						MAX_T = cellTemperature[i];
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3314      	adds	r3, #20
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8000b26:	e01b      	b.n	8000b60 <_ZN7BMS_MOD5parseEmPhm+0x30c>
					else if (cellTemperature[i] < MIN_T
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	da10      	bge.n	8000b60 <_ZN7BMS_MOD5parseEmPhm+0x30c>
							&& cellTemperature[i] != 0) {
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3314      	adds	r3, #20
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d008      	beq.n	8000b60 <_ZN7BMS_MOD5parseEmPhm+0x30c>
						MIN_T = cellTemperature[i];
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3314      	adds	r3, #20
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

					}
					return true;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <_ZN7BMS_MOD5parseEmPhm+0x312>
				}
			}
		}
	}
	return false;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3730      	adds	r7, #48	@ 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2202      	movs	r2, #2
 8000b94:	731a      	strb	r2, [r3, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2264      	movs	r2, #100	@ 0x64
 8000ba8:	619a      	str	r2, [r3, #24]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000bae:	61da      	str	r2, [r3, #28]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	621a      	str	r2, [r3, #32]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	69da      	ldr	r2, [r3, #28]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	441a      	add	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	441a      	add	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	000f4240 	.word	0x000f4240

08000c14 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c28:	d131      	bne.n	8000c8e <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	441a      	add	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000c56:	dd18      	ble.n	8000c8a <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f000 fdbf 	bl	80017ec <module_send_message_CAN1>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2201      	movs	r2, #1
 8000c82:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000c86:	f000 fdd3 	bl	8001830 <print>
            }

        }
        return true;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0800b420 	.word	0x0800b420

08000c9c <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d906      	bls.n	8000cc0 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	441a      	add	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d902      	bls.n	8000cd0 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00b      	beq.n	8000cf0 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d906      	bls.n	8000cf0 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a1a      	ldr	r2, [r3, #32]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	441a      	add	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	689b      	ldr	r3, [r3, #8]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	611a      	str	r2, [r3, #16]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	721a      	strb	r2, [r3, #8]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	725a      	strb	r2, [r3, #9]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f04f 0200 	mov.w	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	22fa      	movs	r2, #250	@ 0xfa
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2232      	movs	r2, #50	@ 0x32
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2232      	movs	r2, #50	@ 0x32
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2201      	movs	r2, #1
 8000dae:	621a      	str	r2, [r3, #32]
}
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    VoltagemV = readAnalogValue();
 8000dd2:	f000 fd4b 	bl	800186c <readAnalogValue>
 8000dd6:	eef0 7a40 	vmov.f32	s15, s0
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	edc3 7a04 	vstr	s15, [r3, #16]

    //printValue(VoltagemV);

    if(VoltagemV < 400){
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000de6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e28 <_ZN11Current_MOD5queryEiPc+0x68>
 8000dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df2:	d509      	bpl.n	8000e08 <_ZN11Current_MOD5queryEiPc+0x48>
    	flag_error_current = 1;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	621a      	str	r2, [r3, #32]
    	flag_current = 1;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = 1;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2201      	movs	r2, #1
 8000e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e06:	e008      	b.n	8000e1a <_ZN11Current_MOD5queryEiPc+0x5a>
    }
    else{
    	flag_error_current = 0;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
    	flag_current = 0;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
    	error = Current_OK;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	635a      	str	r2, [r3, #52]	@ 0x34
        time_lim_plotted += TIME_LIM_PLOT;

    }
*/
    //info(buffer);
    return error;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	43c80000 	.word	0x43c80000

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f001 fae9 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f89d 	bl	8000f74 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e3a:	f000 f917 	bl	800106c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 fbc1 	bl	80015c4 <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 8000e42:	f000 fad5 	bl	80013f0 <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8000e46:	f000 fa49 	bl	80012dc <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8000e4a:	f000 fb5b 	bl	8001504 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8000e4e:	f000 f941 	bl	80010d4 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8000e52:	f000 f9c9 	bl	80011e8 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */

  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8000e56:	483d      	ldr	r0, [pc, #244]	@ (8000f4c <main+0x120>)
 8000e58:	f003 fe8c 	bl	8004b74 <HAL_FDCAN_Start>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf0c      	ite	eq
 8000e62:	2301      	moveq	r3, #1
 8000e64:	2300      	movne	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <main+0x46>
	  print((char*)"CAN_ACU iniciado");
 8000e6c:	4838      	ldr	r0, [pc, #224]	@ (8000f50 <main+0x124>)
 8000e6e:	f000 fcdf 	bl	8001830 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 8000e72:	2200      	movs	r2, #0
 8000e74:	2101      	movs	r1, #1
 8000e76:	4835      	ldr	r0, [pc, #212]	@ (8000f4c <main+0x120>)
 8000e78:	f004 f86e 	bl	8004f58 <HAL_FDCAN_ActivateNotification>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <main+0x66>
  {
	  print((char*)"CAN_ACU notification");
 8000e8c:	4831      	ldr	r0, [pc, #196]	@ (8000f54 <main+0x128>)
 8000e8e:	f000 fccf 	bl	8001830 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 8000e92:	4831      	ldr	r0, [pc, #196]	@ (8000f58 <main+0x12c>)
 8000e94:	f003 fe6e 	bl	8004b74 <HAL_FDCAN_Start>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <main+0x82>
	  print((char*)"CAN_BMS iniciado");
 8000ea8:	482c      	ldr	r0, [pc, #176]	@ (8000f5c <main+0x130>)
 8000eaa:	f000 fcc1 	bl	8001830 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8000eae:	482c      	ldr	r0, [pc, #176]	@ (8000f60 <main+0x134>)
 8000eb0:	f002 f830 	bl	8002f14 <HAL_ADC_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf0c      	ite	eq
 8000eba:	2301      	moveq	r3, #1
 8000ebc:	2300      	movne	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <main+0x9e>
	  print((char*)"ADC iniciado");
 8000ec4:	4827      	ldr	r0, [pc, #156]	@ (8000f64 <main+0x138>)
 8000ec6:	f000 fcb3 	bl	8001830 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 8000eca:	f000 fcf9 	bl	80018c0 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <main+0x13c>)
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <main+0x140>)
 8000ed2:	2140      	movs	r1, #64	@ 0x40
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <main+0x12c>)
 8000ed6:	f003 fed3 	bl	8004c80 <HAL_FDCAN_GetRxMessage>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0ef      	beq.n	8000eca <main+0x9e>

		  msg_bms.id = RxHeader_bms.Identifier;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <main+0x140>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <main+0x144>)
 8000ef0:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <main+0x140>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <main+0x144>)
 8000efa:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	e00c      	b.n	8000f1c <main+0xf0>
 8000f02:	4a19      	ldr	r2, [pc, #100]	@ (8000f68 <main+0x13c>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4a19      	ldr	r2, [pc, #100]	@ (8000f70 <main+0x144>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3305      	adds	r3, #5
 8000f12:	460a      	mov	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	ddef      	ble.n	8000f02 <main+0xd6>
		  msg_bms.bus = 2;
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <main+0x144>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8000f28:	f001 faf4 	bl	8002514 <HAL_GetTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <main+0x144>)
 8000f30:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <main+0x144>)
 8000f34:	466c      	mov	r4, sp
 8000f36:	f103 0210 	add.w	r2, r3, #16
 8000f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f44:	f000 fe7e 	bl	8001c44 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000f48:	e7bf      	b.n	8000eca <main+0x9e>
 8000f4a:	bf00      	nop
 8000f4c:	24000164 	.word	0x24000164
 8000f50:	0800b430 	.word	0x0800b430
 8000f54:	0800b444 	.word	0x0800b444
 8000f58:	24000204 	.word	0x24000204
 8000f5c:	0800b45c 	.word	0x0800b45c
 8000f60:	240000f4 	.word	0x240000f4
 8000f64:	0800b470 	.word	0x0800b470
 8000f68:	240003ac 	.word	0x240003ac
 8000f6c:	24000384 	.word	0x24000384
 8000f70:	24000418 	.word	0x24000418

08000f74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09c      	sub	sp, #112	@ 0x70
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	224c      	movs	r2, #76	@ 0x4c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 fd4c 	bl	800aa20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 fd46 	bl	800aa20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f004 ff2f 	bl	8005df8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <_Z18SystemClock_Configv+0xf4>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a31      	ldr	r2, [pc, #196]	@ (8001068 <_Z18SystemClock_Configv+0xf4>)
 8000fa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <_Z18SystemClock_Configv+0xf4>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb6:	bf00      	nop
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <_Z18SystemClock_Configv+0xf4>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f3      	bne.n	8000fb8 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000fe6:	232c      	movs	r3, #44	@ 0x2c
 8000fe8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001006:	4618      	mov	r0, r3
 8001008:	f004 ff30 	bl	8005e6c <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800101c:	f000 fc48 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001020:	233f      	movs	r3, #63	@ 0x3f
 8001022:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001024:	2303      	movs	r3, #3
 8001026:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800102c:	2308      	movs	r3, #8
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001030:	2340      	movs	r3, #64	@ 0x40
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001034:	2340      	movs	r3, #64	@ 0x40
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800103e:	2340      	movs	r3, #64	@ 0x40
 8001040:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2103      	movs	r1, #3
 8001046:	4618      	mov	r0, r3
 8001048:	f005 faea 	bl	8006620 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800105c:	f000 fc28 	bl	80018b0 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3770      	adds	r7, #112	@ 0x70
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024800 	.word	0x58024800

0800106c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ae      	sub	sp, #184	@ 0xb8
 8001070:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	22b8      	movs	r2, #184	@ 0xb8
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f009 fcd1 	bl	800aa20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800108e:	2310      	movs	r3, #16
 8001090:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 fe40 	bl	8006d38 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80010c8:	f000 fbf2 	bl	80018b0 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	37b8      	adds	r7, #184	@ 0xb8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	@ 0x30
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2224      	movs	r2, #36	@ 0x24
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fc97 	bl	800aa20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 80010f4:	4a3a      	ldr	r2, [pc, #232]	@ (80011e0 <_ZL12MX_ADC1_Initv+0x10c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f8:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fe:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001100:	2208      	movs	r2, #8
 8001102:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001104:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800110c:	2204      	movs	r2, #4
 800110e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001110:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001112:	2200      	movs	r2, #0
 8001114:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001118:	2200      	movs	r2, #0
 800111a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800111c:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800111e:	2201      	movs	r2, #1
 8001120:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001132:	2200      	movs	r2, #0
 8001134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800113e:	2200      	movs	r2, #0
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001144:	2200      	movs	r2, #0
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001152:	2201      	movs	r2, #1
 8001154:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001156:	4821      	ldr	r0, [pc, #132]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 8001158:	f001 fcd4 	bl	8002b04 <HAL_ADC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800116c:	f000 fba0 	bl	80018b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 800117c:	f003 f8b4 	bl	80042e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001190:	f000 fb8e 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_ZL12MX_ADC1_Initv+0x110>)
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001198:	2306      	movs	r3, #6
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <_ZL12MX_ADC1_Initv+0x108>)
 80011ba:	f002 f8ab 	bl	8003314 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf14      	ite	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	2300      	moveq	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80011ce:	f000 fb6f 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000084 	.word	0x24000084
 80011e0:	40022000 	.word	0x40022000
 80011e4:	08600004 	.word	0x08600004

080011e8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2224      	movs	r2, #36	@ 0x24
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 fc13 	bl	800aa20 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011fa:	4b35      	ldr	r3, [pc, #212]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 80011fc:	4a35      	ldr	r2, [pc, #212]	@ (80012d4 <_ZL12MX_ADC3_Initv+0xec>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001200:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001206:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001208:	220c      	movs	r2, #12
 800120a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800120c:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800121a:	2204      	movs	r2, #4
 800121c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800121e:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001224:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800122c:	2201      	movs	r2, #1
 800122e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 8001274:	f001 fc46 	bl	8002b04 <HAL_ADC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001288:	f000 fb12 	bl	80018b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <_ZL12MX_ADC3_Initv+0xf0>)
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001290:	2306      	movs	r3, #6
 8001292:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001298:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800129c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129e:	2304      	movs	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4808      	ldr	r0, [pc, #32]	@ (80012d0 <_ZL12MX_ADC3_Initv+0xe8>)
 80012b0:	f002 f830 	bl	8003314 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80012c4:	f000 faf4 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	240000f4 	.word	0x240000f4
 80012d4:	58026000 	.word	0x58026000
 80012d8:	1d500080 	.word	0x1d500080

080012dc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80012e2:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80012e4:	4a41      	ldr	r2, [pc, #260]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x110>)
 80012e6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80012e8:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80012ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012f0:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80012fc:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001302:	4b39      	ldr	r3, [pc, #228]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001304:	2200      	movs	r2, #0
 8001306:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001308:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800130a:	2206      	movs	r2, #6
 800130c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800130e:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001310:	2201      	movs	r2, #1
 8001312:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8001314:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001316:	220a      	movs	r2, #10
 8001318:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 800131a:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800131c:	2205      	movs	r2, #5
 800131e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001322:	2201      	movs	r2, #1
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001328:	2201      	movs	r2, #1
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800132e:	2201      	movs	r2, #1
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001332:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001334:	2201      	movs	r2, #1
 8001336:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001338:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001340:	2200      	movs	r2, #0
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001346:	2205      	movs	r2, #5
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800134a:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800134c:	2220      	movs	r2, #32
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001352:	2204      	movs	r2, #4
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001358:	2220      	movs	r2, #32
 800135a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800135e:	2204      	movs	r2, #4
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001364:	2201      	movs	r2, #1
 8001366:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800136a:	2204      	movs	r2, #4
 800136c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800136e:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001370:	2201      	movs	r2, #1
 8001372:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001374:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001376:	2220      	movs	r2, #32
 8001378:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800137c:	2220      	movs	r2, #32
 800137e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001382:	2200      	movs	r2, #0
 8001384:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001388:	2204      	movs	r2, #4
 800138a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800138c:	4816      	ldr	r0, [pc, #88]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800138e:	f003 f99d 	bl	80046cc <HAL_FDCAN_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf14      	ite	ne
 8001398:	2301      	movne	r3, #1
 800139a:	2300      	moveq	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 80013a2:	f000 fa85 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80013a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013aa:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80013b0:	2302      	movs	r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4808      	ldr	r0, [pc, #32]	@ (80013e8 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80013c6:	f003 fb5f 	bl	8004a88 <HAL_FDCAN_ConfigFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2301      	movne	r3, #1
 80013d2:	2300      	moveq	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80013da:	f000 fa69 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24000164 	.word	0x24000164
 80013ec:	4000a000 	.word	0x4000a000

080013f0 <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80013f8:	4a41      	ldr	r2, [pc, #260]	@ (8001500 <_ZL14MX_FDCAN2_Initv+0x110>)
 80013fa:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80013fc:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80013fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001402:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001404:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800140c:	2200      	movs	r2, #0
 800140e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001412:	2200      	movs	r2, #0
 8001414:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001416:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001418:	2200      	movs	r2, #0
 800141a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 800141c:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800141e:	2206      	movs	r2, #6
 8001420:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001422:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001424:	2201      	movs	r2, #1
 8001426:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800142a:	2202      	movs	r2, #2
 800142c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800142e:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001430:	2205      	movs	r2, #5
 8001432:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001436:	2201      	movs	r2, #1
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800143a:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800143c:	2201      	movs	r2, #1
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001442:	2201      	movs	r2, #1
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001448:	2201      	movs	r2, #1
 800144a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800145a:	2205      	movs	r2, #5
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001460:	2220      	movs	r2, #32
 8001462:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001464:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001466:	2204      	movs	r2, #4
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800146c:	2220      	movs	r2, #32
 800146e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001472:	2204      	movs	r2, #4
 8001474:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001478:	2201      	movs	r2, #1
 800147a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800147e:	2204      	movs	r2, #4
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001484:	2201      	movs	r2, #1
 8001486:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800148a:	2220      	movs	r2, #32
 800148c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001490:	2220      	movs	r2, #32
 8001492:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001496:	2200      	movs	r2, #0
 8001498:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 800149c:	2204      	movs	r2, #4
 800149e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80014a0:	4816      	ldr	r0, [pc, #88]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014a2:	f003 f913 	bl	80046cc <HAL_FDCAN_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 80014b6:	f000 f9fb 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80014ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014be:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80014c8:	2301      	movs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80014cc:	2310      	movs	r3, #16
 80014ce:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80014d0:	2310      	movs	r3, #16
 80014d2:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <_ZL14MX_FDCAN2_Initv+0x10c>)
 80014da:	f003 fad5 	bl	8004a88 <HAL_FDCAN_ConfigFilter>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80014ee:	f000 f9df 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	24000204 	.word	0x24000204
 8001500:	4000a400 	.word	0x4000a400

08001504 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800150a:	4a2d      	ldr	r2, [pc, #180]	@ (80015c0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 800150c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154c:	481b      	ldr	r0, [pc, #108]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800154e:	f007 ffd9 	bl	8009504 <HAL_UART_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf14      	ite	ne
 8001558:	2301      	movne	r3, #1
 800155a:	2300      	moveq	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001562:	f000 f9a5 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 800156a:	f009 f96e 	bl	800a84a <HAL_UARTEx_SetTxFifoThreshold>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800157e:	f000 f997 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001586:	f009 f99e 	bl	800a8c6 <HAL_UARTEx_SetRxFifoThreshold>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800159a:	f000 f989 	bl	80018b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015a0:	f009 f91a 	bl	800a7d8 <HAL_UARTEx_DisableFifoMode>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80015b4:	f000 f97c 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	240002a4 	.word	0x240002a4
 80015c0:	40004400 	.word	0x40004400

080015c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015da:	4b50      	ldr	r3, [pc, #320]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e0:	4a4e      	ldr	r2, [pc, #312]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ea:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f8:	4b48      	ldr	r3, [pc, #288]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fe:	4a47      	ldr	r2, [pc, #284]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001608:	4b44      	ldr	r3, [pc, #272]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161c:	4a3f      	ldr	r2, [pc, #252]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001626:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a38      	ldr	r2, [pc, #224]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b35      	ldr	r3, [pc, #212]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a30      	ldr	r2, [pc, #192]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001670:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	4a29      	ldr	r2, [pc, #164]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	4a21      	ldr	r2, [pc, #132]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <_ZL12MX_GPIO_Initv+0x158>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	481b      	ldr	r0, [pc, #108]	@ (8001720 <_ZL12MX_GPIO_Initv+0x15c>)
 80016b2:	f004 fb87 	bl	8005dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2138      	movs	r1, #56	@ 0x38
 80016ba:	481a      	ldr	r0, [pc, #104]	@ (8001724 <_ZL12MX_GPIO_Initv+0x160>)
 80016bc:	f004 fb82 	bl	8005dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 80016c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	@ (8001728 <_ZL12MX_GPIO_Initv+0x164>)
 80016d6:	f004 f9b5 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <_ZL12MX_GPIO_Initv+0x15c>)
 80016f2:	f004 f9a7 	bl	8005a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 80016f6:	2338      	movs	r3, #56	@ 0x38
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <_ZL12MX_GPIO_Initv+0x160>)
 800170e:	f004 f999 	bl	8005a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024400 	.word	0x58024400
 8001720:	58021800 	.word	0x58021800
 8001724:	58020c00 	.word	0x58020c00
 8001728:	58021000 	.word	0x58021000

0800172c <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d04b      	beq.n	80017d8 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001742:	4a28      	ldr	r2, [pc, #160]	@ (80017e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f003 fa9a 	bl	8004c80 <HAL_FDCAN_GetRxMessage>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d02e      	beq.n	80017ba <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001762:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800176c:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e00c      	b.n	800178e <HAL_FDCAN_RxFifo0Callback+0x62>
 8001774:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	4a1a      	ldr	r2, [pc, #104]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	3305      	adds	r3, #5
 8001784:	460a      	mov	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b07      	cmp	r3, #7
 8001792:	ddef      	ble.n	8001774 <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001796:	2201      	movs	r2, #1
 8001798:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 800179a:	f000 febb 	bl	8002514 <HAL_GetTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80017a2:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80017a6:	466c      	mov	r4, sp
 80017a8:	f103 0210 	add.w	r2, r3, #16
 80017ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80017b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b6:	f000 fa45 	bl	8001c44 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80017ba:	2200      	movs	r2, #0
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f003 fbca 	bl	8004f58 <HAL_FDCAN_ActivateNotification>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 80017d4:	f000 f86c 	bl	80018b0 <Error_Handler>
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	240003ac 	.word	0x240003ac
 80017e4:	2400035c 	.word	0x2400035c
 80017e8:	24000430 	.word	0x24000430

080017ec <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 80017fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <module_send_message_CAN1+0x3c>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <module_send_message_CAN1+0x3c>)
 8001802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001806:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <module_send_message_CAN1+0x3c>)
 800180c:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4905      	ldr	r1, [pc, #20]	@ (8001828 <module_send_message_CAN1+0x3c>)
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <module_send_message_CAN1+0x40>)
 8001814:	f003 f9d9 	bl	8004bca <HAL_FDCAN_AddMessageToTxFifoQ>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]

	return status;
 800181c:	7dfb      	ldrb	r3, [r7, #23]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000338 	.word	0x24000338
 800182c:	24000164 	.word	0x24000164

08001830 <print>:
	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);

	return status;
}

void print(char uart_buffer[]){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4909      	ldr	r1, [pc, #36]	@ (8001860 <print+0x30>)
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <print+0x34>)
 800183e:	f009 f8cf 	bl	800a9e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <print+0x34>)
 8001844:	f7fe fd64 	bl	8000310 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	4904      	ldr	r1, [pc, #16]	@ (8001864 <print+0x34>)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <print+0x38>)
 8001854:	f007 fea6 	bl	80095a4 <HAL_UART_Transmit>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0800b480 	.word	0x0800b480
 8001864:	240003b4 	.word	0x240003b4
 8001868:	240002a4 	.word	0x240002a4

0800186c <readAnalogValue>:

HAL_UART_StateTypeDef getUARTState(){
	return HAL_UART_GetState(&huart2);
}

float readAnalogValue(void){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	float analogValue;

	HAL_ADC_Start(&hadc3);
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <readAnalogValue+0x40>)
 8001874:	f001 fb4e 	bl	8002f14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	480b      	ldr	r0, [pc, #44]	@ (80018ac <readAnalogValue+0x40>)
 800187e:	f001 fc47 	bl	8003110 <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc3);
 8001882:	480a      	ldr	r0, [pc, #40]	@ (80018ac <readAnalogValue+0x40>)
 8001884:	f001 fd38 	bl	80032f8 <HAL_ADC_GetValue>
 8001888:	ee07 0a90 	vmov	s15, r0
 800188c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001890:	edc7 7a01 	vstr	s15, [r7, #4]
	HAL_ADC_Stop(&hadc3);
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <readAnalogValue+0x40>)
 8001896:	f001 fc07 	bl	80030a8 <HAL_ADC_Stop>
	return analogValue;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	ee07 3a90 	vmov	s15, r3
}
 80018a0:	eeb0 0a67 	vmov.f32	s0, s15
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	240000f4 	.word	0x240000f4

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>
 80018bc:	0000      	movs	r0, r0
	...

080018c0 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
	int state_precharge = 0; // 0 means open, 1 closed
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 80018d2:	2301      	movs	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
	int flag_current = Current_ERROR_Comunication;
 80018d6:	2302      	movs	r3, #2
 80018d8:	60fb      	str	r3, [r7, #12]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 80018da:	f000 fe1b 	bl	8002514 <HAL_GetTick>
 80018de:	60b8      	str	r0, [r7, #8]
	int time_s = HAL_GetTick();
 80018e0:	f000 fe18 	bl	8002514 <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	607b      	str	r3, [r7, #4]

	CPU.voltage_acum = 0; // For precharge
 80018e8:	4ba9      	ldr	r3, [pc, #676]	@ (8001b90 <_Z12select_statev+0x2d0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 80018ee:	4ba9      	ldr	r3, [pc, #676]	@ (8001b94 <_Z12select_statev+0x2d4>)
 80018f0:	f241 0268 	movw	r2, #4200	@ 0x1068
 80018f4:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 80018f6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b98 <_Z12select_statev+0x2d8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	e050      	b.n	80019a4 <_Z12select_statev+0xe4>
		BMS[i].voltage_acum = 0;                  // For precharge
 8001902:	4aa6      	ldr	r2, [pc, #664]	@ (8001b9c <_Z12select_statev+0x2dc>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
		//if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
		//{
		//	state = error;
		//}
		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001918:	4b9d      	ldr	r3, [pc, #628]	@ (8001b90 <_Z12select_statev+0x2d0>)
 800191a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800191c:	499f      	ldr	r1, [pc, #636]	@ (8001b9c <_Z12select_statev+0x2dc>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	f44f 70ba 	mov.w	r0, #372	@ 0x174
 8001924:	fb00 f303 	mul.w	r3, r0, r3
 8001928:	440b      	add	r3, r1
 800192a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4413      	add	r3, r2
 8001932:	4a97      	ldr	r2, [pc, #604]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001936:	4a99      	ldr	r2, [pc, #612]	@ (8001b9c <_Z12select_statev+0x2dc>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b92      	ldr	r3, [pc, #584]	@ (8001b94 <_Z12select_statev+0x2d4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	da0b      	bge.n	800196a <_Z12select_statev+0xaa>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001952:	4a92      	ldr	r2, [pc, #584]	@ (8001b9c <_Z12select_statev+0x2dc>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a8b      	ldr	r2, [pc, #556]	@ (8001b94 <_Z12select_statev+0x2d4>)
 8001968:	6013      	str	r3, [r2, #0]
		//if (BMS[i].query_temperature(time, buffer) != Temperatures_OK)
		//{
		//	state = error;
		//}

		if (BMS[i].MAX_T > MAX_T)
 800196a:	4a8c      	ldr	r2, [pc, #560]	@ (8001b9c <_Z12select_statev+0x2dc>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b86      	ldr	r3, [pc, #536]	@ (8001b98 <_Z12select_statev+0x2d8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	dd0b      	ble.n	800199e <_Z12select_statev+0xde>
			MAX_T = BMS[i].MAX_T;
 8001986:	4a85      	ldr	r2, [pc, #532]	@ (8001b9c <_Z12select_statev+0x2dc>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b98 <_Z12select_statev+0x2d8>)
 800199c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <_Z12select_statev+0x2e0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dba9      	blt.n	8001902 <_Z12select_statev+0x42>
	}

	if (time_s > time_sending_minV + 500) {
 80019ae:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba4 <_Z12select_statev+0x2e4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dd23      	ble.n	8001a04 <_Z12select_statev+0x144>
		message_MINV[1] = MIN_V & 0xFF;
 80019bc:	4b75      	ldr	r3, [pc, #468]	@ (8001b94 <_Z12select_statev+0x2d4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b79      	ldr	r3, [pc, #484]	@ (8001ba8 <_Z12select_statev+0x2e8>)
 80019c4:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <_Z12select_statev+0x2d4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	121b      	asrs	r3, r3, #8
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <_Z12select_statev+0x2e8>)
 80019d0:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 80019d2:	4b72      	ldr	r3, [pc, #456]	@ (8001b9c <_Z12select_statev+0x2dc>)
 80019d4:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d010      	beq.n	80019fe <_Z12select_statev+0x13e>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 80019dc:	2202      	movs	r2, #2
 80019de:	4972      	ldr	r1, [pc, #456]	@ (8001ba8 <_Z12select_statev+0x2e8>)
 80019e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019e4:	f7ff ff02 	bl	80017ec <module_send_message_CAN1>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <_Z12select_statev+0x13e>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 80019f8:	486c      	ldr	r0, [pc, #432]	@ (8001bac <_Z12select_statev+0x2ec>)
 80019fa:	f7ff ff19 	bl	8001830 <print>
		}
		time_sending_minV = time_s;
 80019fe:	4a69      	ldr	r2, [pc, #420]	@ (8001ba4 <_Z12select_statev+0x2e4>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <_Z12select_statev+0x168>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 8001a0a:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <_Z12select_statev+0x2d4>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4963      	ldr	r1, [pc, #396]	@ (8001b9c <_Z12select_statev+0x2dc>)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f44f 70ba 	mov.w	r0, #372	@ 0x174
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001a20:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba0 <_Z12select_statev+0x2e0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbeb      	blt.n	8001a0a <_Z12select_statev+0x14a>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 8001a32:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb0 <_Z12select_statev+0x2f0>)
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	4856      	ldr	r0, [pc, #344]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001a38:	f7ff f930 	bl	8000c9c <_ZN7CPU_MOD5queryEmPc>
 8001a3c:	6138      	str	r0, [r7, #16]

	flag_current = current.query(time, buffer); //asking current how is it
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb0 <_Z12select_statev+0x2f0>)
 8001a42:	4619      	mov	r1, r3
 8001a44:	485b      	ldr	r0, [pc, #364]	@ (8001bb4 <_Z12select_statev+0x2f4>)
 8001a46:	f7ff f9bb 	bl	8000dc0 <_ZN11Current_MOD5queryEiPc>
 8001a4a:	60f8      	str	r0, [r7, #12]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);*/
	//printValue(state);
	switch (state) {
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	f200 80c2 	bhi.w	8001bda <_Z12select_statev+0x31a>
 8001a56:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <_Z12select_statev+0x19c>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a71 	.word	0x08001a71
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001ac7 	.word	0x08001ac7
 8001a68:	08001b1b 	.word	0x08001b1b
 8001a6c:	08001b71 	.word	0x08001b71
	case start:
		state_air_n = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_DISCONNECTED);
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	4844      	ldr	r0, [pc, #272]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001a80:	f7ff f93e 	bl	8000d00 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu != CPU_ERROR_COMMUNICATION)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	f000 80a2 	beq.w	8001bd0 <_Z12select_statev+0x310>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
		break;
 8001a92:	e09d      	b.n	8001bd0 <_Z12select_statev+0x310>
	case precharge:
		state_air_n = 1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	483b      	ldr	r0, [pc, #236]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001aa4:	f7ff f92c 	bl	8000d00 <_ZN7CPU_MOD11updateStateEi>
		if (flag_cpu == CPU_OK) {
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <_Z12select_statev+0x1f6>
			state = transition;
 8001aae:	4b42      	ldr	r3, [pc, #264]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8001ab4:	e08e      	b.n	8001bd4 <_Z12select_statev+0x314>
		} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 808b 	bne.w	8001bd4 <_Z12select_statev+0x314>
			state = error;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	701a      	strb	r2, [r3, #0]
		break;
 8001ac4:	e086      	b.n	8001bd4 <_Z12select_statev+0x314>
	case transition:
		state_air_n = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_PRECHARGE);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	482e      	ldr	r0, [pc, #184]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001ad6:	f7ff f913 	bl	8000d00 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS)){//&&(CPU.voltage_acum != 0)){
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ade:	4a37      	ldr	r2, [pc, #220]	@ (8001bbc <_Z12select_statev+0x2fc>)
 8001ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae4:	1192      	asrs	r2, r2, #6
 8001ae6:	17db      	asrs	r3, r3, #31
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af2:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8001b88 <_Z12select_statev+0x2c8>
 8001af6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d400      	bmi.n	8001b12 <_Z12select_statev+0x252>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		// else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		// else if(flag_current != Current_OK) state = error;
		}
		break;
 8001b10:	e063      	b.n	8001bda <_Z12select_statev+0x31a>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 8001b12:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001b14:	2203      	movs	r2, #3
 8001b16:	701a      	strb	r2, [r3, #0]
		break;
 8001b18:	e05f      	b.n	8001bda <_Z12select_statev+0x31a>
	case run:
		state_air_n = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
		state_precharge = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_POWER);
 8001b26:	2100      	movs	r1, #0
 8001b28:	4819      	ldr	r0, [pc, #100]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001b2a:	f7ff f8e9 	bl	8000d00 <_ZN7CPU_MOD11updateStateEi>
		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d109      	bne.n	8001b48 <_Z12select_statev+0x288>
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <_Z12select_statev+0x300>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <_Z12select_statev+0x288>
			state = error; //If I disconnect the charger, error
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001b3e:	2204      	movs	r2, #4
 8001b40:	701a      	strb	r2, [r3, #0]
			print((char*)"CPU");
 8001b42:	4820      	ldr	r0, [pc, #128]	@ (8001bc4 <_Z12select_statev+0x304>)
 8001b44:	f7ff fe74 	bl	8001830 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 8001b48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b4c:	481e      	ldr	r0, [pc, #120]	@ (8001bc8 <_Z12select_statev+0x308>)
 8001b4e:	f004 f921 	bl	8005d94 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d03a      	beq.n	8001bd8 <_Z12select_statev+0x318>
			state = error;
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <_Z12select_statev+0x2f8>)
 8001b64:	2204      	movs	r2, #4
 8001b66:	701a      	strb	r2, [r3, #0]
			print((char*)"DIGITAL");
 8001b68:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <_Z12select_statev+0x30c>)
 8001b6a:	f7ff fe61 	bl	8001830 <print>
		}
		break;
 8001b6e:	e033      	b.n	8001bd8 <_Z12select_statev+0x318>
	case error:
		state_air_n = 0; //All relés closed
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
		state_air_p = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
		state_precharge = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
		CPU.updateState(CPU_ERROR);
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <_Z12select_statev+0x2d0>)
 8001b80:	f7ff f8be 	bl	8000d00 <_ZN7CPU_MOD11updateStateEi>
		break;
 8001b84:	e029      	b.n	8001bda <_Z12select_statev+0x31a>
 8001b86:	bf00      	nop
 8001b88:	cccccccd 	.word	0xcccccccd
 8001b8c:	3feccccc 	.word	0x3feccccc
 8001b90:	24000b98 	.word	0x24000b98
 8001b94:	24000004 	.word	0x24000004
 8001b98:	24000b8c 	.word	0x24000b8c
 8001b9c:	24000448 	.word	0x24000448
 8001ba0:	24000000 	.word	0x24000000
 8001ba4:	24000b94 	.word	0x24000b94
 8001ba8:	24000b90 	.word	0x24000b90
 8001bac:	0800b494 	.word	0x0800b494
 8001bb0:	24000c18 	.word	0x24000c18
 8001bb4:	24000bd0 	.word	0x24000bd0
 8001bb8:	24000c14 	.word	0x24000c14
 8001bbc:	10624dd3 	.word	0x10624dd3
 8001bc0:	24000bcc 	.word	0x24000bcc
 8001bc4:	0800b4b4 	.word	0x0800b4b4
 8001bc8:	58021000 	.word	0x58021000
 8001bcc:	0800b4b8 	.word	0x0800b4b8
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e002      	b.n	8001bda <_Z12select_statev+0x31a>
		break;
 8001bd4:	bf00      	nop
 8001bd6:	e000      	b.n	8001bda <_Z12select_statev+0x31a>
		break;
 8001bd8:	bf00      	nop
	 print(buffer);
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <_Z12select_statev+0x324>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <_Z12select_statev+0x326>
 8001be4:	2300      	movs	r3, #0
 8001be6:	461a      	mov	r2, r3
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	4814      	ldr	r0, [pc, #80]	@ (8001c3c <_Z12select_statev+0x37c>)
 8001bec:	f004 f8ea 	bl	8005dc4 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <_Z12select_statev+0x33a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <_Z12select_statev+0x33c>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2108      	movs	r1, #8
 8001c00:	480f      	ldr	r0, [pc, #60]	@ (8001c40 <_Z12select_statev+0x380>)
 8001c02:	f004 f8df 	bl	8005dc4 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <_Z12select_statev+0x350>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <_Z12select_statev+0x352>
 8001c10:	2300      	movs	r3, #0
 8001c12:	461a      	mov	r2, r3
 8001c14:	2110      	movs	r1, #16
 8001c16:	480a      	ldr	r0, [pc, #40]	@ (8001c40 <_Z12select_statev+0x380>)
 8001c18:	f004 f8d4 	bl	8005dc4 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <_Z12select_statev+0x366>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <_Z12select_statev+0x368>
 8001c26:	2300      	movs	r3, #0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2120      	movs	r1, #32
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <_Z12select_statev+0x380>)
 8001c2e:	f004 f8c9 	bl	8005dc4 <HAL_GPIO_WritePin>
		printnl((char*)"Relee Prec:");
		printValue(state_precharge);
	}


}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	58021800 	.word	0x58021800
 8001c40:	58020c00 	.word	0x58020c00

08001c44 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8001c44:	b084      	sub	sp, #16
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	f107 0c18 	add.w	ip, r7, #24
 8001c50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8001c54:	f000 fc5e 	bl	8002514 <HAL_GetTick>
 8001c58:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	e017      	b.n	8001c94 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <_Z11parse_state6CANMsg+0xc4>)
 8001c70:	1898      	adds	r0, r3, r2
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f107 021d 	add.w	r2, r7, #29
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f7fe fdeb 	bl	8000854 <_ZN7BMS_MOD5parseEmPhm>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 8001c88:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <_Z11parse_state6CANMsg+0xc8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <_Z11parse_state6CANMsg+0xc8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbe2      	blt.n	8001c64 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d026      	beq.n	8001cf8 <_Z11parse_state6CANMsg+0xb4>
		if (CPU.parse(data.id, &data.buf[0], time))
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	f107 021d 	add.w	r2, r7, #29
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4817      	ldr	r0, [pc, #92]	@ (8001d10 <_Z11parse_state6CANMsg+0xcc>)
 8001cb4:	f7fe ffae 	bl	8000c14 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4a16      	ldr	r2, [pc, #88]	@ (8001d14 <_Z11parse_state6CANMsg+0xd0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d11b      	bne.n	8001cf8 <_Z11parse_state6CANMsg+0xb4>
				{
			for (int i = 0; i < BMS_N; i++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	e00d      	b.n	8001ce2 <_Z11parse_state6CANMsg+0x9e>
				BMS[i].flag_charger = 1;
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <_Z11parse_state6CANMsg+0xc4>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <_Z11parse_state6CANMsg+0xc8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbec      	blt.n	8001cc6 <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <_Z11parse_state6CANMsg+0xd4>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
			flag_charger = 1;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <_Z11parse_state6CANMsg+0xd8>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d02:	b004      	add	sp, #16
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	24000448 	.word	0x24000448
 8001d0c:	24000000 	.word	0x24000000
 8001d10:	24000b98 	.word	0x24000b98
 8001d14:	18ff50e7 	.word	0x18ff50e7
 8001d18:	24000bd0 	.word	0x24000bd0
 8001d1c:	24000bcc 	.word	0x24000bcc

08001d20 <_Z41__static_initialization_and_destruction_0ii>:
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d174      	bne.n	8001e1a <_Z41__static_initialization_and_destruction_0ii+0xfa>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d16f      	bne.n	8001e1a <_Z41__static_initialization_and_destruction_0ii+0xfa>
		};
 8001d3a:	4c3a      	ldr	r4, [pc, #232]	@ (8001e24 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9303      	str	r3, [sp, #12]
 8001d40:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2313      	movs	r3, #19
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	233c      	movs	r3, #60	@ 0x3c
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001d52:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001d56:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7fe fca8 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8001d60:	f504 74ba 	add.w	r4, r4, #372	@ 0x174
 8001d64:	2332      	movs	r3, #50	@ 0x32
 8001d66:	9303      	str	r3, [sp, #12]
 8001d68:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2313      	movs	r3, #19
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	233c      	movs	r3, #60	@ 0x3c
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001d7a:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001d7e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7fe fc94 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8001d88:	f504 74ba 	add.w	r4, r4, #372	@ 0x174
 8001d8c:	2364      	movs	r3, #100	@ 0x64
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2313      	movs	r3, #19
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	233c      	movs	r3, #60	@ 0x3c
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001da2:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001da6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7fe fc80 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8001db0:	f504 74ba 	add.w	r4, r4, #372	@ 0x174
 8001db4:	2396      	movs	r3, #150	@ 0x96
 8001db6:	9303      	str	r3, [sp, #12]
 8001db8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2313      	movs	r3, #19
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	233c      	movs	r3, #60	@ 0x3c
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001dca:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001dce:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f7fe fc6c 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
 8001dd8:	f504 70ba 	add.w	r0, r4, #372	@ 0x174
 8001ddc:	23c8      	movs	r3, #200	@ 0xc8
 8001dde:	9303      	str	r3, [sp, #12]
 8001de0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	2313      	movs	r3, #19
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	233c      	movs	r3, #60	@ 0x3c
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001df2:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001df6:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001dfa:	f7fe fc59 	bl	80006b0 <_ZN7BMS_MODC1Emiiihji>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 8001dfe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	2120      	movs	r1, #32
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001e0a:	f7fe feb1 	bl	8000b70 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 8001e0e:	22c8      	movs	r2, #200	@ 0xc8
 8001e10:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001e16:	f7fe ff85 	bl	8000d24 <_ZN11Current_MODC1Emi>
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000448 	.word	0x24000448
 8001e28:	24000b98 	.word	0x24000b98
 8001e2c:	24000bd0 	.word	0x24000bd0

08001e30 <_GLOBAL__sub_I_BMS>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ff71 	bl	8001d20 <_Z41__static_initialization_and_destruction_0ii>
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_MspInit+0x30>)
 8001e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e4c:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_MspInit+0x30>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_MspInit+0x30>)
 8001e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	58024400 	.word	0x58024400

08001e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12b      	bne.n	8001eee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001ebc:	f043 0320 	orr.w	r3, r3, #32
 8001ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec4:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	481e      	ldr	r0, [pc, #120]	@ (8001f60 <HAL_ADC_MspInit+0xec>)
 8001ee8:	f003 fdac 	bl	8005a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001eec:	e02f      	b.n	8001f4e <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_ADC_MspInit+0xf0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d12a      	bne.n	8001f4e <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efe:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001f00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <HAL_ADC_MspInit+0xec>)
 8001f4a:	f003 fd7b 	bl	8005a44 <HAL_GPIO_Init>
}
 8001f4e:	bf00      	nop
 8001f50:	3730      	adds	r7, #48	@ 0x30
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58021400 	.word	0x58021400
 8001f64:	58026000 	.word	0x58026000

08001f68 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	22b8      	movs	r2, #184	@ 0xb8
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f008 fd49 	bl	800aa20 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5a      	ldr	r2, [pc, #360]	@ (80020fc <HAL_FDCAN_MspInit+0x194>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d157      	bne.n	8002048 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f98:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fec2 	bl	8006d38 <HAL_RCCEx_PeriphCLKConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001fba:	f7ff fc79 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fbe:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 8001fc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10e      	bne.n	8001fee <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8001fd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fd6:	4a4b      	ldr	r2, [pc, #300]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001fe0:	4b48      	ldr	r3, [pc, #288]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8001fe2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b45      	ldr	r3, [pc, #276]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff4:	4a43      	ldr	r2, [pc, #268]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ffe:	4b41      	ldr	r3, [pc, #260]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800200c:	2303      	movs	r3, #3
 800200e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002024:	2309      	movs	r3, #9
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800202e:	4619      	mov	r1, r3
 8002030:	4835      	ldr	r0, [pc, #212]	@ (8002108 <HAL_FDCAN_MspInit+0x1a0>)
 8002032:	f003 fd07 	bl	8005a44 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2013      	movs	r0, #19
 800203c:	f002 fb11 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002040:	2013      	movs	r0, #19
 8002042:	f002 fb28 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002046:	e054      	b.n	80020f2 <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2f      	ldr	r2, [pc, #188]	@ (800210c <HAL_FDCAN_MspInit+0x1a4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d14f      	bne.n	80020f2 <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002052:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fe65 	bl	8006d38 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002074:	f7ff fc1c 	bl	80018b0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a20      	ldr	r2, [pc, #128]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 8002080:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <HAL_FDCAN_MspInit+0x198>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10e      	bne.n	80020a8 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 800208c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002090:	4a1c      	ldr	r2, [pc, #112]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800209a:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 800209c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	4a15      	ldr	r2, [pc, #84]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_FDCAN_MspInit+0x19c>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020c6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80020e0:	2309      	movs	r3, #9
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	@ (8002110 <HAL_FDCAN_MspInit+0x1a8>)
 80020ee:	f003 fca9 	bl	8005a44 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	37e8      	adds	r7, #232	@ 0xe8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	4000a000 	.word	0x4000a000
 8002100:	24000c68 	.word	0x24000c68
 8002104:	58024400 	.word	0x58024400
 8002108:	58020c00 	.word	0x58020c00
 800210c:	4000a400 	.word	0x4000a400
 8002110:	58020400 	.word	0x58020400

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0b8      	sub	sp, #224	@ 0xe0
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	22b8      	movs	r2, #184	@ 0xb8
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f008 fc73 	bl	800aa20 <memset>
  if(huart->Instance==USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <HAL_UART_MspInit+0xc4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d145      	bne.n	80021d0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002144:	f04f 0202 	mov.w	r2, #2
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fdec 	bl	8006d38 <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002166:	f7ff fba3 	bl	80018b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 800216c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002170:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 8002172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002176:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800217a:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 800217c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002198:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HAL_UART_MspInit+0xc8>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a6:	230c      	movs	r3, #12
 80021a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021be:	2307      	movs	r3, #7
 80021c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <HAL_UART_MspInit+0xcc>)
 80021cc:	f003 fc3a 	bl	8005a44 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80021d0:	bf00      	nop
 80021d2:	37e0      	adds	r7, #224	@ 0xe0
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40004400 	.word	0x40004400
 80021dc:	58024400 	.word	0x58024400
 80021e0:	58020000 	.word	0x58020000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <NMI_Handler+0x4>

080021ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <MemManage_Handler+0x4>

080021fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <UsageFault_Handler+0x4>

0800220c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223a:	f000 f957 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <FDCAN1_IT0_IRQHandler+0x10>)
 800224a:	f002 feff 	bl	800504c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000164 	.word	0x24000164

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f008 fbd2 	bl	800aa30 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	24050000 	.word	0x24050000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	24000c6c 	.word	0x24000c6c
 80022c0:	24000dc0 	.word	0x24000dc0

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <SystemInit+0xd0>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	4a31      	ldr	r2, [pc, #196]	@ (8002394 <SystemInit+0xd0>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002398 <SystemInit+0xd4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d807      	bhi.n	80022f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002398 <SystemInit+0xd4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 030f 	bic.w	r3, r3, #15
 80022ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <SystemInit+0xd4>)
 80022ee:	f043 0307 	orr.w	r3, r3, #7
 80022f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022f4:	4b29      	ldr	r3, [pc, #164]	@ (800239c <SystemInit+0xd8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	@ (800239c <SystemInit+0xd8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <SystemInit+0xd8>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <SystemInit+0xd8>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4924      	ldr	r1, [pc, #144]	@ (800239c <SystemInit+0xd8>)
 800230c:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <SystemInit+0xdc>)
 800230e:	4013      	ands	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <SystemInit+0xd4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <SystemInit+0xd4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 030f 	bic.w	r3, r3, #15
 8002326:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <SystemInit+0xd4>)
 8002328:	f043 0307 	orr.w	r3, r3, #7
 800232c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <SystemInit+0xd8>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <SystemInit+0xd8>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <SystemInit+0xd8>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <SystemInit+0xd8>)
 8002342:	4a18      	ldr	r2, [pc, #96]	@ (80023a4 <SystemInit+0xe0>)
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <SystemInit+0xd8>)
 8002348:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <SystemInit+0xe4>)
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <SystemInit+0xd8>)
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <SystemInit+0xe8>)
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <SystemInit+0xd8>)
 8002354:	2200      	movs	r2, #0
 8002356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <SystemInit+0xd8>)
 800235a:	4a14      	ldr	r2, [pc, #80]	@ (80023ac <SystemInit+0xe8>)
 800235c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <SystemInit+0xd8>)
 8002360:	2200      	movs	r2, #0
 8002362:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <SystemInit+0xd8>)
 8002366:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <SystemInit+0xe8>)
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <SystemInit+0xd8>)
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <SystemInit+0xd8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a09      	ldr	r2, [pc, #36]	@ (800239c <SystemInit+0xd8>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <SystemInit+0xd8>)
 800237e:	2200      	movs	r2, #0
 8002380:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <SystemInit+0xec>)
 8002384:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002388:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00
 8002398:	52002000 	.word	0x52002000
 800239c:	58024400 	.word	0x58024400
 80023a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80023a4:	02020200 	.word	0x02020200
 80023a8:	01ff0000 	.word	0x01ff0000
 80023ac:	01010280 	.word	0x01010280
 80023b0:	52004000 	.word	0x52004000

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b8:	f7ff ff84 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f008 fb2b 	bl	800aa3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7fe fd21 	bl	8000e2c <main>
  bx  lr
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80023f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023f4:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 80023f8:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 80023fc:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8002400:	24000dbc 	.word	0x24000dbc

08002404 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC3_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240e:	2003      	movs	r0, #3
 8002410:	f002 f91c 	bl	800464c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002414:	f004 faba 	bl	800698c <HAL_RCC_GetSysClockFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_Init+0x68>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	4913      	ldr	r1, [pc, #76]	@ (8002474 <HAL_Init+0x6c>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002432:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <HAL_Init+0x68>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a0e      	ldr	r2, [pc, #56]	@ (8002474 <HAL_Init+0x6c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a0b      	ldr	r2, [pc, #44]	@ (8002478 <HAL_Init+0x70>)
 800244a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800244c:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_Init+0x74>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002452:	200f      	movs	r0, #15
 8002454:	f000 f814 	bl	8002480 <HAL_InitTick>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e002      	b.n	8002468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002462:	f7ff fced 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58024400 	.word	0x58024400
 8002474:	0800b50c 	.word	0x0800b50c
 8002478:	2400000c 	.word	0x2400000c
 800247c:	24000008 	.word	0x24000008

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002488:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_InitTick+0x60>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e021      	b.n	80024d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_InitTick+0x64>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_InitTick+0x60>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 f901 	bl	80046b2 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f002 f8cb 	bl	8004662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	@ (80024e8 <HAL_InitTick+0x68>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	24000014 	.word	0x24000014
 80024e4:	24000008 	.word	0x24000008
 80024e8:	24000010 	.word	0x24000010

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	24000014 	.word	0x24000014
 8002510:	24000c70 	.word	0x24000c70

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	24000c70 	.word	0x24000c70

0800252c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3360      	adds	r3, #96	@ 0x60
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <LL_ADC_SetOffset+0x60>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10b      	bne.n	80025d0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80025ce:	e00b      	b.n	80025e8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58026000 	.word	0x58026000

080025f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3360      	adds	r3, #96	@ 0x60
 8002606:	461a      	mov	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	611a      	str	r2, [r3, #16]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3360      	adds	r3, #96	@ 0x60
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	601a      	str	r2, [r3, #0]
  }
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	58026000 	.word	0x58026000

0800269c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <LL_ADC_SetOffsetSaturation+0x40>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10e      	bne.n	80026ce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3360      	adds	r3, #96	@ 0x60
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	58026000 	.word	0x58026000

080026e0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002720 <LL_ADC_SetOffsetSign+0x40>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d10e      	bne.n	8002712 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3360      	adds	r3, #96	@ 0x60
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	58026000 	.word	0x58026000

08002724 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3360      	adds	r3, #96	@ 0x60
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <LL_ADC_SetOffsetState+0x50>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d108      	bne.n	8002758 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002756:	e007      	b.n	8002768 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	431a      	orrs	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	58026000 	.word	0x58026000

08002778 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3330      	adds	r3, #48	@ 0x30
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	211f      	movs	r1, #31
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 011f 	and.w	r1, r3, #31
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3314      	adds	r3, #20
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0e5b      	lsrs	r3, r3, #25
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	0d1b      	lsrs	r3, r3, #20
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2107      	movs	r1, #7
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	0d1b      	lsrs	r3, r3, #20
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	431a      	orrs	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d115      	bne.n	800288c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0318 	and.w	r3, r3, #24
 8002876:	4914      	ldr	r1, [pc, #80]	@ (80028c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002878:	40d9      	lsrs	r1, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	400b      	ands	r3, r1
 800287e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800288a:	e014      	b.n	80028b6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0318 	and.w	r3, r3, #24
 80028a2:	4909      	ldr	r1, [pc, #36]	@ (80028c8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80028a4:	40d9      	lsrs	r1, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	400b      	ands	r3, r1
 80028aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ae:	431a      	orrs	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	58026000 	.word	0x58026000
 80028c8:	000fffff 	.word	0x000fffff

080028cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 031f 	and.w	r3, r3, #31
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6093      	str	r3, [r2, #8]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	5fffffc0 	.word	0x5fffffc0

08002928 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <LL_ADC_EnableInternalRegulator+0x24>)
 800295e:	4013      	ands	r3, r2
 8002960:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	6fffffc0 	.word	0x6fffffc0

08002978 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800298c:	d101      	bne.n	8002992 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <LL_ADC_Enable+0x24>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	7fffffc0 	.word	0x7fffffc0

080029c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <LL_ADC_Disable+0x24>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	7fffffc0 	.word	0x7fffffc0

080029f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <LL_ADC_IsEnabled+0x18>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <LL_ADC_IsEnabled+0x1a>
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_IsDisableOngoing+0x18>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_IsDisableOngoing+0x1a>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <LL_ADC_REG_StartConversion+0x24>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	7fffffc0 	.word	0x7fffffc0

08002a64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <LL_ADC_REG_StopConversion+0x24>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	7fffffc0 	.word	0x7fffffc0

08002a8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d101      	bne.n	8002aa4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <LL_ADC_INJ_StopConversion+0x24>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	7fffffc0 	.word	0x7fffffc0

08002adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1ee      	b.n	8002efc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff f9a1 	bl	8001e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff feef 	bl	8002928 <LL_ADC_IsDeepPowerDownEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fed5 	bl	8002904 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff0a 	bl	8002978 <LL_ADC_IsInternalRegulatorEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff feee 	bl	8002950 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b74:	4b8e      	ldr	r3, [pc, #568]	@ (8002db0 <HAL_ADC_Init+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	4a8e      	ldr	r2, [pc, #568]	@ (8002db4 <HAL_ADC_Init+0x2b0>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b86:	e002      	b.n	8002b8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff feed 	bl	8002978 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff61 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 8002bca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 8188 	bne.w	8002eea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8184 	bne.w	8002eea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fefa 	bl	80029f0 <LL_ADC_IsEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d136      	bne.n	8002c70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6c      	ldr	r2, [pc, #432]	@ (8002db8 <HAL_ADC_Init+0x2b4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADC_Init+0x112>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6a      	ldr	r2, [pc, #424]	@ (8002dbc <HAL_ADC_Init+0x2b8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10e      	bne.n	8002c34 <HAL_ADC_Init+0x130>
 8002c16:	4868      	ldr	r0, [pc, #416]	@ (8002db8 <HAL_ADC_Init+0x2b4>)
 8002c18:	f7ff feea 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4867      	ldr	r0, [pc, #412]	@ (8002dbc <HAL_ADC_Init+0x2b8>)
 8002c20:	f7ff fee6 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_Init+0x142>
 8002c34:	4862      	ldr	r0, [pc, #392]	@ (8002dc0 <HAL_ADC_Init+0x2bc>)
 8002c36:	f7ff fedb 	bl	80029f0 <LL_ADC_IsEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002db8 <HAL_ADC_Init+0x2b4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_Init+0x15a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a58      	ldr	r2, [pc, #352]	@ (8002dbc <HAL_ADC_Init+0x2b8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Init+0x15e>
 8002c5e:	4a59      	ldr	r2, [pc, #356]	@ (8002dc4 <HAL_ADC_Init+0x2c0>)
 8002c60:	e000      	b.n	8002c64 <HAL_ADC_Init+0x160>
 8002c62:	4a59      	ldr	r2, [pc, #356]	@ (8002dc8 <HAL_ADC_Init+0x2c4>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7ff fc5e 	bl	800252c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_ADC_Init+0x2bc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d129      	bne.n	8002cce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7e5b      	ldrb	r3, [r3, #25]
 8002c7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c84:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002c8a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d013      	beq.n	8002cbc <HAL_ADC_Init+0x1b8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_ADC_Init+0x1b4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b1c      	cmp	r3, #28
 8002ca2:	d007      	beq.n	8002cb4 <HAL_ADC_Init+0x1b0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b18      	cmp	r3, #24
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_Init+0x1ac>
 8002cac:	2318      	movs	r3, #24
 8002cae:	e006      	b.n	8002cbe <HAL_ADC_Init+0x1ba>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e004      	b.n	8002cbe <HAL_ADC_Init+0x1ba>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_Init+0x1ba>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_Init+0x1ba>
 8002cbc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002cbe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e00e      	b.n	8002cec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7e5b      	ldrb	r3, [r3, #25]
 8002cd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	045b      	lsls	r3, r3, #17
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a26      	ldr	r2, [pc, #152]	@ (8002dc0 <HAL_ADC_Init+0x2bc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d115      	bne.n	8002d56 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <HAL_ADC_Init+0x2c8>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]
 8002d54:	e009      	b.n	8002d6a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <HAL_ADC_Init+0x2cc>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	69b9      	ldr	r1, [r7, #24]
 8002d66:	430b      	orrs	r3, r1
 8002d68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fe8c 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 8002d74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff feae 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8002d80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 808e 	bne.w	8002ea6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 808a 	bne.w	8002ea6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <HAL_ADC_Init+0x2bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002da8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e018      	b.n	8002de2 <HAL_ADC_Init+0x2de>
 8002db0:	24000008 	.word	0x24000008
 8002db4:	053e2d63 	.word	0x053e2d63
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40022100 	.word	0x40022100
 8002dc0:	58026000 	.word	0x58026000
 8002dc4:	40022300 	.word	0x40022300
 8002dc8:	58026300 	.word	0x58026300
 8002dcc:	fff04007 	.word	0xfff04007
 8002dd0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7e1b      	ldrb	r3, [r3, #24]
 8002dd8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_ADC_Init+0x400>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	69b9      	ldr	r1, [r7, #24]
 8002df2:	430b      	orrs	r3, r1
 8002df4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d137      	bne.n	8002e70 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f08 <HAL_ADC_Init+0x404>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d116      	bne.n	8002e3e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	4b3d      	ldr	r3, [pc, #244]	@ (8002f0c <HAL_ADC_Init+0x408>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	611a      	str	r2, [r3, #16]
 8002e3c:	e020      	b.n	8002e80 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	4b32      	ldr	r3, [pc, #200]	@ (8002f10 <HAL_ADC_Init+0x40c>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0411      	lsls	r1, r2, #16
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002e60:	430a      	orrs	r2, r1
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	e007      	b.n	8002e80 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <HAL_ADC_Init+0x404>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d002      	beq.n	8002ea6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f001 f90d 	bl	80040c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10c      	bne.n	8002ec8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f023 010f 	bic.w	r1, r3, #15
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 020f 	bic.w	r2, r2, #15
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002edc:	f023 0303 	bic.w	r3, r3, #3
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ee8:	e007      	b.n	8002efa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3724      	adds	r7, #36	@ 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	ffffbffc 	.word	0xffffbffc
 8002f08:	58026000 	.word	0x58026000
 8002f0c:	fc00f81f 	.word	0xfc00f81f
 8002f10:	fc00f81e 	.word	0xfc00f81e

08002f14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5c      	ldr	r2, [pc, #368]	@ (8003094 <HAL_ADC_Start+0x180>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_Start+0x1c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003098 <HAL_ADC_Start+0x184>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_Start+0x20>
 8002f30:	4b5a      	ldr	r3, [pc, #360]	@ (800309c <HAL_ADC_Start+0x188>)
 8002f32:	e000      	b.n	8002f36 <HAL_ADC_Start+0x22>
 8002f34:	4b5a      	ldr	r3, [pc, #360]	@ (80030a0 <HAL_ADC_Start+0x18c>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fcc8 	bl	80028cc <LL_ADC_GetMultimode>
 8002f3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fda2 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 809a 	bne.w	8003084 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Start+0x4a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e095      	b.n	800308a <HAL_ADC_Start+0x176>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 ffc0 	bl	8003eec <ADC_Enable>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8081 	bne.w	800307a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f7c:	4b49      	ldr	r3, [pc, #292]	@ (80030a4 <HAL_ADC_Start+0x190>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a42      	ldr	r2, [pc, #264]	@ (8003098 <HAL_ADC_Start+0x184>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d002      	beq.n	8002f98 <HAL_ADC_Start+0x84>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_Start+0x86>
 8002f98:	4b3e      	ldr	r3, [pc, #248]	@ (8003094 <HAL_ADC_Start+0x180>)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc6:	f023 0206 	bic.w	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	665a      	str	r2, [r3, #100]	@ 0x64
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	221c      	movs	r2, #28
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2b      	ldr	r2, [pc, #172]	@ (8003098 <HAL_ADC_Start+0x184>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Start+0xe2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Start+0xe4>
 8002ff6:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_ADC_Start+0x180>)
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d008      	beq.n	8003012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d002      	beq.n	8003012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b09      	cmp	r3, #9
 8003010:	d114      	bne.n	800303c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003024:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003028:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fd01 	bl	8002a3c <LL_ADC_REG_StartConversion>
 800303a:	e025      	b.n	8003088 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <HAL_ADC_Start+0x184>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d002      	beq.n	8003058 <HAL_ADC_Start+0x144>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_ADC_Start+0x146>
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <HAL_ADC_Start+0x180>)
 800305a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003070:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	661a      	str	r2, [r3, #96]	@ 0x60
 8003078:	e006      	b.n	8003088 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003082:	e001      	b.n	8003088 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003088:	7dfb      	ldrb	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40022000 	.word	0x40022000
 8003098:	40022100 	.word	0x40022100
 800309c:	40022300 	.word	0x40022300
 80030a0:	58026300 	.word	0x58026300
 80030a4:	fffff0fe 	.word	0xfffff0fe

080030a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_Stop+0x16>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e021      	b.n	8003102 <HAL_ADC_Stop+0x5a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030c6:	2103      	movs	r1, #3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fe53 	bl	8003d74 <ADC_ConversionStop>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10f      	bne.n	80030f8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 ff91 	bl	8004000 <ADC_Disable>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <HAL_ADC_Stop+0x64>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	ffffeefe 	.word	0xffffeefe

08003110 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a72      	ldr	r2, [pc, #456]	@ (80032e8 <HAL_ADC_PollForConversion+0x1d8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_ADC_PollForConversion+0x1e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a70      	ldr	r2, [pc, #448]	@ (80032ec <HAL_ADC_PollForConversion+0x1dc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_ADC_PollForConversion+0x22>
 800312e:	4b70      	ldr	r3, [pc, #448]	@ (80032f0 <HAL_ADC_PollForConversion+0x1e0>)
 8003130:	e000      	b.n	8003134 <HAL_ADC_PollForConversion+0x24>
 8003132:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <HAL_ADC_PollForConversion+0x1e4>)
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fbc9 	bl	80028cc <LL_ADC_GetMultimode>
 800313a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d102      	bne.n	800314a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003144:	2308      	movs	r3, #8
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e037      	b.n	80031ba <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d002      	beq.n	800315c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d111      	bne.n	8003180 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0b1      	b.n	80032de <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800317a:	2304      	movs	r3, #4
 800317c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800317e:	e01c      	b.n	80031ba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_ADC_PollForConversion+0x1d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_PollForConversion+0x84>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_ADC_PollForConversion+0x1dc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_PollForConversion+0x88>
 8003194:	4b56      	ldr	r3, [pc, #344]	@ (80032f0 <HAL_ADC_PollForConversion+0x1e0>)
 8003196:	e000      	b.n	800319a <HAL_ADC_PollForConversion+0x8a>
 8003198:	4b56      	ldr	r3, [pc, #344]	@ (80032f4 <HAL_ADC_PollForConversion+0x1e4>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fba4 	bl	80028e8 <LL_ADC_GetMultiDMATransfer>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e093      	b.n	80032de <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031b6:	2304      	movs	r3, #4
 80031b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031ba:	f7ff f9ab 	bl	8002514 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031c0:	e021      	b.n	8003206 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d01d      	beq.n	8003206 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031ca:	f7ff f9a3 	bl	8002514 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <HAL_ADC_PollForConversion+0xd0>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d112      	bne.n	8003206 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e06b      	b.n	80032de <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0d6      	beq.n	80031c2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff faa7 	bl	8002778 <LL_ADC_REG_IsTriggerSourceSWStart>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e5b      	ldrb	r3, [r3, #25]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d111      	bne.n	800326a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <HAL_ADC_PollForConversion+0x1dc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d002      	beq.n	800327a <HAL_ADC_PollForConversion+0x16a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e000      	b.n	800327c <HAL_ADC_PollForConversion+0x16c>
 800327a:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_ADC_PollForConversion+0x1d8>)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4293      	cmp	r3, r2
 8003282:	d008      	beq.n	8003296 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d002      	beq.n	8003296 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b09      	cmp	r3, #9
 8003294:	d104      	bne.n	80032a0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e00c      	b.n	80032ba <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <HAL_ADC_PollForConversion+0x1dc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d002      	beq.n	80032b0 <HAL_ADC_PollForConversion+0x1a0>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e000      	b.n	80032b2 <HAL_ADC_PollForConversion+0x1a2>
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HAL_ADC_PollForConversion+0x1d8>)
 80032b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2208      	movs	r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e008      	b.n	80032dc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	220c      	movs	r2, #12
 80032da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022100 	.word	0x40022100
 80032f0:	40022300 	.word	0x40022300
 80032f4:	58026300 	.word	0x58026300

080032f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b0b9      	sub	sp, #228	@ 0xe4
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800332e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4aab      	ldr	r2, [pc, #684]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003336:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x34>
 8003342:	2302      	movs	r3, #2
 8003344:	f000 bcfe 	b.w	8003d44 <HAL_ADC_ConfigChannel+0xa30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fb99 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 84e2 	bne.w	8003d26 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db38      	blt.n	80033dc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a9e      	ldr	r2, [pc, #632]	@ (80035e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d033      	beq.n	80033dc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x7e>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	e01d      	b.n	80033ce <HAL_ADC_ConfigChannel+0xba>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e004      	b.n	80033c4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2201      	movs	r2, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	69d1      	ldr	r1, [r2, #28]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f7ff f9d8 	bl	800279e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fb4a 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 80033f8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fb6b 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8003406:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800340a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8270 	bne.w	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003414:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 826b 	bne.w	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	461a      	mov	r2, r3
 800342c:	f7ff f9e3 	bl	80027f6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6c      	ldr	r2, [pc, #432]	@ (80035e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10d      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	08db      	lsrs	r3, r3, #3
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003454:	e032      	b.n	80034bc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003456:	4b65      	ldr	r3, [pc, #404]	@ (80035ec <HAL_ADC_ConfigChannel+0x2d8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800345e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003462:	d10b      	bne.n	800347c <HAL_ADC_ConfigChannel+0x168>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	e01d      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1a4>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x18e>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	e00a      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1a4>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d048      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6919      	ldr	r1, [r3, #16]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034d4:	f7ff f85e 	bl	8002594 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	@ (80035e8 <HAL_ADC_ConfigChannel+0x2d4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d119      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6919      	ldr	r1, [r3, #16]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7ff f8f6 	bl	80026e0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1f8>
 8003506:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800350a:	e000      	b.n	800350e <HAL_ADC_ConfigChannel+0x1fa>
 800350c:	2300      	movs	r3, #0
 800350e:	461a      	mov	r2, r3
 8003510:	f7ff f8c4 	bl	800269c <LL_ADC_SetOffsetSaturation>
 8003514:	e1ee      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6919      	ldr	r1, [r3, #16]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003524:	2b01      	cmp	r3, #1
 8003526:	d102      	bne.n	800352e <HAL_ADC_ConfigChannel+0x21a>
 8003528:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800352c:	e000      	b.n	8003530 <HAL_ADC_ConfigChannel+0x21c>
 800352e:	2300      	movs	r3, #0
 8003530:	461a      	mov	r2, r3
 8003532:	f7ff f891 	bl	8002658 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6919      	ldr	r1, [r3, #16]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7e1b      	ldrb	r3, [r3, #24]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_ADC_ConfigChannel+0x238>
 8003546:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800354a:	e000      	b.n	800354e <HAL_ADC_ConfigChannel+0x23a>
 800354c:	2300      	movs	r3, #0
 800354e:	461a      	mov	r2, r3
 8003550:	f7ff f868 	bl	8002624 <LL_ADC_SetDataRightShift>
 8003554:	e1ce      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a23      	ldr	r2, [pc, #140]	@ (80035e8 <HAL_ADC_ConfigChannel+0x2d4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f040 8181 	bne.w	8003864 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f845 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_ADC_ConfigChannel+0x27a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f83a 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	0e9b      	lsrs	r3, r3, #26
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	e01e      	b.n	80035cc <HAL_ADC_ConfigChannel+0x2b8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f82f 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80035ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80035b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e004      	b.n	80035ca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80035c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2dc>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	e01e      	b.n	8003622 <HAL_ADC_ConfigChannel+0x30e>
 80035e4:	47ff0000 	.word	0x47ff0000
 80035e8:	58026000 	.word	0x58026000
 80035ec:	5c001000 	.word	0x5c001000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800360c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e004      	b.n	8003622 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	429a      	cmp	r2, r3
 8003624:	d106      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f878 	bl	8002724 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe ffdc 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x34c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe ffd1 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	f003 021f 	and.w	r2, r3, #31
 800365e:	e01e      	b.n	800369e <HAL_ADC_ConfigChannel+0x38a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe ffc6 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800367e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e004      	b.n	800369c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x3a2>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	e018      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x3d4>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80036ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80036d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e004      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80036de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d106      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f815 	bl	8002724 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe ff79 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x412>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ff6e 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	e01e      	b.n	8003764 <HAL_ADC_ConfigChannel+0x450>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe ff63 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 8003732:	4603      	mov	r3, r0
 8003734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800374c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e004      	b.n	8003762 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <HAL_ADC_ConfigChannel+0x468>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	e014      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x492>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800378a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e004      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800379c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d106      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe ffb6 	bl	8002724 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2103      	movs	r1, #3
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe ff1a 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x4d0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2103      	movs	r1, #3
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe ff0f 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	f003 021f 	and.w	r2, r3, #31
 80037e2:	e017      	b.n	8003814 <HAL_ADC_ConfigChannel+0x500>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2103      	movs	r1, #3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe ff04 	bl	80025f8 <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e003      	b.n	8003812 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800380a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_ADC_ConfigChannel+0x518>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	e011      	b.n	8003850 <HAL_ADC_ConfigChannel+0x53c>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800383a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800383c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800383e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e003      	b.n	8003850 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	429a      	cmp	r2, r3
 8003852:	d14f      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	2103      	movs	r1, #3
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe ff61 	bl	8002724 <LL_ADC_SetOffsetState>
 8003862:	e047      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	069b      	lsls	r3, r3, #26
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003886:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800388e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	069b      	lsls	r3, r3, #26
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	069b      	lsls	r3, r3, #26
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	069b      	lsls	r3, r3, #26
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff f879 	bl	80029f0 <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 8219 	bne.w	8003d38 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fe ff9a 	bl	800284c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4aa1      	ldr	r2, [pc, #644]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x890>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f040 812e 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <HAL_ADC_ConfigChannel+0x638>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0e9b      	lsrs	r3, r3, #26
 800393a:	3301      	adds	r3, #1
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2b09      	cmp	r3, #9
 8003942:	bf94      	ite	ls
 8003944:	2301      	movls	r3, #1
 8003946:	2300      	movhi	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e019      	b.n	8003980 <HAL_ADC_ConfigChannel+0x66c>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800395e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	e003      	b.n	8003970 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2b09      	cmp	r3, #9
 8003978:	bf94      	ite	ls
 800397a:	2301      	movls	r3, #1
 800397c:	2300      	movhi	r3, #0
 800397e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003980:	2b00      	cmp	r3, #0
 8003982:	d079      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x68c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0e9b      	lsrs	r3, r3, #26
 8003996:	3301      	adds	r3, #1
 8003998:	069b      	lsls	r3, r3, #26
 800399a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800399e:	e015      	b.n	80039cc <HAL_ADC_ConfigChannel+0x6b8>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e003      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80039bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x6d8>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	e017      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x708>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80039fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80039fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	ea42 0103 	orr.w	r1, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x72e>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	051b      	lsls	r3, r3, #20
 8003a40:	e018      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x760>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e003      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a74:	430b      	orrs	r3, r1
 8003a76:	e07e      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x780>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	069b      	lsls	r3, r3, #26
 8003a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a92:	e015      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x7ac>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003aac:	2320      	movs	r3, #32
 8003aae:	e003      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	069b      	lsls	r3, r3, #26
 8003abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x7cc>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0e9b      	lsrs	r3, r3, #26
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	e017      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x7fc>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	61bb      	str	r3, [r7, #24]
  return result;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	e003      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	ea42 0103 	orr.w	r1, r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10d      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x828>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	3301      	adds	r3, #1
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	3b1e      	subs	r3, #30
 8003b34:	051b      	lsls	r3, r3, #20
 8003b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	e01b      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x860>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	60fb      	str	r3, [r7, #12]
  return result;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003b54:	2320      	movs	r3, #32
 8003b56:	e003      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f003 021f 	and.w	r2, r3, #31
 8003b66:	4613      	mov	r3, r2
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3b1e      	subs	r3, #30
 8003b6e:	051b      	lsls	r3, r3, #20
 8003b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b74:	430b      	orrs	r3, r1
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fe fe3b 	bl	80027f6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f280 80d7 	bge.w	8003d38 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x894>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_ADC_ConfigChannel+0x88a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <HAL_ADC_ConfigChannel+0x898>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x8a0>
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x89c>)
 8003ba0:	e009      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x8a2>
 8003ba2:	bf00      	nop
 8003ba4:	47ff0000 	.word	0x47ff0000
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40022100 	.word	0x40022100
 8003bb0:	40022300 	.word	0x40022300
 8003bb4:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fcde 	bl	8002578 <LL_ADC_GetCommonPathInternalCh>
 8003bbc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a62      	ldr	r2, [pc, #392]	@ (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x8c0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a61      	ldr	r2, [pc, #388]	@ (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x8de>
 8003bd4:	485e      	ldr	r0, [pc, #376]	@ (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003bd6:	f7fe ff0b 	bl	80029f0 <LL_ADC_IsEnabled>
 8003bda:	4604      	mov	r4, r0
 8003bdc:	485d      	ldr	r0, [pc, #372]	@ (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003bde:	f7fe ff07 	bl	80029f0 <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4323      	orrs	r3, r4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	e008      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x8f0>
 8003bf2:	4859      	ldr	r0, [pc, #356]	@ (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003bf4:	f7fe fefc 	bl	80029f0 <LL_ADC_IsEnabled>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8084 	beq.w	8003d12 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a53      	ldr	r2, [pc, #332]	@ (8003d5c <HAL_ADC_ConfigChannel+0xa48>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d132      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x966>
 8003c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12c      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4c      	ldr	r2, [pc, #304]	@ (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f040 8086 	bne.w	8003d38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a47      	ldr	r2, [pc, #284]	@ (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x92c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a46      	ldr	r2, [pc, #280]	@ (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x930>
 8003c40:	4a47      	ldr	r2, [pc, #284]	@ (8003d60 <HAL_ADC_ConfigChannel+0xa4c>)
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x932>
 8003c44:	4a41      	ldr	r2, [pc, #260]	@ (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fe fc7e 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c56:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_ADC_ConfigChannel+0xa50>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	4a42      	ldr	r2, [pc, #264]	@ (8003d68 <HAL_ADC_ConfigChannel+0xa54>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	3301      	adds	r3, #1
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c6a:	e002      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f9      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c78:	e05e      	b.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d6c <HAL_ADC_ConfigChannel+0xa58>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d120      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x9b2>
 8003c84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11a      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a30      	ldr	r2, [pc, #192]	@ (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d14e      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x99a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x99e>
 8003cae:	4a2c      	ldr	r2, [pc, #176]	@ (8003d60 <HAL_ADC_ConfigChannel+0xa4c>)
 8003cb0:	e000      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x9a0>
 8003cb2:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fe fc47 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc4:	e038      	b.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a29      	ldr	r2, [pc, #164]	@ (8003d70 <HAL_ADC_ConfigChannel+0xa5c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d133      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
 8003cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d12d      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <HAL_ADC_ConfigChannel+0xa44>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d128      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a19      	ldr	r2, [pc, #100]	@ (8003d50 <HAL_ADC_ConfigChannel+0xa3c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_ADC_ConfigChannel+0x9e6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_ADC_ConfigChannel+0xa40>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x9ea>
 8003cfa:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_ADC_ConfigChannel+0xa4c>)
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x9ec>
 8003cfe:	4a13      	ldr	r2, [pc, #76]	@ (8003d4c <HAL_ADC_ConfigChannel+0xa38>)
 8003d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f7fe fc21 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
 8003d10:	e012      	b.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003d24:	e008      	b.n	8003d38 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003d40:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	37e4      	adds	r7, #228	@ 0xe4
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	58026300 	.word	0x58026300
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40022100 	.word	0x40022100
 8003d58:	58026000 	.word	0x58026000
 8003d5c:	c7520000 	.word	0xc7520000
 8003d60:	40022300 	.word	0x40022300
 8003d64:	24000008 	.word	0x24000008
 8003d68:	053e2d63 	.word	0x053e2d63
 8003d6c:	c3210000 	.word	0xc3210000
 8003d70:	cb840000 	.word	0xcb840000

08003d74 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fe7e 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 8003d90:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fea0 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8003d9c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8098 	beq.w	8003edc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02a      	beq.n	8003e10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7e5b      	ldrb	r3, [r3, #25]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d126      	bne.n	8003e10 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7e1b      	ldrb	r3, [r3, #24]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d122      	bne.n	8003e10 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dce:	e014      	b.n	8003dfa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ee8 <ADC_ConversionStop+0x174>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d90d      	bls.n	8003df4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	f043 0210 	orr.w	r2, r3, #16
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e074      	b.n	8003ede <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b40      	cmp	r3, #64	@ 0x40
 8003e06:	d1e3      	bne.n	8003dd0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2240      	movs	r2, #64	@ 0x40
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d014      	beq.n	8003e40 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fe36 	bl	8002a8c <LL_ADC_REG_IsConversionOngoing>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00c      	beq.n	8003e40 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fdf3 	bl	8002a16 <LL_ADC_IsDisableOngoing>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fe12 	bl	8002a64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d014      	beq.n	8003e70 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fe46 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fddb 	bl	8002a16 <LL_ADC_IsDisableOngoing>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fe22 	bl	8002ab4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d005      	beq.n	8003e82 <ADC_ConversionStop+0x10e>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d105      	bne.n	8003e88 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	617b      	str	r3, [r7, #20]
        break;
 8003e80:	e005      	b.n	8003e8e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e82:	2308      	movs	r3, #8
 8003e84:	617b      	str	r3, [r7, #20]
        break;
 8003e86:	e002      	b.n	8003e8e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e88:	2304      	movs	r3, #4
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e8e:	f7fe fb41 	bl	8002514 <HAL_GetTick>
 8003e92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e94:	e01b      	b.n	8003ece <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e96:	f7fe fb3d 	bl	8002514 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d914      	bls.n	8003ece <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb6:	f043 0210 	orr.w	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e007      	b.n	8003ede <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1dc      	bne.n	8003e96 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	000cdbff 	.word	0x000cdbff

08003eec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fd79 	bl	80029f0 <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d16e      	bne.n	8003fe2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b38      	ldr	r3, [pc, #224]	@ (8003fec <ADC_Enable+0x100>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e05a      	b.n	8003fe4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fd34 	bl	80029a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f38:	f7fe faec 	bl	8002514 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <ADC_Enable+0x104>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <ADC_Enable+0x66>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ff4 <ADC_Enable+0x108>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <ADC_Enable+0x6a>
 8003f52:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <ADC_Enable+0x10c>)
 8003f54:	e000      	b.n	8003f58 <ADC_Enable+0x6c>
 8003f56:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <ADC_Enable+0x110>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fcb7 	bl	80028cc <LL_ADC_GetMultimode>
 8003f5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	@ (8003ff4 <ADC_Enable+0x108>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d002      	beq.n	8003f70 <ADC_Enable+0x84>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e000      	b.n	8003f72 <ADC_Enable+0x86>
 8003f70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <ADC_Enable+0x104>)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02c      	beq.n	8003fd4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d130      	bne.n	8003fe2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f80:	e028      	b.n	8003fd4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fd32 	bl	80029f0 <LL_ADC_IsEnabled>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fd02 	bl	80029a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f9c:	f7fe faba 	bl	8002514 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d914      	bls.n	8003fd4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d00d      	beq.n	8003fd4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fbc:	f043 0210 	orr.w	r2, r3, #16
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e007      	b.n	8003fe4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d1cf      	bne.n	8003f82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	8000003f 	.word	0x8000003f
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40022100 	.word	0x40022100
 8003ff8:	40022300 	.word	0x40022300
 8003ffc:	58026300 	.word	0x58026300

08004000 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fd02 	bl	8002a16 <LL_ADC_IsDisableOngoing>
 8004012:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fce9 	bl	80029f0 <LL_ADC_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d047      	beq.n	80040b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d144      	bne.n	80040b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030d 	and.w	r3, r3, #13
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10c      	bne.n	8004052 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fcc3 	bl	80029c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2203      	movs	r2, #3
 8004048:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800404a:	f7fe fa63 	bl	8002514 <HAL_GetTick>
 800404e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004050:	e029      	b.n	80040a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e023      	b.n	80040b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800406e:	f7fe fa51 	bl	8002514 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d914      	bls.n	80040a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408e:	f043 0210 	orr.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e007      	b.n	80040b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1dc      	bne.n	800406e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004280 <ADC_ConfigureBoostMode+0x1c0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <ADC_ConfigureBoostMode+0x1c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004284 <ADC_ConfigureBoostMode+0x1c4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d109      	bne.n	80040f0 <ADC_ConfigureBoostMode+0x30>
 80040dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004288 <ADC_ConfigureBoostMode+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e008      	b.n	8004102 <ADC_ConfigureBoostMode+0x42>
 80040f0:	4b66      	ldr	r3, [pc, #408]	@ (800428c <ADC_ConfigureBoostMode+0x1cc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01c      	beq.n	8004140 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004106:	f002 fdbb 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 800410a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004114:	d010      	beq.n	8004138 <ADC_ConfigureBoostMode+0x78>
 8004116:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800411a:	d873      	bhi.n	8004204 <ADC_ConfigureBoostMode+0x144>
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d002      	beq.n	8004128 <ADC_ConfigureBoostMode+0x68>
 8004122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004126:	d16d      	bne.n	8004204 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	60fb      	str	r3, [r7, #12]
        break;
 8004136:	e068      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	60fb      	str	r3, [r7, #12]
        break;
 800413e:	e064      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004140:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f003 ff96 	bl	8008078 <HAL_RCCEx_GetPeriphCLKFreq>
 800414c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004156:	d051      	beq.n	80041fc <ADC_ConfigureBoostMode+0x13c>
 8004158:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800415c:	d854      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 800415e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004162:	d047      	beq.n	80041f4 <ADC_ConfigureBoostMode+0x134>
 8004164:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004168:	d84e      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 800416a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800416e:	d03d      	beq.n	80041ec <ADC_ConfigureBoostMode+0x12c>
 8004170:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004174:	d848      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 8004176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800417a:	d033      	beq.n	80041e4 <ADC_ConfigureBoostMode+0x124>
 800417c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004180:	d842      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 8004182:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004186:	d029      	beq.n	80041dc <ADC_ConfigureBoostMode+0x11c>
 8004188:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800418c:	d83c      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 800418e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004192:	d01a      	beq.n	80041ca <ADC_ConfigureBoostMode+0x10a>
 8004194:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004198:	d836      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 800419a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800419e:	d014      	beq.n	80041ca <ADC_ConfigureBoostMode+0x10a>
 80041a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041a4:	d830      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d00e      	beq.n	80041ca <ADC_ConfigureBoostMode+0x10a>
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b0:	d82a      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 80041b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041b6:	d008      	beq.n	80041ca <ADC_ConfigureBoostMode+0x10a>
 80041b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041bc:	d824      	bhi.n	8004208 <ADC_ConfigureBoostMode+0x148>
 80041be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041c2:	d002      	beq.n	80041ca <ADC_ConfigureBoostMode+0x10a>
 80041c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041c8:	d11e      	bne.n	8004208 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	0c9b      	lsrs	r3, r3, #18
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	60fb      	str	r3, [r7, #12]
        break;
 80041da:	e016      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]
        break;
 80041e2:	e012      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	60fb      	str	r3, [r7, #12]
        break;
 80041ea:	e00e      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	60fb      	str	r3, [r7, #12]
        break;
 80041f2:	e00a      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
        break;
 80041fa:	e006      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	60fb      	str	r3, [r7, #12]
        break;
 8004202:	e002      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004208:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <ADC_ConfigureBoostMode+0x1d0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d808      	bhi.n	800422a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004226:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004228:	e025      	b.n	8004276 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a19      	ldr	r2, [pc, #100]	@ (8004294 <ADC_ConfigureBoostMode+0x1d4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d80a      	bhi.n	8004248 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	e016      	b.n	8004276 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <ADC_ConfigureBoostMode+0x1d8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d80a      	bhi.n	8004266 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	e007      	b.n	8004276 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40022000 	.word	0x40022000
 8004284:	40022100 	.word	0x40022100
 8004288:	40022300 	.word	0x40022300
 800428c:	58026300 	.word	0x58026300
 8004290:	005f5e10 	.word	0x005f5e10
 8004294:	00bebc20 	.word	0x00bebc20
 8004298:	017d7840 	.word	0x017d7840

0800429c <LL_ADC_IsEnabled>:
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <LL_ADC_IsEnabled+0x18>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <LL_ADC_IsEnabled+0x1a>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d101      	bne.n	80042da <LL_ADC_REG_IsConversionOngoing+0x18>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b0a3      	sub	sp, #140	@ 0x8c
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004302:	2302      	movs	r3, #2
 8004304:	e0c1      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004312:	2300      	movs	r3, #0
 8004314:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a5e      	ldr	r2, [pc, #376]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d102      	bne.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004320:	4b5d      	ldr	r3, [pc, #372]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0a0      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ffb9 	bl	80042c2 <LL_ADC_REG_IsConversionOngoing>
 8004350:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ffb2 	bl	80042c2 <LL_ADC_REG_IsConversionOngoing>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8081 	bne.w	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004366:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d17c      	bne.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a48      	ldr	r2, [pc, #288]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004382:	4b46      	ldr	r3, [pc, #280]	@ (800449c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004384:	e000      	b.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004386:	4b46      	ldr	r3, [pc, #280]	@ (80044a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004388:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d039      	beq.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	431a      	orrs	r2, r3
 80043a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a39      	ldr	r2, [pc, #228]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10e      	bne.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80043b8:	4836      	ldr	r0, [pc, #216]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043ba:	f7ff ff6f 	bl	800429c <LL_ADC_IsEnabled>
 80043be:	4604      	mov	r4, r0
 80043c0:	4835      	ldr	r0, [pc, #212]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043c2:	f7ff ff6b 	bl	800429c <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4323      	orrs	r3, r4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e008      	b.n	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80043d6:	4833      	ldr	r0, [pc, #204]	@ (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80043d8:	f7ff ff60 	bl	800429c <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d047      	beq.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	6811      	ldr	r1, [r2, #0]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	6892      	ldr	r2, [r2, #8]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	431a      	orrs	r2, r3
 8004400:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004402:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004404:	e03a      	b.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800440e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004410:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1f      	ldr	r2, [pc, #124]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10e      	bne.n	8004444 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004426:	481b      	ldr	r0, [pc, #108]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004428:	f7ff ff38 	bl	800429c <LL_ADC_IsEnabled>
 800442c:	4604      	mov	r4, r0
 800442e:	481a      	ldr	r0, [pc, #104]	@ (8004498 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004430:	f7ff ff34 	bl	800429c <LL_ADC_IsEnabled>
 8004434:	4603      	mov	r3, r0
 8004436:	4323      	orrs	r3, r4
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e008      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004444:	4817      	ldr	r0, [pc, #92]	@ (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004446:	f7ff ff29 	bl	800429c <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800445a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004460:	4013      	ands	r3, r2
 8004462:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004464:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004466:	e009      	b.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800447a:	e000      	b.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800447c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004486:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800448a:	4618      	mov	r0, r3
 800448c:	378c      	adds	r7, #140	@ 0x8c
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	40022300 	.word	0x40022300
 80044a0:	58026300 	.word	0x58026300
 80044a4:	58026000 	.word	0x58026000
 80044a8:	fffff0e0 	.word	0xfffff0e0

080044ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	05fa0000 	.word	0x05fa0000

080044f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <__NVIC_GetPriorityGrouping+0x18>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0307 	and.w	r3, r3, #7
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db0b      	blt.n	800453a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4907      	ldr	r1, [pc, #28]	@ (8004548 <__NVIC_EnableIRQ+0x38>)
 800452a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	@ (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	@ (800459c <__NVIC_SetPriority+0x50>)
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	@ 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
         );
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	@ 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004618:	d301      	bcc.n	800461e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461a:	2301      	movs	r3, #1
 800461c:	e00f      	b.n	800463e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461e:	4a0a      	ldr	r2, [pc, #40]	@ (8004648 <SysTick_Config+0x40>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004626:	210f      	movs	r1, #15
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f7ff ff8e 	bl	800454c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <SysTick_Config+0x40>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <SysTick_Config+0x40>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff29 	bl	80044ac <__NVIC_SetPriorityGrouping>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff40 	bl	80044f4 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff90 	bl	80045a0 <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5f 	bl	800454c <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff33 	bl	8004510 <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa4 	bl	8004608 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b098      	sub	sp, #96	@ 0x60
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80046d4:	4a84      	ldr	r2, [pc, #528]	@ (80048e8 <HAL_FDCAN_Init+0x21c>)
 80046d6:	f107 030c 	add.w	r3, r7, #12
 80046da:	4611      	mov	r1, r2
 80046dc:	224c      	movs	r2, #76	@ 0x4c
 80046de:	4618      	mov	r0, r3
 80046e0:	f006 f9d2 	bl	800aa88 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e1c6      	b.n	8004a7c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7e      	ldr	r2, [pc, #504]	@ (80048ec <HAL_FDCAN_Init+0x220>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d106      	bne.n	8004706 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd fc24 	bl	8001f68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0210 	bic.w	r2, r2, #16
 800472e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004730:	f7fd fef0 	bl	8002514 <HAL_GetTick>
 8004734:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004736:	e014      	b.n	8004762 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004738:	f7fd feec 	bl	8002514 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b0a      	cmp	r3, #10
 8004744:	d90d      	bls.n	8004762 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2203      	movs	r2, #3
 800475a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e18c      	b.n	8004a7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d0e3      	beq.n	8004738 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004780:	f7fd fec8 	bl	8002514 <HAL_GetTick>
 8004784:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004786:	e014      	b.n	80047b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004788:	f7fd fec4 	bl	8002514 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b0a      	cmp	r3, #10
 8004794:	d90d      	bls.n	80047b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2203      	movs	r2, #3
 80047aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e164      	b.n	8004a7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0e3      	beq.n	8004788 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0202 	orr.w	r2, r2, #2
 80047ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7c1b      	ldrb	r3, [r3, #16]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e6:	619a      	str	r2, [r3, #24]
 80047e8:	e007      	b.n	80047fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7c5b      	ldrb	r3, [r3, #17]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d108      	bne.n	8004814 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004810:	619a      	str	r2, [r3, #24]
 8004812:	e007      	b.n	8004824 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004822:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7c9b      	ldrb	r3, [r3, #18]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d108      	bne.n	800483e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	e007      	b.n	800484e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800484c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004872:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0210 	bic.w	r2, r2, #16
 8004882:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d108      	bne.n	800489e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0204 	orr.w	r2, r2, #4
 800489a:	619a      	str	r2, [r3, #24]
 800489c:	e030      	b.n	8004900 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02c      	beq.n	8004900 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d020      	beq.n	80048f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0210 	orr.w	r2, r2, #16
 80048cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d114      	bne.n	8004900 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0220 	orr.w	r2, r2, #32
 80048e4:	619a      	str	r2, [r3, #24]
 80048e6:	e00b      	b.n	8004900 <HAL_FDCAN_Init+0x234>
 80048e8:	0800b4c0 	.word	0x0800b4c0
 80048ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0220 	orr.w	r2, r2, #32
 80048fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	3b01      	subs	r3, #1
 8004906:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	3b01      	subs	r3, #1
 800490e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004910:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004918:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	3b01      	subs	r3, #1
 8004922:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004928:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800492a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004934:	d115      	bne.n	8004962 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	3b01      	subs	r3, #1
 8004942:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004944:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	3b01      	subs	r3, #1
 800494c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800494e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	3b01      	subs	r3, #1
 8004958:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800495e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004960:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	4413      	add	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004996:	f023 0107 	bic.w	r1, r3, #7
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	3360      	adds	r3, #96	@ 0x60
 80049a2:	443b      	add	r3, r7
 80049a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049c2:	f023 0107 	bic.w	r1, r3, #7
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	3360      	adds	r3, #96	@ 0x60
 80049ce:	443b      	add	r3, r7
 80049d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d012      	beq.n	8004a0c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049ee:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	3360      	adds	r3, #96	@ 0x60
 80049fa:	443b      	add	r3, r7
 80049fc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a00:	011a      	lsls	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a1c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3360      	adds	r3, #96	@ 0x60
 8004a28:	443b      	add	r3, r7
 8004a2a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a11      	ldr	r2, [pc, #68]	@ (8004a84 <HAL_FDCAN_Init+0x3b8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d107      	bne.n	8004a54 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f022 0203 	bic.w	r2, r2, #3
 8004a52:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fde5 	bl	800563c <FDCAN_CalcultateRamBlockAddresses>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004a78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3760      	adds	r7, #96	@ 0x60
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	4000a000 	.word	0x4000a000

08004a88 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004a98:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d002      	beq.n	8004aa6 <HAL_FDCAN_ConfigFilter+0x1e>
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d157      	bne.n	8004b56 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d12b      	bne.n	8004b06 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b07      	cmp	r3, #7
 8004ab4:	d10d      	bne.n	8004ad2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004ac2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004ac8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004aca:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e00e      	b.n	8004af0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004ade:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004ae6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e025      	b.n	8004b52 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	075a      	lsls	r2, r3, #29
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d103      	bne.n	8004b24 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e006      	b.n	8004b32 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	079a      	lsls	r2, r3, #30
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e008      	b.n	8004b68 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b5c:	f043 0202 	orr.w	r2, r3, #2
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d111      	bne.n	8004bac <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e008      	b.n	8004bbe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d141      	bne.n	8004c66 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bea:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e038      	b.n	8004c78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e026      	b.n	8004c78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fe81 	bl	8005948 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c52:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004c56:	2201      	movs	r2, #1
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e008      	b.n	8004c78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c6c:	f043 0208 	orr.w	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b08b      	sub	sp, #44	@ 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004c98:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004c9a:	7efb      	ldrb	r3, [r7, #27]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f040 8149 	bne.w	8004f34 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d14c      	bne.n	8004d42 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004cb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e13c      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e12a      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10a      	bne.n	8004d18 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d0a:	0fdb      	lsrs	r3, r3, #31
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d34:	69f9      	ldr	r1, [r7, #28]
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	e068      	b.n	8004e14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b41      	cmp	r3, #65	@ 0x41
 8004d46:	d14c      	bne.n	8004de2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d50:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ec      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0da      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d10a      	bne.n	8004db8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004daa:	0fdb      	lsrs	r3, r3, #31
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de0:	e018      	b.n	8004e14 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d309      	bcc.n	8004e00 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0a2      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	fb01 f303 	mul.w	r3, r1, r3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d107      	bne.n	8004e38 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0c9b      	lsrs	r3, r3, #18
 8004e2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e005      	b.n	8004e44 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	3304      	adds	r3, #4
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0e1b      	lsrs	r3, r3, #24
 8004e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0fda      	lsrs	r2, r3, #31
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	3304      	adds	r3, #4
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	e00a      	b.n	8004ed0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	440b      	add	r3, r1
 8004ec6:	7812      	ldrb	r2, [r2, #0]
 8004ec8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004ed6:	5cd3      	ldrb	r3, [r2, r3]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d3ec      	bcc.n	8004eba <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d105      	bne.n	8004ef2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004ef0:	e01e      	b.n	8004f30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b41      	cmp	r3, #65	@ 0x41
 8004ef6:	d105      	bne.n	8004f04 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004f02:	e015      	b.n	8004f30 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b1f      	cmp	r3, #31
 8004f08:	d808      	bhi.n	8004f1c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2101      	movs	r1, #1
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	fa01 f202 	lsl.w	r2, r1, r2
 8004f16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004f1a:	e009      	b.n	8004f30 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 021f 	and.w	r2, r3, #31
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e008      	b.n	8004f46 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f3a:	f043 0208 	orr.w	r2, r3, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	372c      	adds	r7, #44	@ 0x2c
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	0800b51c 	.word	0x0800b51c

08004f58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d002      	beq.n	8004f78 <HAL_FDCAN_ActivateNotification+0x20>
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d155      	bne.n	8005024 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0201 	orr.w	r2, r2, #1
 8004f94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f96:	e014      	b.n	8004fc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d108      	bne.n	8004fba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0202 	orr.w	r2, r2, #2
 8004fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fb8:	e003      	b.n	8004fc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d009      	beq.n	8004fe0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <HAL_FDCAN_ActivateNotification+0xec>)
 8005008:	4013      	ands	r3, r2
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	430b      	orrs	r3, r1
 8005010:	6553      	str	r3, [r2, #84]	@ 0x54
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0f9b      	lsrs	r3, r3, #30
 800501a:	490b      	ldr	r1, [pc, #44]	@ (8005048 <HAL_FDCAN_ActivateNotification+0xf0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e008      	b.n	8005036 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800502a:	f043 0202 	orr.w	r2, r3, #2
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	3fcfffff 	.word	0x3fcfffff
 8005048:	4000a800 	.word	0x4000a800

0800504c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b096      	sub	sp, #88	@ 0x58
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005054:	4b95      	ldr	r3, [pc, #596]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	079b      	lsls	r3, r3, #30
 800505a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800505c:	4b93      	ldr	r3, [pc, #588]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	079b      	lsls	r3, r3, #30
 8005062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005064:	4013      	ands	r3, r2
 8005066:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005072:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800507c:	4013      	ands	r3, r2
 800507e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005094:	4013      	ands	r3, r2
 8005096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ac:	4013      	ands	r3, r2
 80050ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80050ba:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c4:	4013      	ands	r3, r2
 80050c6:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80050d2:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050dc:	4013      	ands	r3, r2
 80050de:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80050f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00f      	beq.n	800511a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800510c:	651a      	str	r2, [r3, #80]	@ 0x50
 800510e:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fa44 	bl	80055a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800511a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01c      	beq.n	800515e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005136:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005142:	4013      	ands	r3, r2
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800514e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005150:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005156:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9f9 	bl	8005550 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800515e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800516a:	4b51      	ldr	r3, [pc, #324]	@ (80052b0 <HAL_FDCAN_IRQHandler+0x264>)
 800516c:	400b      	ands	r3, r1
 800516e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005170:	4a4e      	ldr	r2, [pc, #312]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005174:	0f9b      	lsrs	r3, r3, #30
 8005176:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005178:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9b2 	bl	80054e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800518c:	4b48      	ldr	r3, [pc, #288]	@ (80052b0 <HAL_FDCAN_IRQHandler+0x264>)
 800518e:	400b      	ands	r3, r1
 8005190:	6513      	str	r3, [r2, #80]	@ 0x50
 8005192:	4a46      	ldr	r2, [pc, #280]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005196:	0f9b      	lsrs	r3, r3, #30
 8005198:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800519a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f9ac 	bl	80054fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80051a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80051ae:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <HAL_FDCAN_IRQHandler+0x264>)
 80051b0:	400b      	ands	r3, r1
 80051b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80051b4:	4a3d      	ldr	r2, [pc, #244]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 80051b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051b8:	0f9b      	lsrs	r3, r3, #30
 80051ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80051bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fab4 	bl	800172c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80051c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80051d0:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_FDCAN_IRQHandler+0x264>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80051d6:	4a35      	ldr	r2, [pc, #212]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 80051d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051da:	0f9b      	lsrs	r3, r3, #30
 80051dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80051de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f995 	bl	8005510 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80051e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00f      	beq.n	8005210 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50
 8005204:	4b29      	ldr	r3, [pc, #164]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f98b 	bl	8005526 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8005210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01c      	beq.n	8005254 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005220:	2b00      	cmp	r3, #0
 8005222:	d017      	beq.n	8005254 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800522c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005238:	4013      	ands	r3, r2
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005244:	651a      	str	r2, [r3, #80]	@ 0x50
 8005246:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800524c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f973 	bl	800553a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00f      	beq.n	800527e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005270:	651a      	str	r2, [r3, #80]	@ 0x50
 8005272:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f974 	bl	8005566 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800527e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800529a:	651a      	str	r2, [r3, #80]	@ 0x50
 800529c:	4b03      	ldr	r3, [pc, #12]	@ (80052ac <HAL_FDCAN_IRQHandler+0x260>)
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f969 	bl	800557a <HAL_FDCAN_TimestampWraparoundCallback>
 80052a8:	e004      	b.n	80052b4 <HAL_FDCAN_IRQHandler+0x268>
 80052aa:	bf00      	nop
 80052ac:	4000a800 	.word	0x4000a800
 80052b0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80052b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00f      	beq.n	80052de <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80052d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80052d2:	4b81      	ldr	r3, [pc, #516]	@ (80054d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f958 	bl	800558e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80052de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d014      	beq.n	8005312 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80052e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00f      	beq.n	8005312 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80052fc:	4b76      	ldr	r3, [pc, #472]	@ (80054d8 <HAL_FDCAN_IRQHandler+0x48c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005308:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531e:	4b6f      	ldr	r3, [pc, #444]	@ (80054dc <HAL_FDCAN_IRQHandler+0x490>)
 8005320:	400b      	ands	r3, r1
 8005322:	6513      	str	r3, [r2, #80]	@ 0x50
 8005324:	4a6c      	ldr	r2, [pc, #432]	@ (80054d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005328:	0f9b      	lsrs	r3, r3, #30
 800532a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800532c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f94b 	bl	80055ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005340:	4b66      	ldr	r3, [pc, #408]	@ (80054dc <HAL_FDCAN_IRQHandler+0x490>)
 8005342:	400b      	ands	r3, r1
 8005344:	6513      	str	r3, [r2, #80]	@ 0x50
 8005346:	4a64      	ldr	r2, [pc, #400]	@ (80054d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8005348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534a:	0f9b      	lsrs	r3, r3, #30
 800534c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a5f      	ldr	r2, [pc, #380]	@ (80054e0 <HAL_FDCAN_IRQHandler+0x494>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 80aa 	bne.w	80054be <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80a2 	beq.w	80054be <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800538e:	4013      	ands	r3, r2
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800539c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a6:	4013      	ands	r3, r2
 80053a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	4013      	ands	r3, r2
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80053cc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	4013      	ands	r3, r2
 80053d8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80053e4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4013      	ands	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800540e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8e4 	bl	80055e0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005424:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8e4 	bl	80055f6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d019      	beq.n	800546c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d014      	beq.n	800546c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b29b      	uxth	r3, r3
 800544c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005458:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2240      	movs	r2, #64	@ 0x40
 8005460:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	6939      	ldr	r1, [r7, #16]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8d0 	bl	800560c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005478:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800547a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8d1 	bl	8005624 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f874 	bl	80055b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80054ce:	bf00      	nop
 80054d0:	3758      	adds	r7, #88	@ 0x58
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	4000a800 	.word	0x4000a800
 80054dc:	3fcfffff 	.word	0x3fcfffff
 80054e0:	4000a000 	.word	0x4000a000

080054e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005648:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005652:	4ba7      	ldr	r3, [pc, #668]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005654:	4013      	ands	r3, r2
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0091      	lsls	r1, r2, #2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	430b      	orrs	r3, r1
 8005660:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	041a      	lsls	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4413      	add	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005692:	4b97      	ldr	r3, [pc, #604]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005694:	4013      	ands	r3, r2
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0091      	lsls	r1, r2, #2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	430b      	orrs	r3, r1
 80056a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	041a      	lsls	r2, r3, #16
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80056d4:	4b86      	ldr	r3, [pc, #536]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	0091      	lsls	r1, r2, #2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056ee:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	041a      	lsls	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800571c:	4b74      	ldr	r3, [pc, #464]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	0091      	lsls	r1, r2, #2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	430b      	orrs	r3, r1
 800572a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005736:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573e:	041a      	lsls	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	4413      	add	r3, r2
 800575a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005764:	4b62      	ldr	r3, [pc, #392]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	0091      	lsls	r1, r2, #2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430b      	orrs	r3, r1
 8005772:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005790:	4b57      	ldr	r3, [pc, #348]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	0091      	lsls	r1, r2, #2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057aa:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	041a      	lsls	r2, r3, #16
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	4413      	add	r3, r2
 80057c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80057d2:	4b47      	ldr	r3, [pc, #284]	@ (80058f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0091      	lsls	r1, r2, #2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	430b      	orrs	r3, r1
 80057e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80057ec:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	041a      	lsls	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005808:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005810:	061a      	lsls	r2, r3, #24
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005820:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005822:	4413      	add	r3, r2
 8005824:	009a      	lsls	r2, r3, #2
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800588c:	441a      	add	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	441a      	add	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	4a04      	ldr	r2, [pc, #16]	@ (80058f8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d915      	bls.n	8005918 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80058ec:	e006      	b.n	80058fc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80058ee:	bf00      	nop
 80058f0:	ffff0003 	.word	0xffff0003
 80058f4:	10002b00 	.word	0x10002b00
 80058f8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e010      	b.n	800593a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e005      	b.n	800592c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3304      	adds	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	429a      	cmp	r2, r3
 8005936:	d3f3      	bcc.n	8005920 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop

08005948 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	@ 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005966:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800596e:	4313      	orrs	r3, r2
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	e00a      	b.n	800598a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800597c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005982:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005988:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005994:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800599a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80059a0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3304      	adds	r3, #4
 80059cc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	3304      	adds	r3, #4
 80059d8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e020      	b.n	8005a22 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3303      	adds	r3, #3
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3302      	adds	r3, #2
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	440b      	add	r3, r1
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80059f8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	440b      	add	r3, r1
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005a06:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005a10:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4a06      	ldr	r2, [pc, #24]	@ (8005a40 <FDCAN_CopyMessageToRAM+0xf8>)
 8005a28:	5cd3      	ldrb	r3, [r2, r3]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d3d6      	bcc.n	80059e0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	3724      	adds	r7, #36	@ 0x24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	0800b51c 	.word	0x0800b51c

08005a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b089      	sub	sp, #36	@ 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a52:	4b86      	ldr	r3, [pc, #536]	@ (8005c6c <HAL_GPIO_Init+0x228>)
 8005a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a56:	e18c      	b.n	8005d72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 817e 	beq.w	8005d6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d005      	beq.n	8005a88 <HAL_GPIO_Init+0x44>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d130      	bne.n	8005aea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	2203      	movs	r2, #3
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005abe:	2201      	movs	r2, #1
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	f003 0201 	and.w	r2, r3, #1
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d017      	beq.n	8005b26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	2203      	movs	r2, #3
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d123      	bne.n	8005b7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	08da      	lsrs	r2, r3, #3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3208      	adds	r2, #8
 8005b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	220f      	movs	r2, #15
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	08da      	lsrs	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3208      	adds	r2, #8
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	2203      	movs	r2, #3
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0203 	and.w	r2, r3, #3
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80d8 	beq.w	8005d6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <HAL_GPIO_Init+0x22c>)
 8005bbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c70 <HAL_GPIO_Init+0x22c>)
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005bcc:	4b28      	ldr	r3, [pc, #160]	@ (8005c70 <HAL_GPIO_Init+0x22c>)
 8005bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bda:	4a26      	ldr	r2, [pc, #152]	@ (8005c74 <HAL_GPIO_Init+0x230>)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	3302      	adds	r3, #2
 8005be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <HAL_GPIO_Init+0x234>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <HAL_GPIO_Init+0x258>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	@ (8005c7c <HAL_GPIO_Init+0x238>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02b      	beq.n	8005c66 <HAL_GPIO_Init+0x222>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <HAL_GPIO_Init+0x23c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d025      	beq.n	8005c62 <HAL_GPIO_Init+0x21e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1a      	ldr	r2, [pc, #104]	@ (8005c84 <HAL_GPIO_Init+0x240>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01f      	beq.n	8005c5e <HAL_GPIO_Init+0x21a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <HAL_GPIO_Init+0x244>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d019      	beq.n	8005c5a <HAL_GPIO_Init+0x216>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <HAL_GPIO_Init+0x248>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <HAL_GPIO_Init+0x24c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00d      	beq.n	8005c52 <HAL_GPIO_Init+0x20e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <HAL_GPIO_Init+0x250>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <HAL_GPIO_Init+0x20a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a15      	ldr	r2, [pc, #84]	@ (8005c98 <HAL_GPIO_Init+0x254>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_GPIO_Init+0x206>
 8005c46:	2309      	movs	r3, #9
 8005c48:	e029      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c4a:	230a      	movs	r3, #10
 8005c4c:	e027      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c4e:	2307      	movs	r3, #7
 8005c50:	e025      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c52:	2306      	movs	r3, #6
 8005c54:	e023      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c56:	2305      	movs	r3, #5
 8005c58:	e021      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c5a:	2304      	movs	r3, #4
 8005c5c:	e01f      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e01d      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e01b      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e019      	b.n	8005c9e <HAL_GPIO_Init+0x25a>
 8005c6a:	bf00      	nop
 8005c6c:	58000080 	.word	0x58000080
 8005c70:	58024400 	.word	0x58024400
 8005c74:	58000400 	.word	0x58000400
 8005c78:	58020000 	.word	0x58020000
 8005c7c:	58020400 	.word	0x58020400
 8005c80:	58020800 	.word	0x58020800
 8005c84:	58020c00 	.word	0x58020c00
 8005c88:	58021000 	.word	0x58021000
 8005c8c:	58021400 	.word	0x58021400
 8005c90:	58021800 	.word	0x58021800
 8005c94:	58021c00 	.word	0x58021c00
 8005c98:	58022400 	.word	0x58022400
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	f002 0203 	and.w	r2, r2, #3
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	4093      	lsls	r3, r2
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cae:	4938      	ldr	r1, [pc, #224]	@ (8005d90 <HAL_GPIO_Init+0x34c>)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f47f ae6b 	bne.w	8005a58 <HAL_GPIO_Init+0x14>
  }
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	3724      	adds	r7, #36	@ 0x24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	58000400 	.word	0x58000400

08005d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	887b      	ldrh	r3, [r7, #2]
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e001      	b.n	8005db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	807b      	strh	r3, [r7, #2]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dd4:	787b      	ldrb	r3, [r7, #1]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dda:	887a      	ldrh	r2, [r7, #2]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005de0:	e003      	b.n	8005dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005de2:	887b      	ldrh	r3, [r7, #2]
 8005de4:	041a      	lsls	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	619a      	str	r2, [r3, #24]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e00:	4b19      	ldr	r3, [pc, #100]	@ (8005e68 <HAL_PWREx_ConfigSupply+0x70>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d00a      	beq.n	8005e22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e0c:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <HAL_PWREx_ConfigSupply+0x70>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d001      	beq.n	8005e1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e01f      	b.n	8005e5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e01d      	b.n	8005e5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005e22:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <HAL_PWREx_ConfigSupply+0x70>)
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f023 0207 	bic.w	r2, r3, #7
 8005e2a:	490f      	ldr	r1, [pc, #60]	@ (8005e68 <HAL_PWREx_ConfigSupply+0x70>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e32:	f7fc fb6f 	bl	8002514 <HAL_GetTick>
 8005e36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e38:	e009      	b.n	8005e4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e3a:	f7fc fb6b 	bl	8002514 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e48:	d901      	bls.n	8005e4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e007      	b.n	8005e5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e4e:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <HAL_PWREx_ConfigSupply+0x70>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5a:	d1ee      	bne.n	8005e3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	58024800 	.word	0x58024800

08005e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	@ 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e3c8      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8087 	beq.w	8005f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8c:	4b88      	ldr	r3, [pc, #544]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e96:	4b86      	ldr	r3, [pc, #536]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	2b10      	cmp	r3, #16
 8005ea0:	d007      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x46>
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	2b18      	cmp	r3, #24
 8005ea6:	d110      	bne.n	8005eca <HAL_RCC_OscConfig+0x5e>
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d10b      	bne.n	8005eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d06c      	beq.n	8005f98 <HAL_RCC_OscConfig+0x12c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d168      	bne.n	8005f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e3a2      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x76>
 8005ed4:	4b76      	ldr	r3, [pc, #472]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a75      	ldr	r2, [pc, #468]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e02e      	b.n	8005f40 <HAL_RCC_OscConfig+0xd4>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10c      	bne.n	8005f04 <HAL_RCC_OscConfig+0x98>
 8005eea:	4b71      	ldr	r3, [pc, #452]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a70      	ldr	r2, [pc, #448]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a6d      	ldr	r2, [pc, #436]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005efc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e01d      	b.n	8005f40 <HAL_RCC_OscConfig+0xd4>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f0c:	d10c      	bne.n	8005f28 <HAL_RCC_OscConfig+0xbc>
 8005f0e:	4b68      	ldr	r3, [pc, #416]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a67      	ldr	r2, [pc, #412]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	4b65      	ldr	r3, [pc, #404]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a64      	ldr	r2, [pc, #400]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e00b      	b.n	8005f40 <HAL_RCC_OscConfig+0xd4>
 8005f28:	4b61      	ldr	r3, [pc, #388]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a60      	ldr	r2, [pc, #384]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b5e      	ldr	r3, [pc, #376]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5d      	ldr	r2, [pc, #372]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d013      	beq.n	8005f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fc fae4 	bl	8002514 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f50:	f7fc fae0 	bl	8002514 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b64      	cmp	r3, #100	@ 0x64
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e356      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f62:	4b53      	ldr	r3, [pc, #332]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0f0      	beq.n	8005f50 <HAL_RCC_OscConfig+0xe4>
 8005f6e:	e014      	b.n	8005f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fc fad0 	bl	8002514 <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f78:	f7fc facc 	bl	8002514 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b64      	cmp	r3, #100	@ 0x64
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e342      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f8a:	4b49      	ldr	r3, [pc, #292]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x10c>
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 808c 	beq.w	80060c0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa8:	4b41      	ldr	r3, [pc, #260]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <HAL_RCC_OscConfig+0x162>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	d137      	bne.n	8006034 <HAL_RCC_OscConfig+0x1c8>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d132      	bne.n	8006034 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fce:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x17a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e314      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fe6:	4b32      	ldr	r3, [pc, #200]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 0219 	bic.w	r2, r3, #25
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	492f      	ldr	r1, [pc, #188]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fc fa8c 	bl	8002514 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006000:	f7fc fa88 	bl	8002514 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e2fe      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006012:	4b27      	ldr	r3, [pc, #156]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601e:	4b24      	ldr	r3, [pc, #144]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	061b      	lsls	r3, r3, #24
 800602c:	4920      	ldr	r1, [pc, #128]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 800602e:	4313      	orrs	r3, r2
 8006030:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006032:	e045      	b.n	80060c0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d026      	beq.n	800608a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800603c:	4b1c      	ldr	r3, [pc, #112]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f023 0219 	bic.w	r2, r3, #25
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4919      	ldr	r1, [pc, #100]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 800604a:	4313      	orrs	r3, r2
 800604c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604e:	f7fc fa61 	bl	8002514 <HAL_GetTick>
 8006052:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006056:	f7fc fa5d 	bl	8002514 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e2d3      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006068:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006074:	4b0e      	ldr	r3, [pc, #56]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	490b      	ldr	r1, [pc, #44]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
 8006088:	e01a      	b.n	80060c0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a08      	ldr	r2, [pc, #32]	@ (80060b0 <HAL_RCC_OscConfig+0x244>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7fc fa3d 	bl	8002514 <HAL_GetTick>
 800609a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800609c:	e00a      	b.n	80060b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800609e:	f7fc fa39 	bl	8002514 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d903      	bls.n	80060b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e2af      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
 80060b0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060b4:	4b96      	ldr	r3, [pc, #600]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ee      	bne.n	800609e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d06a      	beq.n	80061a2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060cc:	4b90      	ldr	r3, [pc, #576]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060d6:	4b8e      	ldr	r3, [pc, #568]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d007      	beq.n	80060f2 <HAL_RCC_OscConfig+0x286>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b18      	cmp	r3, #24
 80060e6:	d11b      	bne.n	8006120 <HAL_RCC_OscConfig+0x2b4>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d116      	bne.n	8006120 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f2:	4b87      	ldr	r3, [pc, #540]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <HAL_RCC_OscConfig+0x29e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d001      	beq.n	800610a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e282      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800610a:	4b81      	ldr	r3, [pc, #516]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	061b      	lsls	r3, r3, #24
 8006118:	497d      	ldr	r1, [pc, #500]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800611a:	4313      	orrs	r3, r2
 800611c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800611e:	e040      	b.n	80061a2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d023      	beq.n	8006170 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006128:	4b79      	ldr	r3, [pc, #484]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a78      	ldr	r2, [pc, #480]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800612e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fc f9ee 	bl	8002514 <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800613c:	f7fc f9ea 	bl	8002514 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e260      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800614e:	4b70      	ldr	r3, [pc, #448]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800615a:	4b6d      	ldr	r3, [pc, #436]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	061b      	lsls	r3, r3, #24
 8006168:	4969      	ldr	r1, [pc, #420]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800616a:	4313      	orrs	r3, r2
 800616c:	60cb      	str	r3, [r1, #12]
 800616e:	e018      	b.n	80061a2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006170:	4b67      	ldr	r3, [pc, #412]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a66      	ldr	r2, [pc, #408]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fc f9ca 	bl	8002514 <HAL_GetTick>
 8006180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006184:	f7fc f9c6 	bl	8002514 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e23c      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006196:	4b5e      	ldr	r3, [pc, #376]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d036      	beq.n	800621c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d019      	beq.n	80061ea <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b6:	4b56      	ldr	r3, [pc, #344]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80061b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ba:	4a55      	ldr	r2, [pc, #340]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fc f9a7 	bl	8002514 <HAL_GetTick>
 80061c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ca:	f7fc f9a3 	bl	8002514 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e219      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80061de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x35e>
 80061e8:	e018      	b.n	800621c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ea:	4b49      	ldr	r3, [pc, #292]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80061ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ee:	4a48      	ldr	r2, [pc, #288]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f6:	f7fc f98d 	bl	8002514 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fe:	f7fc f989 	bl	8002514 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e1ff      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006210:	4b3f      	ldr	r3, [pc, #252]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d036      	beq.n	8006296 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d019      	beq.n	8006264 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006230:	4b37      	ldr	r3, [pc, #220]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a36      	ldr	r2, [pc, #216]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006236:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800623a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800623c:	f7fc f96a 	bl	8002514 <HAL_GetTick>
 8006240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006244:	f7fc f966 	bl	8002514 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1dc      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006256:	4b2e      	ldr	r3, [pc, #184]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x3d8>
 8006262:	e018      	b.n	8006296 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006264:	4b2a      	ldr	r3, [pc, #168]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a29      	ldr	r2, [pc, #164]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800626a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800626e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006270:	f7fc f950 	bl	8002514 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006278:	f7fc f94c 	bl	8002514 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1c2      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800628a:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8086 	beq.w	80063b0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006314 <HAL_RCC_OscConfig+0x4a8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006314 <HAL_RCC_OscConfig+0x4a8>)
 80062aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062b0:	f7fc f930 	bl	8002514 <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b8:	f7fc f92c 	bl	8002514 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	@ 0x64
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e1a2      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ca:	4b12      	ldr	r3, [pc, #72]	@ (8006314 <HAL_RCC_OscConfig+0x4a8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x480>
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ea:	e032      	b.n	8006352 <HAL_RCC_OscConfig+0x4e6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <HAL_RCC_OscConfig+0x4ac>
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f8:	4a05      	ldr	r2, [pc, #20]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006300:	4b03      	ldr	r3, [pc, #12]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	4a02      	ldr	r2, [pc, #8]	@ (8006310 <HAL_RCC_OscConfig+0x4a4>)
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	@ 0x70
 800630c:	e021      	b.n	8006352 <HAL_RCC_OscConfig+0x4e6>
 800630e:	bf00      	nop
 8006310:	58024400 	.word	0x58024400
 8006314:	58024800 	.word	0x58024800
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b05      	cmp	r3, #5
 800631e:	d10c      	bne.n	800633a <HAL_RCC_OscConfig+0x4ce>
 8006320:	4b83      	ldr	r3, [pc, #524]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	4a82      	ldr	r2, [pc, #520]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006326:	f043 0304 	orr.w	r3, r3, #4
 800632a:	6713      	str	r3, [r2, #112]	@ 0x70
 800632c:	4b80      	ldr	r3, [pc, #512]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	4a7f      	ldr	r2, [pc, #508]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6713      	str	r3, [r2, #112]	@ 0x70
 8006338:	e00b      	b.n	8006352 <HAL_RCC_OscConfig+0x4e6>
 800633a:	4b7d      	ldr	r3, [pc, #500]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633e:	4a7c      	ldr	r2, [pc, #496]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	6713      	str	r3, [r2, #112]	@ 0x70
 8006346:	4b7a      	ldr	r3, [pc, #488]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634a:	4a79      	ldr	r2, [pc, #484]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800634c:	f023 0304 	bic.w	r3, r3, #4
 8006350:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d015      	beq.n	8006386 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635a:	f7fc f8db 	bl	8002514 <HAL_GetTick>
 800635e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006360:	e00a      	b.n	8006378 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f7fc f8d7 	bl	8002514 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006370:	4293      	cmp	r3, r2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e14b      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006378:	4b6d      	ldr	r3, [pc, #436]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ee      	beq.n	8006362 <HAL_RCC_OscConfig+0x4f6>
 8006384:	e014      	b.n	80063b0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fc f8c5 	bl	8002514 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fc f8c1 	bl	8002514 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e135      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063a4:	4b62      	ldr	r3, [pc, #392]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ee      	bne.n	800638e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 812a 	beq.w	800660e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c2:	2b18      	cmp	r3, #24
 80063c4:	f000 80ba 	beq.w	800653c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 8095 	bne.w	80064fc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b57      	ldr	r3, [pc, #348]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a56      	ldr	r2, [pc, #344]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80063d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fc f899 	bl	8002514 <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fc f895 	bl	8002514 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e10b      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006404:	4b4a      	ldr	r3, [pc, #296]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006408:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <HAL_RCC_OscConfig+0x6c8>)
 800640a:	4013      	ands	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006414:	0112      	lsls	r2, r2, #4
 8006416:	430a      	orrs	r2, r1
 8006418:	4945      	ldr	r1, [pc, #276]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800641a:	4313      	orrs	r3, r2
 800641c:	628b      	str	r3, [r1, #40]	@ 0x28
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	3b01      	subs	r3, #1
 8006424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642c:	3b01      	subs	r3, #1
 800642e:	025b      	lsls	r3, r3, #9
 8006430:	b29b      	uxth	r3, r3
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	3b01      	subs	r3, #1
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	3b01      	subs	r3, #1
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800644e:	4938      	ldr	r1, [pc, #224]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006450:	4313      	orrs	r3, r2
 8006452:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006454:	4b36      	ldr	r3, [pc, #216]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	4a35      	ldr	r2, [pc, #212]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006460:	4b33      	ldr	r3, [pc, #204]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006464:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_OscConfig+0x6cc>)
 8006466:	4013      	ands	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800646c:	00d2      	lsls	r2, r2, #3
 800646e:	4930      	ldr	r1, [pc, #192]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006470:	4313      	orrs	r3, r2
 8006472:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006474:	4b2e      	ldr	r3, [pc, #184]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	f023 020c 	bic.w	r2, r3, #12
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	492b      	ldr	r1, [pc, #172]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006482:	4313      	orrs	r3, r2
 8006484:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006486:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	f023 0202 	bic.w	r2, r3, #2
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	4927      	ldr	r1, [pc, #156]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006494:	4313      	orrs	r3, r2
 8006496:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006498:	4b25      	ldr	r3, [pc, #148]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 800649e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a4:	4b22      	ldr	r3, [pc, #136]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4a21      	ldr	r2, [pc, #132]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c8:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a18      	ldr	r2, [pc, #96]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fc f81e 	bl	8002514 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fc f81a 	bl	8002514 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e090      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ee:	4b10      	ldr	r3, [pc, #64]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x670>
 80064fa:	e088      	b.n	800660e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fc f804 	bl	8002514 <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006510:	f7fc f800 	bl	8002514 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e076      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006522:	4b03      	ldr	r3, [pc, #12]	@ (8006530 <HAL_RCC_OscConfig+0x6c4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x6a4>
 800652e:	e06e      	b.n	800660e <HAL_RCC_OscConfig+0x7a2>
 8006530:	58024400 	.word	0x58024400
 8006534:	fffffc0c 	.word	0xfffffc0c
 8006538:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006542:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006546:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	2b01      	cmp	r3, #1
 800654e:	d031      	beq.n	80065b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f003 0203 	and.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d12a      	bne.n	80065b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d122      	bne.n	80065b4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006578:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d11a      	bne.n	80065b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800658c:	429a      	cmp	r2, r3
 800658e:	d111      	bne.n	80065b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800659e:	429a      	cmp	r2, r3
 80065a0:	d108      	bne.n	80065b4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0e1b      	lsrs	r3, r3, #24
 80065a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e02b      	b.n	8006610 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 80065ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065bc:	08db      	lsrs	r3, r3, #3
 80065be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d01f      	beq.n	800660e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065ce:	4b12      	ldr	r3, [pc, #72]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	4a11      	ldr	r2, [pc, #68]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065da:	f7fb ff9b 	bl	8002514 <HAL_GetTick>
 80065de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065e0:	bf00      	nop
 80065e2:	f7fb ff97 	bl	8002514 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d0f9      	beq.n	80065e2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 80065f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f2:	4b0a      	ldr	r3, [pc, #40]	@ (800661c <HAL_RCC_OscConfig+0x7b0>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065fa:	00d2      	lsls	r2, r2, #3
 80065fc:	4906      	ldr	r1, [pc, #24]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006602:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	4a04      	ldr	r2, [pc, #16]	@ (8006618 <HAL_RCC_OscConfig+0x7ac>)
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3730      	adds	r7, #48	@ 0x30
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	58024400 	.word	0x58024400
 800661c:	ffff0007 	.word	0xffff0007

08006620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e19c      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006634:	4b8a      	ldr	r3, [pc, #552]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d910      	bls.n	8006664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b87      	ldr	r3, [pc, #540]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 020f 	bic.w	r2, r3, #15
 800664a:	4985      	ldr	r1, [pc, #532]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006652:	4b83      	ldr	r3, [pc, #524]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d001      	beq.n	8006664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e184      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d010      	beq.n	8006692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	4b7b      	ldr	r3, [pc, #492]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800667c:	429a      	cmp	r2, r3
 800667e:	d908      	bls.n	8006692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006680:	4b78      	ldr	r3, [pc, #480]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	4975      	ldr	r1, [pc, #468]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800668e:	4313      	orrs	r3, r2
 8006690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d010      	beq.n	80066c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	4b70      	ldr	r3, [pc, #448]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d908      	bls.n	80066c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	496a      	ldr	r1, [pc, #424]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d010      	beq.n	80066ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	4b64      	ldr	r3, [pc, #400]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066d8:	429a      	cmp	r2, r3
 80066da:	d908      	bls.n	80066ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066dc:	4b61      	ldr	r3, [pc, #388]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	495e      	ldr	r1, [pc, #376]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	4b59      	ldr	r3, [pc, #356]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006706:	429a      	cmp	r2, r3
 8006708:	d908      	bls.n	800671c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800670a:	4b56      	ldr	r3, [pc, #344]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	4953      	ldr	r1, [pc, #332]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	4b4d      	ldr	r3, [pc, #308]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006738:	4b4a      	ldr	r3, [pc, #296]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f023 020f 	bic.w	r2, r3, #15
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4947      	ldr	r1, [pc, #284]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d055      	beq.n	8006802 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006756:	4b43      	ldr	r3, [pc, #268]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4940      	ldr	r1, [pc, #256]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006764:	4313      	orrs	r3, r2
 8006766:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d107      	bne.n	8006780 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006770:	4b3c      	ldr	r3, [pc, #240]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d121      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0f6      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d107      	bne.n	8006798 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006788:	4b36      	ldr	r3, [pc, #216]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d115      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0ea      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067a0:	4b30      	ldr	r3, [pc, #192]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0de      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067b0:	4b2c      	ldr	r3, [pc, #176]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e0d6      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c0:	4b28      	ldr	r3, [pc, #160]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f023 0207 	bic.w	r2, r3, #7
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4925      	ldr	r1, [pc, #148]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d2:	f7fb fe9f 	bl	8002514 <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067da:	f7fb fe9b 	bl	8002514 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0be      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	429a      	cmp	r2, r3
 8006800:	d1eb      	bne.n	80067da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d010      	beq.n	8006830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	4b14      	ldr	r3, [pc, #80]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	429a      	cmp	r2, r3
 800681c:	d208      	bcs.n	8006830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800681e:	4b11      	ldr	r3, [pc, #68]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f023 020f 	bic.w	r2, r3, #15
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	490e      	ldr	r1, [pc, #56]	@ (8006864 <HAL_RCC_ClockConfig+0x244>)
 800682c:	4313      	orrs	r3, r2
 800682e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d214      	bcs.n	8006868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683e:	4b08      	ldr	r3, [pc, #32]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 020f 	bic.w	r2, r3, #15
 8006846:	4906      	ldr	r1, [pc, #24]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <HAL_RCC_ClockConfig+0x240>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d005      	beq.n	8006868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e086      	b.n	800696e <HAL_RCC_ClockConfig+0x34e>
 8006860:	52002000 	.word	0x52002000
 8006864:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d010      	beq.n	8006896 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	4b3f      	ldr	r3, [pc, #252]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006880:	429a      	cmp	r2, r3
 8006882:	d208      	bcs.n	8006896 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006884:	4b3c      	ldr	r3, [pc, #240]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4939      	ldr	r1, [pc, #228]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006892:	4313      	orrs	r3, r2
 8006894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d208      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	492e      	ldr	r1, [pc, #184]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699a      	ldr	r2, [r3, #24]
 80068d4:	4b28      	ldr	r3, [pc, #160]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068dc:	429a      	cmp	r2, r3
 80068de:	d208      	bcs.n	80068f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068e0:	4b25      	ldr	r3, [pc, #148]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	4922      	ldr	r1, [pc, #136]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	4b1d      	ldr	r3, [pc, #116]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800690e:	4b1a      	ldr	r3, [pc, #104]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4917      	ldr	r1, [pc, #92]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 800691c:	4313      	orrs	r3, r2
 800691e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006920:	f000 f834 	bl	800698c <HAL_RCC_GetSysClockFreq>
 8006924:	4602      	mov	r2, r0
 8006926:	4b14      	ldr	r3, [pc, #80]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	0a1b      	lsrs	r3, r3, #8
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	4912      	ldr	r1, [pc, #72]	@ (800697c <HAL_RCC_ClockConfig+0x35c>)
 8006932:	5ccb      	ldrb	r3, [r1, r3]
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
 800693c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800693e:	4b0e      	ldr	r3, [pc, #56]	@ (8006978 <HAL_RCC_ClockConfig+0x358>)
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	4a0d      	ldr	r2, [pc, #52]	@ (800697c <HAL_RCC_ClockConfig+0x35c>)
 8006948:	5cd3      	ldrb	r3, [r2, r3]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
 8006954:	4a0a      	ldr	r2, [pc, #40]	@ (8006980 <HAL_RCC_ClockConfig+0x360>)
 8006956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006958:	4a0a      	ldr	r2, [pc, #40]	@ (8006984 <HAL_RCC_ClockConfig+0x364>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800695e:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <HAL_RCC_ClockConfig+0x368>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f7fb fd8c 	bl	8002480 <HAL_InitTick>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
 800697c:	0800b50c 	.word	0x0800b50c
 8006980:	2400000c 	.word	0x2400000c
 8006984:	24000008 	.word	0x24000008
 8006988:	24000010 	.word	0x24000010

0800698c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800698c:	b480      	push	{r7}
 800698e:	b089      	sub	sp, #36	@ 0x24
 8006990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006992:	4bb3      	ldr	r3, [pc, #716]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800699a:	2b18      	cmp	r3, #24
 800699c:	f200 8155 	bhi.w	8006c4a <HAL_RCC_GetSysClockFreq+0x2be>
 80069a0:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006c4b 	.word	0x08006c4b
 80069b0:	08006c4b 	.word	0x08006c4b
 80069b4:	08006c4b 	.word	0x08006c4b
 80069b8:	08006c4b 	.word	0x08006c4b
 80069bc:	08006c4b 	.word	0x08006c4b
 80069c0:	08006c4b 	.word	0x08006c4b
 80069c4:	08006c4b 	.word	0x08006c4b
 80069c8:	08006a33 	.word	0x08006a33
 80069cc:	08006c4b 	.word	0x08006c4b
 80069d0:	08006c4b 	.word	0x08006c4b
 80069d4:	08006c4b 	.word	0x08006c4b
 80069d8:	08006c4b 	.word	0x08006c4b
 80069dc:	08006c4b 	.word	0x08006c4b
 80069e0:	08006c4b 	.word	0x08006c4b
 80069e4:	08006c4b 	.word	0x08006c4b
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006c4b 	.word	0x08006c4b
 80069f0:	08006c4b 	.word	0x08006c4b
 80069f4:	08006c4b 	.word	0x08006c4b
 80069f8:	08006c4b 	.word	0x08006c4b
 80069fc:	08006c4b 	.word	0x08006c4b
 8006a00:	08006c4b 	.word	0x08006c4b
 8006a04:	08006c4b 	.word	0x08006c4b
 8006a08:	08006a3f 	.word	0x08006a3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a0c:	4b94      	ldr	r3, [pc, #592]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a18:	4b91      	ldr	r3, [pc, #580]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	08db      	lsrs	r3, r3, #3
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	4a90      	ldr	r2, [pc, #576]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
 8006a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a2a:	e111      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a2e:	61bb      	str	r3, [r7, #24]
      break;
 8006a30:	e10e      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a32:	4b8d      	ldr	r3, [pc, #564]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a34:	61bb      	str	r3, [r7, #24]
      break;
 8006a36:	e10b      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a38:	4b8c      	ldr	r3, [pc, #560]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a3a:	61bb      	str	r3, [r7, #24]
      break;
 8006a3c:	e108      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a3e:	4b88      	ldr	r3, [pc, #544]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a48:	4b85      	ldr	r3, [pc, #532]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a54:	4b82      	ldr	r3, [pc, #520]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a5e:	4b80      	ldr	r3, [pc, #512]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	08db      	lsrs	r3, r3, #3
 8006a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80e1 	beq.w	8006c44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f000 8083 	beq.w	8006b90 <HAL_RCC_GetSysClockFreq+0x204>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	f200 80a1 	bhi.w	8006bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d056      	beq.n	8006b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a9e:	e099      	b.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02d      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aac:	4b6c      	ldr	r3, [pc, #432]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	08db      	lsrs	r3, r3, #3
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b62      	ldr	r3, [pc, #392]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b06:	e087      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b51      	ldr	r3, [pc, #324]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b4a:	e065      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b40      	ldr	r3, [pc, #256]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b8e:	e043      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bd2:	e021      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c18:	4b11      	ldr	r3, [pc, #68]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1c:	0a5b      	lsrs	r3, r3, #9
 8006c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c22:	3301      	adds	r3, #1
 8006c24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3c:	ee17 3a90 	vmov	r3, s15
 8006c40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c42:	e005      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61bb      	str	r3, [r7, #24]
      break;
 8006c48:	e002      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c4a:	4b07      	ldr	r3, [pc, #28]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c4c:	61bb      	str	r3, [r7, #24]
      break;
 8006c4e:	bf00      	nop
  }

  return sysclockfreq;
 8006c50:	69bb      	ldr	r3, [r7, #24]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3724      	adds	r7, #36	@ 0x24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	58024400 	.word	0x58024400
 8006c64:	03d09000 	.word	0x03d09000
 8006c68:	003d0900 	.word	0x003d0900
 8006c6c:	016e3600 	.word	0x016e3600
 8006c70:	46000000 	.word	0x46000000
 8006c74:	4c742400 	.word	0x4c742400
 8006c78:	4a742400 	.word	0x4a742400
 8006c7c:	4bb71b00 	.word	0x4bb71b00

08006c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c86:	f7ff fe81 	bl	800698c <HAL_RCC_GetSysClockFreq>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	4b10      	ldr	r3, [pc, #64]	@ (8006cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	490f      	ldr	r1, [pc, #60]	@ (8006cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c98:	5ccb      	ldrb	r3, [r1, r3]
 8006c9a:	f003 031f 	and.w	r3, r3, #31
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	4a09      	ldr	r2, [pc, #36]	@ (8006cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cae:	5cd3      	ldrb	r3, [r2, r3]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cba:	4a07      	ldr	r2, [pc, #28]	@ (8006cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cbe:	4a07      	ldr	r2, [pc, #28]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cc4:	4b04      	ldr	r3, [pc, #16]	@ (8006cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	0800b50c 	.word	0x0800b50c
 8006cd8:	2400000c 	.word	0x2400000c
 8006cdc:	24000008 	.word	0x24000008

08006ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ce4:	f7ff ffcc 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	4904      	ldr	r1, [pc, #16]	@ (8006d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cf6:	5ccb      	ldrb	r3, [r1, r3]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	58024400 	.word	0x58024400
 8006d08:	0800b50c 	.word	0x0800b50c

08006d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d10:	f7ff ffb6 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4904      	ldr	r1, [pc, #16]	@ (8006d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	58024400 	.word	0x58024400
 8006d34:	0800b50c 	.word	0x0800b50c

08006d38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d3c:	b0c6      	sub	sp, #280	@ 0x118
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	ea54 0305 	orrs.w	r3, r4, r5
 8006d62:	d049      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d6e:	d02f      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d74:	d828      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d7a:	d01a      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d80:	d822      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d8a:	d007      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d8c:	e01c      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d8e:	4bab      	ldr	r3, [pc, #684]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d92:	4aaa      	ldr	r2, [pc, #680]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d9a:	e01a      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	3308      	adds	r3, #8
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 fa49 	bl	800923c <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006db0:	e00f      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db6:	3328      	adds	r3, #40	@ 0x28
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 faf0 	bl	80093a0 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dc6:	e004      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dce:	e000      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dda:	4b98      	ldr	r3, [pc, #608]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006de8:	4a94      	ldr	r2, [pc, #592]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e04:	f04f 0900 	mov.w	r9, #0
 8006e08:	ea58 0309 	orrs.w	r3, r8, r9
 8006e0c:	d047      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d82a      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e18:	a201      	add	r2, pc, #4	@ (adr r2, 8006e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e35 	.word	0x08006e35
 8006e24:	08006e43 	.word	0x08006e43
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e77 	.word	0x08006e77
 8006e30:	08006e77 	.word	0x08006e77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e34:	4b81      	ldr	r3, [pc, #516]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	4a80      	ldr	r2, [pc, #512]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e40:	e01a      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	3308      	adds	r3, #8
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 f9f6 	bl	800923c <RCCEx_PLL2_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e56:	e00f      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	3328      	adds	r3, #40	@ 0x28
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f002 fa9d 	bl	80093a0 <RCCEx_PLL3_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e6c:	e004      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e74:	e000      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e80:	4b6e      	ldr	r3, [pc, #440]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e84:	f023 0107 	bic.w	r1, r3, #7
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e94:	e003      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006eaa:	f04f 0b00 	mov.w	fp, #0
 8006eae:	ea5a 030b 	orrs.w	r3, sl, fp
 8006eb2:	d05b      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ebc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ec0:	d03b      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ec2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ec6:	d834      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ecc:	d037      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ed2:	d82e      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ed4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ed8:	d033      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006eda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ede:	d828      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee4:	d01a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eea:	d822      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006ef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ef4:	d007      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006ef6:	e01c      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef8:	4b50      	ldr	r3, [pc, #320]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	4a4f      	ldr	r2, [pc, #316]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f04:	e01e      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 f994 	bl	800923c <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f1a:	e013      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	3328      	adds	r3, #40	@ 0x28
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f002 fa3b 	bl	80093a0 <RCCEx_PLL3_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f30:	e008      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f38:	e004      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f50:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f5c:	4a37      	ldr	r2, [pc, #220]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f62:	e003      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f86:	460b      	mov	r3, r1
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	d05d      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f94:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006f98:	d03b      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006f9a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006f9e:	d834      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fa4:	d037      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006fa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006faa:	d82e      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fb0:	d033      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006fb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fb6:	d828      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fbc:	d01a      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006fbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fc2:	d822      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fcc:	d007      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006fce:	e01c      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4a19      	ldr	r2, [pc, #100]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fdc:	e01e      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	3308      	adds	r3, #8
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 f928 	bl	800923c <RCCEx_PLL2_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ff2:	e013      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff8:	3328      	adds	r3, #40	@ 0x28
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f002 f9cf 	bl	80093a0 <RCCEx_PLL3_Config>
 8007002:	4603      	mov	r3, r0
 8007004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007008:	e008      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007010:	e004      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800701a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007024:	4b05      	ldr	r3, [pc, #20]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007028:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007034:	4a01      	ldr	r2, [pc, #4]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007036:	430b      	orrs	r3, r1
 8007038:	6593      	str	r3, [r2, #88]	@ 0x58
 800703a:	e005      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800703c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007054:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800705e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d03a      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706e:	2b30      	cmp	r3, #48	@ 0x30
 8007070:	d01f      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007072:	2b30      	cmp	r3, #48	@ 0x30
 8007074:	d819      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d00c      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800707a:	2b20      	cmp	r3, #32
 800707c:	d815      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d019      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007082:	2b10      	cmp	r3, #16
 8007084:	d111      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007086:	4baa      	ldr	r3, [pc, #680]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4aa9      	ldr	r2, [pc, #676]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800708c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007092:	e011      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	3308      	adds	r3, #8
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f002 f8cd 	bl	800923c <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80070a8:	e006      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80070b2:	bf00      	nop
 80070b4:	e000      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80070b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80070c0:	4b9b      	ldr	r3, [pc, #620]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ce:	4a98      	ldr	r2, [pc, #608]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80070ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80070f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d051      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80070fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007108:	d035      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800710a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800710e:	d82e      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007110:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007114:	d031      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007116:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800711a:	d828      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800711c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007120:	d01a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007126:	d822      	bhi.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800712c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007130:	d007      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007132:	e01c      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007134:	4b7e      	ldr	r3, [pc, #504]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007138:	4a7d      	ldr	r2, [pc, #500]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800713a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800713e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007140:	e01c      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007146:	3308      	adds	r3, #8
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f002 f876 	bl	800923c <RCCEx_PLL2_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007156:	e011      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	3328      	adds	r3, #40	@ 0x28
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f002 f91d 	bl	80093a0 <RCCEx_PLL3_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800716c:	e006      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800717a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007184:	4b6a      	ldr	r3, [pc, #424]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007188:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007192:	4a67      	ldr	r2, [pc, #412]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007194:	430b      	orrs	r3, r1
 8007196:	6513      	str	r3, [r2, #80]	@ 0x50
 8007198:	e003      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800719e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071b8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80071bc:	460b      	mov	r3, r1
 80071be:	4313      	orrs	r3, r2
 80071c0:	d053      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071cc:	d033      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80071ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071d2:	d82c      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071d8:	d02f      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80071da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071de:	d826      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071e4:	d02b      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80071e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071ea:	d820      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f0:	d012      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80071f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f6:	d81a      	bhi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d022      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007200:	d115      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	3308      	adds	r3, #8
 8007208:	2101      	movs	r1, #1
 800720a:	4618      	mov	r0, r3
 800720c:	f002 f816 	bl	800923c <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007216:	e015      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721c:	3328      	adds	r3, #40	@ 0x28
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f002 f8bd 	bl	80093a0 <RCCEx_PLL3_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800722c:	e00a      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007234:	e006      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007236:	bf00      	nop
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800724c:	4b38      	ldr	r3, [pc, #224]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007250:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725a:	4a35      	ldr	r2, [pc, #212]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725c:	430b      	orrs	r3, r1
 800725e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007260:	e003      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007266:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007276:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800727a:	2300      	movs	r3, #0
 800727c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007280:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d058      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007296:	d033      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800729c:	d82c      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a2:	d02f      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a8:	d826      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ae:	d02b      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80072b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072b4:	d820      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ba:	d012      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80072bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c0:	d81a      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d022      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ca:	d115      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d0:	3308      	adds	r3, #8
 80072d2:	2101      	movs	r1, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 ffb1 	bl	800923c <RCCEx_PLL2_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072e0:	e015      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e6:	3328      	adds	r3, #40	@ 0x28
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f858 	bl	80093a0 <RCCEx_PLL3_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072f6:	e00a      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072fe:	e006      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007300:	bf00      	nop
 8007302:	e004      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007304:	bf00      	nop
 8007306:	e002      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007308:	bf00      	nop
 800730a:	e000      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800730c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800730e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10e      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007316:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007326:	4a02      	ldr	r2, [pc, #8]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007328:	430b      	orrs	r3, r1
 800732a:	6593      	str	r3, [r2, #88]	@ 0x58
 800732c:	e006      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800732e:	bf00      	nop
 8007330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007352:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007356:	460b      	mov	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	d037      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007366:	d00e      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736c:	d816      	bhi.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007376:	d111      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007378:	4bc4      	ldr	r3, [pc, #784]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800737a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737c:	4ac3      	ldr	r2, [pc, #780]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007384:	e00f      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738a:	3308      	adds	r3, #8
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f001 ff54 	bl	800923c <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800739a:	e004      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073a2:	e000      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80073a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073ae:	4bb7      	ldr	r3, [pc, #732]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073bc:	4ab3      	ldr	r2, [pc, #716]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073be:	430b      	orrs	r3, r1
 80073c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073c2:	e003      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80073d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d039      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d81c      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007439 	.word	0x08007439
 8007400:	0800740d 	.word	0x0800740d
 8007404:	0800741b 	.word	0x0800741b
 8007408:	08007439 	.word	0x08007439
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4b9f      	ldr	r3, [pc, #636]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	4a9e      	ldr	r2, [pc, #632]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007418:	e00f      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	3308      	adds	r3, #8
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 ff0a 	bl	800923c <RCCEx_PLL2_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800742e:	e004      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007436:	e000      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007442:	4b92      	ldr	r3, [pc, #584]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007446:	f023 0103 	bic.w	r1, r3, #3
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007450:	4a8e      	ldr	r2, [pc, #568]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007452:	430b      	orrs	r3, r1
 8007454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800746c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007476:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	f000 8099 	beq.w	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007482:	4b83      	ldr	r3, [pc, #524]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a82      	ldr	r2, [pc, #520]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800748c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800748e:	f7fb f841 	bl	8002514 <HAL_GetTick>
 8007492:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007496:	e00b      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007498:	f7fb f83c 	bl	8002514 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b64      	cmp	r3, #100	@ 0x64
 80074a6:	d903      	bls.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ae:	e005      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b0:	4b77      	ldr	r3, [pc, #476]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0ed      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80074bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d173      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074c4:	4b71      	ldr	r3, [pc, #452]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074d0:	4053      	eors	r3, r2
 80074d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d015      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074da:	4b6c      	ldr	r3, [pc, #432]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074e6:	4b69      	ldr	r3, [pc, #420]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ea:	4a68      	ldr	r2, [pc, #416]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074f2:	4b66      	ldr	r3, [pc, #408]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f6:	4a65      	ldr	r2, [pc, #404]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074fe:	4a63      	ldr	r2, [pc, #396]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007504:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800750e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007512:	d118      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fa fffe 	bl	8002514 <HAL_GetTick>
 8007518:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800751c:	e00d      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751e:	f7fa fff9 	bl	8002514 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007528:	1ad2      	subs	r2, r2, r3
 800752a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800752e:	429a      	cmp	r2, r3
 8007530:	d903      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007538:	e005      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800753a:	4b54      	ldr	r3, [pc, #336]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0eb      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800754a:	2b00      	cmp	r3, #0
 800754c:	d129      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755e:	d10e      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007560:	4b4a      	ldr	r3, [pc, #296]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800756c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007570:	091a      	lsrs	r2, r3, #4
 8007572:	4b48      	ldr	r3, [pc, #288]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007574:	4013      	ands	r3, r2
 8007576:	4a45      	ldr	r2, [pc, #276]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6113      	str	r3, [r2, #16]
 800757c:	e005      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800757e:	4b43      	ldr	r3, [pc, #268]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	4a42      	ldr	r2, [pc, #264]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007584:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007588:	6113      	str	r3, [r2, #16]
 800758a:	4b40      	ldr	r3, [pc, #256]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800758c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800759a:	4a3c      	ldr	r2, [pc, #240]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800759c:	430b      	orrs	r3, r1
 800759e:	6713      	str	r3, [r2, #112]	@ 0x70
 80075a0:	e008      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f002 0301 	and.w	r3, r2, #1
 80075c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f000 808f 	beq.w	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075dc:	2b28      	cmp	r3, #40	@ 0x28
 80075de:	d871      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80075e0:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080076cd 	.word	0x080076cd
 80075ec:	080076c5 	.word	0x080076c5
 80075f0:	080076c5 	.word	0x080076c5
 80075f4:	080076c5 	.word	0x080076c5
 80075f8:	080076c5 	.word	0x080076c5
 80075fc:	080076c5 	.word	0x080076c5
 8007600:	080076c5 	.word	0x080076c5
 8007604:	080076c5 	.word	0x080076c5
 8007608:	08007699 	.word	0x08007699
 800760c:	080076c5 	.word	0x080076c5
 8007610:	080076c5 	.word	0x080076c5
 8007614:	080076c5 	.word	0x080076c5
 8007618:	080076c5 	.word	0x080076c5
 800761c:	080076c5 	.word	0x080076c5
 8007620:	080076c5 	.word	0x080076c5
 8007624:	080076c5 	.word	0x080076c5
 8007628:	080076af 	.word	0x080076af
 800762c:	080076c5 	.word	0x080076c5
 8007630:	080076c5 	.word	0x080076c5
 8007634:	080076c5 	.word	0x080076c5
 8007638:	080076c5 	.word	0x080076c5
 800763c:	080076c5 	.word	0x080076c5
 8007640:	080076c5 	.word	0x080076c5
 8007644:	080076c5 	.word	0x080076c5
 8007648:	080076cd 	.word	0x080076cd
 800764c:	080076c5 	.word	0x080076c5
 8007650:	080076c5 	.word	0x080076c5
 8007654:	080076c5 	.word	0x080076c5
 8007658:	080076c5 	.word	0x080076c5
 800765c:	080076c5 	.word	0x080076c5
 8007660:	080076c5 	.word	0x080076c5
 8007664:	080076c5 	.word	0x080076c5
 8007668:	080076cd 	.word	0x080076cd
 800766c:	080076c5 	.word	0x080076c5
 8007670:	080076c5 	.word	0x080076c5
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076cd 	.word	0x080076cd
 800768c:	58024400 	.word	0x58024400
 8007690:	58024800 	.word	0x58024800
 8007694:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	3308      	adds	r3, #8
 800769e:	2101      	movs	r1, #1
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 fdcb 	bl	800923c <RCCEx_PLL2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076ac:	e00f      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b2:	3328      	adds	r3, #40	@ 0x28
 80076b4:	2101      	movs	r1, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fe72 	bl	80093a0 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076d6:	4bbf      	ldr	r3, [pc, #764]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076e4:	4abb      	ldr	r2, [pc, #748]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076e6:	430b      	orrs	r3, r1
 80076e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80076ea:	e003      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f002 0302 	and.w	r3, r2, #2
 8007700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800770a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d041      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800771a:	2b05      	cmp	r3, #5
 800771c:	d824      	bhi.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800771e:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007771 	.word	0x08007771
 8007728:	0800773d 	.word	0x0800773d
 800772c:	08007753 	.word	0x08007753
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007771 	.word	0x08007771
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	3308      	adds	r3, #8
 8007742:	2101      	movs	r1, #1
 8007744:	4618      	mov	r0, r3
 8007746:	f001 fd79 	bl	800923c <RCCEx_PLL2_Config>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007750:	e00f      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007756:	3328      	adds	r3, #40	@ 0x28
 8007758:	2101      	movs	r1, #1
 800775a:	4618      	mov	r0, r3
 800775c:	f001 fe20 	bl	80093a0 <RCCEx_PLL3_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007766:	e004      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007772:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10a      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800777a:	4b96      	ldr	r3, [pc, #600]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777e:	f023 0107 	bic.w	r1, r3, #7
 8007782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007788:	4a92      	ldr	r2, [pc, #584]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800778a:	430b      	orrs	r3, r1
 800778c:	6553      	str	r3, [r2, #84]	@ 0x54
 800778e:	e003      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f002 0304 	and.w	r3, r2, #4
 80077a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077b2:	460b      	mov	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	d044      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d825      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80077c4:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	08007819 	.word	0x08007819
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077fb 	.word	0x080077fb
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e8:	3308      	adds	r3, #8
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fd25 	bl	800923c <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 fdcc 	bl	80093a0 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007822:	4b6c      	ldr	r3, [pc, #432]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007826:	f023 0107 	bic.w	r1, r3, #7
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007832:	4a68      	ldr	r2, [pc, #416]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6593      	str	r3, [r2, #88]	@ 0x58
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800783e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f002 0320 	and.w	r3, r2, #32
 800784e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007858:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800785c:	460b      	mov	r3, r1
 800785e:	4313      	orrs	r3, r2
 8007860:	d055      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800786a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800786e:	d033      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007874:	d82c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787a:	d02f      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800787c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007880:	d826      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007882:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007886:	d02b      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007888:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800788c:	d820      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800788e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007892:	d012      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007898:	d81a      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d022      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800789e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a2:	d115      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a8:	3308      	adds	r3, #8
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fcc5 	bl	800923c <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078b8:	e015      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	3328      	adds	r3, #40	@ 0x28
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 fd6c 	bl	80093a0 <RCCEx_PLL3_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078ce:	e00a      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078d6:	e006      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ee:	4b39      	ldr	r3, [pc, #228]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078fe:	4a35      	ldr	r2, [pc, #212]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6553      	str	r3, [r2, #84]	@ 0x54
 8007904:	e003      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800790a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800791a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800791e:	2300      	movs	r3, #0
 8007920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007924:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007928:	460b      	mov	r3, r1
 800792a:	4313      	orrs	r3, r2
 800792c:	d058      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007936:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800793a:	d033      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800793c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007940:	d82c      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007946:	d02f      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794c:	d826      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800794e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007952:	d02b      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007954:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007958:	d820      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800795a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800795e:	d012      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007964:	d81a      	bhi.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d022      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800796a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800796e:	d115      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	3308      	adds	r3, #8
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fc5f 	bl	800923c <RCCEx_PLL2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007984:	e015      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	3328      	adds	r3, #40	@ 0x28
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fd06 	bl	80093a0 <RCCEx_PLL3_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800799a:	e00a      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079a2:	e006      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079a4:	bf00      	nop
 80079a6:	e004      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079a8:	bf00      	nop
 80079aa:	e002      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10e      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079ba:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079ca:	4a02      	ldr	r2, [pc, #8]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079cc:	430b      	orrs	r3, r1
 80079ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d0:	e006      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80079ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d055      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a0c:	d033      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007a0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a12:	d82c      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a18:	d02f      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a1e:	d826      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a24:	d02b      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007a26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a2a:	d820      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a30:	d012      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a36:	d81a      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d022      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a40:	d115      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	3308      	adds	r3, #8
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 fbf6 	bl	800923c <RCCEx_PLL2_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a56:	e015      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5c:	3328      	adds	r3, #40	@ 0x28
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fc9d 	bl	80093a0 <RCCEx_PLL3_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a74:	e006      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a76:	bf00      	nop
 8007a78:	e004      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a7a:	bf00      	nop
 8007a7c:	e002      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a9c:	4a9c      	ldr	r2, [pc, #624]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aa2:	e003      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f002 0308 	and.w	r3, r2, #8
 8007ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ac2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	d01e      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ade:	3328      	adds	r3, #40	@ 0x28
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fc5c 	bl	80093a0 <RCCEx_PLL3_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007af4:	4b86      	ldr	r3, [pc, #536]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b04:	4a82      	ldr	r2, [pc, #520]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f002 0310 	and.w	r3, r2, #16
 8007b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b20:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b24:	460b      	mov	r3, r1
 8007b26:	4313      	orrs	r3, r2
 8007b28:	d01e      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b36:	d10c      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3c:	3328      	adds	r3, #40	@ 0x28
 8007b3e:	2102      	movs	r1, #2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 fc2d 	bl	80093a0 <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b52:	4b6f      	ldr	r3, [pc, #444]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b62:	4a6b      	ldr	r2, [pc, #428]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b76:	2300      	movs	r3, #0
 8007b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b7a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4313      	orrs	r3, r2
 8007b82:	d03e      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b90:	d022      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b96:	d81b      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba0:	d00b      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007ba2:	e015      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba8:	3308      	adds	r3, #8
 8007baa:	2100      	movs	r1, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fb45 	bl	800923c <RCCEx_PLL2_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bb8:	e00f      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbe:	3328      	adds	r3, #40	@ 0x28
 8007bc0:	2102      	movs	r1, #2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fbec 	bl	80093a0 <RCCEx_PLL3_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bce:	e004      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bd6:	e000      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007be2:	4b4b      	ldr	r3, [pc, #300]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bf2:	4a47      	ldr	r2, [pc, #284]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bf8:	e003      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c10:	2300      	movs	r3, #0
 8007c12:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d03b      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c2a:	d01f      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007c2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c30:	d818      	bhi.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c36:	d003      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007c38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c3c:	d007      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007c3e:	e011      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c40:	4b33      	ldr	r3, [pc, #204]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	4a32      	ldr	r2, [pc, #200]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c4c:	e00f      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	3328      	adds	r3, #40	@ 0x28
 8007c54:	2101      	movs	r1, #1
 8007c56:	4618      	mov	r0, r3
 8007c58:	f001 fba2 	bl	80093a0 <RCCEx_PLL3_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c62:	e004      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c6a:	e000      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c76:	4b26      	ldr	r3, [pc, #152]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c86:	4a22      	ldr	r2, [pc, #136]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c8c:	e003      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ca8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cac:	460b      	mov	r3, r1
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	d034      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc0:	d007      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007cc2:	e011      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc4:	4b12      	ldr	r3, [pc, #72]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	4a11      	ldr	r2, [pc, #68]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cd0:	e00e      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 faae 	bl	800923c <RCCEx_PLL2_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cf8:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d06:	4a02      	ldr	r2, [pc, #8]	@ (8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007d0e:	bf00      	nop
 8007d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d2e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d32:	460b      	mov	r3, r1
 8007d34:	4313      	orrs	r3, r2
 8007d36:	d00c      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	3328      	adds	r3, #40	@ 0x28
 8007d3e:	2102      	movs	r1, #2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f001 fb2d 	bl	80093a0 <RCCEx_PLL3_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d60:	2300      	movs	r3, #0
 8007d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d64:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	d036      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d78:	d018      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7e:	d811      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d84:	d014      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8a:	d80b      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d011      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d94:	d106      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d96:	4bb7      	ldr	r3, [pc, #732]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	4ab6      	ldr	r2, [pc, #728]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007da2:	e008      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007daa:	e004      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007dac:	bf00      	nop
 8007dae:	e002      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dbe:	4bad      	ldr	r3, [pc, #692]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dcc:	4aa9      	ldr	r2, [pc, #676]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dd2:	e003      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dea:	2300      	movs	r3, #0
 8007dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007df2:	460b      	mov	r3, r1
 8007df4:	4313      	orrs	r3, r2
 8007df6:	d009      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007df8:	4b9e      	ldr	r3, [pc, #632]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e06:	4a9b      	ldr	r2, [pc, #620]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e1e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e22:	460b      	mov	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e28:	4b92      	ldr	r3, [pc, #584]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e36:	4a8f      	ldr	r2, [pc, #572]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e4e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e58:	4b86      	ldr	r3, [pc, #536]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	4a85      	ldr	r2, [pc, #532]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e62:	6113      	str	r3, [r2, #16]
 8007e64:	4b83      	ldr	r3, [pc, #524]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e66:	6919      	ldr	r1, [r3, #16]
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e70:	4a80      	ldr	r2, [pc, #512]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e72:	430b      	orrs	r3, r1
 8007e74:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e88:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e92:	4b78      	ldr	r3, [pc, #480]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea0:	4a74      	ldr	r2, [pc, #464]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d00a      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed2:	4a68      	ldr	r2, [pc, #416]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	d011      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef8:	3308      	adds	r3, #8
 8007efa:	2100      	movs	r1, #0
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 f99d 	bl	800923c <RCCEx_PLL2_Config>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	2100      	movs	r1, #0
 8007f22:	6239      	str	r1, [r7, #32]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f2a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d011      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f38:	3308      	adds	r3, #8
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 f97d 	bl	800923c <RCCEx_PLL2_Config>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	2100      	movs	r1, #0
 8007f62:	61b9      	str	r1, [r7, #24]
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d011      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f78:	3308      	adds	r3, #8
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f95d 	bl	800923c <RCCEx_PLL2_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6139      	str	r1, [r7, #16]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d011      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb8:	3328      	adds	r3, #40	@ 0x28
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f9ef 	bl	80093a0 <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d011      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	3328      	adds	r3, #40	@ 0x28
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 f9cf 	bl	80093a0 <RCCEx_PLL3_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	2100      	movs	r1, #0
 8008022:	6039      	str	r1, [r7, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800802e:	460b      	mov	r3, r1
 8008030:	4313      	orrs	r3, r2
 8008032:	d011      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	3328      	adds	r3, #40	@ 0x28
 800803a:	2102      	movs	r1, #2
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f9af 	bl	80093a0 <RCCEx_PLL3_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008058:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	e000      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
}
 8008066:	4618      	mov	r0, r3
 8008068:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400

08008078 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b090      	sub	sp, #64	@ 0x40
 800807c:	af00      	add	r7, sp, #0
 800807e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008086:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800808a:	430b      	orrs	r3, r1
 800808c:	f040 8094 	bne.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008090:	4b9b      	ldr	r3, [pc, #620]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2b04      	cmp	r3, #4
 800809e:	f200 8087 	bhi.w	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080a2:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080bd 	.word	0x080080bd
 80080ac:	080080e5 	.word	0x080080e5
 80080b0:	0800810d 	.word	0x0800810d
 80080b4:	080081a9 	.word	0x080081a9
 80080b8:	08008135 	.word	0x08008135
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080bc:	4b90      	ldr	r3, [pc, #576]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080c8:	d108      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff62 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d8:	f000 bc93 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e0:	f000 bc8f 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080e4:	4b86      	ldr	r3, [pc, #536]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080f0:	d108      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f2:	f107 0318 	add.w	r3, r7, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fca6 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008100:	f000 bc7f 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008108:	f000 bc7b 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800810c:	4b7c      	ldr	r3, [pc, #496]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008118:	d108      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fde6 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008128:	f000 bc6b 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008130:	f000 bc67 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008134:	4b72      	ldr	r3, [pc, #456]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008138:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800813e:	4b70      	ldr	r3, [pc, #448]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b04      	cmp	r3, #4
 8008148:	d10c      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008150:	4b6b      	ldr	r3, [pc, #428]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	08db      	lsrs	r3, r3, #3
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	4a6a      	ldr	r2, [pc, #424]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800815c:	fa22 f303 	lsr.w	r3, r2, r3
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008162:	e01f      	b.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008164:	4b66      	ldr	r3, [pc, #408]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008170:	d106      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008178:	d102      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800817a:	4b63      	ldr	r3, [pc, #396]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800817c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817e:	e011      	b.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008180:	4b5f      	ldr	r3, [pc, #380]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800818c:	d106      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800818e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008194:	d102      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008196:	4b5d      	ldr	r3, [pc, #372]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800819a:	e003      	b.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081a0:	f000 bc2f 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081a4:	f000 bc2d 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081a8:	4b59      	ldr	r3, [pc, #356]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ac:	f000 bc29 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b4:	f000 bc25 	b.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80081c0:	430b      	orrs	r3, r1
 80081c2:	f040 80a7 	bne.w	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80081c6:	4b4e      	ldr	r3, [pc, #312]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80081ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081d6:	d054      	beq.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081de:	f200 808b 	bhi.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081e8:	f000 8083 	beq.w	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80081f2:	f200 8081 	bhi.w	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081fc:	d02f      	beq.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008204:	d878      	bhi.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008212:	d012      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008214:	e070      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008216:	4b3a      	ldr	r3, [pc, #232]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008222:	d107      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008228:	4618      	mov	r0, r3
 800822a:	f000 feb5 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008232:	e3e6      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008238:	e3e3      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800823a:	4b31      	ldr	r3, [pc, #196]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008248:	f107 0318 	add.w	r3, r7, #24
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fbfb 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008256:	e3d4      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825c:	e3d1      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800825e:	4b28      	ldr	r3, [pc, #160]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826a:	d107      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fd3d 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827a:	e3c2      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	e3bf      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008282:	4b1f      	ldr	r3, [pc, #124]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800828c:	4b1c      	ldr	r3, [pc, #112]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b04      	cmp	r3, #4
 8008296:	d10c      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800829e:	4b18      	ldr	r3, [pc, #96]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	08db      	lsrs	r3, r3, #3
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	4a16      	ldr	r2, [pc, #88]	@ (8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80082aa:	fa22 f303 	lsr.w	r3, r2, r3
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b0:	e01e      	b.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082b2:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082be:	d106      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80082c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c6:	d102      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082cc:	e010      	b.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082da:	d106      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80082dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e2:	d102      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e8:	e002      	b.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082ee:	e388      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082f0:	e387      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082f2:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f6:	e384      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fc:	e381      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082fe:	bf00      	nop
 8008300:	58024400 	.word	0x58024400
 8008304:	03d09000 	.word	0x03d09000
 8008308:	003d0900 	.word	0x003d0900
 800830c:	016e3600 	.word	0x016e3600
 8008310:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008318:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800831c:	430b      	orrs	r3, r1
 800831e:	f040 809c 	bne.w	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008322:	4b9e      	ldr	r3, [pc, #632]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008326:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008332:	d054      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800833a:	f200 808b 	bhi.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008344:	f000 8083 	beq.w	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800834e:	f200 8081 	bhi.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008358:	d02f      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008360:	d878      	bhi.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800836e:	d012      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008370:	e070      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008372:	4b8a      	ldr	r3, [pc, #552]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fe07 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838e:	e338      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008394:	e335      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008396:	4b81      	ldr	r3, [pc, #516]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800839e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a4:	f107 0318 	add.w	r3, r7, #24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fb4d 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b2:	e326      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b8:	e323      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ba:	4b78      	ldr	r3, [pc, #480]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083c6:	d107      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fc8f 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d6:	e314      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e311      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083de:	4b6f      	ldr	r3, [pc, #444]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083e8:	4b6c      	ldr	r3, [pc, #432]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d10c      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083fa:	4b68      	ldr	r3, [pc, #416]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	08db      	lsrs	r3, r3, #3
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	4a66      	ldr	r2, [pc, #408]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008406:	fa22 f303 	lsr.w	r3, r2, r3
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800840c:	e01e      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800840e:	4b63      	ldr	r3, [pc, #396]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841a:	d106      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800841c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008422:	d102      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008424:	4b5f      	ldr	r3, [pc, #380]	@ (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008428:	e010      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800842a:	4b5c      	ldr	r3, [pc, #368]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008436:	d106      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843e:	d102      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008440:	4b59      	ldr	r3, [pc, #356]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008444:	e002      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800844a:	e2da      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800844c:	e2d9      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800844e:	4b57      	ldr	r3, [pc, #348]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008452:	e2d6      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e2d3      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800845a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008462:	430b      	orrs	r3, r1
 8008464:	f040 80a7 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008468:	4b4c      	ldr	r3, [pc, #304]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800846a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800846c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008470:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008478:	d055      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800847a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008480:	f200 8096 	bhi.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800848a:	f000 8084 	beq.w	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800848e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008490:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008494:	f200 808c 	bhi.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800849e:	d030      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a6:	f200 8083 	bhi.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b6:	d012      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80084b8:	e07a      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084ba:	4b38      	ldr	r3, [pc, #224]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084c6:	d107      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fd63 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d6:	e294      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084dc:	e291      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084de:	4b2f      	ldr	r3, [pc, #188]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ea:	d107      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ec:	f107 0318 	add.w	r3, r7, #24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 faa9 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fa:	e282      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008500:	e27f      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008502:	4b26      	ldr	r3, [pc, #152]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800850a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800850e:	d107      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008510:	f107 030c 	add.w	r3, r7, #12
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fbeb 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851e:	e270      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e26d      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008526:	4b1d      	ldr	r3, [pc, #116]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800852a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008530:	4b1a      	ldr	r3, [pc, #104]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b04      	cmp	r3, #4
 800853a:	d10c      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800853c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008542:	4b16      	ldr	r3, [pc, #88]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	08db      	lsrs	r3, r3, #3
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008554:	e01e      	b.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008556:	4b11      	ldr	r3, [pc, #68]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008562:	d106      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800856a:	d102      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800856c:	4b0d      	ldr	r3, [pc, #52]	@ (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008570:	e010      	b.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008572:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800857e:	d106      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008586:	d102      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008588:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800858a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800858c:	e002      	b.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008592:	e236      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008594:	e235      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008596:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800859a:	e232      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800859c:	58024400 	.word	0x58024400
 80085a0:	03d09000 	.word	0x03d09000
 80085a4:	003d0900 	.word	0x003d0900
 80085a8:	016e3600 	.word	0x016e3600
 80085ac:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b4:	e225      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80085be:	430b      	orrs	r3, r1
 80085c0:	f040 8085 	bne.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085c4:	4b9c      	ldr	r3, [pc, #624]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085d4:	d06b      	beq.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085dc:	d874      	bhi.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085e4:	d056      	beq.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085ec:	d86c      	bhi.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085f4:	d03b      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085fc:	d864      	bhi.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008604:	d021      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800860c:	d85c      	bhi.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800861a:	d004      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800861c:	e054      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800861e:	f7fe fb5f 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 8008622:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008624:	e1ed      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008626:	4b84      	ldr	r3, [pc, #528]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800862e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008634:	f107 0318 	add.w	r3, r7, #24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fa05 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008642:	e1de      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008648:	e1db      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800864a:	4b7b      	ldr	r3, [pc, #492]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008656:	d107      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008658:	f107 030c 	add.w	r3, r7, #12
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fb47 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e1cc      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866c:	e1c9      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800866e:	4b72      	ldr	r3, [pc, #456]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b04      	cmp	r3, #4
 8008678:	d109      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800867a:	4b6f      	ldr	r3, [pc, #444]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	08db      	lsrs	r3, r3, #3
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	4a6d      	ldr	r2, [pc, #436]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868c:	e1b9      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008692:	e1b6      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008694:	4b68      	ldr	r3, [pc, #416]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80086a2:	4b67      	ldr	r3, [pc, #412]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a6:	e1ac      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	e1a9      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086ae:	4b62      	ldr	r3, [pc, #392]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ba:	d102      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80086bc:	4b61      	ldr	r3, [pc, #388]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c0:	e19f      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c6:	e19c      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086cc:	e199      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80086d6:	430b      	orrs	r3, r1
 80086d8:	d173      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80086da:	4b57      	ldr	r3, [pc, #348]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80086dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ea:	d02f      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80086ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f2:	d863      	bhi.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80086f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008700:	d012      	beq.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008702:	e05b      	b.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008704:	4b4c      	ldr	r3, [pc, #304]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800870c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008710:	d107      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f996 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008720:	e16f      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008726:	e16c      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008728:	4b43      	ldr	r3, [pc, #268]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008734:	d107      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fad8 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008744:	e15d      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874a:	e15a      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800874c:	4b3a      	ldr	r3, [pc, #232]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800874e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008750:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008756:	4b38      	ldr	r3, [pc, #224]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b04      	cmp	r3, #4
 8008760:	d10c      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008768:	4b33      	ldr	r3, [pc, #204]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a32      	ldr	r2, [pc, #200]	@ (800883c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800877a:	e01e      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800877c:	4b2e      	ldr	r3, [pc, #184]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008788:	d106      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008790:	d102      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008792:	4b2b      	ldr	r3, [pc, #172]	@ (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008796:	e010      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008798:	4b27      	ldr	r3, [pc, #156]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a4:	d106      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80087a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ac:	d102      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087ae:	4b25      	ldr	r3, [pc, #148]	@ (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087b8:	e123      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087ba:	e122      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c0:	e11f      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80087ca:	430b      	orrs	r3, r1
 80087cc:	d13c      	bne.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80087ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e4:	d012      	beq.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80087e6:	e023      	b.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087e8:	4b13      	ldr	r3, [pc, #76]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f4:	d107      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fbcc 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008804:	e0fd      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880a:	e0fa      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008818:	d107      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881a:	f107 0318 	add.w	r3, r7, #24
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f912 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008828:	e0eb      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882e:	e0e8      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008834:	e0e5      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008836:	bf00      	nop
 8008838:	58024400 	.word	0x58024400
 800883c:	03d09000 	.word	0x03d09000
 8008840:	003d0900 	.word	0x003d0900
 8008844:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008850:	430b      	orrs	r3, r1
 8008852:	f040 8085 	bne.w	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008856:	4b6d      	ldr	r3, [pc, #436]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800885a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800885e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008866:	d06b      	beq.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800886e:	d874      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008876:	d056      	beq.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887e:	d86c      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008886:	d03b      	beq.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800888e:	d864      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008896:	d021      	beq.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800889e:	d85c      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d004      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ac:	d004      	beq.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80088ae:	e054      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088b0:	f000 f8b4 	bl	8008a1c <HAL_RCCEx_GetD3PCLK1Freq>
 80088b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088b6:	e0a4      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088b8:	4b54      	ldr	r3, [pc, #336]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c4:	d107      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088c6:	f107 0318 	add.w	r3, r7, #24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 f8bc 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	e095      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088da:	e092      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088dc:	4b4b      	ldr	r3, [pc, #300]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e8:	d107      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ea:	f107 030c 	add.w	r3, r7, #12
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f9fe 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f8:	e083      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fe:	e080      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008900:	4b42      	ldr	r3, [pc, #264]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b04      	cmp	r3, #4
 800890a:	d109      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800890c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	08db      	lsrs	r3, r3, #3
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	4a3e      	ldr	r2, [pc, #248]	@ (8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800891e:	e070      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008924:	e06d      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008926:	4b39      	ldr	r3, [pc, #228]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800892e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008932:	d102      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008934:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008938:	e063      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800893e:	e060      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008940:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800894e:	4b32      	ldr	r3, [pc, #200]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008952:	e056      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008958:	e053      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895e:	e050      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008964:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008968:	430b      	orrs	r3, r1
 800896a:	d148      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800896c:	4b27      	ldr	r3, [pc, #156]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800896e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008970:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008974:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897c:	d02a      	beq.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008984:	d838      	bhi.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008992:	d00d      	beq.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008994:	e030      	b.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008996:	4b1d      	ldr	r3, [pc, #116]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800899e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089a2:	d102      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80089a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a8:	e02b      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ae:	e028      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089b0:	4b16      	ldr	r3, [pc, #88]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089bc:	d107      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fae8 	bl	8008f98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089cc:	e019      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d2:	e016      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089d4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e0:	d107      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f82e 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f0:	e007      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f6:	e004      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fc:	e001      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3740      	adds	r7, #64	@ 0x40
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	03d09000 	.word	0x03d09000
 8008a14:	003d0900 	.word	0x003d0900
 8008a18:	016e3600 	.word	0x016e3600

08008a1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a20:	f7fe f92e 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8008a24:	4602      	mov	r2, r0
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	091b      	lsrs	r3, r3, #4
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a32:	5ccb      	ldrb	r3, [r1, r3]
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	58024400 	.word	0x58024400
 8008a44:	0800b50c 	.word	0x0800b50c

08008a48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b089      	sub	sp, #36	@ 0x24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a50:	4ba1      	ldr	r3, [pc, #644]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a5a:	4b9f      	ldr	r3, [pc, #636]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5e:	0b1b      	lsrs	r3, r3, #12
 8008a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a66:	4b9c      	ldr	r3, [pc, #624]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	091b      	lsrs	r3, r3, #4
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a72:	4b99      	ldr	r3, [pc, #612]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a76:	08db      	lsrs	r3, r3, #3
 8008a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 8111 	beq.w	8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	f000 8083 	beq.w	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	f200 80a1 	bhi.w	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d056      	beq.n	8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ab2:	e099      	b.n	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ab4:	4b88      	ldr	r3, [pc, #544]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02d      	beq.n	8008b1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac0:	4b85      	ldr	r3, [pc, #532]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	08db      	lsrs	r3, r3, #3
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	4a84      	ldr	r2, [pc, #528]	@ (8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008acc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	ee07 3a90 	vmov	s15, r3
 8008ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aea:	4b7b      	ldr	r3, [pc, #492]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b1a:	e087      	b.n	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5e:	e065      	b.n	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b72:	4b59      	ldr	r3, [pc, #356]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ba2:	e043      	b.n	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb6:	4b48      	ldr	r3, [pc, #288]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008be6:	e021      	b.n	8008c2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b37      	ldr	r3, [pc, #220]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c30:	0a5b      	lsrs	r3, r3, #9
 8008c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c52:	ee17 2a90 	vmov	r2, s15
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5e:	0c1b      	lsrs	r3, r3, #16
 8008c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c64:	ee07 3a90 	vmov	s15, r3
 8008c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c80:	ee17 2a90 	vmov	r2, s15
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c88:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	0e1b      	lsrs	r3, r3, #24
 8008c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cae:	ee17 2a90 	vmov	r2, s15
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cb6:	e008      	b.n	8008cca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
}
 8008cca:	bf00      	nop
 8008ccc:	3724      	adds	r7, #36	@ 0x24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	03d09000 	.word	0x03d09000
 8008ce0:	46000000 	.word	0x46000000
 8008ce4:	4c742400 	.word	0x4c742400
 8008ce8:	4a742400 	.word	0x4a742400
 8008cec:	4bb71b00 	.word	0x4bb71b00

08008cf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b089      	sub	sp, #36	@ 0x24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cf8:	4ba1      	ldr	r3, [pc, #644]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d02:	4b9f      	ldr	r3, [pc, #636]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d06:	0d1b      	lsrs	r3, r3, #20
 8008d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d12:	0a1b      	lsrs	r3, r3, #8
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d1a:	4b99      	ldr	r3, [pc, #612]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d1e:	08db      	lsrs	r3, r3, #3
 8008d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8111 	beq.w	8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	f000 8083 	beq.w	8008e4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f200 80a1 	bhi.w	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d056      	beq.n	8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d5a:	e099      	b.n	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5c:	4b88      	ldr	r3, [pc, #544]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d02d      	beq.n	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d68:	4b85      	ldr	r3, [pc, #532]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	08db      	lsrs	r3, r3, #3
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	4a84      	ldr	r2, [pc, #528]	@ (8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b7b      	ldr	r3, [pc, #492]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008dc2:	e087      	b.n	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e06:	e065      	b.n	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1a:	4b59      	ldr	r3, [pc, #356]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e4a:	e043      	b.n	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b48      	ldr	r3, [pc, #288]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e8e:	e021      	b.n	8008ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b37      	ldr	r3, [pc, #220]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	0a5b      	lsrs	r3, r3, #9
 8008eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efa:	ee17 2a90 	vmov	r2, s15
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f02:	4b1f      	ldr	r3, [pc, #124]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f06:	0c1b      	lsrs	r3, r3, #16
 8008f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0c:	ee07 3a90 	vmov	s15, r3
 8008f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f28:	ee17 2a90 	vmov	r2, s15
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f30:	4b13      	ldr	r3, [pc, #76]	@ (8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	0e1b      	lsrs	r3, r3, #24
 8008f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f56:	ee17 2a90 	vmov	r2, s15
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f5e:	e008      	b.n	8008f72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
}
 8008f72:	bf00      	nop
 8008f74:	3724      	adds	r7, #36	@ 0x24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	58024400 	.word	0x58024400
 8008f84:	03d09000 	.word	0x03d09000
 8008f88:	46000000 	.word	0x46000000
 8008f8c:	4c742400 	.word	0x4c742400
 8008f90:	4a742400 	.word	0x4a742400
 8008f94:	4bb71b00 	.word	0x4bb71b00

08008f98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	@ 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa0:	4ba0      	ldr	r3, [pc, #640]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008faa:	4b9e      	ldr	r3, [pc, #632]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	091b      	lsrs	r3, r3, #4
 8008fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fb4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fb6:	4b9b      	ldr	r3, [pc, #620]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fc0:	4b98      	ldr	r3, [pc, #608]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	08db      	lsrs	r3, r3, #3
 8008fc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8111 	beq.w	8009206 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	f000 8083 	beq.w	80090f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	f200 80a1 	bhi.w	8009136 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d056      	beq.n	80090ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009000:	e099      	b.n	8009136 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009002:	4b88      	ldr	r3, [pc, #544]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d02d      	beq.n	800906a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800900e:	4b85      	ldr	r3, [pc, #532]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	4a83      	ldr	r2, [pc, #524]	@ (8009228 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800901a:	fa22 f303 	lsr.w	r3, r2, r3
 800901e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009038:	4b7a      	ldr	r3, [pc, #488]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800903a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009040:	ee07 3a90 	vmov	s15, r3
 8009044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009048:	ed97 6a03 	vldr	s12, [r7, #12]
 800904c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800922c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800905c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009064:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009068:	e087      	b.n	800917a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	ee07 3a90 	vmov	s15, r3
 8009070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009074:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907c:	4b69      	ldr	r3, [pc, #420]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800907e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009084:	ee07 3a90 	vmov	s15, r3
 8009088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009090:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800922c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ac:	e065      	b.n	800917a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009234 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c0:	4b58      	ldr	r3, [pc, #352]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800922c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f0:	e043      	b.n	800917a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009238 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009104:	4b47      	ldr	r3, [pc, #284]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009114:	ed97 6a03 	vldr	s12, [r7, #12]
 8009118:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800922c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800911c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009134:	e021      	b.n	800917a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	ee07 3a90 	vmov	s15, r3
 800913c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009140:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009230 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009148:	4b36      	ldr	r3, [pc, #216]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009158:	ed97 6a03 	vldr	s12, [r7, #12]
 800915c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800922c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009178:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800917a:	4b2a      	ldr	r3, [pc, #168]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917e:	0a5b      	lsrs	r3, r3, #9
 8009180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009194:	edd7 6a07 	vldr	s13, [r7, #28]
 8009198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800919c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a0:	ee17 2a90 	vmov	r2, s15
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ac:	0c1b      	lsrs	r3, r3, #16
 80091ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ce:	ee17 2a90 	vmov	r2, s15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80091d6:	4b13      	ldr	r3, [pc, #76]	@ (8009224 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091da:	0e1b      	lsrs	r3, r3, #24
 80091dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fc:	ee17 2a90 	vmov	r2, s15
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009204:	e008      	b.n	8009218 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	609a      	str	r2, [r3, #8]
}
 8009218:	bf00      	nop
 800921a:	3724      	adds	r7, #36	@ 0x24
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	58024400 	.word	0x58024400
 8009228:	03d09000 	.word	0x03d09000
 800922c:	46000000 	.word	0x46000000
 8009230:	4c742400 	.word	0x4c742400
 8009234:	4a742400 	.word	0x4a742400
 8009238:	4bb71b00 	.word	0x4bb71b00

0800923c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800924a:	4b53      	ldr	r3, [pc, #332]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	f003 0303 	and.w	r3, r3, #3
 8009252:	2b03      	cmp	r3, #3
 8009254:	d101      	bne.n	800925a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e099      	b.n	800938e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800925a:	4b4f      	ldr	r3, [pc, #316]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a4e      	ldr	r2, [pc, #312]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009260:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009266:	f7f9 f955 	bl	8002514 <HAL_GetTick>
 800926a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800926c:	e008      	b.n	8009280 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800926e:	f7f9 f951 	bl	8002514 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e086      	b.n	800938e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009280:	4b45      	ldr	r3, [pc, #276]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f0      	bne.n	800926e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800928c:	4b42      	ldr	r3, [pc, #264]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	493f      	ldr	r1, [pc, #252]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800929c:	4313      	orrs	r3, r2
 800929e:	628b      	str	r3, [r1, #40]	@ 0x28
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	025b      	lsls	r3, r3, #9
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	061b      	lsls	r3, r3, #24
 80092cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092d0:	4931      	ldr	r1, [pc, #196]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092d6:	4b30      	ldr	r3, [pc, #192]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	492d      	ldr	r1, [pc, #180]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	f023 0220 	bic.w	r2, r3, #32
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	4928      	ldr	r1, [pc, #160]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092fa:	4b27      	ldr	r3, [pc, #156]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	4a26      	ldr	r2, [pc, #152]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009300:	f023 0310 	bic.w	r3, r3, #16
 8009304:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009306:	4b24      	ldr	r3, [pc, #144]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800930a:	4b24      	ldr	r3, [pc, #144]	@ (800939c <RCCEx_PLL2_Config+0x160>)
 800930c:	4013      	ands	r3, r2
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	69d2      	ldr	r2, [r2, #28]
 8009312:	00d2      	lsls	r2, r2, #3
 8009314:	4920      	ldr	r1, [pc, #128]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009316:	4313      	orrs	r3, r2
 8009318:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800931a:	4b1f      	ldr	r3, [pc, #124]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	4a1e      	ldr	r2, [pc, #120]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009320:	f043 0310 	orr.w	r3, r3, #16
 8009324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800932c:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009332:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009336:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009338:	e00f      	b.n	800935a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d106      	bne.n	800934e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009340:	4b15      	ldr	r3, [pc, #84]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009344:	4a14      	ldr	r2, [pc, #80]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800934a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800934c:	e005      	b.n	800935a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800934e:	4b12      	ldr	r3, [pc, #72]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4a11      	ldr	r2, [pc, #68]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800935a:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a0e      	ldr	r2, [pc, #56]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009366:	f7f9 f8d5 	bl	8002514 <HAL_GetTick>
 800936a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800936c:	e008      	b.n	8009380 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800936e:	f7f9 f8d1 	bl	8002514 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e006      	b.n	800938e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009380:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <RCCEx_PLL2_Config+0x15c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0f0      	beq.n	800936e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	58024400 	.word	0x58024400
 800939c:	ffff0007 	.word	0xffff0007

080093a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093ae:	4b53      	ldr	r3, [pc, #332]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80093b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d101      	bne.n	80093be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e099      	b.n	80094f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093be:	4b4f      	ldr	r3, [pc, #316]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a4e      	ldr	r2, [pc, #312]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80093c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ca:	f7f9 f8a3 	bl	8002514 <HAL_GetTick>
 80093ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093d0:	e008      	b.n	80093e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093d2:	f7f9 f89f 	bl	8002514 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e086      	b.n	80094f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093e4:	4b45      	ldr	r3, [pc, #276]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f0      	bne.n	80093d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093f0:	4b42      	ldr	r3, [pc, #264]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80093f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	051b      	lsls	r3, r3, #20
 80093fe:	493f      	ldr	r1, [pc, #252]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009400:	4313      	orrs	r3, r2
 8009402:	628b      	str	r3, [r1, #40]	@ 0x28
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	3b01      	subs	r3, #1
 800940a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	3b01      	subs	r3, #1
 8009414:	025b      	lsls	r3, r3, #9
 8009416:	b29b      	uxth	r3, r3
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	3b01      	subs	r3, #1
 8009420:	041b      	lsls	r3, r3, #16
 8009422:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	3b01      	subs	r3, #1
 800942e:	061b      	lsls	r3, r3, #24
 8009430:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009434:	4931      	ldr	r1, [pc, #196]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009436:	4313      	orrs	r3, r2
 8009438:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800943a:	4b30      	ldr	r3, [pc, #192]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	492d      	ldr	r1, [pc, #180]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009448:	4313      	orrs	r3, r2
 800944a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800944c:	4b2b      	ldr	r3, [pc, #172]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 800944e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009450:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	4928      	ldr	r1, [pc, #160]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 800945a:	4313      	orrs	r3, r2
 800945c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800945e:	4b27      	ldr	r3, [pc, #156]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	4a26      	ldr	r2, [pc, #152]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009468:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800946a:	4b24      	ldr	r3, [pc, #144]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 800946c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800946e:	4b24      	ldr	r3, [pc, #144]	@ (8009500 <RCCEx_PLL3_Config+0x160>)
 8009470:	4013      	ands	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	69d2      	ldr	r2, [r2, #28]
 8009476:	00d2      	lsls	r2, r2, #3
 8009478:	4920      	ldr	r1, [pc, #128]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 800947a:	4313      	orrs	r3, r2
 800947c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800947e:	4b1f      	ldr	r3, [pc, #124]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009482:	4a1e      	ldr	r2, [pc, #120]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009490:	4b1a      	ldr	r3, [pc, #104]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	4a19      	ldr	r2, [pc, #100]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 8009496:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800949a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800949c:	e00f      	b.n	80094be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d106      	bne.n	80094b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094a4:	4b15      	ldr	r3, [pc, #84]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	4a14      	ldr	r2, [pc, #80]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80094ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094b0:	e005      	b.n	80094be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094b2:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4a11      	ldr	r2, [pc, #68]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094be:	4b0f      	ldr	r3, [pc, #60]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a0e      	ldr	r2, [pc, #56]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ca:	f7f9 f823 	bl	8002514 <HAL_GetTick>
 80094ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094d0:	e008      	b.n	80094e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094d2:	f7f9 f81f 	bl	8002514 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d901      	bls.n	80094e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e006      	b.n	80094f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094e4:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <RCCEx_PLL3_Config+0x15c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0f0      	beq.n	80094d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400
 8009500:	ffff0007 	.word	0xffff0007

08009504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e042      	b.n	800959c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800951c:	2b00      	cmp	r3, #0
 800951e:	d106      	bne.n	800952e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f8 fdf3 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	@ 0x24
 8009532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0201 	bic.w	r2, r2, #1
 8009544:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 ff22 	bl	800a398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f8b3 	bl	80096c0 <UART_SetConfig>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e01b      	b.n	800959c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 ffa1 	bl	800a4dc <UART_CheckIdleState>
 800959a:	4603      	mov	r3, r0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08a      	sub	sp, #40	@ 0x28
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d17b      	bne.n	80096b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_UART_Transmit+0x26>
 80095c4:	88fb      	ldrh	r3, [r7, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e074      	b.n	80096b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2221      	movs	r2, #33	@ 0x21
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095de:	f7f8 ff99 	bl	8002514 <HAL_GetTick>
 80095e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	88fa      	ldrh	r2, [r7, #6]
 80095e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095fc:	d108      	bne.n	8009610 <HAL_UART_Transmit+0x6c>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	61bb      	str	r3, [r7, #24]
 800960e:	e003      	b.n	8009618 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009618:	e030      	b.n	800967c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2200      	movs	r2, #0
 8009622:	2180      	movs	r1, #128	@ 0x80
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f001 f803 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2220      	movs	r2, #32
 8009634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e03d      	b.n	80096b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009650:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	3302      	adds	r3, #2
 8009656:	61bb      	str	r3, [r7, #24]
 8009658:	e007      	b.n	800966a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	781a      	ldrb	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	3301      	adds	r3, #1
 8009668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009670:	b29b      	uxth	r3, r3
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1c8      	bne.n	800961a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2200      	movs	r2, #0
 8009690:	2140      	movs	r1, #64	@ 0x40
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 ffcc 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e006      	b.n	80096b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e000      	b.n	80096b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80096b6:	2302      	movs	r3, #2
  }
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096c4:	b092      	sub	sp, #72	@ 0x48
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	431a      	orrs	r2, r3
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	431a      	orrs	r2, r3
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4bbe      	ldr	r3, [pc, #760]	@ (80099e8 <UART_SetConfig+0x328>)
 80096f0:	4013      	ands	r3, r2
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4ab3      	ldr	r2, [pc, #716]	@ (80099ec <UART_SetConfig+0x32c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d004      	beq.n	800972c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009728:	4313      	orrs	r3, r2
 800972a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	4baf      	ldr	r3, [pc, #700]	@ (80099f0 <UART_SetConfig+0x330>)
 8009734:	4013      	ands	r3, r2
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	6812      	ldr	r2, [r2, #0]
 800973a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800973c:	430b      	orrs	r3, r1
 800973e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	f023 010f 	bic.w	r1, r3, #15
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4aa6      	ldr	r2, [pc, #664]	@ (80099f4 <UART_SetConfig+0x334>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d177      	bne.n	8009850 <UART_SetConfig+0x190>
 8009760:	4ba5      	ldr	r3, [pc, #660]	@ (80099f8 <UART_SetConfig+0x338>)
 8009762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009768:	2b28      	cmp	r3, #40	@ 0x28
 800976a:	d86d      	bhi.n	8009848 <UART_SetConfig+0x188>
 800976c:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <UART_SetConfig+0xb4>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	08009819 	.word	0x08009819
 8009778:	08009849 	.word	0x08009849
 800977c:	08009849 	.word	0x08009849
 8009780:	08009849 	.word	0x08009849
 8009784:	08009849 	.word	0x08009849
 8009788:	08009849 	.word	0x08009849
 800978c:	08009849 	.word	0x08009849
 8009790:	08009849 	.word	0x08009849
 8009794:	08009821 	.word	0x08009821
 8009798:	08009849 	.word	0x08009849
 800979c:	08009849 	.word	0x08009849
 80097a0:	08009849 	.word	0x08009849
 80097a4:	08009849 	.word	0x08009849
 80097a8:	08009849 	.word	0x08009849
 80097ac:	08009849 	.word	0x08009849
 80097b0:	08009849 	.word	0x08009849
 80097b4:	08009829 	.word	0x08009829
 80097b8:	08009849 	.word	0x08009849
 80097bc:	08009849 	.word	0x08009849
 80097c0:	08009849 	.word	0x08009849
 80097c4:	08009849 	.word	0x08009849
 80097c8:	08009849 	.word	0x08009849
 80097cc:	08009849 	.word	0x08009849
 80097d0:	08009849 	.word	0x08009849
 80097d4:	08009831 	.word	0x08009831
 80097d8:	08009849 	.word	0x08009849
 80097dc:	08009849 	.word	0x08009849
 80097e0:	08009849 	.word	0x08009849
 80097e4:	08009849 	.word	0x08009849
 80097e8:	08009849 	.word	0x08009849
 80097ec:	08009849 	.word	0x08009849
 80097f0:	08009849 	.word	0x08009849
 80097f4:	08009839 	.word	0x08009839
 80097f8:	08009849 	.word	0x08009849
 80097fc:	08009849 	.word	0x08009849
 8009800:	08009849 	.word	0x08009849
 8009804:	08009849 	.word	0x08009849
 8009808:	08009849 	.word	0x08009849
 800980c:	08009849 	.word	0x08009849
 8009810:	08009849 	.word	0x08009849
 8009814:	08009841 	.word	0x08009841
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e326      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009820:	2304      	movs	r3, #4
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e322      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009828:	2308      	movs	r3, #8
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e31e      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009830:	2310      	movs	r3, #16
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e31a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009838:	2320      	movs	r3, #32
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e316      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009840:	2340      	movs	r3, #64	@ 0x40
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e312      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e30e      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a69      	ldr	r2, [pc, #420]	@ (80099fc <UART_SetConfig+0x33c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d130      	bne.n	80098bc <UART_SetConfig+0x1fc>
 800985a:	4b67      	ldr	r3, [pc, #412]	@ (80099f8 <UART_SetConfig+0x338>)
 800985c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	2b05      	cmp	r3, #5
 8009864:	d826      	bhi.n	80098b4 <UART_SetConfig+0x1f4>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <UART_SetConfig+0x1ac>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	08009885 	.word	0x08009885
 8009870:	0800988d 	.word	0x0800988d
 8009874:	08009895 	.word	0x08009895
 8009878:	0800989d 	.word	0x0800989d
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098ad 	.word	0x080098ad
 8009884:	2300      	movs	r3, #0
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e2f0      	b.n	8009e6e <UART_SetConfig+0x7ae>
 800988c:	2304      	movs	r3, #4
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e2ec      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009894:	2308      	movs	r3, #8
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e2e8      	b.n	8009e6e <UART_SetConfig+0x7ae>
 800989c:	2310      	movs	r3, #16
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e2e4      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80098a4:	2320      	movs	r3, #32
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e2e0      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80098ac:	2340      	movs	r3, #64	@ 0x40
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e2dc      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80098b4:	2380      	movs	r3, #128	@ 0x80
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e2d8      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a4f      	ldr	r2, [pc, #316]	@ (8009a00 <UART_SetConfig+0x340>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d130      	bne.n	8009928 <UART_SetConfig+0x268>
 80098c6:	4b4c      	ldr	r3, [pc, #304]	@ (80099f8 <UART_SetConfig+0x338>)
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b05      	cmp	r3, #5
 80098d0:	d826      	bhi.n	8009920 <UART_SetConfig+0x260>
 80098d2:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <UART_SetConfig+0x218>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	080098f1 	.word	0x080098f1
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	08009901 	.word	0x08009901
 80098e4:	08009909 	.word	0x08009909
 80098e8:	08009911 	.word	0x08009911
 80098ec:	08009919 	.word	0x08009919
 80098f0:	2300      	movs	r3, #0
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e2ba      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80098f8:	2304      	movs	r3, #4
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e2b6      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009900:	2308      	movs	r3, #8
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e2b2      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009908:	2310      	movs	r3, #16
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e2ae      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009910:	2320      	movs	r3, #32
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e2aa      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009918:	2340      	movs	r3, #64	@ 0x40
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e2a6      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e2a2      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a35      	ldr	r2, [pc, #212]	@ (8009a04 <UART_SetConfig+0x344>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d130      	bne.n	8009994 <UART_SetConfig+0x2d4>
 8009932:	4b31      	ldr	r3, [pc, #196]	@ (80099f8 <UART_SetConfig+0x338>)
 8009934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b05      	cmp	r3, #5
 800993c:	d826      	bhi.n	800998c <UART_SetConfig+0x2cc>
 800993e:	a201      	add	r2, pc, #4	@ (adr r2, 8009944 <UART_SetConfig+0x284>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	0800995d 	.word	0x0800995d
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e284      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e280      	b.n	8009e6e <UART_SetConfig+0x7ae>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e27c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e278      	b.n	8009e6e <UART_SetConfig+0x7ae>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e274      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009984:	2340      	movs	r3, #64	@ 0x40
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e270      	b.n	8009e6e <UART_SetConfig+0x7ae>
 800998c:	2380      	movs	r3, #128	@ 0x80
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e26c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1b      	ldr	r2, [pc, #108]	@ (8009a08 <UART_SetConfig+0x348>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d142      	bne.n	8009a24 <UART_SetConfig+0x364>
 800999e:	4b16      	ldr	r3, [pc, #88]	@ (80099f8 <UART_SetConfig+0x338>)
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	2b05      	cmp	r3, #5
 80099a8:	d838      	bhi.n	8009a1c <UART_SetConfig+0x35c>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <UART_SetConfig+0x2f0>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099c9 	.word	0x080099c9
 80099b4:	080099d1 	.word	0x080099d1
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	080099e1 	.word	0x080099e1
 80099c0:	08009a0d 	.word	0x08009a0d
 80099c4:	08009a15 	.word	0x08009a15
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e24e      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e24a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e246      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e242      	b.n	8009e6e <UART_SetConfig+0x7ae>
 80099e8:	cfff69f3 	.word	0xcfff69f3
 80099ec:	58000c00 	.word	0x58000c00
 80099f0:	11fff4ff 	.word	0x11fff4ff
 80099f4:	40011000 	.word	0x40011000
 80099f8:	58024400 	.word	0x58024400
 80099fc:	40004400 	.word	0x40004400
 8009a00:	40004800 	.word	0x40004800
 8009a04:	40004c00 	.word	0x40004c00
 8009a08:	40005000 	.word	0x40005000
 8009a0c:	2320      	movs	r3, #32
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a12:	e22c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009a14:	2340      	movs	r3, #64	@ 0x40
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	e228      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009a1c:	2380      	movs	r3, #128	@ 0x80
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e224      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4ab1      	ldr	r2, [pc, #708]	@ (8009cf0 <UART_SetConfig+0x630>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d176      	bne.n	8009b1c <UART_SetConfig+0x45c>
 8009a2e:	4bb1      	ldr	r3, [pc, #708]	@ (8009cf4 <UART_SetConfig+0x634>)
 8009a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a36:	2b28      	cmp	r3, #40	@ 0x28
 8009a38:	d86c      	bhi.n	8009b14 <UART_SetConfig+0x454>
 8009a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a40 <UART_SetConfig+0x380>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009ae5 	.word	0x08009ae5
 8009a44:	08009b15 	.word	0x08009b15
 8009a48:	08009b15 	.word	0x08009b15
 8009a4c:	08009b15 	.word	0x08009b15
 8009a50:	08009b15 	.word	0x08009b15
 8009a54:	08009b15 	.word	0x08009b15
 8009a58:	08009b15 	.word	0x08009b15
 8009a5c:	08009b15 	.word	0x08009b15
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009b15 	.word	0x08009b15
 8009a68:	08009b15 	.word	0x08009b15
 8009a6c:	08009b15 	.word	0x08009b15
 8009a70:	08009b15 	.word	0x08009b15
 8009a74:	08009b15 	.word	0x08009b15
 8009a78:	08009b15 	.word	0x08009b15
 8009a7c:	08009b15 	.word	0x08009b15
 8009a80:	08009af5 	.word	0x08009af5
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b15 	.word	0x08009b15
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009b15 	.word	0x08009b15
 8009a98:	08009b15 	.word	0x08009b15
 8009a9c:	08009b15 	.word	0x08009b15
 8009aa0:	08009afd 	.word	0x08009afd
 8009aa4:	08009b15 	.word	0x08009b15
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009b15 	.word	0x08009b15
 8009ab0:	08009b15 	.word	0x08009b15
 8009ab4:	08009b15 	.word	0x08009b15
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b15 	.word	0x08009b15
 8009ac8:	08009b15 	.word	0x08009b15
 8009acc:	08009b15 	.word	0x08009b15
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b15 	.word	0x08009b15
 8009ad8:	08009b15 	.word	0x08009b15
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009b0d 	.word	0x08009b0d
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e1c0      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e1bc      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e1b8      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e1b4      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b04:	2320      	movs	r3, #32
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e1b0      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b0c:	2340      	movs	r3, #64	@ 0x40
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e1ac      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e1a8      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a75      	ldr	r2, [pc, #468]	@ (8009cf8 <UART_SetConfig+0x638>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d130      	bne.n	8009b88 <UART_SetConfig+0x4c8>
 8009b26:	4b73      	ldr	r3, [pc, #460]	@ (8009cf4 <UART_SetConfig+0x634>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d826      	bhi.n	8009b80 <UART_SetConfig+0x4c0>
 8009b32:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <UART_SetConfig+0x478>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e18a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e186      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e182      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e17e      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e17a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b78:	2340      	movs	r3, #64	@ 0x40
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e176      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b80:	2380      	movs	r3, #128	@ 0x80
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e172      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a5b      	ldr	r2, [pc, #364]	@ (8009cfc <UART_SetConfig+0x63c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d130      	bne.n	8009bf4 <UART_SetConfig+0x534>
 8009b92:	4b58      	ldr	r3, [pc, #352]	@ (8009cf4 <UART_SetConfig+0x634>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d826      	bhi.n	8009bec <UART_SetConfig+0x52c>
 8009b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <UART_SetConfig+0x4e4>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bc5 	.word	0x08009bc5
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e154      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e150      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e14c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e148      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e144      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009be4:	2340      	movs	r3, #64	@ 0x40
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e140      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e13c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a41      	ldr	r2, [pc, #260]	@ (8009d00 <UART_SetConfig+0x640>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	f040 8082 	bne.w	8009d04 <UART_SetConfig+0x644>
 8009c00:	4b3c      	ldr	r3, [pc, #240]	@ (8009cf4 <UART_SetConfig+0x634>)
 8009c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c08:	2b28      	cmp	r3, #40	@ 0x28
 8009c0a:	d86d      	bhi.n	8009ce8 <UART_SetConfig+0x628>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <UART_SetConfig+0x554>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009cb9 	.word	0x08009cb9
 8009c18:	08009ce9 	.word	0x08009ce9
 8009c1c:	08009ce9 	.word	0x08009ce9
 8009c20:	08009ce9 	.word	0x08009ce9
 8009c24:	08009ce9 	.word	0x08009ce9
 8009c28:	08009ce9 	.word	0x08009ce9
 8009c2c:	08009ce9 	.word	0x08009ce9
 8009c30:	08009ce9 	.word	0x08009ce9
 8009c34:	08009cc1 	.word	0x08009cc1
 8009c38:	08009ce9 	.word	0x08009ce9
 8009c3c:	08009ce9 	.word	0x08009ce9
 8009c40:	08009ce9 	.word	0x08009ce9
 8009c44:	08009ce9 	.word	0x08009ce9
 8009c48:	08009ce9 	.word	0x08009ce9
 8009c4c:	08009ce9 	.word	0x08009ce9
 8009c50:	08009ce9 	.word	0x08009ce9
 8009c54:	08009cc9 	.word	0x08009cc9
 8009c58:	08009ce9 	.word	0x08009ce9
 8009c5c:	08009ce9 	.word	0x08009ce9
 8009c60:	08009ce9 	.word	0x08009ce9
 8009c64:	08009ce9 	.word	0x08009ce9
 8009c68:	08009ce9 	.word	0x08009ce9
 8009c6c:	08009ce9 	.word	0x08009ce9
 8009c70:	08009ce9 	.word	0x08009ce9
 8009c74:	08009cd1 	.word	0x08009cd1
 8009c78:	08009ce9 	.word	0x08009ce9
 8009c7c:	08009ce9 	.word	0x08009ce9
 8009c80:	08009ce9 	.word	0x08009ce9
 8009c84:	08009ce9 	.word	0x08009ce9
 8009c88:	08009ce9 	.word	0x08009ce9
 8009c8c:	08009ce9 	.word	0x08009ce9
 8009c90:	08009ce9 	.word	0x08009ce9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009ce9 	.word	0x08009ce9
 8009c9c:	08009ce9 	.word	0x08009ce9
 8009ca0:	08009ce9 	.word	0x08009ce9
 8009ca4:	08009ce9 	.word	0x08009ce9
 8009ca8:	08009ce9 	.word	0x08009ce9
 8009cac:	08009ce9 	.word	0x08009ce9
 8009cb0:	08009ce9 	.word	0x08009ce9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e0d6      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e0d2      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e0ce      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e0ca      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e0c6      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009ce0:	2340      	movs	r3, #64	@ 0x40
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e0c2      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009ce8:	2380      	movs	r3, #128	@ 0x80
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e0be      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009cf0:	40011400 	.word	0x40011400
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	40007800 	.word	0x40007800
 8009cfc:	40007c00 	.word	0x40007c00
 8009d00:	40011800 	.word	0x40011800
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4aad      	ldr	r2, [pc, #692]	@ (8009fc0 <UART_SetConfig+0x900>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d176      	bne.n	8009dfc <UART_SetConfig+0x73c>
 8009d0e:	4bad      	ldr	r3, [pc, #692]	@ (8009fc4 <UART_SetConfig+0x904>)
 8009d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d16:	2b28      	cmp	r3, #40	@ 0x28
 8009d18:	d86c      	bhi.n	8009df4 <UART_SetConfig+0x734>
 8009d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <UART_SetConfig+0x660>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009dc5 	.word	0x08009dc5
 8009d24:	08009df5 	.word	0x08009df5
 8009d28:	08009df5 	.word	0x08009df5
 8009d2c:	08009df5 	.word	0x08009df5
 8009d30:	08009df5 	.word	0x08009df5
 8009d34:	08009df5 	.word	0x08009df5
 8009d38:	08009df5 	.word	0x08009df5
 8009d3c:	08009df5 	.word	0x08009df5
 8009d40:	08009dcd 	.word	0x08009dcd
 8009d44:	08009df5 	.word	0x08009df5
 8009d48:	08009df5 	.word	0x08009df5
 8009d4c:	08009df5 	.word	0x08009df5
 8009d50:	08009df5 	.word	0x08009df5
 8009d54:	08009df5 	.word	0x08009df5
 8009d58:	08009df5 	.word	0x08009df5
 8009d5c:	08009df5 	.word	0x08009df5
 8009d60:	08009dd5 	.word	0x08009dd5
 8009d64:	08009df5 	.word	0x08009df5
 8009d68:	08009df5 	.word	0x08009df5
 8009d6c:	08009df5 	.word	0x08009df5
 8009d70:	08009df5 	.word	0x08009df5
 8009d74:	08009df5 	.word	0x08009df5
 8009d78:	08009df5 	.word	0x08009df5
 8009d7c:	08009df5 	.word	0x08009df5
 8009d80:	08009ddd 	.word	0x08009ddd
 8009d84:	08009df5 	.word	0x08009df5
 8009d88:	08009df5 	.word	0x08009df5
 8009d8c:	08009df5 	.word	0x08009df5
 8009d90:	08009df5 	.word	0x08009df5
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	08009df5 	.word	0x08009df5
 8009d9c:	08009df5 	.word	0x08009df5
 8009da0:	08009de5 	.word	0x08009de5
 8009da4:	08009df5 	.word	0x08009df5
 8009da8:	08009df5 	.word	0x08009df5
 8009dac:	08009df5 	.word	0x08009df5
 8009db0:	08009df5 	.word	0x08009df5
 8009db4:	08009df5 	.word	0x08009df5
 8009db8:	08009df5 	.word	0x08009df5
 8009dbc:	08009df5 	.word	0x08009df5
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e050      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009dcc:	2304      	movs	r3, #4
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e04c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e048      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e044      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e040      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009dec:	2340      	movs	r3, #64	@ 0x40
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e03c      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009df4:	2380      	movs	r3, #128	@ 0x80
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e038      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a71      	ldr	r2, [pc, #452]	@ (8009fc8 <UART_SetConfig+0x908>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d130      	bne.n	8009e68 <UART_SetConfig+0x7a8>
 8009e06:	4b6f      	ldr	r3, [pc, #444]	@ (8009fc4 <UART_SetConfig+0x904>)
 8009e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d826      	bhi.n	8009e60 <UART_SetConfig+0x7a0>
 8009e12:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <UART_SetConfig+0x758>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009e31 	.word	0x08009e31
 8009e1c:	08009e39 	.word	0x08009e39
 8009e20:	08009e41 	.word	0x08009e41
 8009e24:	08009e49 	.word	0x08009e49
 8009e28:	08009e51 	.word	0x08009e51
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	2302      	movs	r3, #2
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e01a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e016      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e012      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e00e      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e00a      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e58:	2340      	movs	r3, #64	@ 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e006      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e60:	2380      	movs	r3, #128	@ 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e002      	b.n	8009e6e <UART_SetConfig+0x7ae>
 8009e68:	2380      	movs	r3, #128	@ 0x80
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a55      	ldr	r2, [pc, #340]	@ (8009fc8 <UART_SetConfig+0x908>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	f040 80f8 	bne.w	800a06a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	dc46      	bgt.n	8009f10 <UART_SetConfig+0x850>
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	db75      	blt.n	8009f72 <UART_SetConfig+0x8b2>
 8009e86:	3b02      	subs	r3, #2
 8009e88:	2b1e      	cmp	r3, #30
 8009e8a:	d872      	bhi.n	8009f72 <UART_SetConfig+0x8b2>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <UART_SetConfig+0x7d4>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f17 	.word	0x08009f17
 8009e98:	08009f73 	.word	0x08009f73
 8009e9c:	08009f1f 	.word	0x08009f1f
 8009ea0:	08009f73 	.word	0x08009f73
 8009ea4:	08009f73 	.word	0x08009f73
 8009ea8:	08009f73 	.word	0x08009f73
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f73 	.word	0x08009f73
 8009eb4:	08009f73 	.word	0x08009f73
 8009eb8:	08009f73 	.word	0x08009f73
 8009ebc:	08009f73 	.word	0x08009f73
 8009ec0:	08009f73 	.word	0x08009f73
 8009ec4:	08009f73 	.word	0x08009f73
 8009ec8:	08009f73 	.word	0x08009f73
 8009ecc:	08009f3f 	.word	0x08009f3f
 8009ed0:	08009f73 	.word	0x08009f73
 8009ed4:	08009f73 	.word	0x08009f73
 8009ed8:	08009f73 	.word	0x08009f73
 8009edc:	08009f73 	.word	0x08009f73
 8009ee0:	08009f73 	.word	0x08009f73
 8009ee4:	08009f73 	.word	0x08009f73
 8009ee8:	08009f73 	.word	0x08009f73
 8009eec:	08009f73 	.word	0x08009f73
 8009ef0:	08009f73 	.word	0x08009f73
 8009ef4:	08009f73 	.word	0x08009f73
 8009ef8:	08009f73 	.word	0x08009f73
 8009efc:	08009f73 	.word	0x08009f73
 8009f00:	08009f73 	.word	0x08009f73
 8009f04:	08009f73 	.word	0x08009f73
 8009f08:	08009f73 	.word	0x08009f73
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	2b40      	cmp	r3, #64	@ 0x40
 8009f12:	d02a      	beq.n	8009f6a <UART_SetConfig+0x8aa>
 8009f14:	e02d      	b.n	8009f72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f16:	f7fe fd81 	bl	8008a1c <HAL_RCCEx_GetD3PCLK1Freq>
 8009f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e02f      	b.n	8009f7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fd90 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2c:	e027      	b.n	8009f7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f2e:	f107 0318 	add.w	r3, r7, #24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fedc 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e01f      	b.n	8009f7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3e:	4b21      	ldr	r3, [pc, #132]	@ (8009fc4 <UART_SetConfig+0x904>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <UART_SetConfig+0x904>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	08db      	lsrs	r3, r3, #3
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	4a1d      	ldr	r2, [pc, #116]	@ (8009fcc <UART_SetConfig+0x90c>)
 8009f56:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f5c:	e00f      	b.n	8009f7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fcc <UART_SetConfig+0x90c>)
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f62:	e00c      	b.n	8009f7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f64:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd0 <UART_SetConfig+0x910>)
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f68:	e009      	b.n	8009f7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f70:	e005      	b.n	8009f7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 81ee 	beq.w	800a362 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8a:	4a12      	ldr	r2, [pc, #72]	@ (8009fd4 <UART_SetConfig+0x914>)
 8009f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d305      	bcc.n	8009fb6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d910      	bls.n	8009fd8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fbc:	e1d1      	b.n	800a362 <UART_SetConfig+0xca2>
 8009fbe:	bf00      	nop
 8009fc0:	40011c00 	.word	0x40011c00
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	58000c00 	.word	0x58000c00
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	003d0900 	.word	0x003d0900
 8009fd4:	0800b52c 	.word	0x0800b52c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fda:	2200      	movs	r2, #0
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	4ac0      	ldr	r2, [pc, #768]	@ (800a2e8 <UART_SetConfig+0xc28>)
 8009fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2200      	movs	r2, #0
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	607a      	str	r2, [r7, #4]
 8009ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ffa:	f7f6 f9e1 	bl	80003c0 <__aeabi_uldivmod>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	020b      	lsls	r3, r1, #8
 800a010:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a014:	0202      	lsls	r2, r0, #8
 800a016:	6979      	ldr	r1, [r7, #20]
 800a018:	6849      	ldr	r1, [r1, #4]
 800a01a:	0849      	lsrs	r1, r1, #1
 800a01c:	2000      	movs	r0, #0
 800a01e:	460c      	mov	r4, r1
 800a020:	4605      	mov	r5, r0
 800a022:	eb12 0804 	adds.w	r8, r2, r4
 800a026:	eb43 0905 	adc.w	r9, r3, r5
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	469a      	mov	sl, r3
 800a032:	4693      	mov	fp, r2
 800a034:	4652      	mov	r2, sl
 800a036:	465b      	mov	r3, fp
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 f9c0 	bl	80003c0 <__aeabi_uldivmod>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4613      	mov	r3, r2
 800a046:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a04e:	d308      	bcc.n	800a062 <UART_SetConfig+0x9a2>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a056:	d204      	bcs.n	800a062 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a05e:	60da      	str	r2, [r3, #12]
 800a060:	e17f      	b.n	800a362 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a068:	e17b      	b.n	800a362 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a072:	f040 80bd 	bne.w	800a1f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a076:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a07a:	2b20      	cmp	r3, #32
 800a07c:	dc48      	bgt.n	800a110 <UART_SetConfig+0xa50>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	db7b      	blt.n	800a17a <UART_SetConfig+0xaba>
 800a082:	2b20      	cmp	r3, #32
 800a084:	d879      	bhi.n	800a17a <UART_SetConfig+0xaba>
 800a086:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <UART_SetConfig+0x9cc>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a117 	.word	0x0800a117
 800a090:	0800a11f 	.word	0x0800a11f
 800a094:	0800a17b 	.word	0x0800a17b
 800a098:	0800a17b 	.word	0x0800a17b
 800a09c:	0800a127 	.word	0x0800a127
 800a0a0:	0800a17b 	.word	0x0800a17b
 800a0a4:	0800a17b 	.word	0x0800a17b
 800a0a8:	0800a17b 	.word	0x0800a17b
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a17b 	.word	0x0800a17b
 800a0b4:	0800a17b 	.word	0x0800a17b
 800a0b8:	0800a17b 	.word	0x0800a17b
 800a0bc:	0800a17b 	.word	0x0800a17b
 800a0c0:	0800a17b 	.word	0x0800a17b
 800a0c4:	0800a17b 	.word	0x0800a17b
 800a0c8:	0800a17b 	.word	0x0800a17b
 800a0cc:	0800a147 	.word	0x0800a147
 800a0d0:	0800a17b 	.word	0x0800a17b
 800a0d4:	0800a17b 	.word	0x0800a17b
 800a0d8:	0800a17b 	.word	0x0800a17b
 800a0dc:	0800a17b 	.word	0x0800a17b
 800a0e0:	0800a17b 	.word	0x0800a17b
 800a0e4:	0800a17b 	.word	0x0800a17b
 800a0e8:	0800a17b 	.word	0x0800a17b
 800a0ec:	0800a17b 	.word	0x0800a17b
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a17b 	.word	0x0800a17b
 800a0f8:	0800a17b 	.word	0x0800a17b
 800a0fc:	0800a17b 	.word	0x0800a17b
 800a100:	0800a17b 	.word	0x0800a17b
 800a104:	0800a17b 	.word	0x0800a17b
 800a108:	0800a17b 	.word	0x0800a17b
 800a10c:	0800a16d 	.word	0x0800a16d
 800a110:	2b40      	cmp	r3, #64	@ 0x40
 800a112:	d02e      	beq.n	800a172 <UART_SetConfig+0xab2>
 800a114:	e031      	b.n	800a17a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a116:	f7fc fde3 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 800a11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a11c:	e033      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a11e:	f7fc fdf5 	bl	8006d0c <HAL_RCC_GetPCLK2Freq>
 800a122:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a124:	e02f      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fc8c 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a134:	e027      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a136:	f107 0318 	add.w	r3, r7, #24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fdd8 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a144:	e01f      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a146:	4b69      	ldr	r3, [pc, #420]	@ (800a2ec <UART_SetConfig+0xc2c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a152:	4b66      	ldr	r3, [pc, #408]	@ (800a2ec <UART_SetConfig+0xc2c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	08db      	lsrs	r3, r3, #3
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	4a64      	ldr	r2, [pc, #400]	@ (800a2f0 <UART_SetConfig+0xc30>)
 800a15e:	fa22 f303 	lsr.w	r3, r2, r3
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a164:	e00f      	b.n	800a186 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a166:	4b62      	ldr	r3, [pc, #392]	@ (800a2f0 <UART_SetConfig+0xc30>)
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16a:	e00c      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a16c:	4b61      	ldr	r3, [pc, #388]	@ (800a2f4 <UART_SetConfig+0xc34>)
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a170:	e009      	b.n	800a186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	e005      	b.n	800a186 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80ea 	beq.w	800a362 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a192:	4a55      	ldr	r2, [pc, #340]	@ (800a2e8 <UART_SetConfig+0xc28>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a0:	005a      	lsls	r2, r3, #1
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	441a      	add	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d916      	bls.n	800a1e8 <UART_SetConfig+0xb28>
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c0:	d212      	bcs.n	800a1e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	f023 030f 	bic.w	r3, r3, #15
 800a1ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1e4:	60da      	str	r2, [r3, #12]
 800a1e6:	e0bc      	b.n	800a362 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1ee:	e0b8      	b.n	800a362 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	dc4b      	bgt.n	800a290 <UART_SetConfig+0xbd0>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f2c0 8087 	blt.w	800a30c <UART_SetConfig+0xc4c>
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	f200 8084 	bhi.w	800a30c <UART_SetConfig+0xc4c>
 800a204:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <UART_SetConfig+0xb4c>)
 800a206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20a:	bf00      	nop
 800a20c:	0800a297 	.word	0x0800a297
 800a210:	0800a29f 	.word	0x0800a29f
 800a214:	0800a30d 	.word	0x0800a30d
 800a218:	0800a30d 	.word	0x0800a30d
 800a21c:	0800a2a7 	.word	0x0800a2a7
 800a220:	0800a30d 	.word	0x0800a30d
 800a224:	0800a30d 	.word	0x0800a30d
 800a228:	0800a30d 	.word	0x0800a30d
 800a22c:	0800a2b7 	.word	0x0800a2b7
 800a230:	0800a30d 	.word	0x0800a30d
 800a234:	0800a30d 	.word	0x0800a30d
 800a238:	0800a30d 	.word	0x0800a30d
 800a23c:	0800a30d 	.word	0x0800a30d
 800a240:	0800a30d 	.word	0x0800a30d
 800a244:	0800a30d 	.word	0x0800a30d
 800a248:	0800a30d 	.word	0x0800a30d
 800a24c:	0800a2c7 	.word	0x0800a2c7
 800a250:	0800a30d 	.word	0x0800a30d
 800a254:	0800a30d 	.word	0x0800a30d
 800a258:	0800a30d 	.word	0x0800a30d
 800a25c:	0800a30d 	.word	0x0800a30d
 800a260:	0800a30d 	.word	0x0800a30d
 800a264:	0800a30d 	.word	0x0800a30d
 800a268:	0800a30d 	.word	0x0800a30d
 800a26c:	0800a30d 	.word	0x0800a30d
 800a270:	0800a30d 	.word	0x0800a30d
 800a274:	0800a30d 	.word	0x0800a30d
 800a278:	0800a30d 	.word	0x0800a30d
 800a27c:	0800a30d 	.word	0x0800a30d
 800a280:	0800a30d 	.word	0x0800a30d
 800a284:	0800a30d 	.word	0x0800a30d
 800a288:	0800a30d 	.word	0x0800a30d
 800a28c:	0800a2ff 	.word	0x0800a2ff
 800a290:	2b40      	cmp	r3, #64	@ 0x40
 800a292:	d037      	beq.n	800a304 <UART_SetConfig+0xc44>
 800a294:	e03a      	b.n	800a30c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a296:	f7fc fd23 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 800a29a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a29c:	e03c      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a29e:	f7fc fd35 	bl	8006d0c <HAL_RCC_GetPCLK2Freq>
 800a2a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e038      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe fbcc 	bl	8008a48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b4:	e030      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b6:	f107 0318 	add.w	r3, r7, #24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fd18 	bl	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e028      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c6:	4b09      	ldr	r3, [pc, #36]	@ (800a2ec <UART_SetConfig+0xc2c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d012      	beq.n	800a2f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2d2:	4b06      	ldr	r3, [pc, #24]	@ (800a2ec <UART_SetConfig+0xc2c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	08db      	lsrs	r3, r3, #3
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	4a04      	ldr	r2, [pc, #16]	@ (800a2f0 <UART_SetConfig+0xc30>)
 800a2de:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2e4:	e018      	b.n	800a318 <UART_SetConfig+0xc58>
 800a2e6:	bf00      	nop
 800a2e8:	0800b52c 	.word	0x0800b52c
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	03d09000 	.word	0x03d09000
 800a2f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a2f8:	4b24      	ldr	r3, [pc, #144]	@ (800a38c <UART_SetConfig+0xccc>)
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2fc:	e00c      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2fe:	4b24      	ldr	r3, [pc, #144]	@ (800a390 <UART_SetConfig+0xcd0>)
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a302:	e009      	b.n	800a318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30a:	e005      	b.n	800a318 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a316:	bf00      	nop
    }

    if (pclk != 0U)
 800a318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d021      	beq.n	800a362 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a322:	4a1c      	ldr	r2, [pc, #112]	@ (800a394 <UART_SetConfig+0xcd4>)
 800a324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a328:	461a      	mov	r2, r3
 800a32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	441a      	add	r2, r3
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a340:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a344:	2b0f      	cmp	r3, #15
 800a346:	d909      	bls.n	800a35c <UART_SetConfig+0xc9c>
 800a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a34e:	d205      	bcs.n	800a35c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	b29a      	uxth	r2, r3
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	e002      	b.n	800a362 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2201      	movs	r2, #1
 800a366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2200      	movs	r2, #0
 800a376:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a37e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a382:	4618      	mov	r0, r3
 800a384:	3748      	adds	r7, #72	@ 0x48
 800a386:	46bd      	mov	sp, r7
 800a388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a38c:	03d09000 	.word	0x03d09000
 800a390:	003d0900 	.word	0x003d0900
 800a394:	0800b52c 	.word	0x0800b52c

0800a398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a4:	f003 0308 	and.w	r3, r3, #8
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a496:	d10a      	bne.n	800a4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b098      	sub	sp, #96	@ 0x60
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4ec:	f7f8 f812 	bl	8002514 <HAL_GetTick>
 800a4f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d12f      	bne.n	800a560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a508:	2200      	movs	r2, #0
 800a50a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f88e 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d022      	beq.n	800a560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a522:	e853 3f00 	ldrex	r3, [r3]
 800a526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a52e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a538:	647b      	str	r3, [r7, #68]	@ 0x44
 800a53a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a540:	e841 2300 	strex	r3, r2, [r1]
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1e6      	bne.n	800a51a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2220      	movs	r2, #32
 800a550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e063      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d149      	bne.n	800a602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a56e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a576:	2200      	movs	r2, #0
 800a578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f857 	bl	800a630 <UART_WaitOnFlagUntilTimeout>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03c      	beq.n	800a602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	623b      	str	r3, [r7, #32]
   return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5da:	61fa      	str	r2, [r7, #28]
 800a5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	69b9      	ldr	r1, [r7, #24]
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e5      	bne.n	800a5ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e012      	b.n	800a628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3758      	adds	r7, #88	@ 0x58
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	4613      	mov	r3, r2
 800a63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a640:	e04f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d04b      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a64a:	f7f7 ff63 	bl	8002514 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <UART_WaitOnFlagUntilTimeout+0x30>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e04e      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d037      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b80      	cmp	r3, #128	@ 0x80
 800a676:	d034      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	2b40      	cmp	r3, #64	@ 0x40
 800a67c:	d031      	beq.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d110      	bne.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2208      	movs	r2, #8
 800a692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f839 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2208      	movs	r2, #8
 800a69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e029      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6bc:	d111      	bne.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f81f 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e00f      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69da      	ldr	r2, [r3, #28]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	bf0c      	ite	eq
 800a6f2:	2301      	moveq	r3, #1
 800a6f4:	2300      	movne	r3, #0
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d0a0      	beq.n	800a642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b095      	sub	sp, #84	@ 0x54
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a732:	643b      	str	r3, [r7, #64]	@ 0x40
 800a734:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	61fb      	str	r3, [r7, #28]
   return(result);
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	4b1e      	ldr	r3, [pc, #120]	@ (800a7d4 <UART_EndRxTransfer+0xc8>)
 800a75a:	4013      	ands	r3, r2
 800a75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3308      	adds	r3, #8
 800a764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d118      	bne.n	800a7b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f023 0310 	bic.w	r3, r3, #16
 800a796:	647b      	str	r3, [r7, #68]	@ 0x44
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6979      	ldr	r1, [r7, #20]
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e6      	bne.n	800a782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7c8:	bf00      	nop
 800a7ca:	3754      	adds	r7, #84	@ 0x54
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	effffffe 	.word	0xeffffffe

0800a7d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d101      	bne.n	800a7ee <HAL_UARTEx_DisableFifoMode+0x16>
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	e027      	b.n	800a83e <HAL_UARTEx_DisableFifoMode+0x66>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2224      	movs	r2, #36	@ 0x24
 800a7fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0201 	bic.w	r2, r2, #1
 800a814:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a81c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2220      	movs	r2, #32
 800a830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a85e:	2302      	movs	r3, #2
 800a860:	e02d      	b.n	800a8be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2224      	movs	r2, #36	@ 0x24
 800a86e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f850 	bl	800a944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d101      	bne.n	800a8de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e02d      	b.n	800a93a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2224      	movs	r2, #36	@ 0x24
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f022 0201 	bic.w	r2, r2, #1
 800a904:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f812 	bl	800a944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a950:	2b00      	cmp	r3, #0
 800a952:	d108      	bne.n	800a966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a964:	e031      	b.n	800a9ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a966:	2310      	movs	r3, #16
 800a968:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a96a:	2310      	movs	r3, #16
 800a96c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	0e5b      	lsrs	r3, r3, #25
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	0f5b      	lsrs	r3, r3, #29
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a98e:	7bbb      	ldrb	r3, [r7, #14]
 800a990:	7b3a      	ldrb	r2, [r7, #12]
 800a992:	4911      	ldr	r1, [pc, #68]	@ (800a9d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a994:	5c8a      	ldrb	r2, [r1, r2]
 800a996:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a99a:	7b3a      	ldrb	r2, [r7, #12]
 800a99c:	490f      	ldr	r1, [pc, #60]	@ (800a9dc <UARTEx_SetNbDataToProcess+0x98>)
 800a99e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
 800a9ae:	7b7a      	ldrb	r2, [r7, #13]
 800a9b0:	4909      	ldr	r1, [pc, #36]	@ (800a9d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a9b2:	5c8a      	ldrb	r2, [r1, r2]
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9b8:	7b7a      	ldrb	r2, [r7, #13]
 800a9ba:	4908      	ldr	r1, [pc, #32]	@ (800a9dc <UARTEx_SetNbDataToProcess+0x98>)
 800a9bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	0800b544 	.word	0x0800b544
 800a9dc:	0800b54c 	.word	0x0800b54c

0800a9e0 <siprintf>:
 800a9e0:	b40e      	push	{r1, r2, r3}
 800a9e2:	b500      	push	{lr}
 800a9e4:	b09c      	sub	sp, #112	@ 0x70
 800a9e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9e8:	9002      	str	r0, [sp, #8]
 800a9ea:	9006      	str	r0, [sp, #24]
 800a9ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9f0:	4809      	ldr	r0, [pc, #36]	@ (800aa18 <siprintf+0x38>)
 800a9f2:	9107      	str	r1, [sp, #28]
 800a9f4:	9104      	str	r1, [sp, #16]
 800a9f6:	4909      	ldr	r1, [pc, #36]	@ (800aa1c <siprintf+0x3c>)
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	9105      	str	r1, [sp, #20]
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	a902      	add	r1, sp, #8
 800aa04:	f000 f9a2 	bl	800ad4c <_svfiprintf_r>
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	b01c      	add	sp, #112	@ 0x70
 800aa10:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa14:	b003      	add	sp, #12
 800aa16:	4770      	bx	lr
 800aa18:	24000018 	.word	0x24000018
 800aa1c:	ffff0208 	.word	0xffff0208

0800aa20 <memset>:
 800aa20:	4402      	add	r2, r0
 800aa22:	4603      	mov	r3, r0
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d100      	bne.n	800aa2a <memset+0xa>
 800aa28:	4770      	bx	lr
 800aa2a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa2e:	e7f9      	b.n	800aa24 <memset+0x4>

0800aa30 <__errno>:
 800aa30:	4b01      	ldr	r3, [pc, #4]	@ (800aa38 <__errno+0x8>)
 800aa32:	6818      	ldr	r0, [r3, #0]
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	24000018 	.word	0x24000018

0800aa3c <__libc_init_array>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4d0d      	ldr	r5, [pc, #52]	@ (800aa74 <__libc_init_array+0x38>)
 800aa40:	4c0d      	ldr	r4, [pc, #52]	@ (800aa78 <__libc_init_array+0x3c>)
 800aa42:	1b64      	subs	r4, r4, r5
 800aa44:	10a4      	asrs	r4, r4, #2
 800aa46:	2600      	movs	r6, #0
 800aa48:	42a6      	cmp	r6, r4
 800aa4a:	d109      	bne.n	800aa60 <__libc_init_array+0x24>
 800aa4c:	4d0b      	ldr	r5, [pc, #44]	@ (800aa7c <__libc_init_array+0x40>)
 800aa4e:	4c0c      	ldr	r4, [pc, #48]	@ (800aa80 <__libc_init_array+0x44>)
 800aa50:	f000 fc66 	bl	800b320 <_init>
 800aa54:	1b64      	subs	r4, r4, r5
 800aa56:	10a4      	asrs	r4, r4, #2
 800aa58:	2600      	movs	r6, #0
 800aa5a:	42a6      	cmp	r6, r4
 800aa5c:	d105      	bne.n	800aa6a <__libc_init_array+0x2e>
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa64:	4798      	blx	r3
 800aa66:	3601      	adds	r6, #1
 800aa68:	e7ee      	b.n	800aa48 <__libc_init_array+0xc>
 800aa6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6e:	4798      	blx	r3
 800aa70:	3601      	adds	r6, #1
 800aa72:	e7f2      	b.n	800aa5a <__libc_init_array+0x1e>
 800aa74:	0800b590 	.word	0x0800b590
 800aa78:	0800b590 	.word	0x0800b590
 800aa7c:	0800b590 	.word	0x0800b590
 800aa80:	0800b598 	.word	0x0800b598

0800aa84 <__retarget_lock_acquire_recursive>:
 800aa84:	4770      	bx	lr

0800aa86 <__retarget_lock_release_recursive>:
 800aa86:	4770      	bx	lr

0800aa88 <memcpy>:
 800aa88:	440a      	add	r2, r1
 800aa8a:	4291      	cmp	r1, r2
 800aa8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa90:	d100      	bne.n	800aa94 <memcpy+0xc>
 800aa92:	4770      	bx	lr
 800aa94:	b510      	push	{r4, lr}
 800aa96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	d1f9      	bne.n	800aa96 <memcpy+0xe>
 800aaa2:	bd10      	pop	{r4, pc}

0800aaa4 <_free_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	2900      	cmp	r1, #0
 800aaaa:	d041      	beq.n	800ab30 <_free_r+0x8c>
 800aaac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab0:	1f0c      	subs	r4, r1, #4
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bfb8      	it	lt
 800aab6:	18e4      	addlt	r4, r4, r3
 800aab8:	f000 f8e0 	bl	800ac7c <__malloc_lock>
 800aabc:	4a1d      	ldr	r2, [pc, #116]	@ (800ab34 <_free_r+0x90>)
 800aabe:	6813      	ldr	r3, [r2, #0]
 800aac0:	b933      	cbnz	r3, 800aad0 <_free_r+0x2c>
 800aac2:	6063      	str	r3, [r4, #4]
 800aac4:	6014      	str	r4, [r2, #0]
 800aac6:	4628      	mov	r0, r5
 800aac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aacc:	f000 b8dc 	b.w	800ac88 <__malloc_unlock>
 800aad0:	42a3      	cmp	r3, r4
 800aad2:	d908      	bls.n	800aae6 <_free_r+0x42>
 800aad4:	6820      	ldr	r0, [r4, #0]
 800aad6:	1821      	adds	r1, r4, r0
 800aad8:	428b      	cmp	r3, r1
 800aada:	bf01      	itttt	eq
 800aadc:	6819      	ldreq	r1, [r3, #0]
 800aade:	685b      	ldreq	r3, [r3, #4]
 800aae0:	1809      	addeq	r1, r1, r0
 800aae2:	6021      	streq	r1, [r4, #0]
 800aae4:	e7ed      	b.n	800aac2 <_free_r+0x1e>
 800aae6:	461a      	mov	r2, r3
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	b10b      	cbz	r3, 800aaf0 <_free_r+0x4c>
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d9fa      	bls.n	800aae6 <_free_r+0x42>
 800aaf0:	6811      	ldr	r1, [r2, #0]
 800aaf2:	1850      	adds	r0, r2, r1
 800aaf4:	42a0      	cmp	r0, r4
 800aaf6:	d10b      	bne.n	800ab10 <_free_r+0x6c>
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	4401      	add	r1, r0
 800aafc:	1850      	adds	r0, r2, r1
 800aafe:	4283      	cmp	r3, r0
 800ab00:	6011      	str	r1, [r2, #0]
 800ab02:	d1e0      	bne.n	800aac6 <_free_r+0x22>
 800ab04:	6818      	ldr	r0, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	6053      	str	r3, [r2, #4]
 800ab0a:	4408      	add	r0, r1
 800ab0c:	6010      	str	r0, [r2, #0]
 800ab0e:	e7da      	b.n	800aac6 <_free_r+0x22>
 800ab10:	d902      	bls.n	800ab18 <_free_r+0x74>
 800ab12:	230c      	movs	r3, #12
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	e7d6      	b.n	800aac6 <_free_r+0x22>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	1821      	adds	r1, r4, r0
 800ab1c:	428b      	cmp	r3, r1
 800ab1e:	bf04      	itt	eq
 800ab20:	6819      	ldreq	r1, [r3, #0]
 800ab22:	685b      	ldreq	r3, [r3, #4]
 800ab24:	6063      	str	r3, [r4, #4]
 800ab26:	bf04      	itt	eq
 800ab28:	1809      	addeq	r1, r1, r0
 800ab2a:	6021      	streq	r1, [r4, #0]
 800ab2c:	6054      	str	r4, [r2, #4]
 800ab2e:	e7ca      	b.n	800aac6 <_free_r+0x22>
 800ab30:	bd38      	pop	{r3, r4, r5, pc}
 800ab32:	bf00      	nop
 800ab34:	24000db8 	.word	0x24000db8

0800ab38 <sbrk_aligned>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ab78 <sbrk_aligned+0x40>)
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	6831      	ldr	r1, [r6, #0]
 800ab40:	4605      	mov	r5, r0
 800ab42:	b911      	cbnz	r1, 800ab4a <sbrk_aligned+0x12>
 800ab44:	f000 fba6 	bl	800b294 <_sbrk_r>
 800ab48:	6030      	str	r0, [r6, #0]
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f000 fba1 	bl	800b294 <_sbrk_r>
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	d103      	bne.n	800ab5e <sbrk_aligned+0x26>
 800ab56:	f04f 34ff 	mov.w	r4, #4294967295
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	1cc4      	adds	r4, r0, #3
 800ab60:	f024 0403 	bic.w	r4, r4, #3
 800ab64:	42a0      	cmp	r0, r4
 800ab66:	d0f8      	beq.n	800ab5a <sbrk_aligned+0x22>
 800ab68:	1a21      	subs	r1, r4, r0
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f000 fb92 	bl	800b294 <_sbrk_r>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d1f2      	bne.n	800ab5a <sbrk_aligned+0x22>
 800ab74:	e7ef      	b.n	800ab56 <sbrk_aligned+0x1e>
 800ab76:	bf00      	nop
 800ab78:	24000db4 	.word	0x24000db4

0800ab7c <_malloc_r>:
 800ab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab80:	1ccd      	adds	r5, r1, #3
 800ab82:	f025 0503 	bic.w	r5, r5, #3
 800ab86:	3508      	adds	r5, #8
 800ab88:	2d0c      	cmp	r5, #12
 800ab8a:	bf38      	it	cc
 800ab8c:	250c      	movcc	r5, #12
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	4606      	mov	r6, r0
 800ab92:	db01      	blt.n	800ab98 <_malloc_r+0x1c>
 800ab94:	42a9      	cmp	r1, r5
 800ab96:	d904      	bls.n	800aba2 <_malloc_r+0x26>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	6033      	str	r3, [r6, #0]
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac78 <_malloc_r+0xfc>
 800aba6:	f000 f869 	bl	800ac7c <__malloc_lock>
 800abaa:	f8d8 3000 	ldr.w	r3, [r8]
 800abae:	461c      	mov	r4, r3
 800abb0:	bb44      	cbnz	r4, 800ac04 <_malloc_r+0x88>
 800abb2:	4629      	mov	r1, r5
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7ff ffbf 	bl	800ab38 <sbrk_aligned>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	4604      	mov	r4, r0
 800abbe:	d158      	bne.n	800ac72 <_malloc_r+0xf6>
 800abc0:	f8d8 4000 	ldr.w	r4, [r8]
 800abc4:	4627      	mov	r7, r4
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	d143      	bne.n	800ac52 <_malloc_r+0xd6>
 800abca:	2c00      	cmp	r4, #0
 800abcc:	d04b      	beq.n	800ac66 <_malloc_r+0xea>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	4639      	mov	r1, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	eb04 0903 	add.w	r9, r4, r3
 800abd8:	f000 fb5c 	bl	800b294 <_sbrk_r>
 800abdc:	4581      	cmp	r9, r0
 800abde:	d142      	bne.n	800ac66 <_malloc_r+0xea>
 800abe0:	6821      	ldr	r1, [r4, #0]
 800abe2:	1a6d      	subs	r5, r5, r1
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ffa6 	bl	800ab38 <sbrk_aligned>
 800abec:	3001      	adds	r0, #1
 800abee:	d03a      	beq.n	800ac66 <_malloc_r+0xea>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	442b      	add	r3, r5
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	f8d8 3000 	ldr.w	r3, [r8]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	bb62      	cbnz	r2, 800ac58 <_malloc_r+0xdc>
 800abfe:	f8c8 7000 	str.w	r7, [r8]
 800ac02:	e00f      	b.n	800ac24 <_malloc_r+0xa8>
 800ac04:	6822      	ldr	r2, [r4, #0]
 800ac06:	1b52      	subs	r2, r2, r5
 800ac08:	d420      	bmi.n	800ac4c <_malloc_r+0xd0>
 800ac0a:	2a0b      	cmp	r2, #11
 800ac0c:	d917      	bls.n	800ac3e <_malloc_r+0xc2>
 800ac0e:	1961      	adds	r1, r4, r5
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	6025      	str	r5, [r4, #0]
 800ac14:	bf18      	it	ne
 800ac16:	6059      	strne	r1, [r3, #4]
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	bf08      	it	eq
 800ac1c:	f8c8 1000 	streq.w	r1, [r8]
 800ac20:	5162      	str	r2, [r4, r5]
 800ac22:	604b      	str	r3, [r1, #4]
 800ac24:	4630      	mov	r0, r6
 800ac26:	f000 f82f 	bl	800ac88 <__malloc_unlock>
 800ac2a:	f104 000b 	add.w	r0, r4, #11
 800ac2e:	1d23      	adds	r3, r4, #4
 800ac30:	f020 0007 	bic.w	r0, r0, #7
 800ac34:	1ac2      	subs	r2, r0, r3
 800ac36:	bf1c      	itt	ne
 800ac38:	1a1b      	subne	r3, r3, r0
 800ac3a:	50a3      	strne	r3, [r4, r2]
 800ac3c:	e7af      	b.n	800ab9e <_malloc_r+0x22>
 800ac3e:	6862      	ldr	r2, [r4, #4]
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	bf0c      	ite	eq
 800ac44:	f8c8 2000 	streq.w	r2, [r8]
 800ac48:	605a      	strne	r2, [r3, #4]
 800ac4a:	e7eb      	b.n	800ac24 <_malloc_r+0xa8>
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	6864      	ldr	r4, [r4, #4]
 800ac50:	e7ae      	b.n	800abb0 <_malloc_r+0x34>
 800ac52:	463c      	mov	r4, r7
 800ac54:	687f      	ldr	r7, [r7, #4]
 800ac56:	e7b6      	b.n	800abc6 <_malloc_r+0x4a>
 800ac58:	461a      	mov	r2, r3
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d1fb      	bne.n	800ac58 <_malloc_r+0xdc>
 800ac60:	2300      	movs	r3, #0
 800ac62:	6053      	str	r3, [r2, #4]
 800ac64:	e7de      	b.n	800ac24 <_malloc_r+0xa8>
 800ac66:	230c      	movs	r3, #12
 800ac68:	6033      	str	r3, [r6, #0]
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f000 f80c 	bl	800ac88 <__malloc_unlock>
 800ac70:	e794      	b.n	800ab9c <_malloc_r+0x20>
 800ac72:	6005      	str	r5, [r0, #0]
 800ac74:	e7d6      	b.n	800ac24 <_malloc_r+0xa8>
 800ac76:	bf00      	nop
 800ac78:	24000db8 	.word	0x24000db8

0800ac7c <__malloc_lock>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	@ (800ac84 <__malloc_lock+0x8>)
 800ac7e:	f7ff bf01 	b.w	800aa84 <__retarget_lock_acquire_recursive>
 800ac82:	bf00      	nop
 800ac84:	24000db0 	.word	0x24000db0

0800ac88 <__malloc_unlock>:
 800ac88:	4801      	ldr	r0, [pc, #4]	@ (800ac90 <__malloc_unlock+0x8>)
 800ac8a:	f7ff befc 	b.w	800aa86 <__retarget_lock_release_recursive>
 800ac8e:	bf00      	nop
 800ac90:	24000db0 	.word	0x24000db0

0800ac94 <__ssputs_r>:
 800ac94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac98:	688e      	ldr	r6, [r1, #8]
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	42be      	cmp	r6, r7
 800ac9e:	680b      	ldr	r3, [r1, #0]
 800aca0:	4682      	mov	sl, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4690      	mov	r8, r2
 800aca6:	d82d      	bhi.n	800ad04 <__ssputs_r+0x70>
 800aca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acb0:	d026      	beq.n	800ad00 <__ssputs_r+0x6c>
 800acb2:	6965      	ldr	r5, [r4, #20]
 800acb4:	6909      	ldr	r1, [r1, #16]
 800acb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acba:	eba3 0901 	sub.w	r9, r3, r1
 800acbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acc2:	1c7b      	adds	r3, r7, #1
 800acc4:	444b      	add	r3, r9
 800acc6:	106d      	asrs	r5, r5, #1
 800acc8:	429d      	cmp	r5, r3
 800acca:	bf38      	it	cc
 800accc:	461d      	movcc	r5, r3
 800acce:	0553      	lsls	r3, r2, #21
 800acd0:	d527      	bpl.n	800ad22 <__ssputs_r+0x8e>
 800acd2:	4629      	mov	r1, r5
 800acd4:	f7ff ff52 	bl	800ab7c <_malloc_r>
 800acd8:	4606      	mov	r6, r0
 800acda:	b360      	cbz	r0, 800ad36 <__ssputs_r+0xa2>
 800acdc:	6921      	ldr	r1, [r4, #16]
 800acde:	464a      	mov	r2, r9
 800ace0:	f7ff fed2 	bl	800aa88 <memcpy>
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	6126      	str	r6, [r4, #16]
 800acf2:	6165      	str	r5, [r4, #20]
 800acf4:	444e      	add	r6, r9
 800acf6:	eba5 0509 	sub.w	r5, r5, r9
 800acfa:	6026      	str	r6, [r4, #0]
 800acfc:	60a5      	str	r5, [r4, #8]
 800acfe:	463e      	mov	r6, r7
 800ad00:	42be      	cmp	r6, r7
 800ad02:	d900      	bls.n	800ad06 <__ssputs_r+0x72>
 800ad04:	463e      	mov	r6, r7
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4641      	mov	r1, r8
 800ad0c:	f000 faa8 	bl	800b260 <memmove>
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	1b9b      	subs	r3, r3, r6
 800ad14:	60a3      	str	r3, [r4, #8]
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	4433      	add	r3, r6
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad22:	462a      	mov	r2, r5
 800ad24:	f000 fac6 	bl	800b2b4 <_realloc_r>
 800ad28:	4606      	mov	r6, r0
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1e0      	bne.n	800acf0 <__ssputs_r+0x5c>
 800ad2e:	6921      	ldr	r1, [r4, #16]
 800ad30:	4650      	mov	r0, sl
 800ad32:	f7ff feb7 	bl	800aaa4 <_free_r>
 800ad36:	230c      	movs	r3, #12
 800ad38:	f8ca 3000 	str.w	r3, [sl]
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	e7e9      	b.n	800ad1e <__ssputs_r+0x8a>
	...

0800ad4c <_svfiprintf_r>:
 800ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad50:	4698      	mov	r8, r3
 800ad52:	898b      	ldrh	r3, [r1, #12]
 800ad54:	061b      	lsls	r3, r3, #24
 800ad56:	b09d      	sub	sp, #116	@ 0x74
 800ad58:	4607      	mov	r7, r0
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	d510      	bpl.n	800ad82 <_svfiprintf_r+0x36>
 800ad60:	690b      	ldr	r3, [r1, #16]
 800ad62:	b973      	cbnz	r3, 800ad82 <_svfiprintf_r+0x36>
 800ad64:	2140      	movs	r1, #64	@ 0x40
 800ad66:	f7ff ff09 	bl	800ab7c <_malloc_r>
 800ad6a:	6028      	str	r0, [r5, #0]
 800ad6c:	6128      	str	r0, [r5, #16]
 800ad6e:	b930      	cbnz	r0, 800ad7e <_svfiprintf_r+0x32>
 800ad70:	230c      	movs	r3, #12
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	b01d      	add	sp, #116	@ 0x74
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	2340      	movs	r3, #64	@ 0x40
 800ad80:	616b      	str	r3, [r5, #20]
 800ad82:	2300      	movs	r3, #0
 800ad84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad86:	2320      	movs	r3, #32
 800ad88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad90:	2330      	movs	r3, #48	@ 0x30
 800ad92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af30 <_svfiprintf_r+0x1e4>
 800ad96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad9a:	f04f 0901 	mov.w	r9, #1
 800ad9e:	4623      	mov	r3, r4
 800ada0:	469a      	mov	sl, r3
 800ada2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada6:	b10a      	cbz	r2, 800adac <_svfiprintf_r+0x60>
 800ada8:	2a25      	cmp	r2, #37	@ 0x25
 800adaa:	d1f9      	bne.n	800ada0 <_svfiprintf_r+0x54>
 800adac:	ebba 0b04 	subs.w	fp, sl, r4
 800adb0:	d00b      	beq.n	800adca <_svfiprintf_r+0x7e>
 800adb2:	465b      	mov	r3, fp
 800adb4:	4622      	mov	r2, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	4638      	mov	r0, r7
 800adba:	f7ff ff6b 	bl	800ac94 <__ssputs_r>
 800adbe:	3001      	adds	r0, #1
 800adc0:	f000 80a7 	beq.w	800af12 <_svfiprintf_r+0x1c6>
 800adc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc6:	445a      	add	r2, fp
 800adc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800adca:	f89a 3000 	ldrb.w	r3, [sl]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 809f 	beq.w	800af12 <_svfiprintf_r+0x1c6>
 800add4:	2300      	movs	r3, #0
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adde:	f10a 0a01 	add.w	sl, sl, #1
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adea:	931a      	str	r3, [sp, #104]	@ 0x68
 800adec:	4654      	mov	r4, sl
 800adee:	2205      	movs	r2, #5
 800adf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf4:	484e      	ldr	r0, [pc, #312]	@ (800af30 <_svfiprintf_r+0x1e4>)
 800adf6:	f7f5 fa93 	bl	8000320 <memchr>
 800adfa:	9a04      	ldr	r2, [sp, #16]
 800adfc:	b9d8      	cbnz	r0, 800ae36 <_svfiprintf_r+0xea>
 800adfe:	06d0      	lsls	r0, r2, #27
 800ae00:	bf44      	itt	mi
 800ae02:	2320      	movmi	r3, #32
 800ae04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae08:	0711      	lsls	r1, r2, #28
 800ae0a:	bf44      	itt	mi
 800ae0c:	232b      	movmi	r3, #43	@ 0x2b
 800ae0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae12:	f89a 3000 	ldrb.w	r3, [sl]
 800ae16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae18:	d015      	beq.n	800ae46 <_svfiprintf_r+0xfa>
 800ae1a:	9a07      	ldr	r2, [sp, #28]
 800ae1c:	4654      	mov	r4, sl
 800ae1e:	2000      	movs	r0, #0
 800ae20:	f04f 0c0a 	mov.w	ip, #10
 800ae24:	4621      	mov	r1, r4
 800ae26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae2a:	3b30      	subs	r3, #48	@ 0x30
 800ae2c:	2b09      	cmp	r3, #9
 800ae2e:	d94b      	bls.n	800aec8 <_svfiprintf_r+0x17c>
 800ae30:	b1b0      	cbz	r0, 800ae60 <_svfiprintf_r+0x114>
 800ae32:	9207      	str	r2, [sp, #28]
 800ae34:	e014      	b.n	800ae60 <_svfiprintf_r+0x114>
 800ae36:	eba0 0308 	sub.w	r3, r0, r8
 800ae3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	46a2      	mov	sl, r4
 800ae44:	e7d2      	b.n	800adec <_svfiprintf_r+0xa0>
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	1d19      	adds	r1, r3, #4
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	9103      	str	r1, [sp, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfbb      	ittet	lt
 800ae52:	425b      	neglt	r3, r3
 800ae54:	f042 0202 	orrlt.w	r2, r2, #2
 800ae58:	9307      	strge	r3, [sp, #28]
 800ae5a:	9307      	strlt	r3, [sp, #28]
 800ae5c:	bfb8      	it	lt
 800ae5e:	9204      	strlt	r2, [sp, #16]
 800ae60:	7823      	ldrb	r3, [r4, #0]
 800ae62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae64:	d10a      	bne.n	800ae7c <_svfiprintf_r+0x130>
 800ae66:	7863      	ldrb	r3, [r4, #1]
 800ae68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae6a:	d132      	bne.n	800aed2 <_svfiprintf_r+0x186>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	1d1a      	adds	r2, r3, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	9203      	str	r2, [sp, #12]
 800ae74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae78:	3402      	adds	r4, #2
 800ae7a:	9305      	str	r3, [sp, #20]
 800ae7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af40 <_svfiprintf_r+0x1f4>
 800ae80:	7821      	ldrb	r1, [r4, #0]
 800ae82:	2203      	movs	r2, #3
 800ae84:	4650      	mov	r0, sl
 800ae86:	f7f5 fa4b 	bl	8000320 <memchr>
 800ae8a:	b138      	cbz	r0, 800ae9c <_svfiprintf_r+0x150>
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	eba0 000a 	sub.w	r0, r0, sl
 800ae92:	2240      	movs	r2, #64	@ 0x40
 800ae94:	4082      	lsls	r2, r0
 800ae96:	4313      	orrs	r3, r2
 800ae98:	3401      	adds	r4, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea0:	4824      	ldr	r0, [pc, #144]	@ (800af34 <_svfiprintf_r+0x1e8>)
 800aea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aea6:	2206      	movs	r2, #6
 800aea8:	f7f5 fa3a 	bl	8000320 <memchr>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d036      	beq.n	800af1e <_svfiprintf_r+0x1d2>
 800aeb0:	4b21      	ldr	r3, [pc, #132]	@ (800af38 <_svfiprintf_r+0x1ec>)
 800aeb2:	bb1b      	cbnz	r3, 800aefc <_svfiprintf_r+0x1b0>
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	3307      	adds	r3, #7
 800aeb8:	f023 0307 	bic.w	r3, r3, #7
 800aebc:	3308      	adds	r3, #8
 800aebe:	9303      	str	r3, [sp, #12]
 800aec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec2:	4433      	add	r3, r6
 800aec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec6:	e76a      	b.n	800ad9e <_svfiprintf_r+0x52>
 800aec8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aecc:	460c      	mov	r4, r1
 800aece:	2001      	movs	r0, #1
 800aed0:	e7a8      	b.n	800ae24 <_svfiprintf_r+0xd8>
 800aed2:	2300      	movs	r3, #0
 800aed4:	3401      	adds	r4, #1
 800aed6:	9305      	str	r3, [sp, #20]
 800aed8:	4619      	mov	r1, r3
 800aeda:	f04f 0c0a 	mov.w	ip, #10
 800aede:	4620      	mov	r0, r4
 800aee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee4:	3a30      	subs	r2, #48	@ 0x30
 800aee6:	2a09      	cmp	r2, #9
 800aee8:	d903      	bls.n	800aef2 <_svfiprintf_r+0x1a6>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0c6      	beq.n	800ae7c <_svfiprintf_r+0x130>
 800aeee:	9105      	str	r1, [sp, #20]
 800aef0:	e7c4      	b.n	800ae7c <_svfiprintf_r+0x130>
 800aef2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef6:	4604      	mov	r4, r0
 800aef8:	2301      	movs	r3, #1
 800aefa:	e7f0      	b.n	800aede <_svfiprintf_r+0x192>
 800aefc:	ab03      	add	r3, sp, #12
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	462a      	mov	r2, r5
 800af02:	4b0e      	ldr	r3, [pc, #56]	@ (800af3c <_svfiprintf_r+0x1f0>)
 800af04:	a904      	add	r1, sp, #16
 800af06:	4638      	mov	r0, r7
 800af08:	f3af 8000 	nop.w
 800af0c:	1c42      	adds	r2, r0, #1
 800af0e:	4606      	mov	r6, r0
 800af10:	d1d6      	bne.n	800aec0 <_svfiprintf_r+0x174>
 800af12:	89ab      	ldrh	r3, [r5, #12]
 800af14:	065b      	lsls	r3, r3, #25
 800af16:	f53f af2d 	bmi.w	800ad74 <_svfiprintf_r+0x28>
 800af1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af1c:	e72c      	b.n	800ad78 <_svfiprintf_r+0x2c>
 800af1e:	ab03      	add	r3, sp, #12
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	462a      	mov	r2, r5
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <_svfiprintf_r+0x1f0>)
 800af26:	a904      	add	r1, sp, #16
 800af28:	4638      	mov	r0, r7
 800af2a:	f000 f879 	bl	800b020 <_printf_i>
 800af2e:	e7ed      	b.n	800af0c <_svfiprintf_r+0x1c0>
 800af30:	0800b554 	.word	0x0800b554
 800af34:	0800b55e 	.word	0x0800b55e
 800af38:	00000000 	.word	0x00000000
 800af3c:	0800ac95 	.word	0x0800ac95
 800af40:	0800b55a 	.word	0x0800b55a

0800af44 <_printf_common>:
 800af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af48:	4616      	mov	r6, r2
 800af4a:	4698      	mov	r8, r3
 800af4c:	688a      	ldr	r2, [r1, #8]
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af54:	4293      	cmp	r3, r2
 800af56:	bfb8      	it	lt
 800af58:	4613      	movlt	r3, r2
 800af5a:	6033      	str	r3, [r6, #0]
 800af5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af60:	4607      	mov	r7, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b10a      	cbz	r2, 800af6a <_printf_common+0x26>
 800af66:	3301      	adds	r3, #1
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	0699      	lsls	r1, r3, #26
 800af6e:	bf42      	ittt	mi
 800af70:	6833      	ldrmi	r3, [r6, #0]
 800af72:	3302      	addmi	r3, #2
 800af74:	6033      	strmi	r3, [r6, #0]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	f015 0506 	ands.w	r5, r5, #6
 800af7c:	d106      	bne.n	800af8c <_printf_common+0x48>
 800af7e:	f104 0a19 	add.w	sl, r4, #25
 800af82:	68e3      	ldr	r3, [r4, #12]
 800af84:	6832      	ldr	r2, [r6, #0]
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc26      	bgt.n	800afda <_printf_common+0x96>
 800af8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af90:	6822      	ldr	r2, [r4, #0]
 800af92:	3b00      	subs	r3, #0
 800af94:	bf18      	it	ne
 800af96:	2301      	movne	r3, #1
 800af98:	0692      	lsls	r2, r2, #26
 800af9a:	d42b      	bmi.n	800aff4 <_printf_common+0xb0>
 800af9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afa0:	4641      	mov	r1, r8
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c8      	blx	r9
 800afa6:	3001      	adds	r0, #1
 800afa8:	d01e      	beq.n	800afe8 <_printf_common+0xa4>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	6922      	ldr	r2, [r4, #16]
 800afae:	f003 0306 	and.w	r3, r3, #6
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	bf02      	ittt	eq
 800afb6:	68e5      	ldreq	r5, [r4, #12]
 800afb8:	6833      	ldreq	r3, [r6, #0]
 800afba:	1aed      	subeq	r5, r5, r3
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	bf0c      	ite	eq
 800afc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc4:	2500      	movne	r5, #0
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bfc4      	itt	gt
 800afca:	1a9b      	subgt	r3, r3, r2
 800afcc:	18ed      	addgt	r5, r5, r3
 800afce:	2600      	movs	r6, #0
 800afd0:	341a      	adds	r4, #26
 800afd2:	42b5      	cmp	r5, r6
 800afd4:	d11a      	bne.n	800b00c <_printf_common+0xc8>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e008      	b.n	800afec <_printf_common+0xa8>
 800afda:	2301      	movs	r3, #1
 800afdc:	4652      	mov	r2, sl
 800afde:	4641      	mov	r1, r8
 800afe0:	4638      	mov	r0, r7
 800afe2:	47c8      	blx	r9
 800afe4:	3001      	adds	r0, #1
 800afe6:	d103      	bne.n	800aff0 <_printf_common+0xac>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7c6      	b.n	800af82 <_printf_common+0x3e>
 800aff4:	18e1      	adds	r1, r4, r3
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	2030      	movs	r0, #48	@ 0x30
 800affa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800affe:	4422      	add	r2, r4
 800b000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b008:	3302      	adds	r3, #2
 800b00a:	e7c7      	b.n	800af9c <_printf_common+0x58>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4641      	mov	r1, r8
 800b012:	4638      	mov	r0, r7
 800b014:	47c8      	blx	r9
 800b016:	3001      	adds	r0, #1
 800b018:	d0e6      	beq.n	800afe8 <_printf_common+0xa4>
 800b01a:	3601      	adds	r6, #1
 800b01c:	e7d9      	b.n	800afd2 <_printf_common+0x8e>
	...

0800b020 <_printf_i>:
 800b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	7e0f      	ldrb	r7, [r1, #24]
 800b026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b028:	2f78      	cmp	r7, #120	@ 0x78
 800b02a:	4691      	mov	r9, r2
 800b02c:	4680      	mov	r8, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	469a      	mov	sl, r3
 800b032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b036:	d807      	bhi.n	800b048 <_printf_i+0x28>
 800b038:	2f62      	cmp	r7, #98	@ 0x62
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x32>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	f000 80d2 	beq.w	800b1e6 <_printf_i+0x1c6>
 800b042:	2f58      	cmp	r7, #88	@ 0x58
 800b044:	f000 80b9 	beq.w	800b1ba <_printf_i+0x19a>
 800b048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b04c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b050:	e03a      	b.n	800b0c8 <_printf_i+0xa8>
 800b052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b056:	2b15      	cmp	r3, #21
 800b058:	d8f6      	bhi.n	800b048 <_printf_i+0x28>
 800b05a:	a101      	add	r1, pc, #4	@ (adr r1, 800b060 <_printf_i+0x40>)
 800b05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b049 	.word	0x0800b049
 800b06c:	0800b049 	.word	0x0800b049
 800b070:	0800b049 	.word	0x0800b049
 800b074:	0800b049 	.word	0x0800b049
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b049 	.word	0x0800b049
 800b080:	0800b049 	.word	0x0800b049
 800b084:	0800b049 	.word	0x0800b049
 800b088:	0800b049 	.word	0x0800b049
 800b08c:	0800b1cd 	.word	0x0800b1cd
 800b090:	0800b0f7 	.word	0x0800b0f7
 800b094:	0800b187 	.word	0x0800b187
 800b098:	0800b049 	.word	0x0800b049
 800b09c:	0800b049 	.word	0x0800b049
 800b0a0:	0800b1ef 	.word	0x0800b1ef
 800b0a4:	0800b049 	.word	0x0800b049
 800b0a8:	0800b0f7 	.word	0x0800b0f7
 800b0ac:	0800b049 	.word	0x0800b049
 800b0b0:	0800b049 	.word	0x0800b049
 800b0b4:	0800b18f 	.word	0x0800b18f
 800b0b8:	6833      	ldr	r3, [r6, #0]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6032      	str	r2, [r6, #0]
 800b0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e09d      	b.n	800b208 <_printf_i+0x1e8>
 800b0cc:	6833      	ldr	r3, [r6, #0]
 800b0ce:	6820      	ldr	r0, [r4, #0]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	6031      	str	r1, [r6, #0]
 800b0d4:	0606      	lsls	r6, r0, #24
 800b0d6:	d501      	bpl.n	800b0dc <_printf_i+0xbc>
 800b0d8:	681d      	ldr	r5, [r3, #0]
 800b0da:	e003      	b.n	800b0e4 <_printf_i+0xc4>
 800b0dc:	0645      	lsls	r5, r0, #25
 800b0de:	d5fb      	bpl.n	800b0d8 <_printf_i+0xb8>
 800b0e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	da03      	bge.n	800b0f0 <_printf_i+0xd0>
 800b0e8:	232d      	movs	r3, #45	@ 0x2d
 800b0ea:	426d      	negs	r5, r5
 800b0ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0f0:	4859      	ldr	r0, [pc, #356]	@ (800b258 <_printf_i+0x238>)
 800b0f2:	230a      	movs	r3, #10
 800b0f4:	e011      	b.n	800b11a <_printf_i+0xfa>
 800b0f6:	6821      	ldr	r1, [r4, #0]
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	0608      	lsls	r0, r1, #24
 800b0fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b100:	d402      	bmi.n	800b108 <_printf_i+0xe8>
 800b102:	0649      	lsls	r1, r1, #25
 800b104:	bf48      	it	mi
 800b106:	b2ad      	uxthmi	r5, r5
 800b108:	2f6f      	cmp	r7, #111	@ 0x6f
 800b10a:	4853      	ldr	r0, [pc, #332]	@ (800b258 <_printf_i+0x238>)
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	bf14      	ite	ne
 800b110:	230a      	movne	r3, #10
 800b112:	2308      	moveq	r3, #8
 800b114:	2100      	movs	r1, #0
 800b116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b11a:	6866      	ldr	r6, [r4, #4]
 800b11c:	60a6      	str	r6, [r4, #8]
 800b11e:	2e00      	cmp	r6, #0
 800b120:	bfa2      	ittt	ge
 800b122:	6821      	ldrge	r1, [r4, #0]
 800b124:	f021 0104 	bicge.w	r1, r1, #4
 800b128:	6021      	strge	r1, [r4, #0]
 800b12a:	b90d      	cbnz	r5, 800b130 <_printf_i+0x110>
 800b12c:	2e00      	cmp	r6, #0
 800b12e:	d04b      	beq.n	800b1c8 <_printf_i+0x1a8>
 800b130:	4616      	mov	r6, r2
 800b132:	fbb5 f1f3 	udiv	r1, r5, r3
 800b136:	fb03 5711 	mls	r7, r3, r1, r5
 800b13a:	5dc7      	ldrb	r7, [r0, r7]
 800b13c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b140:	462f      	mov	r7, r5
 800b142:	42bb      	cmp	r3, r7
 800b144:	460d      	mov	r5, r1
 800b146:	d9f4      	bls.n	800b132 <_printf_i+0x112>
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d10b      	bne.n	800b164 <_printf_i+0x144>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	07df      	lsls	r7, r3, #31
 800b150:	d508      	bpl.n	800b164 <_printf_i+0x144>
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	6861      	ldr	r1, [r4, #4]
 800b156:	4299      	cmp	r1, r3
 800b158:	bfde      	ittt	le
 800b15a:	2330      	movle	r3, #48	@ 0x30
 800b15c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b160:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b164:	1b92      	subs	r2, r2, r6
 800b166:	6122      	str	r2, [r4, #16]
 800b168:	f8cd a000 	str.w	sl, [sp]
 800b16c:	464b      	mov	r3, r9
 800b16e:	aa03      	add	r2, sp, #12
 800b170:	4621      	mov	r1, r4
 800b172:	4640      	mov	r0, r8
 800b174:	f7ff fee6 	bl	800af44 <_printf_common>
 800b178:	3001      	adds	r0, #1
 800b17a:	d14a      	bne.n	800b212 <_printf_i+0x1f2>
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	b004      	add	sp, #16
 800b182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	f043 0320 	orr.w	r3, r3, #32
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	4833      	ldr	r0, [pc, #204]	@ (800b25c <_printf_i+0x23c>)
 800b190:	2778      	movs	r7, #120	@ 0x78
 800b192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	6831      	ldr	r1, [r6, #0]
 800b19a:	061f      	lsls	r7, r3, #24
 800b19c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1a0:	d402      	bmi.n	800b1a8 <_printf_i+0x188>
 800b1a2:	065f      	lsls	r7, r3, #25
 800b1a4:	bf48      	it	mi
 800b1a6:	b2ad      	uxthmi	r5, r5
 800b1a8:	6031      	str	r1, [r6, #0]
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	bf44      	itt	mi
 800b1ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b2:	6023      	strmi	r3, [r4, #0]
 800b1b4:	b11d      	cbz	r5, 800b1be <_printf_i+0x19e>
 800b1b6:	2310      	movs	r3, #16
 800b1b8:	e7ac      	b.n	800b114 <_printf_i+0xf4>
 800b1ba:	4827      	ldr	r0, [pc, #156]	@ (800b258 <_printf_i+0x238>)
 800b1bc:	e7e9      	b.n	800b192 <_printf_i+0x172>
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	f023 0320 	bic.w	r3, r3, #32
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	e7f6      	b.n	800b1b6 <_printf_i+0x196>
 800b1c8:	4616      	mov	r6, r2
 800b1ca:	e7bd      	b.n	800b148 <_printf_i+0x128>
 800b1cc:	6833      	ldr	r3, [r6, #0]
 800b1ce:	6825      	ldr	r5, [r4, #0]
 800b1d0:	6961      	ldr	r1, [r4, #20]
 800b1d2:	1d18      	adds	r0, r3, #4
 800b1d4:	6030      	str	r0, [r6, #0]
 800b1d6:	062e      	lsls	r6, r5, #24
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	d501      	bpl.n	800b1e0 <_printf_i+0x1c0>
 800b1dc:	6019      	str	r1, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <_printf_i+0x1c6>
 800b1e0:	0668      	lsls	r0, r5, #25
 800b1e2:	d5fb      	bpl.n	800b1dc <_printf_i+0x1bc>
 800b1e4:	8019      	strh	r1, [r3, #0]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	4616      	mov	r6, r2
 800b1ec:	e7bc      	b.n	800b168 <_printf_i+0x148>
 800b1ee:	6833      	ldr	r3, [r6, #0]
 800b1f0:	1d1a      	adds	r2, r3, #4
 800b1f2:	6032      	str	r2, [r6, #0]
 800b1f4:	681e      	ldr	r6, [r3, #0]
 800b1f6:	6862      	ldr	r2, [r4, #4]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7f5 f890 	bl	8000320 <memchr>
 800b200:	b108      	cbz	r0, 800b206 <_printf_i+0x1e6>
 800b202:	1b80      	subs	r0, r0, r6
 800b204:	6060      	str	r0, [r4, #4]
 800b206:	6863      	ldr	r3, [r4, #4]
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	2300      	movs	r3, #0
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b210:	e7aa      	b.n	800b168 <_printf_i+0x148>
 800b212:	6923      	ldr	r3, [r4, #16]
 800b214:	4632      	mov	r2, r6
 800b216:	4649      	mov	r1, r9
 800b218:	4640      	mov	r0, r8
 800b21a:	47d0      	blx	sl
 800b21c:	3001      	adds	r0, #1
 800b21e:	d0ad      	beq.n	800b17c <_printf_i+0x15c>
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	079b      	lsls	r3, r3, #30
 800b224:	d413      	bmi.n	800b24e <_printf_i+0x22e>
 800b226:	68e0      	ldr	r0, [r4, #12]
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	4298      	cmp	r0, r3
 800b22c:	bfb8      	it	lt
 800b22e:	4618      	movlt	r0, r3
 800b230:	e7a6      	b.n	800b180 <_printf_i+0x160>
 800b232:	2301      	movs	r3, #1
 800b234:	4632      	mov	r2, r6
 800b236:	4649      	mov	r1, r9
 800b238:	4640      	mov	r0, r8
 800b23a:	47d0      	blx	sl
 800b23c:	3001      	adds	r0, #1
 800b23e:	d09d      	beq.n	800b17c <_printf_i+0x15c>
 800b240:	3501      	adds	r5, #1
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	9903      	ldr	r1, [sp, #12]
 800b246:	1a5b      	subs	r3, r3, r1
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dcf2      	bgt.n	800b232 <_printf_i+0x212>
 800b24c:	e7eb      	b.n	800b226 <_printf_i+0x206>
 800b24e:	2500      	movs	r5, #0
 800b250:	f104 0619 	add.w	r6, r4, #25
 800b254:	e7f5      	b.n	800b242 <_printf_i+0x222>
 800b256:	bf00      	nop
 800b258:	0800b565 	.word	0x0800b565
 800b25c:	0800b576 	.word	0x0800b576

0800b260 <memmove>:
 800b260:	4288      	cmp	r0, r1
 800b262:	b510      	push	{r4, lr}
 800b264:	eb01 0402 	add.w	r4, r1, r2
 800b268:	d902      	bls.n	800b270 <memmove+0x10>
 800b26a:	4284      	cmp	r4, r0
 800b26c:	4623      	mov	r3, r4
 800b26e:	d807      	bhi.n	800b280 <memmove+0x20>
 800b270:	1e43      	subs	r3, r0, #1
 800b272:	42a1      	cmp	r1, r4
 800b274:	d008      	beq.n	800b288 <memmove+0x28>
 800b276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b27e:	e7f8      	b.n	800b272 <memmove+0x12>
 800b280:	4402      	add	r2, r0
 800b282:	4601      	mov	r1, r0
 800b284:	428a      	cmp	r2, r1
 800b286:	d100      	bne.n	800b28a <memmove+0x2a>
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b292:	e7f7      	b.n	800b284 <memmove+0x24>

0800b294 <_sbrk_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	@ (800b2b0 <_sbrk_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f6 ffda 	bl	8002258 <_sbrk>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_sbrk_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_sbrk_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	24000dac 	.word	0x24000dac

0800b2b4 <_realloc_r>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	4615      	mov	r5, r2
 800b2bc:	460c      	mov	r4, r1
 800b2be:	b921      	cbnz	r1, 800b2ca <_realloc_r+0x16>
 800b2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	f7ff bc59 	b.w	800ab7c <_malloc_r>
 800b2ca:	b92a      	cbnz	r2, 800b2d8 <_realloc_r+0x24>
 800b2cc:	f7ff fbea 	bl	800aaa4 <_free_r>
 800b2d0:	2400      	movs	r4, #0
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	f000 f81a 	bl	800b310 <_malloc_usable_size_r>
 800b2dc:	4285      	cmp	r5, r0
 800b2de:	4606      	mov	r6, r0
 800b2e0:	d802      	bhi.n	800b2e8 <_realloc_r+0x34>
 800b2e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2e6:	d8f4      	bhi.n	800b2d2 <_realloc_r+0x1e>
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff fc46 	bl	800ab7c <_malloc_r>
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0ec      	beq.n	800b2d0 <_realloc_r+0x1c>
 800b2f6:	42b5      	cmp	r5, r6
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	bf28      	it	cs
 800b2fe:	4632      	movcs	r2, r6
 800b300:	f7ff fbc2 	bl	800aa88 <memcpy>
 800b304:	4621      	mov	r1, r4
 800b306:	4640      	mov	r0, r8
 800b308:	f7ff fbcc 	bl	800aaa4 <_free_r>
 800b30c:	463c      	mov	r4, r7
 800b30e:	e7e0      	b.n	800b2d2 <_realloc_r+0x1e>

0800b310 <_malloc_usable_size_r>:
 800b310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b314:	1f18      	subs	r0, r3, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	bfbc      	itt	lt
 800b31a:	580b      	ldrlt	r3, [r1, r0]
 800b31c:	18c0      	addlt	r0, r0, r3
 800b31e:	4770      	bx	lr

0800b320 <_init>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	bf00      	nop
 800b324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b326:	bc08      	pop	{r3}
 800b328:	469e      	mov	lr, r3
 800b32a:	4770      	bx	lr

0800b32c <_fini>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr
