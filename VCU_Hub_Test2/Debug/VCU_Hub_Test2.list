
VCU_Hub_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012274  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08012544  08012544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080128fc  080128fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012904  08012904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012908  08012908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0801290c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ba8  24000068  08012974  00014068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001c10  08012974  00014c10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002892f  00000000  00000000  00014096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041fc  00000000  00000000  0003c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002088  00000000  00000000  00040bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001961  00000000  00000000  00042c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a603  00000000  00000000  000445b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b9e6  00000000  00000000  0007ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179aee  00000000  00000000  000aa59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00224088  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092e8  00000000  00000000  002240cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  0022d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000068 	.word	0x24000068
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801252c 	.word	0x0801252c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400006c 	.word	0x2400006c
 800030c:	0801252c 	.word	0x0801252c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006bc:	ed97 0a00 	vldr	s0, [r7]
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f808 	bl	80006d6 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 80006e2:	edd7 7a00 	vldr	s15, [r7]
 80006e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd03      	ble.n	80006fc <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 80006f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e009      	b.n	8000710 <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 80006fc:	edd7 7a00 	vldr	s15, [r7]
 8000700:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000708:	d502      	bpl.n	8000710 <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ed93 7a00 	vldr	s14, [r3]
 8000734:	edd7 7a00 	vldr	s15, [r7]
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000746:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f001 fff4 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f8d2 	bl	8000924 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000780:	f000 f93e 	bl	8000a00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 fd64 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 fd42 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 f96a 	bl	8000a64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000790:	f000 f9e0 	bl	8000b54 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000794:	f000 fa46 	bl	8000c24 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000798:	f000 fac2 	bl	8000d20 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800079c:	f000 fbc0 	bl	8000f20 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 fcea 	bl	8001178 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007a4:	f000 fc74 	bl	8001090 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fc9a 	bl	80010e0 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007ac:	f000 fb9a 	bl	8000ee4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007b0:	f010 f8fe 	bl	80109b0 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 80007b4:	f000 fb32 	bl	8000e1c <MX_FDCAN3_Init>
  /* USER CODE BEGIN 2 */
	//Inicializar tarjeta microSD
	SDCard_start();
 80007b8:	f001 f9f6 	bl	8001ba8 <SDCard_start>
	HAL_Delay(2000);
 80007bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c0:	f002 f862 	bl	8002888 <HAL_Delay>

	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) buffer_adc, 1) != HAL_OK) {
 80007c4:	2201      	movs	r2, #1
 80007c6:	4943      	ldr	r1, [pc, #268]	@ (80008d4 <main+0x160>)
 80007c8:	4843      	ldr	r0, [pc, #268]	@ (80008d8 <main+0x164>)
 80007ca:	f002 fd75 	bl	80032b8 <HAL_ADC_Start_DMA>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <main+0x6a>
#if DEBUG
		print("Error al inicializar ADC_DMA");
 80007d4:	4841      	ldr	r0, [pc, #260]	@ (80008dc <main+0x168>)
 80007d6:	f000 fe0d 	bl	80013f4 <print>
#endif
		Error_Handler();
 80007da:	f001 fa70 	bl	8001cbe <Error_Handler>
	}
	//Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.2f);
 80007de:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80008e0 <main+0x16c>
 80007e2:	4840      	ldr	r0, [pc, #256]	@ (80008e4 <main+0x170>)
 80007e4:	f7ff ff64 	bl	80006b0 <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.2f);
 80007e8:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80008e0 <main+0x16c>
 80007ec:	483e      	ldr	r0, [pc, #248]	@ (80008e8 <main+0x174>)
 80007ee:	f7ff ff5f 	bl	80006b0 <LPF_EMA_Init>

	//Inicialización de buses CAN
	//Inversor


	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80007f2:	483e      	ldr	r0, [pc, #248]	@ (80008ec <main+0x178>)
 80007f4:	f006 fd42 	bl	800727c <HAL_FDCAN_Start>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <main+0x94>
#if DEBUG
		print("Error al inicializar CAN_INV");
 80007fe:	483c      	ldr	r0, [pc, #240]	@ (80008f0 <main+0x17c>)
 8000800:	f000 fdf8 	bl	80013f4 <print>
#endif
		Error_Handler();
 8000804:	f001 fa5b 	bl	8001cbe <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	4837      	ldr	r0, [pc, #220]	@ (80008ec <main+0x178>)
 800080e:	f006 ff77 	bl	8007700 <HAL_FDCAN_ActivateNotification>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <main+0xae>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000818:	4836      	ldr	r0, [pc, #216]	@ (80008f4 <main+0x180>)
 800081a:	f000 fdeb 	bl	80013f4 <print>
#endif
		Error_Handler();
 800081e:	f001 fa4e 	bl	8001cbe <Error_Handler>

	}

    if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF, 0) != HAL_OK){
 8000822:	2200      	movs	r2, #0
 8000824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000828:	4830      	ldr	r0, [pc, #192]	@ (80008ec <main+0x178>)
 800082a:	f006 ff69 	bl	8007700 <HAL_FDCAN_ActivateNotification>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <main+0xca>
#if DEBUG
		print("Error al activar NOTIFICACION BUS OFF CAN_INV");
 8000834:	4830      	ldr	r0, [pc, #192]	@ (80008f8 <main+0x184>)
 8000836:	f000 fddd 	bl	80013f4 <print>
#endif
		Error_Handler();
 800083a:	f001 fa40 	bl	8001cbe <Error_Handler>
    }

	//Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 800083e:	482f      	ldr	r0, [pc, #188]	@ (80008fc <main+0x188>)
 8000840:	f006 fd1c 	bl	800727c <HAL_FDCAN_Start>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <main+0xe0>

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800084a:	482d      	ldr	r0, [pc, #180]	@ (8000900 <main+0x18c>)
 800084c:	f000 fdd2 	bl	80013f4 <print>

#endif
		Error_Handler();
 8000850:	f001 fa35 	bl	8001cbe <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4828      	ldr	r0, [pc, #160]	@ (80008fc <main+0x188>)
 800085a:	f006 ff51 	bl	8007700 <HAL_FDCAN_ActivateNotification>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <main+0xfa>
			0) != HAL_OK) {

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000864:	4827      	ldr	r0, [pc, #156]	@ (8000904 <main+0x190>)
 8000866:	f000 fdc5 	bl	80013f4 <print>
#endif
		Error_Handler();
 800086a:	f001 fa28 	bl	8001cbe <Error_Handler>
	}


	// Front Hub

	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 800086e:	4826      	ldr	r0, [pc, #152]	@ (8000908 <main+0x194>)
 8000870:	f006 fd04 	bl	800727c <HAL_FDCAN_Start>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <main+0x110>

	#if DEBUG
			print("Error al inicializar CAN_HUB");
 800087a:	4824      	ldr	r0, [pc, #144]	@ (800090c <main+0x198>)
 800087c:	f000 fdba 	bl	80013f4 <print>

	#endif
			Error_Handler();
 8000880:	f001 fa1d 	bl	8001cbe <Error_Handler>
		}
	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	481f      	ldr	r0, [pc, #124]	@ (8000908 <main+0x194>)
 800088a:	f006 ff39 	bl	8007700 <HAL_FDCAN_ActivateNotification>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <main+0x12a>
				0) != HAL_OK) {

	#if DEBUG
			print("Error al activar NOTIFICATION CAN_HUB");
 8000894:	481e      	ldr	r0, [pc, #120]	@ (8000910 <main+0x19c>)
 8000896:	f000 fdad 	bl	80013f4 <print>
	#endif
			Error_Handler();
 800089a:	f001 fa10 	bl	8001cbe <Error_Handler>
	}
	*/

	// Iniciar Comunicación con HUB

	TxHeader_Inv.Identifier = 0x101;
 800089e:	4b1d      	ldr	r3, [pc, #116]	@ (8000914 <main+0x1a0>)
 80008a0:	f240 1201 	movw	r2, #257	@ 0x101
 80008a4:	601a      	str	r2, [r3, #0]
	TxHeader_Inv.DataLength = 1;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <main+0x1a0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80008ac:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <main+0x1a0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x1; // Mandamos 1 al HUB para que empiece a comunicar datos
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <main+0x1a4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader_Inv, TxData_Inv);
 80008b8:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <main+0x1a4>)
 80008ba:	4916      	ldr	r1, [pc, #88]	@ (8000914 <main+0x1a0>)
 80008bc:	4812      	ldr	r0, [pc, #72]	@ (8000908 <main+0x194>)
 80008be:	f006 fd08 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>
	print("HUB inicializado");
 80008c2:	4816      	ldr	r0, [pc, #88]	@ (800091c <main+0x1a8>)
 80008c4:	f000 fd96 	bl	80013f4 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80008c8:	4815      	ldr	r0, [pc, #84]	@ (8000920 <main+0x1ac>)
 80008ca:	f00c feab 	bl	800d624 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80008ce:	bf00      	nop
 80008d0:	e7fd      	b.n	80008ce <main+0x15a>
 80008d2:	bf00      	nop
 80008d4:	240016d0 	.word	0x240016d0
 80008d8:	2400008c 	.word	0x2400008c
 80008dc:	08012544 	.word	0x08012544
 80008e0:	3e4ccccd 	.word	0x3e4ccccd
 80008e4:	240016e4 	.word	0x240016e4
 80008e8:	240016ec 	.word	0x240016ec
 80008ec:	240001e4 	.word	0x240001e4
 80008f0:	08012564 	.word	0x08012564
 80008f4:	08012584 	.word	0x08012584
 80008f8:	080125ac 	.word	0x080125ac
 80008fc:	24000284 	.word	0x24000284
 8000900:	080125dc 	.word	0x080125dc
 8000904:	080125fc 	.word	0x080125fc
 8000908:	24000324 	.word	0x24000324
 800090c:	08012624 	.word	0x08012624
 8000910:	08012644 	.word	0x08012644
 8000914:	24000600 	.word	0x24000600
 8000918:	24000674 	.word	0x24000674
 800091c:	0801266c 	.word	0x0801266c
 8000920:	2400048c 	.word	0x2400048c

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f011 f97a 	bl	8011c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f011 f974 	bl	8011c2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000944:	2002      	movs	r0, #2
 8000946:	f007 fe2b 	bl	80085a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <SystemClock_Config+0xd8>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a2a      	ldr	r2, [pc, #168]	@ (80009fc <SystemClock_Config+0xd8>)
 8000954:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xd8>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000966:	bf00      	nop
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <SystemClock_Config+0xd8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000974:	d1f8      	bne.n	8000968 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000976:	2301      	movs	r3, #1
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000984:	2302      	movs	r3, #2
 8000986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800098c:	232c      	movs	r3, #44	@ 0x2c
 800098e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800099c:	230c      	movs	r3, #12
 800099e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f007 fe31 	bl	8008614 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b8:	f001 f981 	bl	8001cbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	233f      	movs	r3, #63	@ 0x3f
 80009be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2303      	movs	r3, #3
 80009c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c8:	2308      	movs	r3, #8
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2103      	movs	r1, #3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f008 f9f0 	bl	8008dc8 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009ee:	f001 f966 	bl	8001cbe <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	@ 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58024800 	.word	0x58024800

08000a00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0ae      	sub	sp, #184	@ 0xb8
 8000a04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	22b8      	movs	r2, #184	@ 0xb8
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f011 f90d 	bl	8011c2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000a12:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000a22:	2310      	movs	r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a32:	23c0      	movs	r3, #192	@ 0xc0
 8000a34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a42:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f008 fd47 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000a58:	f001 f931 	bl	8001cbe <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	37b8      	adds	r7, #184	@ 0xb8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2224      	movs	r2, #36	@ 0x24
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f011 f8d5 	bl	8011c2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000a84:	4a31      	ldr	r2, [pc, #196]	@ (8000b4c <MX_ADC1_Init+0xe8>)
 8000a86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000a8a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000aca:	2203      	movs	r2, #3
 8000acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000aea:	f002 f9dd 	bl	8002ea8 <HAL_ADC_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000af4:	f001 f8e3 	bl	8001cbe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000b04:	f003 fea0 	bl	8004848 <HAL_ADCEx_MultiModeConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000b0e:	f001 f8d6 	bl	8001cbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_ADC1_Init+0xec>)
 8000b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b16:	2306      	movs	r3, #6
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_ADC1_Init+0xe4>)
 8000b32:	f002 fef5 	bl	8003920 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b3c:	f001 f8bf 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	@ 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2400008c 	.word	0x2400008c
 8000b4c:	40022000 	.word	0x40022000
 8000b50:	08600004 	.word	0x08600004

08000b54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2224      	movs	r2, #36	@ 0x24
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f011 f863 	bl	8011c2c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b68:	4a2c      	ldr	r2, [pc, #176]	@ (8000c1c <MX_ADC2_Init+0xc8>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7a:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000bce:	f002 f96b 	bl	8002ea8 <HAL_ADC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000bd8:	f001 f871 	bl	8001cbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_ADC2_Init+0xcc>)
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be0:	2306      	movs	r3, #6
 8000be2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_ADC2_Init+0xc4>)
 8000c02:	f002 fe8d 	bl	8003920 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000c0c:	f001 f857 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	240000fc 	.word	0x240000fc
 8000c1c:	40022100 	.word	0x40022100
 8000c20:	25b00200 	.word	0x25b00200

08000c24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d1c <MX_FDCAN1_Init+0xf8>)
 8000c2e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c30:	4b39      	ldr	r3, [pc, #228]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c36:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c3c:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c48:	4b33      	ldr	r3, [pc, #204]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000c4e:	4b32      	ldr	r3, [pc, #200]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c54:	4b30      	ldr	r3, [pc, #192]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c62:	2205      	movs	r2, #5
 8000c64:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c72:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000c8a:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000c90:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c92:	2220      	movs	r2, #32
 8000c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cd2:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000cd4:	f006 f87e 	bl	8006dd4 <HAL_FDCAN_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000cde:	f000 ffee 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000cea:	2302      	movs	r3, #2
 8000cec:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <MX_FDCAN1_Init+0xf4>)
 8000d00:	f006 fa46 	bl	8007190 <HAL_FDCAN_ConfigFilter>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_FDCAN1_Init+0xea>
		Error_Handler();
 8000d0a:	f000 ffd8 	bl	8001cbe <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	240001e4 	.word	0x240001e4
 8000d1c:	4000a000 	.word	0x4000a000

08000d20 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d26:	4b3b      	ldr	r3, [pc, #236]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d28:	4a3b      	ldr	r2, [pc, #236]	@ (8000e18 <MX_FDCAN2_Init+0xf8>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d32:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d38:	4b36      	ldr	r3, [pc, #216]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d3e:	4b35      	ldr	r3, [pc, #212]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d44:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000d4a:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d50:	4b30      	ldr	r3, [pc, #192]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000d56:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d58:	220a      	movs	r2, #10
 8000d5a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d5e:	2205      	movs	r2, #5
 8000d60:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d6e:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d74:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d80:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d86:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000d8c:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d8e:	2210      	movs	r2, #16
 8000d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d92:	4b20      	ldr	r3, [pc, #128]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dca:	2204      	movs	r2, #4
 8000dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000dce:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dd0:	f006 f800 	bl	8006dd4 <HAL_FDCAN_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000dda:	f000 ff70 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_FDCAN2_Init+0xf4>)
 8000dfe:	f006 f9c7 	bl	8007190 <HAL_FDCAN_ConfigFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_FDCAN2_Init+0xec>
		Error_Handler();
 8000e08:	f000 ff59 	bl	8001cbe <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000284 	.word	0x24000284
 8000e18:	4000a400 	.word	0x4000a400

08000e1c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <MX_FDCAN3_Init+0xc4>)
 8000e24:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000e38:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8000e44:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e46:	2206      	movs	r2, #6
 8000e48:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000e4a:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e58:	2205      	movs	r2, #5
 8000e5a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 32;
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e88:	2220      	movs	r2, #32
 8000e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 32;
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e94:	2220      	movs	r2, #32
 8000e96:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 32;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000eb8:	2220      	movs	r2, #32
 8000eba:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <MX_FDCAN3_Init+0xc0>)
 8000eca:	f005 ff83 	bl	8006dd4 <HAL_FDCAN_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000ed4:	f000 fef3 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	24000324 	.word	0x24000324
 8000ee0:	4000d400 	.word	0x4000d400

08000ee4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000eea:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <MX_SDMMC1_SD_Init+0x38>)
 8000eec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000efc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <MX_SDMMC1_SD_Init+0x34>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	240003c4 	.word	0x240003c4
 8000f1c:	52007000 	.word	0x52007000

08000f20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09c      	sub	sp, #112	@ 0x70
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2234      	movs	r2, #52	@ 0x34
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f010 fe66 	bl	8011c2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f60:	4b49      	ldr	r3, [pc, #292]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f62:	4a4a      	ldr	r2, [pc, #296]	@ (800108c <MX_TIM1_Init+0x16c>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f66:	4b48      	ldr	r3, [pc, #288]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b46      	ldr	r3, [pc, #280]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f72:	4b45      	ldr	r3, [pc, #276]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b43      	ldr	r3, [pc, #268]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f80:	4b41      	ldr	r3, [pc, #260]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f86:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8c:	483e      	ldr	r0, [pc, #248]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000f8e:	f00c faf1 	bl	800d574 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 fe91 	bl	8001cbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4837      	ldr	r0, [pc, #220]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000faa:	f00c fe3d 	bl	800dc28 <HAL_TIM_ConfigClockSource>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fb4:	f000 fe83 	bl	8001cbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb8:	4833      	ldr	r0, [pc, #204]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000fba:	f00c fbb9 	bl	800d730 <HAL_TIM_PWM_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fc4:	f000 fe7b 	bl	8001cbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482b      	ldr	r0, [pc, #172]	@ (8001088 <MX_TIM1_Init+0x168>)
 8000fdc:	f00d fb6a 	bl	800e6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fe6:	f000 fe6a 	bl	8001cbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	@ 0x60
 8000fec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	481e      	ldr	r0, [pc, #120]	@ (8001088 <MX_TIM1_Init+0x168>)
 8001010:	f00c fcf6 	bl	800da00 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800101a:	f000 fe50 	bl	8001cbe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001022:	2204      	movs	r2, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4818      	ldr	r0, [pc, #96]	@ (8001088 <MX_TIM1_Init+0x168>)
 8001028:	f00c fcea 	bl	800da00 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001032:	f000 fe44 	bl	8001cbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800104e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <MX_TIM1_Init+0x168>)
 800106c:	f00d fbbe 	bl	800e7ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001076:	f000 fe22 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107a:	4803      	ldr	r0, [pc, #12]	@ (8001088 <MX_TIM1_Init+0x168>)
 800107c:	f001 f936 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001080:	bf00      	nop
 8001082:	3770      	adds	r7, #112	@ 0x70
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24000440 	.word	0x24000440
 800108c:	40010000 	.word	0x40010000

08001090 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <MX_TIM16_Init+0x48>)
 8001096:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <MX_TIM16_Init+0x4c>)
 8001098:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_TIM16_Init+0x48>)
 800109c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80010a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_TIM16_Init+0x48>)
 80010c4:	f00c fa56 	bl	800d574 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80010ce:	f000 fdf6 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400048c 	.word	0x2400048c
 80010dc:	40014400 	.word	0x40014400

080010e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <MX_USART1_UART_Init+0x94>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001128:	4811      	ldr	r0, [pc, #68]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800112a:	f00d fc09 	bl	800e940 <HAL_UART_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001134:	f000 fdc3 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800113c:	f00e fda3 	bl	800fc86 <HAL_UARTEx_SetTxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001146:	f000 fdba 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114a:	2100      	movs	r1, #0
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800114e:	f00e fdd8 	bl	800fd02 <HAL_UARTEx_SetRxFifoThreshold>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fdb1 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_USART1_UART_Init+0x90>)
 800115e:	f00e fd59 	bl	800fc14 <HAL_UARTEx_DisableFifoMode>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 fda9 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	240004d8 	.word	0x240004d8
 8001174:	40011000 	.word	0x40011000

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <MX_USART2_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011c2:	f00d fbbd 	bl	800e940 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 fd77 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011d4:	f00e fd57 	bl	800fc86 <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f000 fd6e 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011e6:	f00e fd8c 	bl	800fd02 <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 fd65 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_USART2_UART_Init+0x90>)
 80011f6:	f00e fd0d 	bl	800fc14 <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f000 fd5d 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2400056c 	.word	0x2400056c
 800120c:	40004400 	.word	0x40004400

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <MX_DMA_Init+0x3c>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <MX_DMA_Init+0x3c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_DMA_Init+0x3c>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	200b      	movs	r0, #11
 800123a:	f003 fcc2 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800123e:	200b      	movs	r0, #11
 8001240:	f003 fcd9 	bl	8004bf6 <HAL_NVIC_EnableIRQ>

}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4b5e      	ldr	r3, [pc, #376]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a5c      	ldr	r2, [pc, #368]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800126e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b5a      	ldr	r3, [pc, #360]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b56      	ldr	r3, [pc, #344]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128a:	4a55      	ldr	r2, [pc, #340]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001294:	4b52      	ldr	r3, [pc, #328]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b4f      	ldr	r3, [pc, #316]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	4a4d      	ldr	r2, [pc, #308]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b2:	4b4b      	ldr	r3, [pc, #300]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b47      	ldr	r3, [pc, #284]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	4a46      	ldr	r2, [pc, #280]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d0:	4b43      	ldr	r3, [pc, #268]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b40      	ldr	r3, [pc, #256]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a3e      	ldr	r2, [pc, #248]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fc:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <MX_GPIO_Init+0x190>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	4a37      	ldr	r2, [pc, #220]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130c:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800131a:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001338:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <MX_GPIO_Init+0x190>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_GPIO_Init+0x190>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2103      	movs	r1, #3
 800135a:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <MX_GPIO_Init+0x194>)
 800135c:	f007 f906 	bl	800856c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001366:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <MX_GPIO_Init+0x198>)
 8001368:	f007 f900 	bl	800856c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 800136c:	2303      	movs	r3, #3
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <MX_GPIO_Init+0x194>)
 8001384:	f006 ff32 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <MX_GPIO_Init+0x19c>)
 800139e:	f006 ff25 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80013a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <MX_GPIO_Init+0x198>)
 80013bc:	f006 ff16 	bl	80081ec <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <MX_GPIO_Init+0x1a0>)
 80013d4:	f006 ff0a 	bl	80081ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	@ 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020800 	.word	0x58020800
 80013e8:	58021000 	.word	0x58021000
 80013ec:	58021400 	.word	0x58021400
 80013f0:	58021800 	.word	0x58021800

080013f4 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4909      	ldr	r1, [pc, #36]	@ (8001424 <print+0x30>)
 8001400:	4809      	ldr	r0, [pc, #36]	@ (8001428 <print+0x34>)
 8001402:	f010 fbf3 	bl	8011bec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001406:	4808      	ldr	r0, [pc, #32]	@ (8001428 <print+0x34>)
 8001408:	f7fe ff82 	bl	8000310 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	4904      	ldr	r1, [pc, #16]	@ (8001428 <print+0x34>)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <print+0x38>)
 8001418:	f00d fae2 	bl	800e9e0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08012680 	.word	0x08012680
 8001428:	24001710 	.word	0x24001710
 800142c:	2400056c 	.word	0x2400056c

08001430 <printValue>:

void printValue(int value) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4909      	ldr	r1, [pc, #36]	@ (8001460 <printValue+0x30>)
 800143c:	4809      	ldr	r0, [pc, #36]	@ (8001464 <printValue+0x34>)
 800143e:	f010 fbd5 	bl	8011bec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 8001442:	4808      	ldr	r0, [pc, #32]	@ (8001464 <printValue+0x34>)
 8001444:	f7fe ff64 	bl	8000310 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	4904      	ldr	r1, [pc, #16]	@ (8001464 <printValue+0x34>)
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <printValue+0x38>)
 8001454:	f00d fac4 	bl	800e9e0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	08012688 	.word	0x08012688
 8001464:	24001710 	.word	0x24001710
 8001468:	2400056c 	.word	0x2400056c

0800146c <HAL_ADC_ConvCpltCallback>:
	sprintf(uart_msg, "0x%02X \n\r", value);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
	HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	// s1_aceleracion = buffer_adc[0];
	// s2_aceleracion = buffer_adc[1];
	s_freno = buffer_adc[0];
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_ADC_ConvCpltCallback+0x20>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_ADC_ConvCpltCallback+0x24>)
 800147c:	601a      	str	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	240016d0 	.word	0x240016d0
 8001490:	240016f4 	.word	0x240016f4

08001494 <HAL_FDCAN_RxFifo0Callback>:
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80d0 	beq.w	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a69      	ldr	r2, [pc, #420]	@ (8001654 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f040 8082 	bne.w	80015ba <HAL_FDCAN_RxFifo0Callback+0x126>
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80014b6:	4b68      	ldr	r3, [pc, #416]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80014b8:	4a68      	ldr	r2, [pc, #416]	@ (800165c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80014ba:	2140      	movs	r1, #64	@ 0x40
 80014bc:	4868      	ldr	r0, [pc, #416]	@ (8001660 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80014be:	f005 ff63 	bl	8007388 <HAL_FDCAN_GetRxMessage>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 80c0 	bne.w	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					RxData_Inv) == HAL_OK) {
				switch (RxHeader_Inv.Identifier) {
 80014ca:	4b64      	ldr	r3, [pc, #400]	@ (800165c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f240 4266 	movw	r2, #1126	@ 0x466
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d038      	beq.n	8001548 <HAL_FDCAN_RxFifo0Callback+0xb4>
 80014d6:	f240 4266 	movw	r2, #1126	@ 0x466
 80014da:	4293      	cmp	r3, r2
 80014dc:	f200 80b5 	bhi.w	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
 80014e0:	f240 4262 	movw	r2, #1122	@ 0x462
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d004      	beq.n	80014f2 <HAL_FDCAN_RxFifo0Callback+0x5e>
 80014e8:	f240 4263 	movw	r2, #1123	@ 0x463
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d010      	beq.n	8001512 <HAL_FDCAN_RxFifo0Callback+0x7e>
		} else if (hfdcan->Instance == FDCAN3){

		}

	}
}
 80014f0:	e0ab      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					state = RxData_Inv[2] >> 0x1;
 80014f2:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001664 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80014fc:	701a      	strb	r2, [r3, #0]
					if (state == 10) {
 80014fe:	4b59      	ldr	r3, [pc, #356]	@ (8001664 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0a      	cmp	r3, #10
 8001504:	f040 809a 	bne.w	800163c <HAL_FDCAN_RxFifo0Callback+0x1a8>
						error = RxData_Inv[0];
 8001508:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800150e:	701a      	strb	r2, [r3, #0]
					break;
 8001510:	e094      	b.n	800163c <HAL_FDCAN_RxFifo0Callback+0x1a8>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001512:	4b51      	ldr	r3, [pc, #324]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001514:	79db      	ldrb	r3, [r3, #7]
 8001516:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
							| RxData_Inv[8] << 8 | RxData_Inv[5];
 800151a:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800151c:	7a1b      	ldrb	r3, [r3, #8]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	4313      	orrs	r3, r2
 8001522:	4a4d      	ldr	r2, [pc, #308]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001524:	7952      	ldrb	r2, [r2, #5]
 8001526:	4313      	orrs	r3, r2
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16)
 8001528:	4a50      	ldr	r2, [pc, #320]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800152a:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000) {
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8083 	beq.w	8001640 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						e_machine_rpm |= 0xFFF0000;
 800153a:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001544:	6013      	str	r3, [r2, #0]
					break;
 8001546:	e07b      	b.n	8001640 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					if (RxHeader_Inv.DataLength == 6) {
 8001548:	4b44      	ldr	r3, [pc, #272]	@ (800165c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d179      	bne.n	8001644 <HAL_FDCAN_RxFifo0Callback+0x1b0>
						if (config_inv_lectura_v == 0) {
 8001550:	4b48      	ldr	r3, [pc, #288]	@ (8001674 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <HAL_FDCAN_RxFifo0Callback+0xcc>
							config_inv_lectura_v = 1;
 8001558:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
					break;
 800155e:	e071      	b.n	8001644 <HAL_FDCAN_RxFifo0Callback+0x1b0>
						} else if (config_inv_lectura_v == 1) {
 8001560:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d16d      	bne.n	8001644 <HAL_FDCAN_RxFifo0Callback+0x1b0>
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001568:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[0];
 800156e:	4a3a      	ldr	r2, [pc, #232]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	4313      	orrs	r3, r2
							inv_dc_bus_voltage = (int) RxData_Inv[1] << 8
 8001574:	4a40      	ldr	r2, [pc, #256]	@ (8001678 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001576:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	021b      	lsls	r3, r3, #8
									| (int) RxData_Inv[1];
 800157e:	4a36      	ldr	r2, [pc, #216]	@ (8001658 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001580:	7852      	ldrb	r2, [r2, #1]
 8001582:	4313      	orrs	r3, r2
							inv_dc_bus_power = (int) RxData_Inv[2] << 8
 8001584:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001586:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2;//Bits 10 to 16
 8001588:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	109b      	asrs	r3, r3, #2
 800158e:	4a3b      	ldr	r2, [pc, #236]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001590:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000) {//Check for bit signing
 8001592:	4b3a      	ldr	r3, [pc, #232]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_FDCAN_RxFifo0Callback+0x116>
								inv_dc_bus_power |= 0xC000;
 800159e:	4b37      	ldr	r3, [pc, #220]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a6:	4a35      	ldr	r2, [pc, #212]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80015a8:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; //Scale factor
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	03db      	lsls	r3, r3, #15
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	4a31      	ldr	r2, [pc, #196]	@ (800167c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80015b6:	6013      	str	r3, [r2, #0]
					break;
 80015b8:	e044      	b.n	8001644 <HAL_FDCAN_RxFifo0Callback+0x1b0>
		} else if (hfdcan->Instance == FDCAN2) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a30      	ldr	r2, [pc, #192]	@ (8001680 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d142      	bne.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80015c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80015c6:	4a30      	ldr	r2, [pc, #192]	@ (8001688 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80015c8:	2140      	movs	r1, #64	@ 0x40
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f005 fedc 	bl	8007388 <HAL_FDCAN_GetRxMessage>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d139      	bne.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
				switch (RxHeader_Acu.Identifier) {
 80015d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015de:	d011      	beq.n	8001604 <HAL_FDCAN_RxFifo0Callback+0x170>
 80015e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015e4:	d831      	bhi.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d004      	beq.n	80015f4 <HAL_FDCAN_RxFifo0Callback+0x160>
 80015ea:	f240 1211 	movw	r2, #273	@ 0x111
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d016      	beq.n	8001620 <HAL_FDCAN_RxFifo0Callback+0x18c>
}
 80015f2:	e02a      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					if (RxData_Acu[0] == 0) {
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d125      	bne.n	8001648 <HAL_FDCAN_RxFifo0Callback+0x1b4>
						precarga_inv = 1;
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
					break;
 8001602:	e021      	b.n	8001648 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					v_celda_min = (int) (RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 800160c:	7852      	ldrb	r2, [r2, #1]
 800160e:	4313      	orrs	r3, r2
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800161a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800161e:	e014      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					s1_aceleracion = ((int)RxData_Acu[0] << 8) | RxData_Acu[1]; // juntamos los bytes 1 y 2 del envío del HUB
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001628:	7852      	ldrb	r2, [r2, #1]
 800162a:	4313      	orrs	r3, r2
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_FDCAN_RxFifo0Callback+0x200>)
 800162e:	6013      	str	r3, [r2, #0]
					printValue(s1_aceleracion);
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fefb 	bl	8001430 <printValue>
					break;
 800163a:	e006      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					break;
 800163c:	bf00      	nop
 800163e:	e004      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					break;
 8001640:	bf00      	nop
 8001642:	e002      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					break;
 8001644:	bf00      	nop
 8001646:	e000      	b.n	800164a <HAL_FDCAN_RxFifo0Callback+0x1b6>
					break;
 8001648:	bf00      	nop
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	4000a000 	.word	0x4000a000
 8001658:	2400067c 	.word	0x2400067c
 800165c:	24000624 	.word	0x24000624
 8001660:	240001e4 	.word	0x240001e4
 8001664:	24001702 	.word	0x24001702
 8001668:	2400186e 	.word	0x2400186e
 800166c:	240016cc 	.word	0x240016cc
 8001670:	0fff0000 	.word	0x0fff0000
 8001674:	24000088 	.word	0x24000088
 8001678:	240016c4 	.word	0x240016c4
 800167c:	240016c8 	.word	0x240016c8
 8001680:	4000a400 	.word	0x4000a400
 8001684:	24000684 	.word	0x24000684
 8001688:	2400064c 	.word	0x2400064c
 800168c:	24000084 	.word	0x24000084
 8001690:	24000004 	.word	0x24000004
 8001694:	240016d4 	.word	0x240016d4

08001698 <setTorque>:
		sum += lecturas[i];
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 800169e:	4ba6      	ldr	r3, [pc, #664]	@ (8001938 <setTorque+0x2a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	48a3      	ldr	r0, [pc, #652]	@ (800193c <setTorque+0x2a4>)
 80016b0:	f7ff f837 	bl	8000722 <LPF_EMA_Update>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	ee17 3a90 	vmov	r3, s15
 80016c0:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 80016c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001940 <setTorque+0x2a8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	489c      	ldr	r0, [pc, #624]	@ (8001944 <setTorque+0x2ac>)
 80016d4:	f7ff f825 	bl	8000722 <LPF_EMA_Update>
 80016d8:	eef0 7a40 	vmov.f32	s15, s0
 80016dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	60bb      	str	r3, [r7, #8]
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016f4:	ed9f 5b84 	vldr	d5, [pc, #528]	@ 8001908 <setTorque+0x270>
 80016f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001700:	ee17 2a90 	vmov	r2, s15
 8001704:	4b90      	ldr	r3, [pc, #576]	@ (8001948 <setTorque+0x2b0>)
 8001706:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0) {
 8001708:	4b8f      	ldr	r3, [pc, #572]	@ (8001948 <setTorque+0x2b0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	da03      	bge.n	8001718 <setTorque+0x80>
		s1_aceleracion_aux = 0;
 8001710:	4b8d      	ldr	r3, [pc, #564]	@ (8001948 <setTorque+0x2b0>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e006      	b.n	8001726 <setTorque+0x8e>
	} else if (s1_aceleracion_aux > 100) {
 8001718:	4b8b      	ldr	r3, [pc, #556]	@ (8001948 <setTorque+0x2b0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b64      	cmp	r3, #100	@ 0x64
 800171e:	dd02      	ble.n	8001726 <setTorque+0x8e>
		s1_aceleracion_aux = 100;
 8001720:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <setTorque+0x2b0>)
 8001722:	2264      	movs	r2, #100	@ 0x64
 8001724:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001734:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 8001910 <setTorque+0x278>
 8001738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800173c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001740:	ee17 2a90 	vmov	r2, s15
 8001744:	4b81      	ldr	r3, [pc, #516]	@ (800194c <setTorque+0x2b4>)
 8001746:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0) {
 8001748:	4b80      	ldr	r3, [pc, #512]	@ (800194c <setTorque+0x2b4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da03      	bge.n	8001758 <setTorque+0xc0>
		s2_aceleracion_aux = 0;
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <setTorque+0x2b4>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e006      	b.n	8001766 <setTorque+0xce>
	} else if (s2_aceleracion_aux > 100) {
 8001758:	4b7c      	ldr	r3, [pc, #496]	@ (800194c <setTorque+0x2b4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b64      	cmp	r3, #100	@ 0x64
 800175e:	dd02      	ble.n	8001766 <setTorque+0xce>
		s2_aceleracion_aux = 100;
 8001760:	4b7a      	ldr	r3, [pc, #488]	@ (800194c <setTorque+0x2b4>)
 8001762:	2264      	movs	r2, #100	@ 0x64
 8001764:	601a      	str	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if(s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8){
 8001766:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <setTorque+0x2b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b08      	cmp	r3, #8
 800176c:	dd10      	ble.n	8001790 <setTorque+0xf8>
 800176e:	4b77      	ldr	r3, [pc, #476]	@ (800194c <setTorque+0x2b4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b08      	cmp	r3, #8
 8001774:	dd0c      	ble.n	8001790 <setTorque+0xf8>
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001776:	4b74      	ldr	r3, [pc, #464]	@ (8001948 <setTorque+0x2b0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b74      	ldr	r3, [pc, #464]	@ (800194c <setTorque+0x2b4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	da00      	bge.n	8001786 <setTorque+0xee>
 8001784:	3301      	adds	r3, #1
 8001786:	105b      	asrs	r3, r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <setTorque+0x2b8>)
 800178c:	801a      	strh	r2, [r3, #0]
 800178e:	e002      	b.n	8001796 <setTorque+0xfe>
	}
	else{
		torque_total = 0;
 8001790:	4b6f      	ldr	r3, [pc, #444]	@ (8001950 <setTorque+0x2b8>)
 8001792:	2200      	movs	r2, #0
 8001794:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10) {
 8001796:	4b6e      	ldr	r3, [pc, #440]	@ (8001950 <setTorque+0x2b8>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2b09      	cmp	r3, #9
 800179c:	d803      	bhi.n	80017a6 <setTorque+0x10e>
		torque_total = 0;
 800179e:	4b6c      	ldr	r3, [pc, #432]	@ (8001950 <setTorque+0x2b8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
 80017a4:	e006      	b.n	80017b4 <setTorque+0x11c>
	} else if (torque_total > 90) {
 80017a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <setTorque+0x2b8>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80017ac:	d902      	bls.n	80017b4 <setTorque+0x11c>
		torque_total = 100;
 80017ae:	4b68      	ldr	r3, [pc, #416]	@ (8001950 <setTorque+0x2b8>)
 80017b0:	2264      	movs	r2, #100	@ 0x64
 80017b2:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25) {
 80017b4:	4b67      	ldr	r3, [pc, #412]	@ (8001954 <setTorque+0x2bc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80017bc:	4293      	cmp	r3, r2
 80017be:	dd0a      	ble.n	80017d6 <setTorque+0x13e>
 80017c0:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <setTorque+0x2b8>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b19      	cmp	r3, #25
 80017c6:	d906      	bls.n	80017d6 <setTorque+0x13e>
		print("EV_2_3");
 80017c8:	4863      	ldr	r0, [pc, #396]	@ (8001958 <setTorque+0x2c0>)
 80017ca:	f7ff fe13 	bl	80013f4 <print>
		flag_EV_2_3 = 1;
 80017ce:	4b63      	ldr	r3, [pc, #396]	@ (800195c <setTorque+0x2c4>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e00c      	b.n	80017f0 <setTorque+0x158>
	} else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5) {
 80017d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001954 <setTorque+0x2bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80017de:	4293      	cmp	r3, r2
 80017e0:	dc06      	bgt.n	80017f0 <setTorque+0x158>
 80017e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001950 <setTorque+0x2b8>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d802      	bhi.n	80017f0 <setTorque+0x158>
		flag_EV_2_3 = 0;
 80017ea:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <setTorque+0x2c4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10) {
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <setTorque+0x2b0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b55      	ldr	r3, [pc, #340]	@ (800194c <setTorque+0x2b4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bfb8      	it	lt
 80017fe:	425b      	neglt	r3, r3
 8001800:	2b0a      	cmp	r3, #10
 8001802:	dd06      	ble.n	8001812 <setTorque+0x17a>

		//if (HAL_GetTick() - last_time_t_11_8 > 100) {
			print("T11.8.9");
 8001804:	4856      	ldr	r0, [pc, #344]	@ (8001960 <setTorque+0x2c8>)
 8001806:	f7ff fdf5 	bl	80013f4 <print>
			flag_T11_8_9 = 1;
 800180a:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <setTorque+0x2cc>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e007      	b.n	8001822 <setTorque+0x18a>
		//}

	} else {
		last_time_t_11_8 = HAL_GetTick();
 8001812:	f001 f82d 	bl	8002870 <HAL_GetTick>
 8001816:	4603      	mov	r3, r0
 8001818:	4a53      	ldr	r2, [pc, #332]	@ (8001968 <setTorque+0x2d0>)
 800181a:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 800181c:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <setTorque+0x2cc>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9) {
 8001822:	4b4e      	ldr	r3, [pc, #312]	@ (800195c <setTorque+0x2c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500) {
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <setTorque+0x2d4>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001970 <setTorque+0x2d8>
 8001832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d53a      	bpl.n	80018b2 <setTorque+0x21a>
		if (v_celda_min > 2800) {
 800183c:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <setTorque+0x2d4>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001974 <setTorque+0x2dc>
 8001846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184e:	dd1f      	ble.n	8001890 <setTorque+0x1f8>
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <setTorque+0x2b8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800185c:	4b43      	ldr	r3, [pc, #268]	@ (800196c <setTorque+0x2d4>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001866:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001918 <setTorque+0x280>
 800186a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800186e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001920 <setTorque+0x288>
 8001872:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001876:	ee26 6b07 	vmul.f64	d6, d6, d7
					/ 1000;
 800187a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8001928 <setTorque+0x290>
 800187e:	ee86 7b05 	vdiv.f64	d7, d6, d5
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750)
 8001882:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001886:	ee17 2a90 	vmov	r2, s15
 800188a:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <setTorque+0x2e0>)
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e015      	b.n	80018bc <setTorque+0x224>
		} else {
			torque_limitado = torque_total * 0.05;
 8001890:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <setTorque+0x2b8>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800189c:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001930 <setTorque+0x298>
 80018a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018a8:	ee17 2a90 	vmov	r2, s15
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <setTorque+0x2e0>)
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e004      	b.n	80018bc <setTorque+0x224>
		}
	} else {
		torque_limitado = torque_total;
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <setTorque+0x2b8>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <setTorque+0x2e0>)
 80018ba:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	//torque_total = torque_total * 240 / 100;
	if(torque_total >= 10){
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <setTorque+0x2b8>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d912      	bls.n	80018ea <setTorque+0x252>
		torque_total = (torque_total*240/90 - 2400/90)*(100/100);
 80018c4:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <setTorque+0x2b8>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4a2a      	ldr	r2, [pc, #168]	@ (800197c <setTorque+0x2e4>)
 80018d4:	fb82 1203 	smull	r1, r2, r2, r3
 80018d8:	441a      	add	r2, r3
 80018da:	1192      	asrs	r2, r2, #6
 80018dc:	17db      	asrs	r3, r3, #31
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b1a      	subs	r3, #26
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <setTorque+0x2b8>)
 80018e8:	801a      	strh	r2, [r3, #0]
		torque_total = 0;
	}*/


	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <setTorque+0x2b8>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	3301      	adds	r3, #1
 80018f6:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 80018f8:	88bb      	ldrh	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	e147ae14 	.word	0xe147ae14
 800190c:	4025147a 	.word	0x4025147a
 8001910:	ae147ae0 	.word	0xae147ae0
 8001914:	401de147 	.word	0x401de147
 8001918:	a1cac083 	.word	0xa1cac083
 800191c:	3ff5b645 	.word	0x3ff5b645
 8001920:	00000000 	.word	0x00000000
 8001924:	40ad4c00 	.word	0x40ad4c00
 8001928:	00000000 	.word	0x00000000
 800192c:	408f4000 	.word	0x408f4000
 8001930:	9999999a 	.word	0x9999999a
 8001934:	3fa99999 	.word	0x3fa99999
 8001938:	240016d4 	.word	0x240016d4
 800193c:	240016e4 	.word	0x240016e4
 8001940:	240016d8 	.word	0x240016d8
 8001944:	240016ec 	.word	0x240016ec
 8001948:	240016dc 	.word	0x240016dc
 800194c:	240016e0 	.word	0x240016e0
 8001950:	240016f8 	.word	0x240016f8
 8001954:	240016f4 	.word	0x240016f4
 8001958:	0801269c 	.word	0x0801269c
 800195c:	24001708 	.word	0x24001708
 8001960:	080126a4 	.word	0x080126a4
 8001964:	2400170c 	.word	0x2400170c
 8001968:	24001704 	.word	0x24001704
 800196c:	24000004 	.word	0x24000004
 8001970:	455ac000 	.word	0x455ac000
 8001974:	452f0000 	.word	0x452f0000
 8001978:	240016fc 	.word	0x240016fc
 800197c:	b60b60b7 	.word	0xb60b60b7

08001980 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a78      	ldr	r2, [pc, #480]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	f040 80e9 	bne.w	8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		//Estado TORQUE
if(flag_react == 0){//Si no hay que reactivar el coche manda siempre torque
 8001992:	4b77      	ldr	r3, [pc, #476]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d117      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x4a>

		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800199a:	4b76      	ldr	r3, [pc, #472]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a76      	ldr	r2, [pc, #472]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019a0:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 80019a2:	4b75      	ldr	r3, [pc, #468]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019a4:	2203      	movs	r2, #3
 80019a6:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80019a8:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 80019ae:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80019b4:	4b71      	ldr	r3, [pc, #452]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 80019ba:	4b70      	ldr	r3, [pc, #448]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019bc:	2206      	movs	r2, #6
 80019be:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80019c0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80019c2:	496d      	ldr	r1, [pc, #436]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019c4:	486e      	ldr	r0, [pc, #440]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80019c6:	f005 fc84 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>


}


		switch (state) {
 80019ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3b03      	subs	r3, #3
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	f200 80c7 	bhi.w	8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019fd 	.word	0x080019fd
 80019e0:	08001a33 	.word	0x08001a33
 80019e4:	08001b65 	.word	0x08001b65
 80019e8:	08001a7b 	.word	0x08001a7b
 80019ec:	08001b65 	.word	0x08001b65
 80019f0:	08001b65 	.word	0x08001b65
 80019f4:	08001b65 	.word	0x08001b65
 80019f8:	08001adb 	.word	0x08001adb
		case 3:
#if DEBUG
			print("state: standby");
 80019fc:	4862      	ldr	r0, [pc, #392]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80019fe:	f7ff fcf9 	bl	80013f4 <print>
#endif
			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001a02:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5c      	ldr	r2, [pc, #368]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a08:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001a16:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001a1c:	4b57      	ldr	r3, [pc, #348]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001a22:	4b56      	ldr	r3, [pc, #344]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a2a:	4953      	ldr	r1, [pc, #332]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a2c:	4854      	ldr	r0, [pc, #336]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a2e:	f005 fc50 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>


		case 4:

#if DEBUG
	print("state: ready");
 8001a32:	4856      	ldr	r0, [pc, #344]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a34:	f7ff fcde 	bl	80013f4 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001a38:	4b4f      	ldr	r3, [pc, #316]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a3a:	f240 3262 	movw	r2, #866	@ 0x362
 8001a3e:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001a46:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001a58:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b47      	ldr	r3, [pc, #284]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a60:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001a62:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001a68:	4a44      	ldr	r2, [pc, #272]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001a6a:	4943      	ldr	r1, [pc, #268]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a6c:	4844      	ldr	r0, [pc, #272]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001a6e:	f005 fc30 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; //Reactivado
 8001a72:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]


			break;
 8001a78:	e074      	b.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>

			//Request TORQUE inversor

			//flag_react = 1;

			real_torque = setTorque();
 8001a7a:	f7ff fe0d 	bl	8001698 <setTorque>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a84:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a88:	f240 3262 	movw	r2, #866	@ 0x362
 8001a8c:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001a90:	2204      	movs	r2, #4
 8001a92:	60da      	str	r2, [r3, #12]

			//real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001a94:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001a9c:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001aaa:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001aac:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001ab2:	4b32      	ldr	r3, [pc, #200]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001ab8:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001abe:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ac6:	70da      	strb	r2, [r3, #3]
			//TxData_Inv[2] = 0xFE;
			//TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv) ;
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001aca:	492b      	ldr	r1, [pc, #172]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001acc:	482c      	ldr	r0, [pc, #176]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ace:	f005 fc00 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>
 			CAN_bus_off_check_reset(&hfdcan1);
 8001ad2:	482b      	ldr	r0, [pc, #172]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ad4:	f000 f8da 	bl	8001c8c <CAN_bus_off_check_reset>

			break;
 8001ad8:	e044      	b.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>

		case 10:
			print("state: soft fault");
 8001ada:	4830      	ldr	r0, [pc, #192]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001adc:	f7ff fc8a 	bl	80013f4 <print>
			printValue(error);
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fca3 	bl	8001430 <printValue>

			//Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a22      	ldr	r2, [pc, #136]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001af0:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x3;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b10:	4a1a      	ldr	r2, [pc, #104]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b12:	4919      	ldr	r1, [pc, #100]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b14:	481a      	ldr	r0, [pc, #104]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b16:	f005 fbdc 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60) {
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b20:	dc1f      	bgt.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x1e2>

				//Estado STAND BY inversor
				while (state != 3) {
 8001b22:	e01a      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x1da>

					flag_react = 1;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]

					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b30:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]

					TxData_Inv[0] = 0x0;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x3;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b52:	4909      	ldr	r1, [pc, #36]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b54:	480a      	ldr	r0, [pc, #40]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b56:	f005 fbbc 	bl	80072d2 <HAL_FDCAN_AddMessageToTxFifoQ>
				while (state != 3) {
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d1e0      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x1a4>
							TxData_Inv);
				}
			}

			break;
 8001b62:	bf00      	nop
		}
#endif
	}
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2400048c 	.word	0x2400048c
 8001b70:	2400186f 	.word	0x2400186f
 8001b74:	24000000 	.word	0x24000000
 8001b78:	24000600 	.word	0x24000600
 8001b7c:	24000674 	.word	0x24000674
 8001b80:	240001e4 	.word	0x240001e4
 8001b84:	24001702 	.word	0x24001702
 8001b88:	080126ac 	.word	0x080126ac
 8001b8c:	080126bc 	.word	0x080126bc
 8001b90:	24001700 	.word	0x24001700
 8001b94:	240016fa 	.word	0x240016fa
 8001b98:	240016fb 	.word	0x240016fb
 8001b9c:	080126cc 	.word	0x080126cc
 8001ba0:	2400186e 	.word	0x2400186e
 8001ba4:	240016c4 	.word	0x240016c4

08001ba8 <SDCard_start>:

void SDCard_start(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
	FATFS *FS_Ptr;
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do {
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	492e      	ldr	r1, [pc, #184]	@ (8001c6c <SDCard_start+0xc4>)
 8001bb2:	482f      	ldr	r0, [pc, #188]	@ (8001c70 <SDCard_start+0xc8>)
 8001bb4:	f00f fec2 	bl	801193c <f_mount>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK) {
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <SDCard_start+0x2e>
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	492b      	ldr	r1, [pc, #172]	@ (8001c74 <SDCard_start+0xcc>)
 8001bc8:	482b      	ldr	r0, [pc, #172]	@ (8001c78 <SDCard_start+0xd0>)
 8001bca:	f010 f80f 	bl	8011bec <siprintf>
			print(TxBuffer);
 8001bce:	482a      	ldr	r0, [pc, #168]	@ (8001c78 <SDCard_start+0xd0>)
 8001bd0:	f7ff fc10 	bl	80013f4 <print>
			break;
 8001bd4:	e045      	b.n	8001c62 <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001bd6:	4929      	ldr	r1, [pc, #164]	@ (8001c7c <SDCard_start+0xd4>)
 8001bd8:	4827      	ldr	r0, [pc, #156]	@ (8001c78 <SDCard_start+0xd0>)
 8001bda:	f010 f807 	bl	8011bec <siprintf>
		print(TxBuffer);
 8001bde:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <SDCard_start+0xd0>)
 8001be0:	f7ff fc08 	bl	80013f4 <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001be4:	f107 0208 	add.w	r2, r7, #8
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4824      	ldr	r0, [pc, #144]	@ (8001c80 <SDCard_start+0xd8>)
 8001bee:	f00f feeb 	bl	80119c8 <f_getfree>
		TotalSize = (uint32_t) ((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	3b02      	subs	r3, #2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	8952      	ldrh	r2, [r2, #10]
 8001bfc:	fb02 f303 	mul.w	r3, r2, r3
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c08:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001c0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c14:	ee17 3a90 	vmov	r3, s15
 8001c18:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t) (FreeClusters * FS_Ptr->csize * 0.5);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	895b      	ldrh	r3, [r3, #10]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c2e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001c32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c3a:	ee17 3a90 	vmov	r3, s15
 8001c3e:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4910      	ldr	r1, [pc, #64]	@ (8001c84 <SDCard_start+0xdc>)
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <SDCard_start+0xd0>)
 8001c46:	f00f ffd1 	bl	8011bec <siprintf>
		print(TxBuffer);
 8001c4a:	480b      	ldr	r0, [pc, #44]	@ (8001c78 <SDCard_start+0xd0>)
 8001c4c:	f7ff fbd2 	bl	80013f4 <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <SDCard_start+0xe0>)
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <SDCard_start+0xd0>)
 8001c56:	f00f ffc9 	bl	8011bec <siprintf>
		print(TxBuffer);
 8001c5a:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <SDCard_start+0xd0>)
 8001c5c:	f7ff fbca 	bl	80013f4 <print>
	} while (0);

}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	24001884 	.word	0x24001884
 8001c70:	2400068c 	.word	0x2400068c
 8001c74:	080126e0 	.word	0x080126e0
 8001c78:	24001774 	.word	0x24001774
 8001c7c:	080126fc 	.word	0x080126fc
 8001c80:	0801271c 	.word	0x0801271c
 8001c84:	08012720 	.word	0x08012720
 8001c88:	0801273c 	.word	0x0801273c

08001c8c <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	@ 0x38
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f005 fce0 	bl	8007660 <HAL_FDCAN_GetProtocolStatus>
	if(protocolStatus.BusOff){
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <CAN_bus_off_check_reset+0x2a>
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	619a      	str	r2, [r3, #24]
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	3738      	adds	r7, #56	@ 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc2:	b672      	cpsid	i
}
 8001cc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cc6:	bf00      	nop
 8001cc8:	e7fd      	b.n	8001cc6 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_MspInit+0x30>)
 8001cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cd8:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_MspInit+0x30>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_MspInit+0x30>)
 8001ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	58024400 	.word	0x58024400

08001d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b090      	sub	sp, #64	@ 0x40
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a90      	ldr	r2, [pc, #576]	@ (8001f60 <HAL_ADC_MspInit+0x260>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 80a3 	bne.w	8001e6a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d24:	4b8f      	ldr	r3, [pc, #572]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a8e      	ldr	r2, [pc, #568]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001d2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10e      	bne.n	8001d54 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d36:	4b8c      	ldr	r3, [pc, #560]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d3c:	4a8a      	ldr	r2, [pc, #552]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d3e:	f043 0320 	orr.w	r3, r3, #32
 8001d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d46:	4b88      	ldr	r3, [pc, #544]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d54:	4b84      	ldr	r3, [pc, #528]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	4a83      	ldr	r2, [pc, #524]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d64:	4b80      	ldr	r3, [pc, #512]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b7d      	ldr	r3, [pc, #500]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d78:	4a7b      	ldr	r2, [pc, #492]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d82:	4b79      	ldr	r3, [pc, #484]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d90:	4b75      	ldr	r3, [pc, #468]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d96:	4a74      	ldr	r2, [pc, #464]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da0:	4b71      	ldr	r3, [pc, #452]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001dae:	2330      	movs	r3, #48	@ 0x30
 8001db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	486a      	ldr	r0, [pc, #424]	@ (8001f6c <HAL_ADC_MspInit+0x26c>)
 8001dc2:	f006 fa13 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4865      	ldr	r0, [pc, #404]	@ (8001f70 <HAL_ADC_MspInit+0x270>)
 8001dda:	f006 fa07 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001dde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de4:	2303      	movs	r3, #3
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4860      	ldr	r0, [pc, #384]	@ (8001f74 <HAL_ADC_MspInit+0x274>)
 8001df4:	f006 f9fa 	bl	80081ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001df8:	4b5f      	ldr	r3, [pc, #380]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001dfa:	4a60      	ldr	r2, [pc, #384]	@ (8001f7c <HAL_ADC_MspInit+0x27c>)
 8001dfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e00:	2209      	movs	r2, #9
 8001e02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e04:	4b5c      	ldr	r3, [pc, #368]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e10:	4b59      	ldr	r3, [pc, #356]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e18:	4b57      	ldr	r3, [pc, #348]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e20:	4b55      	ldr	r3, [pc, #340]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e30:	4b51      	ldr	r3, [pc, #324]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e36:	4b50      	ldr	r3, [pc, #320]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e3c:	484e      	ldr	r0, [pc, #312]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e3e:	f002 fef5 	bl	8004c2c <HAL_DMA_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001e48:	f7ff ff39 	bl	8001cbe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e52:	4a49      	ldr	r2, [pc, #292]	@ (8001f78 <HAL_ADC_MspInit+0x278>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2012      	movs	r0, #18
 8001e5e:	f002 feb0 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e62:	2012      	movs	r0, #18
 8001e64:	f002 fec7 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e68:	e076      	b.n	8001f58 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a44      	ldr	r2, [pc, #272]	@ (8001f80 <HAL_ADC_MspInit+0x280>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d171      	bne.n	8001f58 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e74:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001e7c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e7e:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <HAL_ADC_MspInit+0x264>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10e      	bne.n	8001ea4 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e86:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e8c:	4a36      	ldr	r2, [pc, #216]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e96:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed2:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee0:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <HAL_ADC_MspInit+0x268>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001efe:	2320      	movs	r3, #32
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f02:	2303      	movs	r3, #3
 8001f04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4816      	ldr	r0, [pc, #88]	@ (8001f6c <HAL_ADC_MspInit+0x26c>)
 8001f12:	f006 f96b 	bl	80081ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001f16:	2301      	movs	r3, #1
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f26:	4619      	mov	r1, r3
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <HAL_ADC_MspInit+0x270>)
 8001f2a:	f006 f95f 	bl	80081ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8001f2e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f40:	4619      	mov	r1, r3
 8001f42:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <HAL_ADC_MspInit+0x274>)
 8001f44:	f006 f952 	bl	80081ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2012      	movs	r0, #18
 8001f4e:	f002 fe38 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f52:	2012      	movs	r0, #18
 8001f54:	f002 fe4f 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3740      	adds	r7, #64	@ 0x40
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40022000 	.word	0x40022000
 8001f64:	24001870 	.word	0x24001870
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58020800 	.word	0x58020800
 8001f70:	58020400 	.word	0x58020400
 8001f74:	58021400 	.word	0x58021400
 8001f78:	2400016c 	.word	0x2400016c
 8001f7c:	40020010 	.word	0x40020010
 8001f80:	40022100 	.word	0x40022100

08001f84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ba      	sub	sp, #232	@ 0xe8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	22b8      	movs	r2, #184	@ 0xb8
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00f fe41 	bl	8011c2c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5e      	ldr	r2, [pc, #376]	@ (8002128 <HAL_FDCAN_MspInit+0x1a4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d157      	bne.n	8002064 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001fb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc6:	f107 0318 	add.w	r3, r7, #24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 fa88 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001fd6:	f7ff fe72 	bl	8001cbe <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fda:	4b54      	ldr	r3, [pc, #336]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 8001fe2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fe4:	4b51      	ldr	r3, [pc, #324]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10e      	bne.n	800200a <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fec:	4b50      	ldr	r3, [pc, #320]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 8001fee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 8001ffe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	4b49      	ldr	r3, [pc, #292]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800201a:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002028:	2303      	movs	r3, #3
 800202a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002040:	2309      	movs	r3, #9
 8002042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002046:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800204a:	4619      	mov	r1, r3
 800204c:	4839      	ldr	r0, [pc, #228]	@ (8002134 <HAL_FDCAN_MspInit+0x1b0>)
 800204e:	f006 f8cd 	bl	80081ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2101      	movs	r1, #1
 8002056:	2013      	movs	r0, #19
 8002058:	f002 fdb3 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800205c:	2013      	movs	r0, #19
 800205e:	f002 fdca 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002062:	e05c      	b.n	800211e <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a33      	ldr	r2, [pc, #204]	@ (8002138 <HAL_FDCAN_MspInit+0x1b4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d157      	bne.n	800211e <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800206e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	4618      	mov	r0, r3
 8002086:	f007 fa2b 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002090:	f7ff fe15 	bl	8001cbe <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 800209c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800209e:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_FDCAN_MspInit+0x1a8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020ac:	4a20      	ldr	r2, [pc, #128]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_FDCAN_MspInit+0x1ac>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80020fc:	2309      	movs	r3, #9
 80020fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002106:	4619      	mov	r1, r3
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <HAL_FDCAN_MspInit+0x1b8>)
 800210a:	f006 f86f 	bl	80081ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2102      	movs	r1, #2
 8002112:	2014      	movs	r0, #20
 8002114:	f002 fd55 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002118:	2014      	movs	r0, #20
 800211a:	f002 fd6c 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	37e8      	adds	r7, #232	@ 0xe8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	4000a000 	.word	0x4000a000
 800212c:	24001874 	.word	0x24001874
 8002130:	58024400 	.word	0x58024400
 8002134:	58020c00 	.word	0x58020c00
 8002138:	4000a400 	.word	0x4000a400
 800213c:	58020400 	.word	0x58020400

08002140 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	@ 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <HAL_SD_MspInit+0x118>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d175      	bne.n	800224e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <HAL_SD_MspInit+0x11c>)
 8002164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002168:	4a3c      	ldr	r2, [pc, #240]	@ (800225c <HAL_SD_MspInit+0x11c>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002172:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_SD_MspInit+0x11c>)
 8002174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002180:	4b36      	ldr	r3, [pc, #216]	@ (800225c <HAL_SD_MspInit+0x11c>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	4a35      	ldr	r2, [pc, #212]	@ (800225c <HAL_SD_MspInit+0x11c>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002190:	4b32      	ldr	r3, [pc, #200]	@ (800225c <HAL_SD_MspInit+0x11c>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800219e:	4b2f      	ldr	r3, [pc, #188]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a4:	4a2d      	ldr	r2, [pc, #180]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	4a26      	ldr	r2, [pc, #152]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_SD_MspInit+0x11c>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021da:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80021de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021ec:	230c      	movs	r3, #12
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	481a      	ldr	r0, [pc, #104]	@ (8002260 <HAL_SD_MspInit+0x120>)
 80021f8:	f005 fff8 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021fc:	2304      	movs	r3, #4
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800220c:	230c      	movs	r3, #12
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	4813      	ldr	r0, [pc, #76]	@ (8002264 <HAL_SD_MspInit+0x124>)
 8002218:	f005 ffe8 	bl	80081ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800221c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800222e:	2307      	movs	r3, #7
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	480b      	ldr	r0, [pc, #44]	@ (8002268 <HAL_SD_MspInit+0x128>)
 800223a:	f005 ffd7 	bl	80081ec <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2031      	movs	r0, #49	@ 0x31
 8002244:	f002 fcbd 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002248:	2031      	movs	r0, #49	@ 0x31
 800224a:	f002 fcd4 	bl	8004bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	3730      	adds	r7, #48	@ 0x30
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	52007000 	.word	0x52007000
 800225c:	58024400 	.word	0x58024400
 8002260:	58020800 	.word	0x58020800
 8002264:	58020c00 	.word	0x58020c00
 8002268:	58020400 	.word	0x58020400

0800226c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	@ (80022e0 <HAL_TIM_Base_MspInit+0x74>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10f      	bne.n	800229e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 8002280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002284:	4a17      	ldr	r2, [pc, #92]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800228e:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 8002290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800229c:	e01b      	b.n	80022d6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a11      	ldr	r2, [pc, #68]	@ (80022e8 <HAL_TIM_Base_MspInit+0x7c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d116      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 80022aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ae:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_TIM_Base_MspInit+0x78>)
 80022ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2075      	movs	r0, #117	@ 0x75
 80022cc:	f002 fc79 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80022d0:	2075      	movs	r0, #117	@ 0x75
 80022d2:	f002 fc90 	bl	8004bf6 <HAL_NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	40014400 	.word	0x40014400

080022ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <HAL_TIM_MspPostInit+0x6c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11f      	bne.n	800234e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <HAL_TIM_MspPostInit+0x70>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_TIM_MspPostInit+0x70>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_TIM_MspPostInit+0x70>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800232c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002330:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	@ (8002360 <HAL_TIM_MspPostInit+0x74>)
 800234a:	f005 ff4f 	bl	80081ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	58024400 	.word	0x58024400
 8002360:	58021000 	.word	0x58021000

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0ba      	sub	sp, #232	@ 0xe8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	22b8      	movs	r2, #184	@ 0xb8
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00f fc51 	bl	8011c2c <memset>
  if(huart->Instance==USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a4d      	ldr	r2, [pc, #308]	@ (80024c4 <HAL_UART_MspInit+0x160>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d147      	bne.n	8002424 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002394:	f04f 0201 	mov.w	r2, #1
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a6:	f107 0318 	add.w	r3, r7, #24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f007 f898 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023b6:	f7ff fc82 	bl	8001cbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c0:	4a41      	ldr	r2, [pc, #260]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023ca:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b3b      	ldr	r3, [pc, #236]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023de:	4a3a      	ldr	r2, [pc, #232]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e8:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80023f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002410:	2307      	movs	r3, #7
 8002412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800241a:	4619      	mov	r1, r3
 800241c:	482b      	ldr	r0, [pc, #172]	@ (80024cc <HAL_UART_MspInit+0x168>)
 800241e:	f005 fee5 	bl	80081ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002422:	e04a      	b.n	80024ba <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a29      	ldr	r2, [pc, #164]	@ (80024d0 <HAL_UART_MspInit+0x16c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d145      	bne.n	80024ba <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800242e:	f04f 0202 	mov.w	r2, #2
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002440:	f107 0318 	add.w	r3, r7, #24
 8002444:	4618      	mov	r0, r3
 8002446:	f007 f84b 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002450:	f7ff fc35 	bl	8001cbe <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 8002456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800245a:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 8002466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_UART_MspInit+0x164>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002490:	230c      	movs	r3, #12
 8002492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a8:	2307      	movs	r3, #7
 80024aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	@ (80024cc <HAL_UART_MspInit+0x168>)
 80024b6:	f005 fe99 	bl	80081ec <HAL_GPIO_Init>
}
 80024ba:	bf00      	nop
 80024bc:	37e8      	adds	r7, #232	@ 0xe8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40011000 	.word	0x40011000
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58020000 	.word	0x58020000
 80024d0:	40004400 	.word	0x40004400

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <NMI_Handler+0x4>

080024dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <MemManage_Handler+0x4>

080024ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252a:	f000 f98d 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <DMA1_Stream0_IRQHandler+0x10>)
 800253a:	f003 f939 	bl	80057b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2400016c 	.word	0x2400016c

08002548 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800254c:	4803      	ldr	r0, [pc, #12]	@ (800255c <ADC_IRQHandler+0x14>)
 800254e:	f000 ff8f 	bl	8003470 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <ADC_IRQHandler+0x18>)
 8002554:	f000 ff8c 	bl	8003470 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2400008c 	.word	0x2400008c
 8002560:	240000fc 	.word	0x240000fc

08002564 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <FDCAN1_IT0_IRQHandler+0x10>)
 800256a:	f005 f943 	bl	80077f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240001e4 	.word	0x240001e4

08002578 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <FDCAN2_IT0_IRQHandler+0x10>)
 800257e:	f005 f939 	bl	80077f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24000284 	.word	0x24000284

0800258c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <SDMMC1_IRQHandler+0x10>)
 8002592:	f009 fdfb 	bl	800c18c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	240003c4 	.word	0x240003c4

080025a0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <TIM16_IRQHandler+0x10>)
 80025a6:	f00b f924 	bl	800d7f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2400048c 	.word	0x2400048c

080025b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e4:	f00f fb2a 	bl	8011c3c <__errno>
 80025e8:	4603      	mov	r3, r0
 80025ea:	220c      	movs	r2, #12
 80025ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	24050000 	.word	0x24050000
 8002614:	00000400 	.word	0x00000400
 8002618:	24001878 	.word	0x24001878
 800261c:	24001c10 	.word	0x24001c10

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <SystemInit+0xd0>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <SystemInit+0xd0>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <SystemInit+0xd4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	2b06      	cmp	r3, #6
 800263e:	d807      	bhi.n	8002650 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002640:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <SystemInit+0xd4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	4a2a      	ldr	r2, [pc, #168]	@ (80026f4 <SystemInit+0xd4>)
 800264a:	f043 0307 	orr.w	r3, r3, #7
 800264e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002650:	4b29      	ldr	r3, [pc, #164]	@ (80026f8 <SystemInit+0xd8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a28      	ldr	r2, [pc, #160]	@ (80026f8 <SystemInit+0xd8>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800265c:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <SystemInit+0xd8>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <SystemInit+0xd8>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4924      	ldr	r1, [pc, #144]	@ (80026f8 <SystemInit+0xd8>)
 8002668:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <SystemInit+0xdc>)
 800266a:	4013      	ands	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <SystemInit+0xd4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <SystemInit+0xd4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 030f 	bic.w	r3, r3, #15
 8002682:	4a1c      	ldr	r2, [pc, #112]	@ (80026f4 <SystemInit+0xd4>)
 8002684:	f043 0307 	orr.w	r3, r3, #7
 8002688:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800268a:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <SystemInit+0xd8>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <SystemInit+0xd8>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <SystemInit+0xd8>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <SystemInit+0xd8>)
 800269e:	4a18      	ldr	r2, [pc, #96]	@ (8002700 <SystemInit+0xe0>)
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <SystemInit+0xd8>)
 80026a4:	4a17      	ldr	r2, [pc, #92]	@ (8002704 <SystemInit+0xe4>)
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <SystemInit+0xd8>)
 80026aa:	4a17      	ldr	r2, [pc, #92]	@ (8002708 <SystemInit+0xe8>)
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <SystemInit+0xd8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <SystemInit+0xd8>)
 80026b6:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <SystemInit+0xe8>)
 80026b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <SystemInit+0xd8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <SystemInit+0xd8>)
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <SystemInit+0xe8>)
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <SystemInit+0xd8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <SystemInit+0xd8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <SystemInit+0xd8>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026d8:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <SystemInit+0xd8>)
 80026da:	2200      	movs	r2, #0
 80026dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <SystemInit+0xec>)
 80026e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	52002000 	.word	0x52002000
 80026f8:	58024400 	.word	0x58024400
 80026fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002700:	02020200 	.word	0x02020200
 8002704:	01ff0000 	.word	0x01ff0000
 8002708:	01010280 	.word	0x01010280
 800270c:	52004000 	.word	0x52004000

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002714:	f7ff ff84 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	@ (8002750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	@ (800275c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f00f fa83 	bl	8011c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7fe f817 	bl	8000774 <main>
  bx  lr
 8002746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002748:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800274c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002750:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8002754:	0801290c 	.word	0x0801290c
  ldr r2, =_sbss
 8002758:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800275c:	24001c10 	.word	0x24001c10

08002760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC3_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276a:	2003      	movs	r0, #3
 800276c:	f002 fa1e 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002770:	f006 fce0 	bl	8009134 <HAL_RCC_GetSysClockFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_Init+0x68>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	4913      	ldr	r1, [pc, #76]	@ (80027d0 <HAL_Init+0x6c>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_Init+0x68>)
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a0e      	ldr	r2, [pc, #56]	@ (80027d0 <HAL_Init+0x6c>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <HAL_Init+0x70>)
 80027a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a8:	4a0b      	ldr	r2, [pc, #44]	@ (80027d8 <HAL_Init+0x74>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ae:	200f      	movs	r0, #15
 80027b0:	f000 f814 	bl	80027dc <HAL_InitTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e002      	b.n	80027c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027be:	f7ff fa85 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	58024400 	.word	0x58024400
 80027d0:	08012864 	.word	0x08012864
 80027d4:	2400000c 	.word	0x2400000c
 80027d8:	24000008 	.word	0x24000008

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_InitTick+0x60>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e021      	b.n	8002834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_InitTick+0x64>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_InitTick+0x60>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fa03 	bl	8004c12 <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f002 f9cd 	bl	8004bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <HAL_InitTick+0x68>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	24000014 	.word	0x24000014
 8002840:	24000008 	.word	0x24000008
 8002844:	24000010 	.word	0x24000010

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	@ (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	24000014 	.word	0x24000014
 800286c:	2400187c 	.word	0x2400187c

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	2400187c 	.word	0x2400187c

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	24000014 	.word	0x24000014

080028d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	609a      	str	r2, [r3, #8]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3360      	adds	r3, #96	@ 0x60
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a10      	ldr	r2, [pc, #64]	@ (8002998 <LL_ADC_SetOffset+0x60>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10b      	bne.n	8002974 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	4313      	orrs	r3, r2
 800296a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002972:	e00b      	b.n	800298c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	430b      	orrs	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	58026000 	.word	0x58026000

0800299c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3360      	adds	r3, #96	@ 0x60
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 031f 	and.w	r3, r3, #31
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	611a      	str	r2, [r3, #16]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3360      	adds	r3, #96	@ 0x60
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	601a      	str	r2, [r3, #0]
  }
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	58026000 	.word	0x58026000

08002a40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <LL_ADC_SetOffsetSaturation+0x40>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10e      	bne.n	8002a72 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3360      	adds	r3, #96	@ 0x60
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	58026000 	.word	0x58026000

08002a84 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <LL_ADC_SetOffsetSign+0x40>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10e      	bne.n	8002ab6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	58026000 	.word	0x58026000

08002ac8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3360      	adds	r3, #96	@ 0x60
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <LL_ADC_SetOffsetState+0x50>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d108      	bne.n	8002afc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002afa:	e007      	b.n	8002b0c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	58026000 	.word	0x58026000

08002b1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3330      	adds	r3, #48	@ 0x30
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	211f      	movs	r1, #31
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 011f 	and.w	r1, r3, #31
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f023 0203 	bic.w	r2, r3, #3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d107      	bne.n	8002c02 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	58026000 	.word	0x58026000

08002c14 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3314      	adds	r3, #20
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0e5b      	lsrs	r3, r3, #25
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0d1b      	lsrs	r3, r3, #20
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2107      	movs	r1, #7
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0d1b      	lsrs	r3, r3, #20
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d08 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d115      	bne.n	8002cd0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0318 	and.w	r3, r3, #24
 8002cba:	4914      	ldr	r1, [pc, #80]	@ (8002d0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cce:	e014      	b.n	8002cfa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0318 	and.w	r3, r3, #24
 8002ce6:	4909      	ldr	r1, [pc, #36]	@ (8002d0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	400b      	ands	r3, r1
 8002cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58026000 	.word	0x58026000
 8002d0c:	000fffff 	.word	0x000fffff

08002d10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5fffffc0 	.word	0x5fffffc0

08002d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	6fffffc0 	.word	0x6fffffc0

08002dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <LL_ADC_Enable+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_IsEnabled+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_IsEnabled+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <LL_ADC_REG_StartConversion+0x24>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	7fffffc0 	.word	0x7fffffc0

08002e5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1ee      	b.n	80032a0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe ff15 	bl	8001d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff3f 	bl	8002d6c <LL_ADC_IsDeepPowerDownEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff25 	bl	8002d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff5a 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff3e 	bl	8002d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f18:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_ADC_Init+0x2ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	4a8e      	ldr	r2, [pc, #568]	@ (8003158 <HAL_ADC_Init+0x2b0>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2a:	e002      	b.n	8002f32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff3d 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff77 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8002f6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 8188 	bne.w	800328e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8184 	bne.w	800328e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f8e:	f043 0202 	orr.w	r2, r3, #2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff36 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d136      	bne.n	8003014 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6c      	ldr	r2, [pc, #432]	@ (800315c <HAL_ADC_Init+0x2b4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x112>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003160 <HAL_ADC_Init+0x2b8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_ADC_Init+0x130>
 8002fba:	4868      	ldr	r0, [pc, #416]	@ (800315c <HAL_ADC_Init+0x2b4>)
 8002fbc:	f7ff ff26 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4867      	ldr	r0, [pc, #412]	@ (8003160 <HAL_ADC_Init+0x2b8>)
 8002fc4:	f7ff ff22 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e008      	b.n	8002fea <HAL_ADC_Init+0x142>
 8002fd8:	4862      	ldr	r0, [pc, #392]	@ (8003164 <HAL_ADC_Init+0x2bc>)
 8002fda:	f7ff ff17 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5a      	ldr	r2, [pc, #360]	@ (800315c <HAL_ADC_Init+0x2b4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x15a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	@ (8003160 <HAL_ADC_Init+0x2b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x15e>
 8003002:	4a59      	ldr	r2, [pc, #356]	@ (8003168 <HAL_ADC_Init+0x2c0>)
 8003004:	e000      	b.n	8003008 <HAL_ADC_Init+0x160>
 8003006:	4a59      	ldr	r2, [pc, #356]	@ (800316c <HAL_ADC_Init+0x2c4>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7ff fc5e 	bl	80028d0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_ADC_Init+0x2bc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d129      	bne.n	8003072 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7e5b      	ldrb	r3, [r3, #25]
 8003022:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003028:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800302e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d013      	beq.n	8003060 <HAL_ADC_Init+0x1b8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d00d      	beq.n	800305c <HAL_ADC_Init+0x1b4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b1c      	cmp	r3, #28
 8003046:	d007      	beq.n	8003058 <HAL_ADC_Init+0x1b0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b18      	cmp	r3, #24
 800304e:	d101      	bne.n	8003054 <HAL_ADC_Init+0x1ac>
 8003050:	2318      	movs	r3, #24
 8003052:	e006      	b.n	8003062 <HAL_ADC_Init+0x1ba>
 8003054:	2300      	movs	r3, #0
 8003056:	e004      	b.n	8003062 <HAL_ADC_Init+0x1ba>
 8003058:	2310      	movs	r3, #16
 800305a:	e002      	b.n	8003062 <HAL_ADC_Init+0x1ba>
 800305c:	2308      	movs	r3, #8
 800305e:	e000      	b.n	8003062 <HAL_ADC_Init+0x1ba>
 8003060:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003062:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e00e      	b.n	8003090 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7e5b      	ldrb	r3, [r3, #25]
 8003076:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800307c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003082:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	045b      	lsls	r3, r3, #17
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_ADC_Init+0x2bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d115      	bne.n	80030fa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <HAL_ADC_Init+0x2c8>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	430b      	orrs	r3, r1
 80030e0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	e009      	b.n	800310e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <HAL_ADC_Init+0x2cc>)
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	430b      	orrs	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fea2 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8003118:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff feaf 	bl	8002e82 <LL_ADC_INJ_IsConversionOngoing>
 8003124:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 808e 	bne.w	800324a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 808a 	bne.w	800324a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <HAL_ADC_Init+0x2bc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d11b      	bne.n	8003178 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7e1b      	ldrb	r3, [r3, #24]
 8003144:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800314c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e018      	b.n	8003186 <HAL_ADC_Init+0x2de>
 8003154:	24000008 	.word	0x24000008
 8003158:	053e2d63 	.word	0x053e2d63
 800315c:	40022000 	.word	0x40022000
 8003160:	40022100 	.word	0x40022100
 8003164:	58026000 	.word	0x58026000
 8003168:	40022300 	.word	0x40022300
 800316c:	58026300 	.word	0x58026300
 8003170:	fff04007 	.word	0xfff04007
 8003174:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b46      	ldr	r3, [pc, #280]	@ (80032a8 <HAL_ADC_Init+0x400>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	430b      	orrs	r3, r1
 8003198:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d137      	bne.n	8003214 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3f      	ldr	r2, [pc, #252]	@ (80032ac <HAL_ADC_Init+0x404>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d116      	bne.n	80031e2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_ADC_Init+0x408>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031cc:	4311      	orrs	r1, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031d2:	430a      	orrs	r2, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	611a      	str	r2, [r3, #16]
 80031e0:	e020      	b.n	8003224 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	4b32      	ldr	r3, [pc, #200]	@ (80032b4 <HAL_ADC_Init+0x40c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0411      	lsls	r1, r2, #16
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003204:	430a      	orrs	r2, r1
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	611a      	str	r2, [r3, #16]
 8003212:	e007      	b.n	8003224 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_ADC_Init+0x404>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d002      	beq.n	800324a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f001 f9b9 	bl	80045bc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10c      	bne.n	800326c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	f023 010f 	bic.w	r1, r3, #15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
 800326a:	e007      	b.n	800327c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 020f 	bic.w	r2, r2, #15
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003280:	f023 0303 	bic.w	r3, r3, #3
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	661a      	str	r2, [r3, #96]	@ 0x60
 800328c:	e007      	b.n	800329e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800329e:	7ffb      	ldrb	r3, [r7, #31]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3724      	adds	r7, #36	@ 0x24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	ffffbffc 	.word	0xffffbffc
 80032ac:	58026000 	.word	0x58026000
 80032b0:	fc00f81f 	.word	0xfc00f81f
 80032b4:	fc00f81e 	.word	0xfc00f81e

080032b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a60      	ldr	r2, [pc, #384]	@ (800344c <HAL_ADC_Start_DMA+0x194>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Start_DMA+0x20>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003450 <HAL_ADC_Start_DMA+0x198>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_Start_DMA+0x24>
 80032d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003454 <HAL_ADC_Start_DMA+0x19c>)
 80032da:	e000      	b.n	80032de <HAL_ADC_Start_DMA+0x26>
 80032dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003458 <HAL_ADC_Start_DMA+0x1a0>)
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fd16 	bl	8002d10 <LL_ADC_GetMultimode>
 80032e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fdb6 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 80a2 	bne.w	800343c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Start_DMA+0x4e>
 8003302:	2302      	movs	r3, #2
 8003304:	e09d      	b.n	8003442 <HAL_ADC_Start_DMA+0x18a>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d003      	beq.n	8003322 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b09      	cmp	r3, #9
 800331e:	f040 8086 	bne.w	800342e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f001 f82c 	bl	8004380 <ADC_Enable>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d178      	bne.n	8003424 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003336:	4b49      	ldr	r3, [pc, #292]	@ (800345c <HAL_ADC_Start_DMA+0x1a4>)
 8003338:	4013      	ands	r3, r2
 800333a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a42      	ldr	r2, [pc, #264]	@ (8003450 <HAL_ADC_Start_DMA+0x198>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_ADC_Start_DMA+0x9a>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e000      	b.n	8003354 <HAL_ADC_Start_DMA+0x9c>
 8003352:	4b3e      	ldr	r3, [pc, #248]	@ (800344c <HAL_ADC_Start_DMA+0x194>)
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	4293      	cmp	r3, r2
 800335a:	d002      	beq.n	8003362 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337e:	f023 0206 	bic.w	r2, r3, #6
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	665a      	str	r2, [r3, #100]	@ 0x64
 8003386:	e002      	b.n	800338e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <HAL_ADC_Start_DMA+0x1a8>)
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	4a32      	ldr	r2, [pc, #200]	@ (8003464 <HAL_ADC_Start_DMA+0x1ac>)
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a2:	4a31      	ldr	r2, [pc, #196]	@ (8003468 <HAL_ADC_Start_DMA+0x1b0>)
 80033a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	221c      	movs	r2, #28
 80033ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0210 	orr.w	r2, r2, #16
 80033c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a28      	ldr	r2, [pc, #160]	@ (800346c <HAL_ADC_Start_DMA+0x1b4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10f      	bne.n	80033f0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7ff fbfe 	bl	8002be0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fbe9 	bl	8002bc0 <LL_ADC_EnableDMAReq>
 80033ee:	e007      	b.n	8003400 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff fbcd 	bl	8002b9a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3340      	adds	r3, #64	@ 0x40
 800340a:	4619      	mov	r1, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f001 ff64 	bl	80052dc <HAL_DMA_Start_IT>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fd09 	bl	8002e34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003422:	e00d      	b.n	8003440 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800342c:	e008      	b.n	8003440 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800343a:	e001      	b.n	8003440 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800343c:	2302      	movs	r3, #2
 800343e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000
 8003450:	40022100 	.word	0x40022100
 8003454:	40022300 	.word	0x40022300
 8003458:	58026300 	.word	0x58026300
 800345c:	fffff0fe 	.word	0xfffff0fe
 8003460:	08004495 	.word	0x08004495
 8003464:	0800456d 	.word	0x0800456d
 8003468:	08004589 	.word	0x08004589
 800346c:	58026000 	.word	0x58026000

08003470 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a87      	ldr	r2, [pc, #540]	@ (80036b0 <HAL_ADC_IRQHandler+0x240>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_IRQHandler+0x30>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a86      	ldr	r2, [pc, #536]	@ (80036b4 <HAL_ADC_IRQHandler+0x244>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_IRQHandler+0x34>
 80034a0:	4b85      	ldr	r3, [pc, #532]	@ (80036b8 <HAL_ADC_IRQHandler+0x248>)
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_IRQHandler+0x36>
 80034a4:	4b85      	ldr	r3, [pc, #532]	@ (80036bc <HAL_ADC_IRQHandler+0x24c>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc32 	bl	8002d10 <LL_ADC_GetMultimode>
 80034ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x78>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 f9aa 	bl	8004834 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2202      	movs	r2, #2
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_IRQHandler+0x8c>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07d      	beq.n	800360e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff faf4 	bl	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d062      	beq.n	8003600 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5d      	ldr	r2, [pc, #372]	@ (80036b4 <HAL_ADC_IRQHandler+0x244>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d002      	beq.n	800354a <HAL_ADC_IRQHandler+0xda>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e000      	b.n	800354c <HAL_ADC_IRQHandler+0xdc>
 800354a:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <HAL_ADC_IRQHandler+0x240>)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	4293      	cmp	r3, r2
 8003552:	d008      	beq.n	8003566 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d002      	beq.n	8003566 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b09      	cmp	r3, #9
 8003564:	d104      	bne.n	8003570 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	e00c      	b.n	800358a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4f      	ldr	r2, [pc, #316]	@ (80036b4 <HAL_ADC_IRQHandler+0x244>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d002      	beq.n	8003580 <HAL_ADC_IRQHandler+0x110>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e000      	b.n	8003582 <HAL_ADC_IRQHandler+0x112>
 8003580:	4b4b      	ldr	r3, [pc, #300]	@ (80036b0 <HAL_ADC_IRQHandler+0x240>)
 8003582:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d135      	bne.n	8003600 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d12e      	bne.n	8003600 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fc58 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11a      	bne.n	80035e8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020c 	bic.w	r2, r2, #12
 80035c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d112      	bne.n	8003600 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80035e6:	e00b      	b.n	8003600 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	f043 0210 	orr.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fd ff33 	bl	800146c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	220c      	movs	r2, #12
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_ADC_IRQHandler+0x1b2>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80a0 	beq.w	800376e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 809a 	beq.w	800376e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fadc 	bl	8002c14 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800365c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fa5a 	bl	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003668:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_ADC_IRQHandler+0x244>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d002      	beq.n	800367a <HAL_ADC_IRQHandler+0x20a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	e000      	b.n	800367c <HAL_ADC_IRQHandler+0x20c>
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_ADC_IRQHandler+0x240>)
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	4293      	cmp	r3, r2
 8003682:	d008      	beq.n	8003696 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d002      	beq.n	8003696 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b07      	cmp	r3, #7
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	e014      	b.n	80036ca <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a03      	ldr	r2, [pc, #12]	@ (80036b4 <HAL_ADC_IRQHandler+0x244>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00a      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x250>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e008      	b.n	80036c2 <HAL_ADC_IRQHandler+0x252>
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40022100 	.word	0x40022100
 80036b8:	40022300 	.word	0x40022300
 80036bc:	58026300 	.word	0x58026300
 80036c0:	4b84      	ldr	r3, [pc, #528]	@ (80038d4 <HAL_ADC_IRQHandler+0x464>)
 80036c2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d047      	beq.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_ADC_IRQHandler+0x27a>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d03f      	beq.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d13a      	bne.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d133      	bne.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12e      	bne.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fbbb 	bl	8002e82 <LL_ADC_INJ_IsConversionOngoing>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003720:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003726:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d112      	bne.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
 8003746:	e00b      	b.n	8003760 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	f043 0210 	orr.w	r2, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003758:	f043 0201 	orr.w	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f83f 	bl	80047e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2260      	movs	r2, #96	@ 0x60
 800376c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_ADC_IRQHandler+0x32c>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8b2 	bl	80038f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2280      	movs	r2, #128	@ 0x80
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <HAL_ADC_IRQHandler+0x35c>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f001 f825 	bl	800480c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_ADC_IRQHandler+0x38c>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f001 f817 	bl	8004820 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d043      	beq.n	800388e <HAL_ADC_IRQHandler+0x41e>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d03e      	beq.n	800388e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003818:	2301      	movs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	e021      	b.n	8003862 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <HAL_ADC_IRQHandler+0x464>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_ADC_IRQHandler+0x3c8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a29      	ldr	r2, [pc, #164]	@ (80038d8 <HAL_ADC_IRQHandler+0x468>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_ADC_IRQHandler+0x3cc>
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_ADC_IRQHandler+0x46c>)
 800383a:	e000      	b.n	800383e <HAL_ADC_IRQHandler+0x3ce>
 800383c:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <HAL_ADC_IRQHandler+0x470>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fa74 	bl	8002d2c <LL_ADC_GetMultiDMATransfer>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800384a:	2301      	movs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
 800384e:	e008      	b.n	8003862 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800385e:	2301      	movs	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10e      	bne.n	8003886 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003878:	f043 0202 	orr.w	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f843 	bl	800390c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d018      	beq.n	80038ca <HAL_ADC_IRQHandler+0x45a>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 ff97 	bl	80047f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	@ 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40022100 	.word	0x40022100
 80038dc:	40022300 	.word	0x40022300
 80038e0:	58026300 	.word	0x58026300

080038e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b0b9      	sub	sp, #228	@ 0xe4
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800393a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4aab      	ldr	r2, [pc, #684]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x2d0>)
 8003942:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x34>
 800394e:	2302      	movs	r3, #2
 8003950:	f000 bcfe 	b.w	8004350 <HAL_ADC_ConfigChannel+0xa30>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fa7b 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	f040 84e2 	bne.w	8004332 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	db38      	blt.n	80039e8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a9e      	ldr	r2, [pc, #632]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2d4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d033      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_ADC_ConfigChannel+0x7e>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0e9b      	lsrs	r3, r3, #26
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	e01d      	b.n	80039da <HAL_ADC_ConfigChannel+0xba>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80039c2:	2320      	movs	r3, #32
 80039c4:	e004      	b.n	80039d0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80039c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	69d1      	ldr	r1, [r2, #28]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f7ff f8a4 	bl	8002b42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fa2c 	bl	8002e5c <LL_ADC_REG_IsConversionOngoing>
 8003a04:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fa38 	bl	8002e82 <LL_ADC_INJ_IsConversionOngoing>
 8003a12:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8270 	bne.w	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 826b 	bne.w	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f7ff f8ff 	bl	8002c3a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10d      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a60:	e032      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a62:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x168>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	e01d      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1a4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x18e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	e00a      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1a4>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d048      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6919      	ldr	r1, [r3, #16]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ae0:	f7fe ff2a 	bl	8002938 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d119      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6919      	ldr	r1, [r3, #16]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fe ffc2 	bl	8002a84 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6919      	ldr	r1, [r3, #16]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1f8>
 8003b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b16:	e000      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x1fa>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fe ff90 	bl	8002a40 <LL_ADC_SetOffsetSaturation>
 8003b20:	e1ee      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6919      	ldr	r1, [r3, #16]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x21a>
 8003b34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b38:	e000      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x21c>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f7fe ff5d 	bl	80029fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	7e1b      	ldrb	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x238>
 8003b52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b56:	e000      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x23a>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7fe ff34 	bl	80029c8 <LL_ADC_SetDataRightShift>
 8003b60:	e1ce      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a23      	ldr	r2, [pc, #140]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	f040 8181 	bne.w	8003e70 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe ff11 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x27a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe ff06 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003b90:	4603      	mov	r3, r0
 8003b92:	0e9b      	lsrs	r3, r3, #26
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	e01e      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x2b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fefb 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003bb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e004      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x2dc>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	e01e      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x30e>
 8003bf0:	47ff0000 	.word	0x47ff0000
 8003bf4:	58026000 	.word	0x58026000
 8003bf8:	5c001000 	.word	0x5c001000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003c20:	2320      	movs	r3, #32
 8003c22:	e004      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d106      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe ff44 	bl	8002ac8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fea8 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x34c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fe9d 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	f003 021f 	and.w	r2, r3, #31
 8003c6a:	e01e      	b.n	8003caa <HAL_ADC_ConfigChannel+0x38a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fe92 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e004      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x3a2>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	e018      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x3d4>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003cde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e004      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fee1 	bl	8002ac8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fe45 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x412>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fe3a 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	e01e      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x450>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fe2f 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e004      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x468>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	e014      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x492>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003da4:	2320      	movs	r3, #32
 8003da6:	e004      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d106      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fe82 	bl	8002ac8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2103      	movs	r1, #3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fde6 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x4d0>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2103      	movs	r1, #3
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fddb 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	e017      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x500>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2103      	movs	r1, #3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fdd0 	bl	800299c <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e003      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x518>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	e011      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x53c>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e48:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e003      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d14f      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2103      	movs	r1, #3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fe2d 	bl	8002ac8 <LL_ADC_SetOffsetState>
 8003e6e:	e047      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	069b      	lsls	r3, r3, #26
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e92:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	069b      	lsls	r3, r3, #26
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d107      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eb6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d107      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eda:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ee2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	069b      	lsls	r3, r3, #26
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe ff81 	bl	8002e0c <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 8219 	bne.w	8004344 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fe feb6 	bl	8002c90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4aa1      	ldr	r2, [pc, #644]	@ (80041b0 <HAL_ADC_ConfigChannel+0x890>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	f040 812e 	bne.w	800418c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x638>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	3301      	adds	r3, #1
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	bf94      	ite	ls
 8003f50:	2301      	movls	r3, #1
 8003f52:	2300      	movhi	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e019      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x66c>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003f70:	2320      	movs	r3, #32
 8003f72:	e003      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2b09      	cmp	r3, #9
 8003f84:	bf94      	ite	ls
 8003f86:	2301      	movls	r3, #1
 8003f88:	2300      	movhi	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d079      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x68c>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	069b      	lsls	r3, r3, #26
 8003fa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003faa:	e015      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x6b8>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e003      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	069b      	lsls	r3, r3, #26
 8003fd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x6d8>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	e017      	b.n	8004028 <HAL_ADC_ConfigChannel+0x708>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800400a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e003      	b.n	800401c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <HAL_ADC_ConfigChannel+0x72e>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	3301      	adds	r3, #1
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	051b      	lsls	r3, r3, #20
 800404c:	e018      	b.n	8004080 <HAL_ADC_ConfigChannel+0x760>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e003      	b.n	8004072 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3301      	adds	r3, #1
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004080:	430b      	orrs	r3, r1
 8004082:	e07e      	b.n	8004182 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x780>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	3301      	adds	r3, #1
 8004098:	069b      	lsls	r3, r3, #26
 800409a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800409e:	e015      	b.n	80040cc <HAL_ADC_ConfigChannel+0x7ac>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80040b8:	2320      	movs	r3, #32
 80040ba:	e003      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	069b      	lsls	r3, r3, #26
 80040c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x7cc>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	3301      	adds	r3, #1
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	e017      	b.n	800411c <HAL_ADC_ConfigChannel+0x7fc>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	61bb      	str	r3, [r7, #24]
  return result;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004104:	2320      	movs	r3, #32
 8004106:	e003      	b.n	8004110 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	3301      	adds	r3, #1
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2101      	movs	r1, #1
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	ea42 0103 	orr.w	r1, r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x828>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e9b      	lsrs	r3, r3, #26
 8004132:	3301      	adds	r3, #1
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	3b1e      	subs	r3, #30
 8004140:	051b      	lsls	r3, r3, #20
 8004142:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004146:	e01b      	b.n	8004180 <HAL_ADC_ConfigChannel+0x860>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	60fb      	str	r3, [r7, #12]
  return result;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f003 021f 	and.w	r2, r3, #31
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	3b1e      	subs	r3, #30
 800417a:	051b      	lsls	r3, r3, #20
 800417c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004180:	430b      	orrs	r3, r1
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	4619      	mov	r1, r3
 8004188:	f7fe fd57 	bl	8002c3a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f280 80d7 	bge.w	8004344 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a06      	ldr	r2, [pc, #24]	@ (80041b4 <HAL_ADC_ConfigChannel+0x894>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x88a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a04      	ldr	r2, [pc, #16]	@ (80041b8 <HAL_ADC_ConfigChannel+0x898>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10a      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x8a0>
 80041aa:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <HAL_ADC_ConfigChannel+0x89c>)
 80041ac:	e009      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x8a2>
 80041ae:	bf00      	nop
 80041b0:	47ff0000 	.word	0x47ff0000
 80041b4:	40022000 	.word	0x40022000
 80041b8:	40022100 	.word	0x40022100
 80041bc:	40022300 	.word	0x40022300
 80041c0:	4b65      	ldr	r3, [pc, #404]	@ (8004358 <HAL_ADC_ConfigChannel+0xa38>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fbaa 	bl	800291c <LL_ADC_GetCommonPathInternalCh>
 80041c8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a62      	ldr	r2, [pc, #392]	@ (800435c <HAL_ADC_ConfigChannel+0xa3c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x8c0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a61      	ldr	r2, [pc, #388]	@ (8004360 <HAL_ADC_ConfigChannel+0xa40>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10e      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x8de>
 80041e0:	485e      	ldr	r0, [pc, #376]	@ (800435c <HAL_ADC_ConfigChannel+0xa3c>)
 80041e2:	f7fe fe13 	bl	8002e0c <LL_ADC_IsEnabled>
 80041e6:	4604      	mov	r4, r0
 80041e8:	485d      	ldr	r0, [pc, #372]	@ (8004360 <HAL_ADC_ConfigChannel+0xa40>)
 80041ea:	f7fe fe0f 	bl	8002e0c <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4323      	orrs	r3, r4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e008      	b.n	8004210 <HAL_ADC_ConfigChannel+0x8f0>
 80041fe:	4859      	ldr	r0, [pc, #356]	@ (8004364 <HAL_ADC_ConfigChannel+0xa44>)
 8004200:	f7fe fe04 	bl	8002e0c <LL_ADC_IsEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8084 	beq.w	800431e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a53      	ldr	r2, [pc, #332]	@ (8004368 <HAL_ADC_ConfigChannel+0xa48>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d132      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x966>
 8004220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d12c      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4c      	ldr	r2, [pc, #304]	@ (8004364 <HAL_ADC_ConfigChannel+0xa44>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f040 8086 	bne.w	8004344 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a47      	ldr	r2, [pc, #284]	@ (800435c <HAL_ADC_ConfigChannel+0xa3c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_ADC_ConfigChannel+0x92c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a46      	ldr	r2, [pc, #280]	@ (8004360 <HAL_ADC_ConfigChannel+0xa40>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x930>
 800424c:	4a47      	ldr	r2, [pc, #284]	@ (800436c <HAL_ADC_ConfigChannel+0xa4c>)
 800424e:	e000      	b.n	8004252 <HAL_ADC_ConfigChannel+0x932>
 8004250:	4a41      	ldr	r2, [pc, #260]	@ (8004358 <HAL_ADC_ConfigChannel+0xa38>)
 8004252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f7fe fb4a 	bl	80028f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004262:	4b43      	ldr	r3, [pc, #268]	@ (8004370 <HAL_ADC_ConfigChannel+0xa50>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a42      	ldr	r2, [pc, #264]	@ (8004374 <HAL_ADC_ConfigChannel+0xa54>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	3301      	adds	r3, #1
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004276:	e002      	b.n	800427e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f9      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004284:	e05e      	b.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3b      	ldr	r2, [pc, #236]	@ (8004378 <HAL_ADC_ConfigChannel+0xa58>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d120      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x9b2>
 8004290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11a      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	@ (8004364 <HAL_ADC_ConfigChannel+0xa44>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d14e      	bne.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2c      	ldr	r2, [pc, #176]	@ (800435c <HAL_ADC_ConfigChannel+0xa3c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x99a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004360 <HAL_ADC_ConfigChannel+0xa40>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x99e>
 80042ba:	4a2c      	ldr	r2, [pc, #176]	@ (800436c <HAL_ADC_ConfigChannel+0xa4c>)
 80042bc:	e000      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x9a0>
 80042be:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <HAL_ADC_ConfigChannel+0xa38>)
 80042c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f7fe fb13 	bl	80028f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d0:	e038      	b.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a29      	ldr	r2, [pc, #164]	@ (800437c <HAL_ADC_ConfigChannel+0xa5c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d133      	bne.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
 80042dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d12d      	bne.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004364 <HAL_ADC_ConfigChannel+0xa44>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d128      	bne.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a19      	ldr	r2, [pc, #100]	@ (800435c <HAL_ADC_ConfigChannel+0xa3c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x9e6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a17      	ldr	r2, [pc, #92]	@ (8004360 <HAL_ADC_ConfigChannel+0xa40>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x9ea>
 8004306:	4a19      	ldr	r2, [pc, #100]	@ (800436c <HAL_ADC_ConfigChannel+0xa4c>)
 8004308:	e000      	b.n	800430c <HAL_ADC_ConfigChannel+0x9ec>
 800430a:	4a13      	ldr	r2, [pc, #76]	@ (8004358 <HAL_ADC_ConfigChannel+0xa38>)
 800430c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7fe faed 	bl	80028f6 <LL_ADC_SetCommonPathInternalCh>
 800431c:	e012      	b.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004330:	e008      	b.n	8004344 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800434c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004350:	4618      	mov	r0, r3
 8004352:	37e4      	adds	r7, #228	@ 0xe4
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	58026300 	.word	0x58026300
 800435c:	40022000 	.word	0x40022000
 8004360:	40022100 	.word	0x40022100
 8004364:	58026000 	.word	0x58026000
 8004368:	c7520000 	.word	0xc7520000
 800436c:	40022300 	.word	0x40022300
 8004370:	24000008 	.word	0x24000008
 8004374:	053e2d63 	.word	0x053e2d63
 8004378:	c3210000 	.word	0xc3210000
 800437c:	cb840000 	.word	0xcb840000

08004380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fd3d 	bl	8002e0c <LL_ADC_IsEnabled>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d16e      	bne.n	8004476 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	4b38      	ldr	r3, [pc, #224]	@ (8004480 <ADC_Enable+0x100>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e05a      	b.n	8004478 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fd0c 	bl	8002de4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043cc:	f7fe fa50 	bl	8002870 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004484 <ADC_Enable+0x104>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <ADC_Enable+0x66>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a29      	ldr	r2, [pc, #164]	@ (8004488 <ADC_Enable+0x108>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <ADC_Enable+0x6a>
 80043e6:	4b29      	ldr	r3, [pc, #164]	@ (800448c <ADC_Enable+0x10c>)
 80043e8:	e000      	b.n	80043ec <ADC_Enable+0x6c>
 80043ea:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <ADC_Enable+0x110>)
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fc8f 	bl	8002d10 <LL_ADC_GetMultimode>
 80043f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a23      	ldr	r2, [pc, #140]	@ (8004488 <ADC_Enable+0x108>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d002      	beq.n	8004404 <ADC_Enable+0x84>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	e000      	b.n	8004406 <ADC_Enable+0x86>
 8004404:	4b1f      	ldr	r3, [pc, #124]	@ (8004484 <ADC_Enable+0x104>)
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	4293      	cmp	r3, r2
 800440c:	d02c      	beq.n	8004468 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d130      	bne.n	8004476 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004414:	e028      	b.n	8004468 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fcf6 	bl	8002e0c <LL_ADC_IsEnabled>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fcda 	bl	8002de4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004430:	f7fe fa1e 	bl	8002870 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d914      	bls.n	8004468 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00d      	beq.n	8004468 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004450:	f043 0210 	orr.w	r2, r3, #16
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e007      	b.n	8004478 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d1cf      	bne.n	8004416 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	8000003f 	.word	0x8000003f
 8004484:	40022000 	.word	0x40022000
 8004488:	40022100 	.word	0x40022100
 800448c:	40022300 	.word	0x40022300
 8004490:	58026300 	.word	0x58026300

08004494 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d14b      	bne.n	8004546 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d021      	beq.n	800450c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fb25 	bl	8002b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d032      	beq.n	800453e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d12b      	bne.n	800453e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11f      	bne.n	800453e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	661a      	str	r2, [r3, #96]	@ 0x60
 800450a:	e018      	b.n	800453e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d111      	bne.n	800453e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7fc ff94 	bl	800146c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004544:	e00e      	b.n	8004564 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff f9da 	bl	800390c <HAL_ADC_ErrorCallback>
}
 8004558:	e004      	b.n	8004564 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff f9b2 	bl	80038e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff f9ac 	bl	800390c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a6c      	ldr	r2, [pc, #432]	@ (800477c <ADC_ConfigureBoostMode+0x1c0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <ADC_ConfigureBoostMode+0x1c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004780 <ADC_ConfigureBoostMode+0x1c4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d109      	bne.n	80045ec <ADC_ConfigureBoostMode+0x30>
 80045d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004784 <ADC_ConfigureBoostMode+0x1c8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e008      	b.n	80045fe <ADC_ConfigureBoostMode+0x42>
 80045ec:	4b66      	ldr	r3, [pc, #408]	@ (8004788 <ADC_ConfigureBoostMode+0x1cc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01c      	beq.n	800463c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004602:	f004 ff11 	bl	8009428 <HAL_RCC_GetHCLKFreq>
 8004606:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004610:	d010      	beq.n	8004634 <ADC_ConfigureBoostMode+0x78>
 8004612:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004616:	d873      	bhi.n	8004700 <ADC_ConfigureBoostMode+0x144>
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461c:	d002      	beq.n	8004624 <ADC_ConfigureBoostMode+0x68>
 800461e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004622:	d16d      	bne.n	8004700 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	60fb      	str	r3, [r7, #12]
        break;
 8004632:	e068      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	60fb      	str	r3, [r7, #12]
        break;
 800463a:	e064      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800463c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004640:	f04f 0100 	mov.w	r1, #0
 8004644:	f006 f8ec 	bl	800a820 <HAL_RCCEx_GetPeriphCLKFreq>
 8004648:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004652:	d051      	beq.n	80046f8 <ADC_ConfigureBoostMode+0x13c>
 8004654:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004658:	d854      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 800465a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800465e:	d047      	beq.n	80046f0 <ADC_ConfigureBoostMode+0x134>
 8004660:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004664:	d84e      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 8004666:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800466a:	d03d      	beq.n	80046e8 <ADC_ConfigureBoostMode+0x12c>
 800466c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004670:	d848      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 8004672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004676:	d033      	beq.n	80046e0 <ADC_ConfigureBoostMode+0x124>
 8004678:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800467c:	d842      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 800467e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004682:	d029      	beq.n	80046d8 <ADC_ConfigureBoostMode+0x11c>
 8004684:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004688:	d83c      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 800468a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800468e:	d01a      	beq.n	80046c6 <ADC_ConfigureBoostMode+0x10a>
 8004690:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004694:	d836      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 8004696:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800469a:	d014      	beq.n	80046c6 <ADC_ConfigureBoostMode+0x10a>
 800469c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046a0:	d830      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a6:	d00e      	beq.n	80046c6 <ADC_ConfigureBoostMode+0x10a>
 80046a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ac:	d82a      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046b2:	d008      	beq.n	80046c6 <ADC_ConfigureBoostMode+0x10a>
 80046b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046b8:	d824      	bhi.n	8004704 <ADC_ConfigureBoostMode+0x148>
 80046ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046be:	d002      	beq.n	80046c6 <ADC_ConfigureBoostMode+0x10a>
 80046c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046c4:	d11e      	bne.n	8004704 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	60fb      	str	r3, [r7, #12]
        break;
 80046d6:	e016      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	60fb      	str	r3, [r7, #12]
        break;
 80046de:	e012      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	60fb      	str	r3, [r7, #12]
        break;
 80046e6:	e00e      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	60fb      	str	r3, [r7, #12]
        break;
 80046ee:	e00a      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	09db      	lsrs	r3, r3, #7
 80046f4:	60fb      	str	r3, [r7, #12]
        break;
 80046f6:	e006      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	60fb      	str	r3, [r7, #12]
        break;
 80046fe:	e002      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004704:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <ADC_ConfigureBoostMode+0x1d0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d808      	bhi.n	8004726 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004722:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004724:	e025      	b.n	8004772 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a19      	ldr	r2, [pc, #100]	@ (8004790 <ADC_ConfigureBoostMode+0x1d4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d80a      	bhi.n	8004744 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004740:	609a      	str	r2, [r3, #8]
}
 8004742:	e016      	b.n	8004772 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a13      	ldr	r2, [pc, #76]	@ (8004794 <ADC_ConfigureBoostMode+0x1d8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d80a      	bhi.n	8004762 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	e007      	b.n	8004772 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	40022100 	.word	0x40022100
 8004784:	40022300 	.word	0x40022300
 8004788:	58026300 	.word	0x58026300
 800478c:	005f5e10 	.word	0x005f5e10
 8004790:	00bebc20 	.word	0x00bebc20
 8004794:	017d7840 	.word	0x017d7840

08004798 <LL_ADC_IsEnabled>:
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <LL_ADC_IsEnabled+0x18>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <LL_ADC_IsEnabled+0x1a>
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_ADC_REG_IsConversionOngoing>:
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d101      	bne.n	80047d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b0a3      	sub	sp, #140	@ 0x8c
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004862:	2302      	movs	r3, #2
 8004864:	e0c1      	b.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004872:	2300      	movs	r3, #0
 8004874:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5e      	ldr	r2, [pc, #376]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d102      	bne.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004880:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e001      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0a0      	b.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff87 	bl	80047be <LL_ADC_REG_IsConversionOngoing>
 80048b0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff80 	bl	80047be <LL_ADC_REG_IsConversionOngoing>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 8081 	bne.w	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d17c      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a48      	ldr	r2, [pc, #288]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a46      	ldr	r2, [pc, #280]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048e2:	4b46      	ldr	r3, [pc, #280]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048e4:	e000      	b.n	80048e8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048e6:	4b46      	ldr	r3, [pc, #280]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048e8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d039      	beq.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	431a      	orrs	r2, r3
 8004900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004902:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3a      	ldr	r2, [pc, #232]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a39      	ldr	r2, [pc, #228]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d10e      	bne.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004918:	4836      	ldr	r0, [pc, #216]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800491a:	f7ff ff3d 	bl	8004798 <LL_ADC_IsEnabled>
 800491e:	4604      	mov	r4, r0
 8004920:	4835      	ldr	r0, [pc, #212]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004922:	f7ff ff39 	bl	8004798 <LL_ADC_IsEnabled>
 8004926:	4603      	mov	r3, r0
 8004928:	4323      	orrs	r3, r4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e008      	b.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004936:	4833      	ldr	r0, [pc, #204]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004938:	f7ff ff2e 	bl	8004798 <LL_ADC_IsEnabled>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d047      	beq.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800494c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	4b2d      	ldr	r3, [pc, #180]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004952:	4013      	ands	r3, r2
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	6811      	ldr	r1, [r2, #0]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	430a      	orrs	r2, r1
 800495e:	431a      	orrs	r2, r3
 8004960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004962:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004964:	e03a      	b.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800496e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004970:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10e      	bne.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004986:	481b      	ldr	r0, [pc, #108]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004988:	f7ff ff06 	bl	8004798 <LL_ADC_IsEnabled>
 800498c:	4604      	mov	r4, r0
 800498e:	481a      	ldr	r0, [pc, #104]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004990:	f7ff ff02 	bl	8004798 <LL_ADC_IsEnabled>
 8004994:	4603      	mov	r3, r0
 8004996:	4323      	orrs	r3, r4
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e008      	b.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049a4:	4817      	ldr	r0, [pc, #92]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049a6:	f7ff fef7 	bl	8004798 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	4b12      	ldr	r3, [pc, #72]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049c6:	e009      	b.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049da:	e000      	b.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	378c      	adds	r7, #140	@ 0x8c
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40022000 	.word	0x40022000
 80049f8:	40022100 	.word	0x40022100
 80049fc:	40022300 	.word	0x40022300
 8004a00:	58026300 	.word	0x58026300
 8004a04:	58026000 	.word	0x58026000
 8004a08:	fffff0e0 	.word	0xfffff0e0

08004a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <__NVIC_SetPriorityGrouping+0x40>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <__NVIC_SetPriorityGrouping+0x40>)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	60d3      	str	r3, [r2, #12]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000ed00 	.word	0xe000ed00
 8004a50:	05fa0000 	.word	0x05fa0000

08004a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a58:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <__NVIC_GetPriorityGrouping+0x18>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	f003 0307 	and.w	r3, r3, #7
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db0b      	blt.n	8004a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4907      	ldr	r1, [pc, #28]	@ (8004aa8 <__NVIC_EnableIRQ+0x38>)
 8004a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2001      	movs	r0, #1
 8004a92:	fa00 f202 	lsl.w	r2, r0, r2
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000e100 	.word	0xe000e100

08004aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db0a      	blt.n	8004ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	490c      	ldr	r1, [pc, #48]	@ (8004af8 <__NVIC_SetPriority+0x4c>)
 8004ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad4:	e00a      	b.n	8004aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4908      	ldr	r1, [pc, #32]	@ (8004afc <__NVIC_SetPriority+0x50>)
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	0112      	lsls	r2, r2, #4
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	440b      	add	r3, r1
 8004aea:	761a      	strb	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	@ 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f1c3 0307 	rsb	r3, r3, #7
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	bf28      	it	cs
 8004b1e:	2304      	movcs	r3, #4
 8004b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d902      	bls.n	8004b30 <NVIC_EncodePriority+0x30>
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3b03      	subs	r3, #3
 8004b2e:	e000      	b.n	8004b32 <NVIC_EncodePriority+0x32>
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	401a      	ands	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	43d9      	mvns	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b58:	4313      	orrs	r3, r2
         );
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3724      	adds	r7, #36	@ 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b78:	d301      	bcc.n	8004b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00f      	b.n	8004b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba8 <SysTick_Config+0x40>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b86:	210f      	movs	r1, #15
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	f7ff ff8e 	bl	8004aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <SysTick_Config+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b96:	4b04      	ldr	r3, [pc, #16]	@ (8004ba8 <SysTick_Config+0x40>)
 8004b98:	2207      	movs	r2, #7
 8004b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff29 	bl	8004a0c <__NVIC_SetPriorityGrouping>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd0:	f7ff ff40 	bl	8004a54 <__NVIC_GetPriorityGrouping>
 8004bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	6978      	ldr	r0, [r7, #20]
 8004bdc:	f7ff ff90 	bl	8004b00 <NVIC_EncodePriority>
 8004be0:	4602      	mov	r2, r0
 8004be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff5f 	bl	8004aac <__NVIC_SetPriority>
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff33 	bl	8004a70 <__NVIC_EnableIRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff ffa4 	bl	8004b68 <SysTick_Config>
 8004c20:	4603      	mov	r3, r0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c34:	f7fd fe1c 	bl	8002870 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e312      	b.n	800526a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a66      	ldr	r2, [pc, #408]	@ (8004de4 <HAL_DMA_Init+0x1b8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d04a      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <HAL_DMA_Init+0x1bc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d045      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a63      	ldr	r2, [pc, #396]	@ (8004dec <HAL_DMA_Init+0x1c0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d040      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a62      	ldr	r2, [pc, #392]	@ (8004df0 <HAL_DMA_Init+0x1c4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d03b      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a60      	ldr	r2, [pc, #384]	@ (8004df4 <HAL_DMA_Init+0x1c8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d036      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a5f      	ldr	r2, [pc, #380]	@ (8004df8 <HAL_DMA_Init+0x1cc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d031      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a5d      	ldr	r2, [pc, #372]	@ (8004dfc <HAL_DMA_Init+0x1d0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02c      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004e00 <HAL_DMA_Init+0x1d4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d027      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5a      	ldr	r2, [pc, #360]	@ (8004e04 <HAL_DMA_Init+0x1d8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a59      	ldr	r2, [pc, #356]	@ (8004e08 <HAL_DMA_Init+0x1dc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a57      	ldr	r2, [pc, #348]	@ (8004e0c <HAL_DMA_Init+0x1e0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a56      	ldr	r2, [pc, #344]	@ (8004e10 <HAL_DMA_Init+0x1e4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a54      	ldr	r2, [pc, #336]	@ (8004e14 <HAL_DMA_Init+0x1e8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a53      	ldr	r2, [pc, #332]	@ (8004e18 <HAL_DMA_Init+0x1ec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a51      	ldr	r2, [pc, #324]	@ (8004e1c <HAL_DMA_Init+0x1f0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_DMA_Init+0xb8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a50      	ldr	r2, [pc, #320]	@ (8004e20 <HAL_DMA_Init+0x1f4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <HAL_DMA_Init+0xbc>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_DMA_Init+0xbe>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 813c 	beq.w	8004f68 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a37      	ldr	r2, [pc, #220]	@ (8004de4 <HAL_DMA_Init+0x1b8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d04a      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a36      	ldr	r2, [pc, #216]	@ (8004de8 <HAL_DMA_Init+0x1bc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d045      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <HAL_DMA_Init+0x1c0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d040      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <HAL_DMA_Init+0x1c4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d03b      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a31      	ldr	r2, [pc, #196]	@ (8004df4 <HAL_DMA_Init+0x1c8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d036      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <HAL_DMA_Init+0x1cc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d031      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <HAL_DMA_Init+0x1d0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02c      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e00 <HAL_DMA_Init+0x1d4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d027      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	@ (8004e04 <HAL_DMA_Init+0x1d8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d022      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e08 <HAL_DMA_Init+0x1dc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d01d      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a28      	ldr	r2, [pc, #160]	@ (8004e0c <HAL_DMA_Init+0x1e0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d018      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a27      	ldr	r2, [pc, #156]	@ (8004e10 <HAL_DMA_Init+0x1e4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a25      	ldr	r2, [pc, #148]	@ (8004e14 <HAL_DMA_Init+0x1e8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a24      	ldr	r2, [pc, #144]	@ (8004e18 <HAL_DMA_Init+0x1ec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a22      	ldr	r2, [pc, #136]	@ (8004e1c <HAL_DMA_Init+0x1f0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_DMA_Init+0x174>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a21      	ldr	r2, [pc, #132]	@ (8004e20 <HAL_DMA_Init+0x1f4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <HAL_DMA_Init+0x186>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e007      	b.n	8004dc2 <HAL_DMA_Init+0x196>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dc2:	e02f      	b.n	8004e24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc4:	f7fd fd54 	bl	8002870 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d928      	bls.n	8004e24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e242      	b.n	800526a <HAL_DMA_Init+0x63e>
 8004de4:	40020010 	.word	0x40020010
 8004de8:	40020028 	.word	0x40020028
 8004dec:	40020040 	.word	0x40020040
 8004df0:	40020058 	.word	0x40020058
 8004df4:	40020070 	.word	0x40020070
 8004df8:	40020088 	.word	0x40020088
 8004dfc:	400200a0 	.word	0x400200a0
 8004e00:	400200b8 	.word	0x400200b8
 8004e04:	40020410 	.word	0x40020410
 8004e08:	40020428 	.word	0x40020428
 8004e0c:	40020440 	.word	0x40020440
 8004e10:	40020458 	.word	0x40020458
 8004e14:	40020470 	.word	0x40020470
 8004e18:	40020488 	.word	0x40020488
 8004e1c:	400204a0 	.word	0x400204a0
 8004e20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1c8      	bne.n	8004dc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4b83      	ldr	r3, [pc, #524]	@ (800504c <HAL_DMA_Init+0x420>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d107      	bne.n	8004e88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	4313      	orrs	r3, r2
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b28      	cmp	r3, #40	@ 0x28
 8004e8e:	d903      	bls.n	8004e98 <HAL_DMA_Init+0x26c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e96:	d91f      	bls.n	8004ed8 <HAL_DMA_Init+0x2ac>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e9e:	d903      	bls.n	8004ea8 <HAL_DMA_Init+0x27c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b42      	cmp	r3, #66	@ 0x42
 8004ea6:	d917      	bls.n	8004ed8 <HAL_DMA_Init+0x2ac>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b46      	cmp	r3, #70	@ 0x46
 8004eae:	d903      	bls.n	8004eb8 <HAL_DMA_Init+0x28c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b48      	cmp	r3, #72	@ 0x48
 8004eb6:	d90f      	bls.n	8004ed8 <HAL_DMA_Init+0x2ac>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ebe:	d903      	bls.n	8004ec8 <HAL_DMA_Init+0x29c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b52      	cmp	r3, #82	@ 0x52
 8004ec6:	d907      	bls.n	8004ed8 <HAL_DMA_Init+0x2ac>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b73      	cmp	r3, #115	@ 0x73
 8004ece:	d905      	bls.n	8004edc <HAL_DMA_Init+0x2b0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b77      	cmp	r3, #119	@ 0x77
 8004ed6:	d801      	bhi.n	8004edc <HAL_DMA_Init+0x2b0>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_DMA_Init+0x2b2>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ee8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d117      	bne.n	8004f44 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f001 fdca 	bl	8006ac0 <DMA_CheckFifoParam>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2240      	movs	r2, #64	@ 0x40
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e192      	b.n	800526a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 fd05 	bl	800695c <DMA_CalcBaseAndBitshift>
 8004f52:	4603      	mov	r3, r0
 8004f54:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	223f      	movs	r2, #63	@ 0x3f
 8004f60:	409a      	lsls	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	e0c8      	b.n	80050fa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a38      	ldr	r2, [pc, #224]	@ (8005050 <HAL_DMA_Init+0x424>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a37      	ldr	r2, [pc, #220]	@ (8005054 <HAL_DMA_Init+0x428>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <HAL_DMA_Init+0x42c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_DMA_Init+0x430>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a32      	ldr	r2, [pc, #200]	@ (8005060 <HAL_DMA_Init+0x434>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a31      	ldr	r2, [pc, #196]	@ (8005064 <HAL_DMA_Init+0x438>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8005068 <HAL_DMA_Init+0x43c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_Init+0x38c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <HAL_DMA_Init+0x440>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_DMA_Init+0x390>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_DMA_Init+0x392>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8092 	beq.w	80050e8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <HAL_DMA_Init+0x424>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d021      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <HAL_DMA_Init+0x428>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01c      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <HAL_DMA_Init+0x42c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d017      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_DMA_Init+0x430>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d012      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8005060 <HAL_DMA_Init+0x434>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00d      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <HAL_DMA_Init+0x438>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d008      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a18      	ldr	r2, [pc, #96]	@ (8005068 <HAL_DMA_Init+0x43c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <HAL_DMA_Init+0x3e6>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a17      	ldr	r2, [pc, #92]	@ (800506c <HAL_DMA_Init+0x440>)
 8005010:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <HAL_DMA_Init+0x444>)
 800502e:	4013      	ands	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b40      	cmp	r3, #64	@ 0x40
 8005038:	d01c      	beq.n	8005074 <HAL_DMA_Init+0x448>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b80      	cmp	r3, #128	@ 0x80
 8005040:	d102      	bne.n	8005048 <HAL_DMA_Init+0x41c>
 8005042:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005046:	e016      	b.n	8005076 <HAL_DMA_Init+0x44a>
 8005048:	2300      	movs	r3, #0
 800504a:	e014      	b.n	8005076 <HAL_DMA_Init+0x44a>
 800504c:	fe10803f 	.word	0xfe10803f
 8005050:	58025408 	.word	0x58025408
 8005054:	5802541c 	.word	0x5802541c
 8005058:	58025430 	.word	0x58025430
 800505c:	58025444 	.word	0x58025444
 8005060:	58025458 	.word	0x58025458
 8005064:	5802546c 	.word	0x5802546c
 8005068:	58025480 	.word	0x58025480
 800506c:	58025494 	.word	0x58025494
 8005070:	fffe000f 	.word	0xfffe000f
 8005074:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800508c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800509c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005274 <HAL_DMA_Init+0x648>)
 80050bc:	4413      	add	r3, r2
 80050be:	4a6e      	ldr	r2, [pc, #440]	@ (8005278 <HAL_DMA_Init+0x64c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fc45 	bl	800695c <DMA_CalcBaseAndBitshift>
 80050d2:	4603      	mov	r3, r0
 80050d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	e008      	b.n	80050fa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2240      	movs	r2, #64	@ 0x40
 80050ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0b7      	b.n	800526a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a5f      	ldr	r2, [pc, #380]	@ (800527c <HAL_DMA_Init+0x650>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d072      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a5d      	ldr	r2, [pc, #372]	@ (8005280 <HAL_DMA_Init+0x654>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d06d      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a5c      	ldr	r2, [pc, #368]	@ (8005284 <HAL_DMA_Init+0x658>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d068      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5a      	ldr	r2, [pc, #360]	@ (8005288 <HAL_DMA_Init+0x65c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d063      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a59      	ldr	r2, [pc, #356]	@ (800528c <HAL_DMA_Init+0x660>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d05e      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a57      	ldr	r2, [pc, #348]	@ (8005290 <HAL_DMA_Init+0x664>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d059      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a56      	ldr	r2, [pc, #344]	@ (8005294 <HAL_DMA_Init+0x668>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d054      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a54      	ldr	r2, [pc, #336]	@ (8005298 <HAL_DMA_Init+0x66c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d04f      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a53      	ldr	r2, [pc, #332]	@ (800529c <HAL_DMA_Init+0x670>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d04a      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a51      	ldr	r2, [pc, #324]	@ (80052a0 <HAL_DMA_Init+0x674>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d045      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a50      	ldr	r2, [pc, #320]	@ (80052a4 <HAL_DMA_Init+0x678>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d040      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a4e      	ldr	r2, [pc, #312]	@ (80052a8 <HAL_DMA_Init+0x67c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d03b      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4d      	ldr	r2, [pc, #308]	@ (80052ac <HAL_DMA_Init+0x680>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d036      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4b      	ldr	r2, [pc, #300]	@ (80052b0 <HAL_DMA_Init+0x684>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d031      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4a      	ldr	r2, [pc, #296]	@ (80052b4 <HAL_DMA_Init+0x688>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d02c      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a48      	ldr	r2, [pc, #288]	@ (80052b8 <HAL_DMA_Init+0x68c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d027      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a47      	ldr	r2, [pc, #284]	@ (80052bc <HAL_DMA_Init+0x690>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a45      	ldr	r2, [pc, #276]	@ (80052c0 <HAL_DMA_Init+0x694>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a44      	ldr	r2, [pc, #272]	@ (80052c4 <HAL_DMA_Init+0x698>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a42      	ldr	r2, [pc, #264]	@ (80052c8 <HAL_DMA_Init+0x69c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a41      	ldr	r2, [pc, #260]	@ (80052cc <HAL_DMA_Init+0x6a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3f      	ldr	r2, [pc, #252]	@ (80052d0 <HAL_DMA_Init+0x6a4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3e      	ldr	r2, [pc, #248]	@ (80052d4 <HAL_DMA_Init+0x6a8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_Init+0x5be>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3c      	ldr	r2, [pc, #240]	@ (80052d8 <HAL_DMA_Init+0x6ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_DMA_Init+0x5c2>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <HAL_DMA_Init+0x5c4>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d032      	beq.n	800525a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fcdf 	bl	8006bb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	d102      	bne.n	8005208 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800521c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d010      	beq.n	8005248 <HAL_DMA_Init+0x61c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d80c      	bhi.n	8005248 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fd5c 	bl	8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	e008      	b.n	800525a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	a7fdabf8 	.word	0xa7fdabf8
 8005278:	cccccccd 	.word	0xcccccccd
 800527c:	40020010 	.word	0x40020010
 8005280:	40020028 	.word	0x40020028
 8005284:	40020040 	.word	0x40020040
 8005288:	40020058 	.word	0x40020058
 800528c:	40020070 	.word	0x40020070
 8005290:	40020088 	.word	0x40020088
 8005294:	400200a0 	.word	0x400200a0
 8005298:	400200b8 	.word	0x400200b8
 800529c:	40020410 	.word	0x40020410
 80052a0:	40020428 	.word	0x40020428
 80052a4:	40020440 	.word	0x40020440
 80052a8:	40020458 	.word	0x40020458
 80052ac:	40020470 	.word	0x40020470
 80052b0:	40020488 	.word	0x40020488
 80052b4:	400204a0 	.word	0x400204a0
 80052b8:	400204b8 	.word	0x400204b8
 80052bc:	58025408 	.word	0x58025408
 80052c0:	5802541c 	.word	0x5802541c
 80052c4:	58025430 	.word	0x58025430
 80052c8:	58025444 	.word	0x58025444
 80052cc:	58025458 	.word	0x58025458
 80052d0:	5802546c 	.word	0x5802546c
 80052d4:	58025480 	.word	0x58025480
 80052d8:	58025494 	.word	0x58025494

080052dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e226      	b.n	8005746 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_DMA_Start_IT+0x2a>
 8005302:	2302      	movs	r3, #2
 8005304:	e21f      	b.n	8005746 <HAL_DMA_Start_IT+0x46a>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	f040 820a 	bne.w	8005730 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a68      	ldr	r2, [pc, #416]	@ (80054d0 <HAL_DMA_Start_IT+0x1f4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d04a      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a66      	ldr	r2, [pc, #408]	@ (80054d4 <HAL_DMA_Start_IT+0x1f8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d045      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a65      	ldr	r2, [pc, #404]	@ (80054d8 <HAL_DMA_Start_IT+0x1fc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d040      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a63      	ldr	r2, [pc, #396]	@ (80054dc <HAL_DMA_Start_IT+0x200>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d03b      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a62      	ldr	r2, [pc, #392]	@ (80054e0 <HAL_DMA_Start_IT+0x204>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d036      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a60      	ldr	r2, [pc, #384]	@ (80054e4 <HAL_DMA_Start_IT+0x208>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d031      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a5f      	ldr	r2, [pc, #380]	@ (80054e8 <HAL_DMA_Start_IT+0x20c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d02c      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a5d      	ldr	r2, [pc, #372]	@ (80054ec <HAL_DMA_Start_IT+0x210>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d027      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a5c      	ldr	r2, [pc, #368]	@ (80054f0 <HAL_DMA_Start_IT+0x214>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d022      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5a      	ldr	r2, [pc, #360]	@ (80054f4 <HAL_DMA_Start_IT+0x218>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01d      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a59      	ldr	r2, [pc, #356]	@ (80054f8 <HAL_DMA_Start_IT+0x21c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a57      	ldr	r2, [pc, #348]	@ (80054fc <HAL_DMA_Start_IT+0x220>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a56      	ldr	r2, [pc, #344]	@ (8005500 <HAL_DMA_Start_IT+0x224>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a54      	ldr	r2, [pc, #336]	@ (8005504 <HAL_DMA_Start_IT+0x228>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a53      	ldr	r2, [pc, #332]	@ (8005508 <HAL_DMA_Start_IT+0x22c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_DMA_Start_IT+0xee>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a51      	ldr	r2, [pc, #324]	@ (800550c <HAL_DMA_Start_IT+0x230>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <HAL_DMA_Start_IT+0x100>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e007      	b.n	80053ec <HAL_DMA_Start_IT+0x110>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f001 f906 	bl	8006604 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a34      	ldr	r2, [pc, #208]	@ (80054d0 <HAL_DMA_Start_IT+0x1f4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d04a      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <HAL_DMA_Start_IT+0x1f8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d045      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a31      	ldr	r2, [pc, #196]	@ (80054d8 <HAL_DMA_Start_IT+0x1fc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d040      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a30      	ldr	r2, [pc, #192]	@ (80054dc <HAL_DMA_Start_IT+0x200>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d03b      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2e      	ldr	r2, [pc, #184]	@ (80054e0 <HAL_DMA_Start_IT+0x204>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d036      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2d      	ldr	r2, [pc, #180]	@ (80054e4 <HAL_DMA_Start_IT+0x208>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d031      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2b      	ldr	r2, [pc, #172]	@ (80054e8 <HAL_DMA_Start_IT+0x20c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02c      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2a      	ldr	r2, [pc, #168]	@ (80054ec <HAL_DMA_Start_IT+0x210>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d027      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a28      	ldr	r2, [pc, #160]	@ (80054f0 <HAL_DMA_Start_IT+0x214>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d022      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a27      	ldr	r2, [pc, #156]	@ (80054f4 <HAL_DMA_Start_IT+0x218>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01d      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a25      	ldr	r2, [pc, #148]	@ (80054f8 <HAL_DMA_Start_IT+0x21c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a24      	ldr	r2, [pc, #144]	@ (80054fc <HAL_DMA_Start_IT+0x220>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <HAL_DMA_Start_IT+0x224>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <HAL_DMA_Start_IT+0x228>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1f      	ldr	r2, [pc, #124]	@ (8005508 <HAL_DMA_Start_IT+0x22c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_DMA_Start_IT+0x1bc>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_DMA_Start_IT+0x230>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <HAL_DMA_Start_IT+0x1c0>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <HAL_DMA_Start_IT+0x1c2>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d036      	beq.n	8005510 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 021e 	bic.w	r2, r3, #30
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0216 	orr.w	r2, r2, #22
 80054b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d03e      	beq.n	800553c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0208 	orr.w	r2, r2, #8
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e035      	b.n	800553c <HAL_DMA_Start_IT+0x260>
 80054d0:	40020010 	.word	0x40020010
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40020040 	.word	0x40020040
 80054dc:	40020058 	.word	0x40020058
 80054e0:	40020070 	.word	0x40020070
 80054e4:	40020088 	.word	0x40020088
 80054e8:	400200a0 	.word	0x400200a0
 80054ec:	400200b8 	.word	0x400200b8
 80054f0:	40020410 	.word	0x40020410
 80054f4:	40020428 	.word	0x40020428
 80054f8:	40020440 	.word	0x40020440
 80054fc:	40020458 	.word	0x40020458
 8005500:	40020470 	.word	0x40020470
 8005504:	40020488 	.word	0x40020488
 8005508:	400204a0 	.word	0x400204a0
 800550c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 020e 	bic.w	r2, r3, #14
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 020a 	orr.w	r2, r2, #10
 8005522:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d007      	beq.n	800553c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0204 	orr.w	r2, r2, #4
 800553a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a83      	ldr	r2, [pc, #524]	@ (8005750 <HAL_DMA_Start_IT+0x474>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d072      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a82      	ldr	r2, [pc, #520]	@ (8005754 <HAL_DMA_Start_IT+0x478>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d06d      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a80      	ldr	r2, [pc, #512]	@ (8005758 <HAL_DMA_Start_IT+0x47c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d068      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7f      	ldr	r2, [pc, #508]	@ (800575c <HAL_DMA_Start_IT+0x480>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d063      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7d      	ldr	r2, [pc, #500]	@ (8005760 <HAL_DMA_Start_IT+0x484>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d05e      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7c      	ldr	r2, [pc, #496]	@ (8005764 <HAL_DMA_Start_IT+0x488>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d059      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	@ (8005768 <HAL_DMA_Start_IT+0x48c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d054      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	@ (800576c <HAL_DMA_Start_IT+0x490>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d04f      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a77      	ldr	r2, [pc, #476]	@ (8005770 <HAL_DMA_Start_IT+0x494>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d04a      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a76      	ldr	r2, [pc, #472]	@ (8005774 <HAL_DMA_Start_IT+0x498>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d045      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a74      	ldr	r2, [pc, #464]	@ (8005778 <HAL_DMA_Start_IT+0x49c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d040      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a73      	ldr	r2, [pc, #460]	@ (800577c <HAL_DMA_Start_IT+0x4a0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d03b      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a71      	ldr	r2, [pc, #452]	@ (8005780 <HAL_DMA_Start_IT+0x4a4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d036      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a70      	ldr	r2, [pc, #448]	@ (8005784 <HAL_DMA_Start_IT+0x4a8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d031      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005788 <HAL_DMA_Start_IT+0x4ac>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d02c      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6d      	ldr	r2, [pc, #436]	@ (800578c <HAL_DMA_Start_IT+0x4b0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d027      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005790 <HAL_DMA_Start_IT+0x4b4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d022      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005794 <HAL_DMA_Start_IT+0x4b8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d01d      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	@ (8005798 <HAL_DMA_Start_IT+0x4bc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a67      	ldr	r2, [pc, #412]	@ (800579c <HAL_DMA_Start_IT+0x4c0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a65      	ldr	r2, [pc, #404]	@ (80057a0 <HAL_DMA_Start_IT+0x4c4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a64      	ldr	r2, [pc, #400]	@ (80057a4 <HAL_DMA_Start_IT+0x4c8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a62      	ldr	r2, [pc, #392]	@ (80057a8 <HAL_DMA_Start_IT+0x4cc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_DMA_Start_IT+0x350>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a61      	ldr	r2, [pc, #388]	@ (80057ac <HAL_DMA_Start_IT+0x4d0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_DMA_Start_IT+0x354>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_DMA_Start_IT+0x356>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01a      	beq.n	800566c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005652:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800566a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a37      	ldr	r2, [pc, #220]	@ (8005750 <HAL_DMA_Start_IT+0x474>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d04a      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a36      	ldr	r2, [pc, #216]	@ (8005754 <HAL_DMA_Start_IT+0x478>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d045      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a34      	ldr	r2, [pc, #208]	@ (8005758 <HAL_DMA_Start_IT+0x47c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d040      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a33      	ldr	r2, [pc, #204]	@ (800575c <HAL_DMA_Start_IT+0x480>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d03b      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a31      	ldr	r2, [pc, #196]	@ (8005760 <HAL_DMA_Start_IT+0x484>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d036      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a30      	ldr	r2, [pc, #192]	@ (8005764 <HAL_DMA_Start_IT+0x488>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d031      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005768 <HAL_DMA_Start_IT+0x48c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d02c      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2d      	ldr	r2, [pc, #180]	@ (800576c <HAL_DMA_Start_IT+0x490>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d027      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005770 <HAL_DMA_Start_IT+0x494>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005774 <HAL_DMA_Start_IT+0x498>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01d      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <HAL_DMA_Start_IT+0x49c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a27      	ldr	r2, [pc, #156]	@ (800577c <HAL_DMA_Start_IT+0x4a0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a25      	ldr	r2, [pc, #148]	@ (8005780 <HAL_DMA_Start_IT+0x4a4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <HAL_DMA_Start_IT+0x4a8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a22      	ldr	r2, [pc, #136]	@ (8005788 <HAL_DMA_Start_IT+0x4ac>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_DMA_Start_IT+0x430>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a21      	ldr	r2, [pc, #132]	@ (800578c <HAL_DMA_Start_IT+0x4b0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <HAL_DMA_Start_IT+0x442>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e012      	b.n	8005744 <HAL_DMA_Start_IT+0x468>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e009      	b.n	8005744 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020040 	.word	0x40020040
 800575c:	40020058 	.word	0x40020058
 8005760:	40020070 	.word	0x40020070
 8005764:	40020088 	.word	0x40020088
 8005768:	400200a0 	.word	0x400200a0
 800576c:	400200b8 	.word	0x400200b8
 8005770:	40020410 	.word	0x40020410
 8005774:	40020428 	.word	0x40020428
 8005778:	40020440 	.word	0x40020440
 800577c:	40020458 	.word	0x40020458
 8005780:	40020470 	.word	0x40020470
 8005784:	40020488 	.word	0x40020488
 8005788:	400204a0 	.word	0x400204a0
 800578c:	400204b8 	.word	0x400204b8
 8005790:	58025408 	.word	0x58025408
 8005794:	5802541c 	.word	0x5802541c
 8005798:	58025430 	.word	0x58025430
 800579c:	58025444 	.word	0x58025444
 80057a0:	58025458 	.word	0x58025458
 80057a4:	5802546c 	.word	0x5802546c
 80057a8:	58025480 	.word	0x58025480
 80057ac:	58025494 	.word	0x58025494

080057b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057bc:	4b67      	ldr	r3, [pc, #412]	@ (800595c <HAL_DMA_IRQHandler+0x1ac>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a67      	ldr	r2, [pc, #412]	@ (8005960 <HAL_DMA_IRQHandler+0x1b0>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a9b      	lsrs	r3, r3, #10
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005964 <HAL_DMA_IRQHandler+0x1b4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d04a      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005968 <HAL_DMA_IRQHandler+0x1b8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d045      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a5c      	ldr	r2, [pc, #368]	@ (800596c <HAL_DMA_IRQHandler+0x1bc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d040      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5a      	ldr	r2, [pc, #360]	@ (8005970 <HAL_DMA_IRQHandler+0x1c0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d03b      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a59      	ldr	r2, [pc, #356]	@ (8005974 <HAL_DMA_IRQHandler+0x1c4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d036      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a57      	ldr	r2, [pc, #348]	@ (8005978 <HAL_DMA_IRQHandler+0x1c8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d031      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a56      	ldr	r2, [pc, #344]	@ (800597c <HAL_DMA_IRQHandler+0x1cc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d02c      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a54      	ldr	r2, [pc, #336]	@ (8005980 <HAL_DMA_IRQHandler+0x1d0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d027      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a53      	ldr	r2, [pc, #332]	@ (8005984 <HAL_DMA_IRQHandler+0x1d4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d022      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a51      	ldr	r2, [pc, #324]	@ (8005988 <HAL_DMA_IRQHandler+0x1d8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01d      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a50      	ldr	r2, [pc, #320]	@ (800598c <HAL_DMA_IRQHandler+0x1dc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d018      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a4e      	ldr	r2, [pc, #312]	@ (8005990 <HAL_DMA_IRQHandler+0x1e0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4d      	ldr	r2, [pc, #308]	@ (8005994 <HAL_DMA_IRQHandler+0x1e4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a4b      	ldr	r2, [pc, #300]	@ (8005998 <HAL_DMA_IRQHandler+0x1e8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a4a      	ldr	r2, [pc, #296]	@ (800599c <HAL_DMA_IRQHandler+0x1ec>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_DMA_IRQHandler+0xd2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a48      	ldr	r2, [pc, #288]	@ (80059a0 <HAL_DMA_IRQHandler+0x1f0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <HAL_DMA_IRQHandler+0xd6>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <HAL_DMA_IRQHandler+0xd8>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 842b 	beq.w	80060e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2208      	movs	r2, #8
 8005898:	409a      	lsls	r2, r3
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a2 	beq.w	80059e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005964 <HAL_DMA_IRQHandler+0x1b4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d04a      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005968 <HAL_DMA_IRQHandler+0x1b8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d045      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2b      	ldr	r2, [pc, #172]	@ (800596c <HAL_DMA_IRQHandler+0x1bc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d040      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005970 <HAL_DMA_IRQHandler+0x1c0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d03b      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a28      	ldr	r2, [pc, #160]	@ (8005974 <HAL_DMA_IRQHandler+0x1c4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d036      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a27      	ldr	r2, [pc, #156]	@ (8005978 <HAL_DMA_IRQHandler+0x1c8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d031      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a25      	ldr	r2, [pc, #148]	@ (800597c <HAL_DMA_IRQHandler+0x1cc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d02c      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a24      	ldr	r2, [pc, #144]	@ (8005980 <HAL_DMA_IRQHandler+0x1d0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d027      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a22      	ldr	r2, [pc, #136]	@ (8005984 <HAL_DMA_IRQHandler+0x1d4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a21      	ldr	r2, [pc, #132]	@ (8005988 <HAL_DMA_IRQHandler+0x1d8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01d      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1f      	ldr	r2, [pc, #124]	@ (800598c <HAL_DMA_IRQHandler+0x1dc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1e      	ldr	r2, [pc, #120]	@ (8005990 <HAL_DMA_IRQHandler+0x1e0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1c      	ldr	r2, [pc, #112]	@ (8005994 <HAL_DMA_IRQHandler+0x1e4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1b      	ldr	r2, [pc, #108]	@ (8005998 <HAL_DMA_IRQHandler+0x1e8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a19      	ldr	r2, [pc, #100]	@ (800599c <HAL_DMA_IRQHandler+0x1ec>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_DMA_IRQHandler+0x194>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a18      	ldr	r2, [pc, #96]	@ (80059a0 <HAL_DMA_IRQHandler+0x1f0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d12f      	bne.n	80059a4 <HAL_DMA_IRQHandler+0x1f4>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e02e      	b.n	80059b8 <HAL_DMA_IRQHandler+0x208>
 800595a:	bf00      	nop
 800595c:	24000008 	.word	0x24000008
 8005960:	1b4e81b5 	.word	0x1b4e81b5
 8005964:	40020010 	.word	0x40020010
 8005968:	40020028 	.word	0x40020028
 800596c:	40020040 	.word	0x40020040
 8005970:	40020058 	.word	0x40020058
 8005974:	40020070 	.word	0x40020070
 8005978:	40020088 	.word	0x40020088
 800597c:	400200a0 	.word	0x400200a0
 8005980:	400200b8 	.word	0x400200b8
 8005984:	40020410 	.word	0x40020410
 8005988:	40020428 	.word	0x40020428
 800598c:	40020440 	.word	0x40020440
 8005990:	40020458 	.word	0x40020458
 8005994:	40020470 	.word	0x40020470
 8005998:	40020488 	.word	0x40020488
 800599c:	400204a0 	.word	0x400204a0
 80059a0:	400204b8 	.word	0x400204b8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d015      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0204 	bic.w	r2, r2, #4
 80059ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2208      	movs	r2, #8
 80059d6:	409a      	lsls	r2, r3
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e0:	f043 0201 	orr.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d06e      	beq.n	8005adc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a69      	ldr	r2, [pc, #420]	@ (8005ba8 <HAL_DMA_IRQHandler+0x3f8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04a      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a67      	ldr	r2, [pc, #412]	@ (8005bac <HAL_DMA_IRQHandler+0x3fc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d045      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a66      	ldr	r2, [pc, #408]	@ (8005bb0 <HAL_DMA_IRQHandler+0x400>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a64      	ldr	r2, [pc, #400]	@ (8005bb4 <HAL_DMA_IRQHandler+0x404>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d03b      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a63      	ldr	r2, [pc, #396]	@ (8005bb8 <HAL_DMA_IRQHandler+0x408>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d036      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a61      	ldr	r2, [pc, #388]	@ (8005bbc <HAL_DMA_IRQHandler+0x40c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a60      	ldr	r2, [pc, #384]	@ (8005bc0 <HAL_DMA_IRQHandler+0x410>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc4 <HAL_DMA_IRQHandler+0x414>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d027      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a5d      	ldr	r2, [pc, #372]	@ (8005bc8 <HAL_DMA_IRQHandler+0x418>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a5b      	ldr	r2, [pc, #364]	@ (8005bcc <HAL_DMA_IRQHandler+0x41c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd0 <HAL_DMA_IRQHandler+0x420>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a58      	ldr	r2, [pc, #352]	@ (8005bd4 <HAL_DMA_IRQHandler+0x424>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a57      	ldr	r2, [pc, #348]	@ (8005bd8 <HAL_DMA_IRQHandler+0x428>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a55      	ldr	r2, [pc, #340]	@ (8005bdc <HAL_DMA_IRQHandler+0x42c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a54      	ldr	r2, [pc, #336]	@ (8005be0 <HAL_DMA_IRQHandler+0x430>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x2ee>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a52      	ldr	r2, [pc, #328]	@ (8005be4 <HAL_DMA_IRQHandler+0x434>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0x304>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e003      	b.n	8005abc <HAL_DMA_IRQHandler+0x30c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad4:	f043 0202 	orr.w	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 808f 	beq.w	8005c10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ba8 <HAL_DMA_IRQHandler+0x3f8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d04a      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	@ (8005bac <HAL_DMA_IRQHandler+0x3fc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d045      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a29      	ldr	r2, [pc, #164]	@ (8005bb0 <HAL_DMA_IRQHandler+0x400>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d040      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a27      	ldr	r2, [pc, #156]	@ (8005bb4 <HAL_DMA_IRQHandler+0x404>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d03b      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a26      	ldr	r2, [pc, #152]	@ (8005bb8 <HAL_DMA_IRQHandler+0x408>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d036      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <HAL_DMA_IRQHandler+0x40c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d031      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a23      	ldr	r2, [pc, #140]	@ (8005bc0 <HAL_DMA_IRQHandler+0x410>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d02c      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_DMA_IRQHandler+0x414>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d027      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a20      	ldr	r2, [pc, #128]	@ (8005bc8 <HAL_DMA_IRQHandler+0x418>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <HAL_DMA_IRQHandler+0x41c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01d      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd0 <HAL_DMA_IRQHandler+0x420>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <HAL_DMA_IRQHandler+0x424>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd8 <HAL_DMA_IRQHandler+0x428>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <HAL_DMA_IRQHandler+0x42c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <HAL_DMA_IRQHandler+0x430>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x3e2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <HAL_DMA_IRQHandler+0x434>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d12a      	bne.n	8005be8 <HAL_DMA_IRQHandler+0x438>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e023      	b.n	8005bf0 <HAL_DMA_IRQHandler+0x440>
 8005ba8:	40020010 	.word	0x40020010
 8005bac:	40020028 	.word	0x40020028
 8005bb0:	40020040 	.word	0x40020040
 8005bb4:	40020058 	.word	0x40020058
 8005bb8:	40020070 	.word	0x40020070
 8005bbc:	40020088 	.word	0x40020088
 8005bc0:	400200a0 	.word	0x400200a0
 8005bc4:	400200b8 	.word	0x400200b8
 8005bc8:	40020410 	.word	0x40020410
 8005bcc:	40020428 	.word	0x40020428
 8005bd0:	40020440 	.word	0x40020440
 8005bd4:	40020458 	.word	0x40020458
 8005bd8:	40020470 	.word	0x40020470
 8005bdc:	40020488 	.word	0x40020488
 8005be0:	400204a0 	.word	0x400204a0
 8005be4:	400204b8 	.word	0x400204b8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2210      	movs	r2, #16
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 80a6 	beq.w	8005d72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a85      	ldr	r2, [pc, #532]	@ (8005e40 <HAL_DMA_IRQHandler+0x690>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d04a      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a83      	ldr	r2, [pc, #524]	@ (8005e44 <HAL_DMA_IRQHandler+0x694>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d045      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a82      	ldr	r2, [pc, #520]	@ (8005e48 <HAL_DMA_IRQHandler+0x698>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d040      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a80      	ldr	r2, [pc, #512]	@ (8005e4c <HAL_DMA_IRQHandler+0x69c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d03b      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a7f      	ldr	r2, [pc, #508]	@ (8005e50 <HAL_DMA_IRQHandler+0x6a0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d036      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e54 <HAL_DMA_IRQHandler+0x6a4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d031      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7c      	ldr	r2, [pc, #496]	@ (8005e58 <HAL_DMA_IRQHandler+0x6a8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d02c      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a7a      	ldr	r2, [pc, #488]	@ (8005e5c <HAL_DMA_IRQHandler+0x6ac>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d027      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a79      	ldr	r2, [pc, #484]	@ (8005e60 <HAL_DMA_IRQHandler+0x6b0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d022      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a77      	ldr	r2, [pc, #476]	@ (8005e64 <HAL_DMA_IRQHandler+0x6b4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01d      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a76      	ldr	r2, [pc, #472]	@ (8005e68 <HAL_DMA_IRQHandler+0x6b8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a74      	ldr	r2, [pc, #464]	@ (8005e6c <HAL_DMA_IRQHandler+0x6bc>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a73      	ldr	r2, [pc, #460]	@ (8005e70 <HAL_DMA_IRQHandler+0x6c0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a71      	ldr	r2, [pc, #452]	@ (8005e74 <HAL_DMA_IRQHandler+0x6c4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a70      	ldr	r2, [pc, #448]	@ (8005e78 <HAL_DMA_IRQHandler+0x6c8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x516>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e7c <HAL_DMA_IRQHandler+0x6cc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d10a      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x52c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e009      	b.n	8005cf0 <HAL_DMA_IRQHandler+0x540>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf14      	ite	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	2300      	moveq	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d03e      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d024      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e01f      	b.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01b      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	e016      	b.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d107      	bne.n	8005d62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0208 	bic.w	r2, r2, #8
 8005d60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	409a      	lsls	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8110 	beq.w	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e40 <HAL_DMA_IRQHandler+0x690>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d04a      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <HAL_DMA_IRQHandler+0x694>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d045      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a29      	ldr	r2, [pc, #164]	@ (8005e48 <HAL_DMA_IRQHandler+0x698>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d040      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a28      	ldr	r2, [pc, #160]	@ (8005e4c <HAL_DMA_IRQHandler+0x69c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d03b      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a26      	ldr	r2, [pc, #152]	@ (8005e50 <HAL_DMA_IRQHandler+0x6a0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d036      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a25      	ldr	r2, [pc, #148]	@ (8005e54 <HAL_DMA_IRQHandler+0x6a4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d031      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	@ (8005e58 <HAL_DMA_IRQHandler+0x6a8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02c      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a22      	ldr	r2, [pc, #136]	@ (8005e5c <HAL_DMA_IRQHandler+0x6ac>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d027      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a20      	ldr	r2, [pc, #128]	@ (8005e60 <HAL_DMA_IRQHandler+0x6b0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <HAL_DMA_IRQHandler+0x6b4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d01d      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <HAL_DMA_IRQHandler+0x6b8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005e6c <HAL_DMA_IRQHandler+0x6bc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <HAL_DMA_IRQHandler+0x6c0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <HAL_DMA_IRQHandler+0x6c4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <HAL_DMA_IRQHandler+0x6c8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x678>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <HAL_DMA_IRQHandler+0x6cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d12b      	bne.n	8005e80 <HAL_DMA_IRQHandler+0x6d0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf14      	ite	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	2300      	moveq	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	e02a      	b.n	8005e94 <HAL_DMA_IRQHandler+0x6e4>
 8005e3e:	bf00      	nop
 8005e40:	40020010 	.word	0x40020010
 8005e44:	40020028 	.word	0x40020028
 8005e48:	40020040 	.word	0x40020040
 8005e4c:	40020058 	.word	0x40020058
 8005e50:	40020070 	.word	0x40020070
 8005e54:	40020088 	.word	0x40020088
 8005e58:	400200a0 	.word	0x400200a0
 8005e5c:	400200b8 	.word	0x400200b8
 8005e60:	40020410 	.word	0x40020410
 8005e64:	40020428 	.word	0x40020428
 8005e68:	40020440 	.word	0x40020440
 8005e6c:	40020458 	.word	0x40020458
 8005e70:	40020470 	.word	0x40020470
 8005e74:	40020488 	.word	0x40020488
 8005e78:	400204a0 	.word	0x400204a0
 8005e7c:	400204b8 	.word	0x400204b8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	bf14      	ite	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	2300      	moveq	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8087 	beq.w	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d139      	bne.n	8005f2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0216 	bic.w	r2, r2, #22
 8005ec4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ed4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0x736>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0208 	bic.w	r2, r2, #8
 8005ef4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	223f      	movs	r2, #63	@ 0x3f
 8005f00:	409a      	lsls	r2, r3
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 834a 	beq.w	80065b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
          }
          return;
 8005f28:	e344      	b.n	80065b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d02c      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	4798      	blx	r3
 8005f56:	e027      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d023      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
 8005f68:	e01e      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10f      	bne.n	8005f98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0210 	bic.w	r2, r2, #16
 8005f86:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8306 	beq.w	80065be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8088 	beq.w	80060d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80061b8 <HAL_DMA_IRQHandler+0xa08>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04a      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a79      	ldr	r2, [pc, #484]	@ (80061bc <HAL_DMA_IRQHandler+0xa0c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d045      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a77      	ldr	r2, [pc, #476]	@ (80061c0 <HAL_DMA_IRQHandler+0xa10>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d040      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a76      	ldr	r2, [pc, #472]	@ (80061c4 <HAL_DMA_IRQHandler+0xa14>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03b      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a74      	ldr	r2, [pc, #464]	@ (80061c8 <HAL_DMA_IRQHandler+0xa18>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d036      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a73      	ldr	r2, [pc, #460]	@ (80061cc <HAL_DMA_IRQHandler+0xa1c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d031      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a71      	ldr	r2, [pc, #452]	@ (80061d0 <HAL_DMA_IRQHandler+0xa20>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02c      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a70      	ldr	r2, [pc, #448]	@ (80061d4 <HAL_DMA_IRQHandler+0xa24>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d027      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a6e      	ldr	r2, [pc, #440]	@ (80061d8 <HAL_DMA_IRQHandler+0xa28>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6d      	ldr	r2, [pc, #436]	@ (80061dc <HAL_DMA_IRQHandler+0xa2c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a6b      	ldr	r2, [pc, #428]	@ (80061e0 <HAL_DMA_IRQHandler+0xa30>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a6a      	ldr	r2, [pc, #424]	@ (80061e4 <HAL_DMA_IRQHandler+0xa34>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a68      	ldr	r2, [pc, #416]	@ (80061e8 <HAL_DMA_IRQHandler+0xa38>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a67      	ldr	r2, [pc, #412]	@ (80061ec <HAL_DMA_IRQHandler+0xa3c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a65      	ldr	r2, [pc, #404]	@ (80061f0 <HAL_DMA_IRQHandler+0xa40>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_DMA_IRQHandler+0x8b8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a64      	ldr	r2, [pc, #400]	@ (80061f4 <HAL_DMA_IRQHandler+0xa44>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <HAL_DMA_IRQHandler+0x8ca>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e007      	b.n	800608a <HAL_DMA_IRQHandler+0x8da>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d307      	bcc.n	80060a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f2      	bne.n	800608a <HAL_DMA_IRQHandler+0x8da>
 80060a4:	e000      	b.n	80060a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2203      	movs	r2, #3
 80060ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80060be:	e003      	b.n	80060c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8272 	beq.w	80065be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 80060e2:	e26c      	b.n	80065be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a43      	ldr	r2, [pc, #268]	@ (80061f8 <HAL_DMA_IRQHandler+0xa48>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a42      	ldr	r2, [pc, #264]	@ (80061fc <HAL_DMA_IRQHandler+0xa4c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01d      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a40      	ldr	r2, [pc, #256]	@ (8006200 <HAL_DMA_IRQHandler+0xa50>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3f      	ldr	r2, [pc, #252]	@ (8006204 <HAL_DMA_IRQHandler+0xa54>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3d      	ldr	r2, [pc, #244]	@ (8006208 <HAL_DMA_IRQHandler+0xa58>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3c      	ldr	r2, [pc, #240]	@ (800620c <HAL_DMA_IRQHandler+0xa5c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3a      	ldr	r2, [pc, #232]	@ (8006210 <HAL_DMA_IRQHandler+0xa60>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_DMA_IRQHandler+0x984>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a39      	ldr	r2, [pc, #228]	@ (8006214 <HAL_DMA_IRQHandler+0xa64>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <HAL_DMA_IRQHandler+0x988>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_DMA_IRQHandler+0x98a>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 823f 	beq.w	80065be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2204      	movs	r2, #4
 8006152:	409a      	lsls	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80cd 	beq.w	80062f8 <HAL_DMA_IRQHandler+0xb48>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80c7 	beq.w	80062f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2204      	movs	r2, #4
 8006174:	409a      	lsls	r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d049      	beq.n	8006218 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8210 	beq.w	80065b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a0:	e20a      	b.n	80065b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8206 	beq.w	80065b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b4:	e200      	b.n	80065b8 <HAL_DMA_IRQHandler+0xe08>
 80061b6:	bf00      	nop
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	58025408 	.word	0x58025408
 80061fc:	5802541c 	.word	0x5802541c
 8006200:	58025430 	.word	0x58025430
 8006204:	58025444 	.word	0x58025444
 8006208:	58025458 	.word	0x58025458
 800620c:	5802546c 	.word	0x5802546c
 8006210:	58025480 	.word	0x58025480
 8006214:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d160      	bne.n	80062e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a7f      	ldr	r2, [pc, #508]	@ (8006424 <HAL_DMA_IRQHandler+0xc74>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a7d      	ldr	r2, [pc, #500]	@ (8006428 <HAL_DMA_IRQHandler+0xc78>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a7c      	ldr	r2, [pc, #496]	@ (800642c <HAL_DMA_IRQHandler+0xc7c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a7a      	ldr	r2, [pc, #488]	@ (8006430 <HAL_DMA_IRQHandler+0xc80>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a79      	ldr	r2, [pc, #484]	@ (8006434 <HAL_DMA_IRQHandler+0xc84>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a77      	ldr	r2, [pc, #476]	@ (8006438 <HAL_DMA_IRQHandler+0xc88>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a76      	ldr	r2, [pc, #472]	@ (800643c <HAL_DMA_IRQHandler+0xc8c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a74      	ldr	r2, [pc, #464]	@ (8006440 <HAL_DMA_IRQHandler+0xc90>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a73      	ldr	r2, [pc, #460]	@ (8006444 <HAL_DMA_IRQHandler+0xc94>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a71      	ldr	r2, [pc, #452]	@ (8006448 <HAL_DMA_IRQHandler+0xc98>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a70      	ldr	r2, [pc, #448]	@ (800644c <HAL_DMA_IRQHandler+0xc9c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6e      	ldr	r2, [pc, #440]	@ (8006450 <HAL_DMA_IRQHandler+0xca0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6d      	ldr	r2, [pc, #436]	@ (8006454 <HAL_DMA_IRQHandler+0xca4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006458 <HAL_DMA_IRQHandler+0xca8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a6a      	ldr	r2, [pc, #424]	@ (800645c <HAL_DMA_IRQHandler+0xcac>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xb12>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a68      	ldr	r2, [pc, #416]	@ (8006460 <HAL_DMA_IRQHandler+0xcb0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <HAL_DMA_IRQHandler+0xb24>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0208 	bic.w	r2, r2, #8
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e007      	b.n	80062e4 <HAL_DMA_IRQHandler+0xb34>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0204 	bic.w	r2, r2, #4
 80062e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8165 	beq.w	80065b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062f6:	e15f      	b.n	80065b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	2202      	movs	r2, #2
 8006302:	409a      	lsls	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80c5 	beq.w	8006498 <HAL_DMA_IRQHandler+0xce8>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80bf 	beq.w	8006498 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2202      	movs	r2, #2
 8006324:	409a      	lsls	r2, r3
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d018      	beq.n	8006366 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 813a 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006350:	e134      	b.n	80065bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8130 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006364:	e12a      	b.n	80065bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8089 	bne.w	8006484 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2b      	ldr	r2, [pc, #172]	@ (8006424 <HAL_DMA_IRQHandler+0xc74>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d04a      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a29      	ldr	r2, [pc, #164]	@ (8006428 <HAL_DMA_IRQHandler+0xc78>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d045      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a28      	ldr	r2, [pc, #160]	@ (800642c <HAL_DMA_IRQHandler+0xc7c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d040      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a26      	ldr	r2, [pc, #152]	@ (8006430 <HAL_DMA_IRQHandler+0xc80>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d03b      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a25      	ldr	r2, [pc, #148]	@ (8006434 <HAL_DMA_IRQHandler+0xc84>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d036      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a23      	ldr	r2, [pc, #140]	@ (8006438 <HAL_DMA_IRQHandler+0xc88>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d031      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a22      	ldr	r2, [pc, #136]	@ (800643c <HAL_DMA_IRQHandler+0xc8c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d02c      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a20      	ldr	r2, [pc, #128]	@ (8006440 <HAL_DMA_IRQHandler+0xc90>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d027      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <HAL_DMA_IRQHandler+0xc94>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d022      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <HAL_DMA_IRQHandler+0xc98>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01d      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <HAL_DMA_IRQHandler+0xc9c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <HAL_DMA_IRQHandler+0xca0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <HAL_DMA_IRQHandler+0xca4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a17      	ldr	r2, [pc, #92]	@ (8006458 <HAL_DMA_IRQHandler+0xca8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a16      	ldr	r2, [pc, #88]	@ (800645c <HAL_DMA_IRQHandler+0xcac>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_DMA_IRQHandler+0xc62>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a14      	ldr	r2, [pc, #80]	@ (8006460 <HAL_DMA_IRQHandler+0xcb0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d128      	bne.n	8006464 <HAL_DMA_IRQHandler+0xcb4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0214 	bic.w	r2, r2, #20
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e027      	b.n	8006474 <HAL_DMA_IRQHandler+0xcc4>
 8006424:	40020010 	.word	0x40020010
 8006428:	40020028 	.word	0x40020028
 800642c:	40020040 	.word	0x40020040
 8006430:	40020058 	.word	0x40020058
 8006434:	40020070 	.word	0x40020070
 8006438:	40020088 	.word	0x40020088
 800643c:	400200a0 	.word	0x400200a0
 8006440:	400200b8 	.word	0x400200b8
 8006444:	40020410 	.word	0x40020410
 8006448:	40020428 	.word	0x40020428
 800644c:	40020440 	.word	0x40020440
 8006450:	40020458 	.word	0x40020458
 8006454:	40020470 	.word	0x40020470
 8006458:	40020488 	.word	0x40020488
 800645c:	400204a0 	.word	0x400204a0
 8006460:	400204b8 	.word	0x400204b8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 020a 	bic.w	r2, r2, #10
 8006472:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8097 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006496:	e091      	b.n	80065bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2208      	movs	r2, #8
 80064a2:	409a      	lsls	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8088 	beq.w	80065be <HAL_DMA_IRQHandler+0xe0e>
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8082 	beq.w	80065be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a41      	ldr	r2, [pc, #260]	@ (80065c4 <HAL_DMA_IRQHandler+0xe14>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d04a      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3f      	ldr	r2, [pc, #252]	@ (80065c8 <HAL_DMA_IRQHandler+0xe18>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d045      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3e      	ldr	r2, [pc, #248]	@ (80065cc <HAL_DMA_IRQHandler+0xe1c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d040      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a3c      	ldr	r2, [pc, #240]	@ (80065d0 <HAL_DMA_IRQHandler+0xe20>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d03b      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a3b      	ldr	r2, [pc, #236]	@ (80065d4 <HAL_DMA_IRQHandler+0xe24>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d036      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a39      	ldr	r2, [pc, #228]	@ (80065d8 <HAL_DMA_IRQHandler+0xe28>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d031      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a38      	ldr	r2, [pc, #224]	@ (80065dc <HAL_DMA_IRQHandler+0xe2c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d02c      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a36      	ldr	r2, [pc, #216]	@ (80065e0 <HAL_DMA_IRQHandler+0xe30>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d027      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a35      	ldr	r2, [pc, #212]	@ (80065e4 <HAL_DMA_IRQHandler+0xe34>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <HAL_DMA_IRQHandler+0xe38>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a32      	ldr	r2, [pc, #200]	@ (80065ec <HAL_DMA_IRQHandler+0xe3c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	@ (80065f0 <HAL_DMA_IRQHandler+0xe40>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2f      	ldr	r2, [pc, #188]	@ (80065f4 <HAL_DMA_IRQHandler+0xe44>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <HAL_DMA_IRQHandler+0xe48>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <HAL_DMA_IRQHandler+0xe4c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_IRQHandler+0xdaa>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2a      	ldr	r2, [pc, #168]	@ (8006600 <HAL_DMA_IRQHandler+0xe50>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d108      	bne.n	800656c <HAL_DMA_IRQHandler+0xdbc>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 021c 	bic.w	r2, r2, #28
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e007      	b.n	800657c <HAL_DMA_IRQHandler+0xdcc>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 020e 	bic.w	r2, r2, #14
 800657a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2201      	movs	r2, #1
 8006586:	409a      	lsls	r2, r3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	e004      	b.n	80065be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065b4:	bf00      	nop
 80065b6:	e002      	b.n	80065be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065be:	3728      	adds	r7, #40	@ 0x28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40020010 	.word	0x40020010
 80065c8:	40020028 	.word	0x40020028
 80065cc:	40020040 	.word	0x40020040
 80065d0:	40020058 	.word	0x40020058
 80065d4:	40020070 	.word	0x40020070
 80065d8:	40020088 	.word	0x40020088
 80065dc:	400200a0 	.word	0x400200a0
 80065e0:	400200b8 	.word	0x400200b8
 80065e4:	40020410 	.word	0x40020410
 80065e8:	40020428 	.word	0x40020428
 80065ec:	40020440 	.word	0x40020440
 80065f0:	40020458 	.word	0x40020458
 80065f4:	40020470 	.word	0x40020470
 80065f8:	40020488 	.word	0x40020488
 80065fc:	400204a0 	.word	0x400204a0
 8006600:	400204b8 	.word	0x400204b8

08006604 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006616:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a7f      	ldr	r2, [pc, #508]	@ (8006820 <DMA_SetConfig+0x21c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d072      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7d      	ldr	r2, [pc, #500]	@ (8006824 <DMA_SetConfig+0x220>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d06d      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a7c      	ldr	r2, [pc, #496]	@ (8006828 <DMA_SetConfig+0x224>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d068      	beq.n	800670e <DMA_SetConfig+0x10a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a7a      	ldr	r2, [pc, #488]	@ (800682c <DMA_SetConfig+0x228>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d063      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a79      	ldr	r2, [pc, #484]	@ (8006830 <DMA_SetConfig+0x22c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d05e      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a77      	ldr	r2, [pc, #476]	@ (8006834 <DMA_SetConfig+0x230>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d059      	beq.n	800670e <DMA_SetConfig+0x10a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a76      	ldr	r2, [pc, #472]	@ (8006838 <DMA_SetConfig+0x234>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d054      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a74      	ldr	r2, [pc, #464]	@ (800683c <DMA_SetConfig+0x238>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04f      	beq.n	800670e <DMA_SetConfig+0x10a>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a73      	ldr	r2, [pc, #460]	@ (8006840 <DMA_SetConfig+0x23c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04a      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a71      	ldr	r2, [pc, #452]	@ (8006844 <DMA_SetConfig+0x240>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d045      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a70      	ldr	r2, [pc, #448]	@ (8006848 <DMA_SetConfig+0x244>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d040      	beq.n	800670e <DMA_SetConfig+0x10a>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a6e      	ldr	r2, [pc, #440]	@ (800684c <DMA_SetConfig+0x248>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d03b      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a6d      	ldr	r2, [pc, #436]	@ (8006850 <DMA_SetConfig+0x24c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d036      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006854 <DMA_SetConfig+0x250>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d031      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006858 <DMA_SetConfig+0x254>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d02c      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a68      	ldr	r2, [pc, #416]	@ (800685c <DMA_SetConfig+0x258>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d027      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a67      	ldr	r2, [pc, #412]	@ (8006860 <DMA_SetConfig+0x25c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a65      	ldr	r2, [pc, #404]	@ (8006864 <DMA_SetConfig+0x260>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01d      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a64      	ldr	r2, [pc, #400]	@ (8006868 <DMA_SetConfig+0x264>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a62      	ldr	r2, [pc, #392]	@ (800686c <DMA_SetConfig+0x268>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a61      	ldr	r2, [pc, #388]	@ (8006870 <DMA_SetConfig+0x26c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5f      	ldr	r2, [pc, #380]	@ (8006874 <DMA_SetConfig+0x270>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <DMA_SetConfig+0x10a>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006878 <DMA_SetConfig+0x274>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <DMA_SetConfig+0x10a>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a5c      	ldr	r2, [pc, #368]	@ (800687c <DMA_SetConfig+0x278>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d101      	bne.n	8006712 <DMA_SetConfig+0x10e>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <DMA_SetConfig+0x110>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006720:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006732:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a39      	ldr	r2, [pc, #228]	@ (8006820 <DMA_SetConfig+0x21c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d04a      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a38      	ldr	r2, [pc, #224]	@ (8006824 <DMA_SetConfig+0x220>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d045      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a36      	ldr	r2, [pc, #216]	@ (8006828 <DMA_SetConfig+0x224>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d040      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a35      	ldr	r2, [pc, #212]	@ (800682c <DMA_SetConfig+0x228>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d03b      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a33      	ldr	r2, [pc, #204]	@ (8006830 <DMA_SetConfig+0x22c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d036      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a32      	ldr	r2, [pc, #200]	@ (8006834 <DMA_SetConfig+0x230>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d031      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a30      	ldr	r2, [pc, #192]	@ (8006838 <DMA_SetConfig+0x234>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d02c      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2f      	ldr	r2, [pc, #188]	@ (800683c <DMA_SetConfig+0x238>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d027      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2d      	ldr	r2, [pc, #180]	@ (8006840 <DMA_SetConfig+0x23c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d022      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <DMA_SetConfig+0x240>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d01d      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2a      	ldr	r2, [pc, #168]	@ (8006848 <DMA_SetConfig+0x244>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d018      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a29      	ldr	r2, [pc, #164]	@ (800684c <DMA_SetConfig+0x248>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a27      	ldr	r2, [pc, #156]	@ (8006850 <DMA_SetConfig+0x24c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a26      	ldr	r2, [pc, #152]	@ (8006854 <DMA_SetConfig+0x250>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a24      	ldr	r2, [pc, #144]	@ (8006858 <DMA_SetConfig+0x254>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <DMA_SetConfig+0x1d0>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a23      	ldr	r2, [pc, #140]	@ (800685c <DMA_SetConfig+0x258>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d101      	bne.n	80067d8 <DMA_SetConfig+0x1d4>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <DMA_SetConfig+0x1d6>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d059      	beq.n	8006892 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	223f      	movs	r2, #63	@ 0x3f
 80067e8:	409a      	lsls	r2, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b40      	cmp	r3, #64	@ 0x40
 800680c:	d138      	bne.n	8006880 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800681e:	e086      	b.n	800692e <DMA_SetConfig+0x32a>
 8006820:	40020010 	.word	0x40020010
 8006824:	40020028 	.word	0x40020028
 8006828:	40020040 	.word	0x40020040
 800682c:	40020058 	.word	0x40020058
 8006830:	40020070 	.word	0x40020070
 8006834:	40020088 	.word	0x40020088
 8006838:	400200a0 	.word	0x400200a0
 800683c:	400200b8 	.word	0x400200b8
 8006840:	40020410 	.word	0x40020410
 8006844:	40020428 	.word	0x40020428
 8006848:	40020440 	.word	0x40020440
 800684c:	40020458 	.word	0x40020458
 8006850:	40020470 	.word	0x40020470
 8006854:	40020488 	.word	0x40020488
 8006858:	400204a0 	.word	0x400204a0
 800685c:	400204b8 	.word	0x400204b8
 8006860:	58025408 	.word	0x58025408
 8006864:	5802541c 	.word	0x5802541c
 8006868:	58025430 	.word	0x58025430
 800686c:	58025444 	.word	0x58025444
 8006870:	58025458 	.word	0x58025458
 8006874:	5802546c 	.word	0x5802546c
 8006878:	58025480 	.word	0x58025480
 800687c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	60da      	str	r2, [r3, #12]
}
 8006890:	e04d      	b.n	800692e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a29      	ldr	r2, [pc, #164]	@ (800693c <DMA_SetConfig+0x338>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d022      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a27      	ldr	r2, [pc, #156]	@ (8006940 <DMA_SetConfig+0x33c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01d      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a26      	ldr	r2, [pc, #152]	@ (8006944 <DMA_SetConfig+0x340>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d018      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a24      	ldr	r2, [pc, #144]	@ (8006948 <DMA_SetConfig+0x344>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a23      	ldr	r2, [pc, #140]	@ (800694c <DMA_SetConfig+0x348>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00e      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a21      	ldr	r2, [pc, #132]	@ (8006950 <DMA_SetConfig+0x34c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d009      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a20      	ldr	r2, [pc, #128]	@ (8006954 <DMA_SetConfig+0x350>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d004      	beq.n	80068e2 <DMA_SetConfig+0x2de>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <DMA_SetConfig+0x354>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <DMA_SetConfig+0x2e2>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <DMA_SetConfig+0x2e4>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d020      	beq.n	800692e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2201      	movs	r2, #1
 80068f6:	409a      	lsls	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d108      	bne.n	800691e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	60da      	str	r2, [r3, #12]
}
 800691c:	e007      	b.n	800692e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	58025408 	.word	0x58025408
 8006940:	5802541c 	.word	0x5802541c
 8006944:	58025430 	.word	0x58025430
 8006948:	58025444 	.word	0x58025444
 800694c:	58025458 	.word	0x58025458
 8006950:	5802546c 	.word	0x5802546c
 8006954:	58025480 	.word	0x58025480
 8006958:	58025494 	.word	0x58025494

0800695c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a42      	ldr	r2, [pc, #264]	@ (8006a74 <DMA_CalcBaseAndBitshift+0x118>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04a      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <DMA_CalcBaseAndBitshift+0x11c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d045      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a7c <DMA_CalcBaseAndBitshift+0x120>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d040      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a3e      	ldr	r2, [pc, #248]	@ (8006a80 <DMA_CalcBaseAndBitshift+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d03b      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a3c      	ldr	r2, [pc, #240]	@ (8006a84 <DMA_CalcBaseAndBitshift+0x128>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d036      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a88 <DMA_CalcBaseAndBitshift+0x12c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d031      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a39      	ldr	r2, [pc, #228]	@ (8006a8c <DMA_CalcBaseAndBitshift+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02c      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a38      	ldr	r2, [pc, #224]	@ (8006a90 <DMA_CalcBaseAndBitshift+0x134>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d027      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a36      	ldr	r2, [pc, #216]	@ (8006a94 <DMA_CalcBaseAndBitshift+0x138>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a35      	ldr	r2, [pc, #212]	@ (8006a98 <DMA_CalcBaseAndBitshift+0x13c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a33      	ldr	r2, [pc, #204]	@ (8006a9c <DMA_CalcBaseAndBitshift+0x140>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a32      	ldr	r2, [pc, #200]	@ (8006aa0 <DMA_CalcBaseAndBitshift+0x144>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a30      	ldr	r2, [pc, #192]	@ (8006aa4 <DMA_CalcBaseAndBitshift+0x148>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa8 <DMA_CalcBaseAndBitshift+0x14c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a2d      	ldr	r2, [pc, #180]	@ (8006aac <DMA_CalcBaseAndBitshift+0x150>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <DMA_CalcBaseAndBitshift+0xa8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab0 <DMA_CalcBaseAndBitshift+0x154>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d101      	bne.n	8006a08 <DMA_CalcBaseAndBitshift+0xac>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <DMA_CalcBaseAndBitshift+0xae>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d024      	beq.n	8006a58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	3b10      	subs	r3, #16
 8006a16:	4a27      	ldr	r2, [pc, #156]	@ (8006ab4 <DMA_CalcBaseAndBitshift+0x158>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	4a24      	ldr	r2, [pc, #144]	@ (8006ab8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a28:	5cd3      	ldrb	r3, [r2, r3]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d908      	bls.n	8006a48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8006abc <DMA_CalcBaseAndBitshift+0x160>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	1d1a      	adds	r2, r3, #4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a46:	e00d      	b.n	8006a64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006abc <DMA_CalcBaseAndBitshift+0x160>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a56:	e005      	b.n	8006a64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40020010 	.word	0x40020010
 8006a78:	40020028 	.word	0x40020028
 8006a7c:	40020040 	.word	0x40020040
 8006a80:	40020058 	.word	0x40020058
 8006a84:	40020070 	.word	0x40020070
 8006a88:	40020088 	.word	0x40020088
 8006a8c:	400200a0 	.word	0x400200a0
 8006a90:	400200b8 	.word	0x400200b8
 8006a94:	40020410 	.word	0x40020410
 8006a98:	40020428 	.word	0x40020428
 8006a9c:	40020440 	.word	0x40020440
 8006aa0:	40020458 	.word	0x40020458
 8006aa4:	40020470 	.word	0x40020470
 8006aa8:	40020488 	.word	0x40020488
 8006aac:	400204a0 	.word	0x400204a0
 8006ab0:	400204b8 	.word	0x400204b8
 8006ab4:	aaaaaaab 	.word	0xaaaaaaab
 8006ab8:	08012874 	.word	0x08012874
 8006abc:	fffffc00 	.word	0xfffffc00

08006ac0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d120      	bne.n	8006b16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d858      	bhi.n	8006b8e <DMA_CheckFifoParam+0xce>
 8006adc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae4 <DMA_CheckFifoParam+0x24>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006af5 	.word	0x08006af5
 8006ae8:	08006b07 	.word	0x08006b07
 8006aec:	08006af5 	.word	0x08006af5
 8006af0:	08006b8f 	.word	0x08006b8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d048      	beq.n	8006b92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b04:	e045      	b.n	8006b92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b0e:	d142      	bne.n	8006b96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b14:	e03f      	b.n	8006b96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1e:	d123      	bne.n	8006b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d838      	bhi.n	8006b9a <DMA_CheckFifoParam+0xda>
 8006b28:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <DMA_CheckFifoParam+0x70>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b47 	.word	0x08006b47
 8006b38:	08006b41 	.word	0x08006b41
 8006b3c:	08006b59 	.word	0x08006b59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
        break;
 8006b44:	e030      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d025      	beq.n	8006b9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b56:	e022      	b.n	8006b9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b60:	d11f      	bne.n	8006ba2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b66:	e01c      	b.n	8006ba2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d902      	bls.n	8006b76 <DMA_CheckFifoParam+0xb6>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d003      	beq.n	8006b7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b74:	e018      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
        break;
 8006b7a:	e015      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8c:	e00b      	b.n	8006ba6 <DMA_CheckFifoParam+0xe6>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e00a      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        break;
 8006b92:	bf00      	nop
 8006b94:	e008      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        break;
 8006b96:	bf00      	nop
 8006b98:	e006      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e004      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        break;
 8006b9e:	bf00      	nop
 8006ba0:	e002      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ba2:	bf00      	nop
 8006ba4:	e000      	b.n	8006ba8 <DMA_CheckFifoParam+0xe8>
    break;
 8006ba6:	bf00      	nop
    }
  }

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop

08006bb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a38      	ldr	r2, [pc, #224]	@ (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a36      	ldr	r2, [pc, #216]	@ (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a35      	ldr	r2, [pc, #212]	@ (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a33      	ldr	r2, [pc, #204]	@ (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a32      	ldr	r2, [pc, #200]	@ (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a30      	ldr	r2, [pc, #192]	@ (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d101      	bne.n	8006c1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01a      	beq.n	8006c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	3b08      	subs	r3, #8
 8006c28:	4a28      	ldr	r2, [pc, #160]	@ (8006ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	091b      	lsrs	r3, r3, #4
 8006c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4b26      	ldr	r3, [pc, #152]	@ (8006cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a24      	ldr	r2, [pc, #144]	@ (8006cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c54:	e024      	b.n	8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	3b10      	subs	r3, #16
 8006c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d806      	bhi.n	8006c7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d902      	bls.n	8006c7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4b18      	ldr	r3, [pc, #96]	@ (8006ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	461a      	mov	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2201      	movs	r2, #1
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	58025408 	.word	0x58025408
 8006cb0:	5802541c 	.word	0x5802541c
 8006cb4:	58025430 	.word	0x58025430
 8006cb8:	58025444 	.word	0x58025444
 8006cbc:	58025458 	.word	0x58025458
 8006cc0:	5802546c 	.word	0x5802546c
 8006cc4:	58025480 	.word	0x58025480
 8006cc8:	58025494 	.word	0x58025494
 8006ccc:	cccccccd 	.word	0xcccccccd
 8006cd0:	16009600 	.word	0x16009600
 8006cd4:	58025880 	.word	0x58025880
 8006cd8:	aaaaaaab 	.word	0xaaaaaaab
 8006cdc:	400204b8 	.word	0x400204b8
 8006ce0:	4002040f 	.word	0x4002040f
 8006ce4:	10008200 	.word	0x10008200
 8006ce8:	40020880 	.word	0x40020880

08006cec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d04a      	beq.n	8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d847      	bhi.n	8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a25      	ldr	r2, [pc, #148]	@ (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d022      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a24      	ldr	r2, [pc, #144]	@ (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d01d      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a22      	ldr	r2, [pc, #136]	@ (8006dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d018      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1f      	ldr	r2, [pc, #124]	@ (8006db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1c      	ldr	r2, [pc, #112]	@ (8006dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4b17      	ldr	r3, [pc, #92]	@ (8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a15      	ldr	r2, [pc, #84]	@ (8006dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d74:	671a      	str	r2, [r3, #112]	@ 0x70
 8006d76:	e009      	b.n	8006d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a11      	ldr	r2, [pc, #68]	@ (8006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2201      	movs	r2, #1
 8006d92:	409a      	lsls	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	58025408 	.word	0x58025408
 8006da8:	5802541c 	.word	0x5802541c
 8006dac:	58025430 	.word	0x58025430
 8006db0:	58025444 	.word	0x58025444
 8006db4:	58025458 	.word	0x58025458
 8006db8:	5802546c 	.word	0x5802546c
 8006dbc:	58025480 	.word	0x58025480
 8006dc0:	58025494 	.word	0x58025494
 8006dc4:	1600963f 	.word	0x1600963f
 8006dc8:	58025940 	.word	0x58025940
 8006dcc:	1000823f 	.word	0x1000823f
 8006dd0:	40020940 	.word	0x40020940

08006dd4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b098      	sub	sp, #96	@ 0x60
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ddc:	4a84      	ldr	r2, [pc, #528]	@ (8006ff0 <HAL_FDCAN_Init+0x21c>)
 8006dde:	f107 030c 	add.w	r3, r7, #12
 8006de2:	4611      	mov	r1, r2
 8006de4:	224c      	movs	r2, #76	@ 0x4c
 8006de6:	4618      	mov	r0, r3
 8006de8:	f00a ff54 	bl	8011c94 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e1c6      	b.n	8007184 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ff4 <HAL_FDCAN_Init+0x220>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d106      	bne.n	8006e0e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fb f8ae 	bl	8001f84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0210 	bic.w	r2, r2, #16
 8006e36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e38:	f7fb fd1a 	bl	8002870 <HAL_GetTick>
 8006e3c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e3e:	e014      	b.n	8006e6a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e40:	f7fb fd16 	bl	8002870 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b0a      	cmp	r3, #10
 8006e4c:	d90d      	bls.n	8006e6a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e54:	f043 0201 	orr.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2203      	movs	r2, #3
 8006e62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e18c      	b.n	8007184 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d0e3      	beq.n	8006e40 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e88:	f7fb fcf2 	bl	8002870 <HAL_GetTick>
 8006e8c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e8e:	e014      	b.n	8006eba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e90:	f7fb fcee 	bl	8002870 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b0a      	cmp	r3, #10
 8006e9c:	d90d      	bls.n	8006eba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ea4:	f043 0201 	orr.w	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e164      	b.n	8007184 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0e3      	beq.n	8006e90 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0202 	orr.w	r2, r2, #2
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7c1b      	ldrb	r3, [r3, #16]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d108      	bne.n	8006ef2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eee:	619a      	str	r2, [r3, #24]
 8006ef0:	e007      	b.n	8006f02 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f00:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7c5b      	ldrb	r3, [r3, #17]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d108      	bne.n	8006f1c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f18:	619a      	str	r2, [r3, #24]
 8006f1a:	e007      	b.n	8006f2c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7c9b      	ldrb	r3, [r3, #18]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d108      	bne.n	8006f46 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f42:	619a      	str	r2, [r3, #24]
 8006f44:	e007      	b.n	8006f56 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f54:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006f7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0210 	bic.w	r2, r2, #16
 8006f8a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d108      	bne.n	8006fa6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0204 	orr.w	r2, r2, #4
 8006fa2:	619a      	str	r2, [r3, #24]
 8006fa4:	e030      	b.n	8007008 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02c      	beq.n	8007008 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d020      	beq.n	8006ff8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fc4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0210 	orr.w	r2, r2, #16
 8006fd4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d114      	bne.n	8007008 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699a      	ldr	r2, [r3, #24]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0220 	orr.w	r2, r2, #32
 8006fec:	619a      	str	r2, [r3, #24]
 8006fee:	e00b      	b.n	8007008 <HAL_FDCAN_Init+0x234>
 8006ff0:	08012818 	.word	0x08012818
 8006ff4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0220 	orr.w	r2, r2, #32
 8007006:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	3b01      	subs	r3, #1
 800700e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	3b01      	subs	r3, #1
 8007016:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007018:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007020:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	3b01      	subs	r3, #1
 800702a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007030:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007032:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800703c:	d115      	bne.n	800706a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007042:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	3b01      	subs	r3, #1
 800704a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800704c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	3b01      	subs	r3, #1
 8007054:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007056:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	3b01      	subs	r3, #1
 8007060:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007066:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007068:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007090:	4413      	add	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800709e:	f023 0107 	bic.w	r1, r3, #7
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	3360      	adds	r3, #96	@ 0x60
 80070aa:	443b      	add	r3, r7
 80070ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d011      	beq.n	80070e6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070ca:	f023 0107 	bic.w	r1, r3, #7
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	3360      	adds	r3, #96	@ 0x60
 80070d6:	443b      	add	r3, r7
 80070d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d012      	beq.n	8007114 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070f6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	3360      	adds	r3, #96	@ 0x60
 8007102:	443b      	add	r3, r7
 8007104:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	2b00      	cmp	r3, #0
 800711a:	d012      	beq.n	8007142 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007124:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	3360      	adds	r3, #96	@ 0x60
 8007130:	443b      	add	r3, r7
 8007132:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007136:	021a      	lsls	r2, r3, #8
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a11      	ldr	r2, [pc, #68]	@ (800718c <HAL_FDCAN_Init+0x3b8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d107      	bne.n	800715c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f022 0203 	bic.w	r2, r2, #3
 800715a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fe35 	bl	8007de4 <FDCAN_CalcultateRamBlockAddresses>
 800717a:	4603      	mov	r3, r0
 800717c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007180:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007184:	4618      	mov	r0, r3
 8007186:	3760      	adds	r7, #96	@ 0x60
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	4000a000 	.word	0x4000a000

08007190 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80071a0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d002      	beq.n	80071ae <HAL_FDCAN_ConfigFilter+0x1e>
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d157      	bne.n	800725e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d12b      	bne.n	800720e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	d10d      	bne.n	80071da <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80071ca:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80071d0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80071d2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	e00e      	b.n	80071f8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80071e6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80071ee:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e025      	b.n	800725a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	075a      	lsls	r2, r3, #29
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b07      	cmp	r3, #7
 8007222:	d103      	bne.n	800722c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e006      	b.n	800723a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	079a      	lsls	r2, r3, #30
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	3304      	adds	r3, #4
 8007252:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e008      	b.n	8007270 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007264:	f043 0202 	orr.w	r2, r3, #2
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
  }
}
 8007270:	4618      	mov	r0, r3
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d111      	bne.n	80072b4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e008      	b.n	80072c6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072ba:	f043 0204 	orr.w	r2, r3, #4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
  }
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d141      	bne.n	800736e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80072f2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007300:	f043 0220 	orr.w	r2, r3, #32
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e038      	b.n	8007380 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e026      	b.n	8007380 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fed1 	bl	80080f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2101      	movs	r1, #1
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	fa01 f202 	lsl.w	r2, r1, r2
 800735a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800735e:	2201      	movs	r2, #1
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	409a      	lsls	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e008      	b.n	8007380 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007374:	f043 0208 	orr.w	r2, r3, #8
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007388:	b480      	push	{r7}
 800738a:	b08b      	sub	sp, #44	@ 0x2c
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80073a0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80073a2:	7efb      	ldrb	r3, [r7, #27]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	f040 8149 	bne.w	800763c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b40      	cmp	r3, #64	@ 0x40
 80073ae:	d14c      	bne.n	800744a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e13c      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e12a      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007400:	0e1b      	lsrs	r3, r3, #24
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b01      	cmp	r3, #1
 8007408:	d10a      	bne.n	8007420 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007412:	0fdb      	lsrs	r3, r3, #31
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	69f9      	ldr	r1, [r7, #28]
 800743e:	fb01 f303 	mul.w	r3, r1, r3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
 8007448:	e068      	b.n	800751c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b41      	cmp	r3, #65	@ 0x41
 800744e:	d14c      	bne.n	80074ea <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007458:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0ec      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800747c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800748a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0da      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074a0:	0e1b      	lsrs	r3, r3, #24
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d10a      	bne.n	80074c0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074b2:	0fdb      	lsrs	r3, r3, #31
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80074bc:	2301      	movs	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074c8:	0a1b      	lsrs	r3, r3, #8
 80074ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e8:	e018      	b.n	800751c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d309      	bcc.n	8007508 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0a2      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	fb01 f303 	mul.w	r3, r1, r3
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d107      	bne.n	8007540 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	0c9b      	lsrs	r3, r3, #18
 8007536:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e005      	b.n	800754c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	3304      	adds	r3, #4
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	f003 020f 	and.w	r2, r3, #15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	0e1b      	lsrs	r3, r3, #24
 80075a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	0fda      	lsrs	r2, r3, #31
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	3304      	adds	r3, #4
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075bc:	2300      	movs	r3, #0
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	e00a      	b.n	80075d8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	441a      	add	r2, r3
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	440b      	add	r3, r1
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	3301      	adds	r3, #1
 80075d6:	623b      	str	r3, [r7, #32]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a1f      	ldr	r2, [pc, #124]	@ (800765c <HAL_FDCAN_GetRxMessage+0x2d4>)
 80075de:	5cd3      	ldrb	r3, [r2, r3]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d3ec      	bcc.n	80075c2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b40      	cmp	r3, #64	@ 0x40
 80075ec:	d105      	bne.n	80075fa <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80075f8:	e01e      	b.n	8007638 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b41      	cmp	r3, #65	@ 0x41
 80075fe:	d105      	bne.n	800760c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800760a:	e015      	b.n	8007638 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b1f      	cmp	r3, #31
 8007610:	d808      	bhi.n	8007624 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2101      	movs	r1, #1
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	fa01 f202 	lsl.w	r2, r1, r2
 800761e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007622:	e009      	b.n	8007638 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 021f 	and.w	r2, r3, #31
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2101      	movs	r1, #1
 8007630:	fa01 f202 	lsl.w	r2, r1, r2
 8007634:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e008      	b.n	800764e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	372c      	adds	r7, #44	@ 0x2c
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	0801287c 	.word	0x0801287c

08007660 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007670:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0207 	and.w	r2, r3, #7
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	f003 0207 	and.w	r2, r3, #7
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0218 	and.w	r2, r3, #24
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	f003 0201 	and.w	r2, r3, #1
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	099b      	lsrs	r3, r3, #6
 80076a2:	f003 0201 	and.w	r2, r3, #1
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	09db      	lsrs	r3, r3, #7
 80076ae:	f003 0201 	and.w	r2, r3, #1
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	0adb      	lsrs	r3, r3, #11
 80076ba:	f003 0201 	and.w	r2, r3, #1
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0b1b      	lsrs	r3, r3, #12
 80076c6:	f003 0201 	and.w	r2, r3, #1
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	0b5b      	lsrs	r3, r3, #13
 80076d2:	f003 0201 	and.w	r2, r3, #1
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	0b9b      	lsrs	r3, r3, #14
 80076de:	f003 0201 	and.w	r2, r3, #1
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007712:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d002      	beq.n	8007720 <HAL_FDCAN_ActivateNotification+0x20>
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d155      	bne.n	80077cc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4013      	ands	r3, r2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d108      	bne.n	8007740 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0201 	orr.w	r2, r2, #1
 800773c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800773e:	e014      	b.n	800776a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4013      	ands	r3, r2
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d108      	bne.n	8007762 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0202 	orr.w	r2, r2, #2
 800775e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007760:	e003      	b.n	800776a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2203      	movs	r2, #3
 8007768:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	430a      	orrs	r2, r1
 8007784:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <HAL_FDCAN_ActivateNotification+0xec>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	0f9b      	lsrs	r3, r3, #30
 80077c2:	490b      	ldr	r1, [pc, #44]	@ (80077f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e008      	b.n	80077de <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077d2:	f043 0202 	orr.w	r2, r3, #2
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	3fcfffff 	.word	0x3fcfffff
 80077f0:	4000a800 	.word	0x4000a800

080077f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b096      	sub	sp, #88	@ 0x58
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80077fc:	4b95      	ldr	r3, [pc, #596]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	079b      	lsls	r3, r3, #30
 8007802:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007804:	4b93      	ldr	r3, [pc, #588]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	079b      	lsls	r3, r3, #30
 800780a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800780c:	4013      	ands	r3, r2
 800780e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007816:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800781a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007824:	4013      	ands	r3, r2
 8007826:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800783c:	4013      	ands	r3, r2
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800784a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007854:	4013      	ands	r3, r2
 8007856:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007862:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786c:	4013      	ands	r3, r2
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007876:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800787a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007884:	4013      	ands	r3, r2
 8007886:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007896:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80078b6:	4b67      	ldr	r3, [pc, #412]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa44 	bl	8007d4a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80078c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01c      	beq.n	8007906 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d017      	beq.n	8007906 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80078de:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078ea:	4013      	ands	r3, r2
 80078ec:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80078f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80078f8:	4b56      	ldr	r3, [pc, #344]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80078fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f9f9 	bl	8007cf8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00d      	beq.n	8007928 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007912:	4b51      	ldr	r3, [pc, #324]	@ (8007a58 <HAL_FDCAN_IRQHandler+0x264>)
 8007914:	400b      	ands	r3, r1
 8007916:	6513      	str	r3, [r2, #80]	@ 0x50
 8007918:	4a4e      	ldr	r2, [pc, #312]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 800791a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791c:	0f9b      	lsrs	r3, r3, #30
 800791e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f9b2 	bl	8007c8c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007934:	4b48      	ldr	r3, [pc, #288]	@ (8007a58 <HAL_FDCAN_IRQHandler+0x264>)
 8007936:	400b      	ands	r3, r1
 8007938:	6513      	str	r3, [r2, #80]	@ 0x50
 800793a:	4a46      	ldr	r2, [pc, #280]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 800793c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800793e:	0f9b      	lsrs	r3, r3, #30
 8007940:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9ac 	bl	8007ca2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800794a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007956:	4b40      	ldr	r3, [pc, #256]	@ (8007a58 <HAL_FDCAN_IRQHandler+0x264>)
 8007958:	400b      	ands	r3, r1
 800795a:	6513      	str	r3, [r2, #80]	@ 0x50
 800795c:	4a3d      	ldr	r2, [pc, #244]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 800795e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007960:	0f9b      	lsrs	r3, r3, #30
 8007962:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007964:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7f9 fd94 	bl	8001494 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800796c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00d      	beq.n	800798e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007978:	4b37      	ldr	r3, [pc, #220]	@ (8007a58 <HAL_FDCAN_IRQHandler+0x264>)
 800797a:	400b      	ands	r3, r1
 800797c:	6513      	str	r3, [r2, #80]	@ 0x50
 800797e:	4a35      	ldr	r2, [pc, #212]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 8007980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007982:	0f9b      	lsrs	r3, r3, #30
 8007984:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007986:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f995 	bl	8007cb8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800798e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00f      	beq.n	80079b8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ac:	4b29      	ldr	r3, [pc, #164]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f98b 	bl	8007cce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01c      	beq.n	80079fc <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80079c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079d4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e0:	4013      	ands	r3, r2
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ee:	4b19      	ldr	r3, [pc, #100]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80079f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f973 	bl	8007ce2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80079fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007a18:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f974 	bl	8007d0e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d015      	beq.n	8007a5c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007a42:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a44:	4b03      	ldr	r3, [pc, #12]	@ (8007a54 <HAL_FDCAN_IRQHandler+0x260>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f969 	bl	8007d22 <HAL_FDCAN_TimestampWraparoundCallback>
 8007a50:	e004      	b.n	8007a5c <HAL_FDCAN_IRQHandler+0x268>
 8007a52:	bf00      	nop
 8007a54:	4000a800 	.word	0x4000a800
 8007a58:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007a78:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a7a:	4b81      	ldr	r3, [pc, #516]	@ (8007c80 <HAL_FDCAN_IRQHandler+0x48c>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f958 	bl	8007d36 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d014      	beq.n	8007aba <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00f      	beq.n	8007aba <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007aa2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007aa4:	4b76      	ldr	r3, [pc, #472]	@ (8007c80 <HAL_FDCAN_IRQHandler+0x48c>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00d      	beq.n	8007adc <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8007c84 <HAL_FDCAN_IRQHandler+0x490>)
 8007ac8:	400b      	ands	r3, r1
 8007aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8007acc:	4a6c      	ldr	r2, [pc, #432]	@ (8007c80 <HAL_FDCAN_IRQHandler+0x48c>)
 8007ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad0:	0f9b      	lsrs	r3, r3, #30
 8007ad2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007ad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f94b 	bl	8007d72 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ae8:	4b66      	ldr	r3, [pc, #408]	@ (8007c84 <HAL_FDCAN_IRQHandler+0x490>)
 8007aea:	400b      	ands	r3, r1
 8007aec:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aee:	4a64      	ldr	r2, [pc, #400]	@ (8007c80 <HAL_FDCAN_IRQHandler+0x48c>)
 8007af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af2:	0f9b      	lsrs	r3, r3, #30
 8007af4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8007c88 <HAL_FDCAN_IRQHandler+0x494>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	f040 80aa 	bne.w	8007c66 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 80a2 	beq.w	8007c66 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b36:	4013      	ands	r3, r2
 8007b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b44:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b4e:	4013      	ands	r3, r2
 8007b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	4013      	ands	r3, r2
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007b74:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007b8c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	4013      	ands	r3, r2
 8007b98:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d007      	beq.n	8007bc0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8e4 	bl	8007d88 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bcc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8e4 	bl	8007d9e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d019      	beq.n	8007c14 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d014      	beq.n	8007c14 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c00:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2240      	movs	r2, #64	@ 0x40
 8007c08:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	6939      	ldr	r1, [r7, #16]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8d0 	bl	8007db4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c20:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f8d1 	bl	8007dcc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f874 	bl	8007d5e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007c76:	bf00      	nop
 8007c78:	3758      	adds	r7, #88	@ 0x58
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	4000a800 	.word	0x4000a800
 8007c84:	3fcfffff 	.word	0x3fcfffff
 8007c88:	4000a000 	.word	0x4000a000

08007c8c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007dfa:	4ba7      	ldr	r3, [pc, #668]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	0091      	lsls	r1, r2, #2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e14:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1c:	041a      	lsls	r2, r3, #16
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e3a:	4b97      	ldr	r3, [pc, #604]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	0091      	lsls	r1, r2, #2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	430b      	orrs	r3, r1
 8007e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e54:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5c:	041a      	lsls	r2, r3, #16
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e7c:	4b86      	ldr	r3, [pc, #536]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	0091      	lsls	r1, r2, #2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e96:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	041a      	lsls	r2, r3, #16
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007ec4:	4b74      	ldr	r3, [pc, #464]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	0091      	lsls	r1, r2, #2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ede:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee6:	041a      	lsls	r2, r3, #16
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007f0c:	4b62      	ldr	r3, [pc, #392]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f0e:	4013      	ands	r3, r2
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	0091      	lsls	r1, r2, #2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007f38:	4b57      	ldr	r3, [pc, #348]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	0091      	lsls	r1, r2, #2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	430b      	orrs	r3, r1
 8007f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f52:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5a:	041a      	lsls	r2, r3, #16
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	4413      	add	r3, r2
 8007f70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007f7a:	4b47      	ldr	r3, [pc, #284]	@ (8008098 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	0091      	lsls	r1, r2, #2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	430b      	orrs	r3, r1
 8007f88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f94:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9c:	041a      	lsls	r2, r3, #16
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007fb0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fb8:	061a      	lsls	r2, r3, #24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fc8:	4b34      	ldr	r3, [pc, #208]	@ (800809c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007fca:	4413      	add	r3, r2
 8007fcc:	009a      	lsls	r2, r3, #2
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	441a      	add	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007ffe:	fb01 f303 	mul.w	r3, r1, r3
 8008002:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008004:	441a      	add	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008016:	fb01 f303 	mul.w	r3, r1, r3
 800801a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008034:	441a      	add	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	441a      	add	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800805e:	fb01 f303 	mul.w	r3, r1, r3
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	441a      	add	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	4a04      	ldr	r2, [pc, #16]	@ (80080a0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d915      	bls.n	80080c0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008094:	e006      	b.n	80080a4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008096:	bf00      	nop
 8008098:	ffff0003 	.word	0xffff0003
 800809c:	10002b00 	.word	0x10002b00
 80080a0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080aa:	f043 0220 	orr.w	r2, r3, #32
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2203      	movs	r2, #3
 80080b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e010      	b.n	80080e2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	e005      	b.n	80080d4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3304      	adds	r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d3f3      	bcc.n	80080c8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	@ 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800810e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008116:	4313      	orrs	r3, r2
 8008118:	61fb      	str	r3, [r7, #28]
 800811a:	e00a      	b.n	8008132 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008124:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800812a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800812c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008130:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800813c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008142:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008148:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	3304      	adds	r3, #4
 8008174:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	3304      	adds	r3, #4
 8008180:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008182:	2300      	movs	r3, #0
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e020      	b.n	80081ca <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3303      	adds	r3, #3
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	3302      	adds	r3, #2
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	440b      	add	r3, r1
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80081a0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	3301      	adds	r3, #1
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	440b      	add	r3, r1
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80081ae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	440a      	add	r2, r1
 80081b6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80081b8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	3304      	adds	r3, #4
 80081c2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	3304      	adds	r3, #4
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	4a06      	ldr	r2, [pc, #24]	@ (80081e8 <FDCAN_CopyMessageToRAM+0xf8>)
 80081d0:	5cd3      	ldrb	r3, [r2, r3]
 80081d2:	461a      	mov	r2, r3
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d3d6      	bcc.n	8008188 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	3724      	adds	r7, #36	@ 0x24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	0801287c 	.word	0x0801287c

080081ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b089      	sub	sp, #36	@ 0x24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081fa:	4b86      	ldr	r3, [pc, #536]	@ (8008414 <HAL_GPIO_Init+0x228>)
 80081fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081fe:	e18c      	b.n	800851a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	2101      	movs	r1, #1
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	4013      	ands	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 817e 	beq.w	8008514 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d005      	beq.n	8008230 <HAL_GPIO_Init+0x44>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d130      	bne.n	8008292 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	2203      	movs	r2, #3
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	4013      	ands	r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4313      	orrs	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008266:	2201      	movs	r2, #1
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4013      	ands	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	091b      	lsrs	r3, r3, #4
 800827c:	f003 0201 	and.w	r2, r3, #1
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	4313      	orrs	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d017      	beq.n	80082ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	2203      	movs	r2, #3
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	43db      	mvns	r3, r3
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	4013      	ands	r3, r2
 80082b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f003 0303 	and.w	r3, r3, #3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d123      	bne.n	8008322 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	08da      	lsrs	r2, r3, #3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3208      	adds	r2, #8
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	220f      	movs	r2, #15
 80082f2:	fa02 f303 	lsl.w	r3, r2, r3
 80082f6:	43db      	mvns	r3, r3
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4013      	ands	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	4313      	orrs	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	08da      	lsrs	r2, r3, #3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3208      	adds	r2, #8
 800831c:	69b9      	ldr	r1, [r7, #24]
 800831e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	2203      	movs	r2, #3
 800832e:	fa02 f303 	lsl.w	r3, r2, r3
 8008332:	43db      	mvns	r3, r3
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	4013      	ands	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f003 0203 	and.w	r2, r3, #3
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4313      	orrs	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80d8 	beq.w	8008514 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008364:	4b2c      	ldr	r3, [pc, #176]	@ (8008418 <HAL_GPIO_Init+0x22c>)
 8008366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800836a:	4a2b      	ldr	r2, [pc, #172]	@ (8008418 <HAL_GPIO_Init+0x22c>)
 800836c:	f043 0302 	orr.w	r3, r3, #2
 8008370:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008374:	4b28      	ldr	r3, [pc, #160]	@ (8008418 <HAL_GPIO_Init+0x22c>)
 8008376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008382:	4a26      	ldr	r2, [pc, #152]	@ (800841c <HAL_GPIO_Init+0x230>)
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	089b      	lsrs	r3, r3, #2
 8008388:	3302      	adds	r3, #2
 800838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	220f      	movs	r2, #15
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43db      	mvns	r3, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	4013      	ands	r3, r2
 80083a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <HAL_GPIO_Init+0x234>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d04a      	beq.n	8008444 <HAL_GPIO_Init+0x258>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008424 <HAL_GPIO_Init+0x238>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d02b      	beq.n	800840e <HAL_GPIO_Init+0x222>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <HAL_GPIO_Init+0x23c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d025      	beq.n	800840a <HAL_GPIO_Init+0x21e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a1a      	ldr	r2, [pc, #104]	@ (800842c <HAL_GPIO_Init+0x240>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d01f      	beq.n	8008406 <HAL_GPIO_Init+0x21a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a19      	ldr	r2, [pc, #100]	@ (8008430 <HAL_GPIO_Init+0x244>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d019      	beq.n	8008402 <HAL_GPIO_Init+0x216>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <HAL_GPIO_Init+0x248>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <HAL_GPIO_Init+0x212>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a17      	ldr	r2, [pc, #92]	@ (8008438 <HAL_GPIO_Init+0x24c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00d      	beq.n	80083fa <HAL_GPIO_Init+0x20e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a16      	ldr	r2, [pc, #88]	@ (800843c <HAL_GPIO_Init+0x250>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <HAL_GPIO_Init+0x20a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a15      	ldr	r2, [pc, #84]	@ (8008440 <HAL_GPIO_Init+0x254>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d101      	bne.n	80083f2 <HAL_GPIO_Init+0x206>
 80083ee:	2309      	movs	r3, #9
 80083f0:	e029      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 80083f2:	230a      	movs	r3, #10
 80083f4:	e027      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 80083f6:	2307      	movs	r3, #7
 80083f8:	e025      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 80083fa:	2306      	movs	r3, #6
 80083fc:	e023      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 80083fe:	2305      	movs	r3, #5
 8008400:	e021      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 8008402:	2304      	movs	r3, #4
 8008404:	e01f      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 8008406:	2303      	movs	r3, #3
 8008408:	e01d      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 800840a:	2302      	movs	r3, #2
 800840c:	e01b      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 800840e:	2301      	movs	r3, #1
 8008410:	e019      	b.n	8008446 <HAL_GPIO_Init+0x25a>
 8008412:	bf00      	nop
 8008414:	58000080 	.word	0x58000080
 8008418:	58024400 	.word	0x58024400
 800841c:	58000400 	.word	0x58000400
 8008420:	58020000 	.word	0x58020000
 8008424:	58020400 	.word	0x58020400
 8008428:	58020800 	.word	0x58020800
 800842c:	58020c00 	.word	0x58020c00
 8008430:	58021000 	.word	0x58021000
 8008434:	58021400 	.word	0x58021400
 8008438:	58021800 	.word	0x58021800
 800843c:	58021c00 	.word	0x58021c00
 8008440:	58022400 	.word	0x58022400
 8008444:	2300      	movs	r3, #0
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	f002 0203 	and.w	r2, r2, #3
 800844c:	0092      	lsls	r2, r2, #2
 800844e:	4093      	lsls	r3, r2
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	4313      	orrs	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008456:	4938      	ldr	r1, [pc, #224]	@ (8008538 <HAL_GPIO_Init+0x34c>)
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	3302      	adds	r3, #2
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	43db      	mvns	r3, r3
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	4013      	ands	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800848a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	43db      	mvns	r3, r3
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	4013      	ands	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	43db      	mvns	r3, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4013      	ands	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	43db      	mvns	r3, r3
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	4013      	ands	r3, r2
 80084f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	3301      	adds	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	fa22 f303 	lsr.w	r3, r2, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	f47f ae6b 	bne.w	8008200 <HAL_GPIO_Init+0x14>
  }
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	3724      	adds	r7, #36	@ 0x24
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	58000400 	.word	0x58000400

0800853c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691a      	ldr	r2, [r3, #16]
 800854c:	887b      	ldrh	r3, [r7, #2]
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008554:	2301      	movs	r3, #1
 8008556:	73fb      	strb	r3, [r7, #15]
 8008558:	e001      	b.n	800855e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
 8008578:	4613      	mov	r3, r2
 800857a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800857c:	787b      	ldrb	r3, [r7, #1]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008582:	887a      	ldrh	r2, [r7, #2]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008588:	e003      	b.n	8008592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	041a      	lsls	r2, r3, #16
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	619a      	str	r2, [r3, #24]
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80085a8:	4b19      	ldr	r3, [pc, #100]	@ (8008610 <HAL_PWREx_ConfigSupply+0x70>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d00a      	beq.n	80085ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085b4:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <HAL_PWREx_ConfigSupply+0x70>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d001      	beq.n	80085c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e01f      	b.n	8008606 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e01d      	b.n	8008606 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80085ca:	4b11      	ldr	r3, [pc, #68]	@ (8008610 <HAL_PWREx_ConfigSupply+0x70>)
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f023 0207 	bic.w	r2, r3, #7
 80085d2:	490f      	ldr	r1, [pc, #60]	@ (8008610 <HAL_PWREx_ConfigSupply+0x70>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80085da:	f7fa f949 	bl	8002870 <HAL_GetTick>
 80085de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085e0:	e009      	b.n	80085f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80085e2:	f7fa f945 	bl	8002870 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085f0:	d901      	bls.n	80085f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e007      	b.n	8008606 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <HAL_PWREx_ConfigSupply+0x70>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	d1ee      	bne.n	80085e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	58024800 	.word	0x58024800

08008614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08c      	sub	sp, #48	@ 0x30
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e3c8      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 8087 	beq.w	8008742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008634:	4b88      	ldr	r3, [pc, #544]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800863c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800863e:	4b86      	ldr	r3, [pc, #536]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	2b10      	cmp	r3, #16
 8008648:	d007      	beq.n	800865a <HAL_RCC_OscConfig+0x46>
 800864a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864c:	2b18      	cmp	r3, #24
 800864e:	d110      	bne.n	8008672 <HAL_RCC_OscConfig+0x5e>
 8008650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d10b      	bne.n	8008672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800865a:	4b7f      	ldr	r3, [pc, #508]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d06c      	beq.n	8008740 <HAL_RCC_OscConfig+0x12c>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d168      	bne.n	8008740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e3a2      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867a:	d106      	bne.n	800868a <HAL_RCC_OscConfig+0x76>
 800867c:	4b76      	ldr	r3, [pc, #472]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a75      	ldr	r2, [pc, #468]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	e02e      	b.n	80086e8 <HAL_RCC_OscConfig+0xd4>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10c      	bne.n	80086ac <HAL_RCC_OscConfig+0x98>
 8008692:	4b71      	ldr	r3, [pc, #452]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a70      	ldr	r2, [pc, #448]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	4b6e      	ldr	r3, [pc, #440]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a6d      	ldr	r2, [pc, #436]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e01d      	b.n	80086e8 <HAL_RCC_OscConfig+0xd4>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086b4:	d10c      	bne.n	80086d0 <HAL_RCC_OscConfig+0xbc>
 80086b6:	4b68      	ldr	r3, [pc, #416]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a67      	ldr	r2, [pc, #412]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	4b65      	ldr	r3, [pc, #404]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a64      	ldr	r2, [pc, #400]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e00b      	b.n	80086e8 <HAL_RCC_OscConfig+0xd4>
 80086d0:	4b61      	ldr	r3, [pc, #388]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a60      	ldr	r2, [pc, #384]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	4b5e      	ldr	r3, [pc, #376]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a5d      	ldr	r2, [pc, #372]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80086e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d013      	beq.n	8008718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f0:	f7fa f8be 	bl	8002870 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f8:	f7fa f8ba 	bl	8002870 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b64      	cmp	r3, #100	@ 0x64
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e356      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800870a:	4b53      	ldr	r3, [pc, #332]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0xe4>
 8008716:	e014      	b.n	8008742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fa f8aa 	bl	8002870 <HAL_GetTick>
 800871c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008720:	f7fa f8a6 	bl	8002870 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b64      	cmp	r3, #100	@ 0x64
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e342      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008732:	4b49      	ldr	r3, [pc, #292]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x10c>
 800873e:	e000      	b.n	8008742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 808c 	beq.w	8008868 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008750:	4b41      	ldr	r3, [pc, #260]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800875a:	4b3f      	ldr	r3, [pc, #252]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800875c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <HAL_RCC_OscConfig+0x162>
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	2b18      	cmp	r3, #24
 800876a:	d137      	bne.n	80087dc <HAL_RCC_OscConfig+0x1c8>
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d132      	bne.n	80087dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008776:	4b38      	ldr	r3, [pc, #224]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_RCC_OscConfig+0x17a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e314      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800878e:	4b32      	ldr	r3, [pc, #200]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f023 0219 	bic.w	r2, r3, #25
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	492f      	ldr	r1, [pc, #188]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800879c:	4313      	orrs	r3, r2
 800879e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fa f866 	bl	8002870 <HAL_GetTick>
 80087a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a8:	f7fa f862 	bl	8002870 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e2fe      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087ba:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c6:	4b24      	ldr	r3, [pc, #144]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	061b      	lsls	r3, r3, #24
 80087d4:	4920      	ldr	r1, [pc, #128]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087da:	e045      	b.n	8008868 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d026      	beq.n	8008832 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f023 0219 	bic.w	r2, r3, #25
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	4919      	ldr	r1, [pc, #100]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f6:	f7fa f83b 	bl	8002870 <HAL_GetTick>
 80087fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087fe:	f7fa f837 	bl	8002870 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e2d3      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008810:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f0      	beq.n	80087fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881c:	4b0e      	ldr	r3, [pc, #56]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	061b      	lsls	r3, r3, #24
 800882a:	490b      	ldr	r1, [pc, #44]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 800882c:	4313      	orrs	r3, r2
 800882e:	604b      	str	r3, [r1, #4]
 8008830:	e01a      	b.n	8008868 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008832:	4b09      	ldr	r3, [pc, #36]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a08      	ldr	r2, [pc, #32]	@ (8008858 <HAL_RCC_OscConfig+0x244>)
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883e:	f7fa f817 	bl	8002870 <HAL_GetTick>
 8008842:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008844:	e00a      	b.n	800885c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008846:	f7fa f813 	bl	8002870 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d903      	bls.n	800885c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e2af      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
 8008858:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800885c:	4b96      	ldr	r3, [pc, #600]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1ee      	bne.n	8008846 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d06a      	beq.n	800894a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008874:	4b90      	ldr	r3, [pc, #576]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800887c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800887e:	4b8e      	ldr	r3, [pc, #568]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008882:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b08      	cmp	r3, #8
 8008888:	d007      	beq.n	800889a <HAL_RCC_OscConfig+0x286>
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b18      	cmp	r3, #24
 800888e:	d11b      	bne.n	80088c8 <HAL_RCC_OscConfig+0x2b4>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b01      	cmp	r3, #1
 8008898:	d116      	bne.n	80088c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800889a:	4b87      	ldr	r3, [pc, #540]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_RCC_OscConfig+0x29e>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	2b80      	cmp	r3, #128	@ 0x80
 80088ac:	d001      	beq.n	80088b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e282      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088b2:	4b81      	ldr	r3, [pc, #516]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	061b      	lsls	r3, r3, #24
 80088c0:	497d      	ldr	r1, [pc, #500]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088c6:	e040      	b.n	800894a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d023      	beq.n	8008918 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088d0:	4b79      	ldr	r3, [pc, #484]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a78      	ldr	r2, [pc, #480]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80088d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7f9 ffc8 	bl	8002870 <HAL_GetTick>
 80088e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088e4:	f7f9 ffc4 	bl	8002870 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e260      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088f6:	4b70      	ldr	r3, [pc, #448]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008902:	4b6d      	ldr	r3, [pc, #436]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	061b      	lsls	r3, r3, #24
 8008910:	4969      	ldr	r1, [pc, #420]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008912:	4313      	orrs	r3, r2
 8008914:	60cb      	str	r3, [r1, #12]
 8008916:	e018      	b.n	800894a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008918:	4b67      	ldr	r3, [pc, #412]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a66      	ldr	r2, [pc, #408]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 800891e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7f9 ffa4 	bl	8002870 <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800892c:	f7f9 ffa0 	bl	8002870 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b02      	cmp	r3, #2
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e23c      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800893e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d036      	beq.n	80089c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d019      	beq.n	8008992 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800895e:	4b56      	ldr	r3, [pc, #344]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008962:	4a55      	ldr	r2, [pc, #340]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008964:	f043 0301 	orr.w	r3, r3, #1
 8008968:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896a:	f7f9 ff81 	bl	8002870 <HAL_GetTick>
 800896e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008970:	e008      	b.n	8008984 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008972:	f7f9 ff7d 	bl	8002870 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e219      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008984:	4b4c      	ldr	r3, [pc, #304]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d0f0      	beq.n	8008972 <HAL_RCC_OscConfig+0x35e>
 8008990:	e018      	b.n	80089c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008992:	4b49      	ldr	r3, [pc, #292]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008996:	4a48      	ldr	r2, [pc, #288]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899e:	f7f9 ff67 	bl	8002870 <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089a6:	f7f9 ff63 	bl	8002870 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e1ff      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80089b8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80089ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d036      	beq.n	8008a3e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d019      	beq.n	8008a0c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089d8:	4b37      	ldr	r3, [pc, #220]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a36      	ldr	r2, [pc, #216]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 80089de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80089e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089e4:	f7f9 ff44 	bl	8002870 <HAL_GetTick>
 80089e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089ea:	e008      	b.n	80089fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089ec:	f7f9 ff40 	bl	8002870 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e1dc      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089fe:	4b2e      	ldr	r3, [pc, #184]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCC_OscConfig+0x3d8>
 8008a0a:	e018      	b.n	8008a3e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a29      	ldr	r2, [pc, #164]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a18:	f7f9 ff2a 	bl	8002870 <HAL_GetTick>
 8008a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a20:	f7f9 ff26 	bl	8002870 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e1c2      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a32:	4b21      	ldr	r3, [pc, #132]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 8086 	beq.w	8008b58 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008abc <HAL_RCC_OscConfig+0x4a8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <HAL_RCC_OscConfig+0x4a8>)
 8008a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a58:	f7f9 ff0a 	bl	8002870 <HAL_GetTick>
 8008a5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a60:	f7f9 ff06 	bl	8002870 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b64      	cmp	r3, #100	@ 0x64
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e1a2      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <HAL_RCC_OscConfig+0x4a8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0f0      	beq.n	8008a60 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d106      	bne.n	8008a94 <HAL_RCC_OscConfig+0x480>
 8008a86:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a92:	e032      	b.n	8008afa <HAL_RCC_OscConfig+0x4e6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d111      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4ac>
 8008a9c:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aa0:	4a05      	ldr	r2, [pc, #20]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008aa2:	f023 0301 	bic.w	r3, r3, #1
 8008aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aa8:	4b03      	ldr	r3, [pc, #12]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aac:	4a02      	ldr	r2, [pc, #8]	@ (8008ab8 <HAL_RCC_OscConfig+0x4a4>)
 8008aae:	f023 0304 	bic.w	r3, r3, #4
 8008ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ab4:	e021      	b.n	8008afa <HAL_RCC_OscConfig+0x4e6>
 8008ab6:	bf00      	nop
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	58024800 	.word	0x58024800
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	d10c      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x4ce>
 8008ac8:	4b83      	ldr	r3, [pc, #524]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008acc:	4a82      	ldr	r2, [pc, #520]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ace:	f043 0304 	orr.w	r3, r3, #4
 8008ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ad4:	4b80      	ldr	r3, [pc, #512]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ae0:	e00b      	b.n	8008afa <HAL_RCC_OscConfig+0x4e6>
 8008ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aee:	4b7a      	ldr	r3, [pc, #488]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af2:	4a79      	ldr	r2, [pc, #484]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008af4:	f023 0304 	bic.w	r3, r3, #4
 8008af8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d015      	beq.n	8008b2e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b02:	f7f9 feb5 	bl	8002870 <HAL_GetTick>
 8008b06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b0a:	f7f9 feb1 	bl	8002870 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e14b      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b20:	4b6d      	ldr	r3, [pc, #436]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0ee      	beq.n	8008b0a <HAL_RCC_OscConfig+0x4f6>
 8008b2c:	e014      	b.n	8008b58 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2e:	f7f9 fe9f 	bl	8002870 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b34:	e00a      	b.n	8008b4c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b36:	f7f9 fe9b 	bl	8002870 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d901      	bls.n	8008b4c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e135      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b4c:	4b62      	ldr	r3, [pc, #392]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1ee      	bne.n	8008b36 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 812a 	beq.w	8008db6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b62:	4b5d      	ldr	r3, [pc, #372]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b6a:	2b18      	cmp	r3, #24
 8008b6c:	f000 80ba 	beq.w	8008ce4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	f040 8095 	bne.w	8008ca4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b7a:	4b57      	ldr	r3, [pc, #348]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a56      	ldr	r2, [pc, #344]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b86:	f7f9 fe73 	bl	8002870 <HAL_GetTick>
 8008b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b8e:	f7f9 fe6f 	bl	8002870 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e10b      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f0      	bne.n	8008b8e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bac:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008bae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8008cdc <HAL_RCC_OscConfig+0x6c8>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008bbc:	0112      	lsls	r2, r2, #4
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	4945      	ldr	r1, [pc, #276]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	025b      	lsls	r3, r3, #9
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	3b01      	subs	r3, #1
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008bf6:	4938      	ldr	r1, [pc, #224]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008bfc:	4b36      	ldr	r3, [pc, #216]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c00:	4a35      	ldr	r2, [pc, #212]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c08:	4b33      	ldr	r3, [pc, #204]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c0c:	4b34      	ldr	r3, [pc, #208]	@ (8008ce0 <HAL_RCC_OscConfig+0x6cc>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c14:	00d2      	lsls	r2, r2, #3
 8008c16:	4930      	ldr	r1, [pc, #192]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c20:	f023 020c 	bic.w	r2, r3, #12
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c28:	492b      	ldr	r1, [pc, #172]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	f023 0202 	bic.w	r2, r3, #2
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3a:	4927      	ldr	r1, [pc, #156]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c40:	4b25      	ldr	r3, [pc, #148]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	4a24      	ldr	r2, [pc, #144]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4c:	4b22      	ldr	r3, [pc, #136]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	4a21      	ldr	r2, [pc, #132]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c58:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c64:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c68:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c70:	4b19      	ldr	r3, [pc, #100]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a18      	ldr	r2, [pc, #96]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c7c:	f7f9 fdf8 	bl	8002870 <HAL_GetTick>
 8008c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c84:	f7f9 fdf4 	bl	8002870 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e090      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c96:	4b10      	ldr	r3, [pc, #64]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f0      	beq.n	8008c84 <HAL_RCC_OscConfig+0x670>
 8008ca2:	e088      	b.n	8008db6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb0:	f7f9 fdde 	bl	8002870 <HAL_GetTick>
 8008cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb8:	f7f9 fdda 	bl	8002870 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e076      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cca:	4b03      	ldr	r3, [pc, #12]	@ (8008cd8 <HAL_RCC_OscConfig+0x6c4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f0      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x6a4>
 8008cd6:	e06e      	b.n	8008db6 <HAL_RCC_OscConfig+0x7a2>
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	fffffc0c 	.word	0xfffffc0c
 8008ce0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ce4:	4b36      	ldr	r3, [pc, #216]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008cea:	4b35      	ldr	r3, [pc, #212]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d031      	beq.n	8008d5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f003 0203 	and.w	r2, r3, #3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d12a      	bne.n	8008d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	091b      	lsrs	r3, r3, #4
 8008d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d122      	bne.n	8008d5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d11a      	bne.n	8008d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	0a5b      	lsrs	r3, r3, #9
 8008d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d111      	bne.n	8008d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d108      	bne.n	8008d5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	0e1b      	lsrs	r3, r3, #24
 8008d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d001      	beq.n	8008d60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e02b      	b.n	8008db8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d60:	4b17      	ldr	r3, [pc, #92]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d64:	08db      	lsrs	r3, r3, #3
 8008d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d01f      	beq.n	8008db6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d76:	4b12      	ldr	r3, [pc, #72]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7a:	4a11      	ldr	r2, [pc, #68]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d82:	f7f9 fd75 	bl	8002870 <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d88:	bf00      	nop
 8008d8a:	f7f9 fd71 	bl	8002870 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d0f9      	beq.n	8008d8a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d96:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc4 <HAL_RCC_OscConfig+0x7b0>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008da2:	00d2      	lsls	r2, r2, #3
 8008da4:	4906      	ldr	r1, [pc, #24]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008daa:	4b05      	ldr	r3, [pc, #20]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dae:	4a04      	ldr	r2, [pc, #16]	@ (8008dc0 <HAL_RCC_OscConfig+0x7ac>)
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3730      	adds	r7, #48	@ 0x30
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	ffff0007 	.word	0xffff0007

08008dc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e19c      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d910      	bls.n	8008e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dea:	4b87      	ldr	r3, [pc, #540]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f023 020f 	bic.w	r2, r3, #15
 8008df2:	4985      	ldr	r1, [pc, #532]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfa:	4b83      	ldr	r3, [pc, #524]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e184      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d010      	beq.n	8008e3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d908      	bls.n	8008e3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e28:	4b78      	ldr	r3, [pc, #480]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	4975      	ldr	r1, [pc, #468]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d010      	beq.n	8008e68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	4b70      	ldr	r3, [pc, #448]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d908      	bls.n	8008e68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e56:	4b6d      	ldr	r3, [pc, #436]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	496a      	ldr	r1, [pc, #424]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d010      	beq.n	8008e96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	4b64      	ldr	r3, [pc, #400]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d908      	bls.n	8008e96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e84:	4b61      	ldr	r3, [pc, #388]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	495e      	ldr	r1, [pc, #376]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d010      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69da      	ldr	r2, [r3, #28]
 8008ea6:	4b59      	ldr	r3, [pc, #356]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d908      	bls.n	8008ec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008eb2:	4b56      	ldr	r3, [pc, #344]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	4953      	ldr	r1, [pc, #332]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d010      	beq.n	8008ef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d908      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f023 020f 	bic.w	r2, r3, #15
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	4947      	ldr	r1, [pc, #284]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d055      	beq.n	8008faa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008efe:	4b43      	ldr	r3, [pc, #268]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	4940      	ldr	r1, [pc, #256]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d107      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f18:	4b3c      	ldr	r3, [pc, #240]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d121      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0f6      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f30:	4b36      	ldr	r3, [pc, #216]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d115      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0ea      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d107      	bne.n	8008f58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f48:	4b30      	ldr	r3, [pc, #192]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e0de      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f58:	4b2c      	ldr	r3, [pc, #176]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0d6      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f68:	4b28      	ldr	r3, [pc, #160]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f023 0207 	bic.w	r2, r3, #7
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4925      	ldr	r1, [pc, #148]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7a:	f7f9 fc79 	bl	8002870 <HAL_GetTick>
 8008f7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f80:	e00a      	b.n	8008f98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f82:	f7f9 fc75 	bl	8002870 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e0be      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f98:	4b1c      	ldr	r3, [pc, #112]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d1eb      	bne.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d010      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	4b14      	ldr	r3, [pc, #80]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d208      	bcs.n	8008fd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fc6:	4b11      	ldr	r3, [pc, #68]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f023 020f 	bic.w	r2, r3, #15
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	490e      	ldr	r1, [pc, #56]	@ (800900c <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d214      	bcs.n	8009010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fe6:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f023 020f 	bic.w	r2, r3, #15
 8008fee:	4906      	ldr	r1, [pc, #24]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ff6:	4b04      	ldr	r3, [pc, #16]	@ (8009008 <HAL_RCC_ClockConfig+0x240>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d005      	beq.n	8009010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e086      	b.n	8009116 <HAL_RCC_ClockConfig+0x34e>
 8009008:	52002000 	.word	0x52002000
 800900c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	4b3f      	ldr	r3, [pc, #252]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009028:	429a      	cmp	r2, r3
 800902a:	d208      	bcs.n	800903e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800902c:	4b3c      	ldr	r3, [pc, #240]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	4939      	ldr	r1, [pc, #228]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 800903a:	4313      	orrs	r3, r2
 800903c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d010      	beq.n	800906c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695a      	ldr	r2, [r3, #20]
 800904e:	4b34      	ldr	r3, [pc, #208]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009056:	429a      	cmp	r2, r3
 8009058:	d208      	bcs.n	800906c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800905a:	4b31      	ldr	r3, [pc, #196]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	492e      	ldr	r1, [pc, #184]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 8009068:	4313      	orrs	r3, r2
 800906a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b00      	cmp	r3, #0
 8009076:	d010      	beq.n	800909a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	4b28      	ldr	r3, [pc, #160]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009084:	429a      	cmp	r2, r3
 8009086:	d208      	bcs.n	800909a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009088:	4b25      	ldr	r3, [pc, #148]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	4922      	ldr	r1, [pc, #136]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 8009096:	4313      	orrs	r3, r2
 8009098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69da      	ldr	r2, [r3, #28]
 80090aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d208      	bcs.n	80090c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	4917      	ldr	r1, [pc, #92]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090c8:	f000 f834 	bl	8009134 <HAL_RCC_GetSysClockFreq>
 80090cc:	4602      	mov	r2, r0
 80090ce:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	0a1b      	lsrs	r3, r3, #8
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	4912      	ldr	r1, [pc, #72]	@ (8009124 <HAL_RCC_ClockConfig+0x35c>)
 80090da:	5ccb      	ldrb	r3, [r1, r3]
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	fa22 f303 	lsr.w	r3, r2, r3
 80090e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009120 <HAL_RCC_ClockConfig+0x358>)
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <HAL_RCC_ClockConfig+0x35c>)
 80090f0:	5cd3      	ldrb	r3, [r2, r3]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	fa22 f303 	lsr.w	r3, r2, r3
 80090fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009128 <HAL_RCC_ClockConfig+0x360>)
 80090fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009100:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <HAL_RCC_ClockConfig+0x364>)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009106:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <HAL_RCC_ClockConfig+0x368>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f7f9 fb66 	bl	80027dc <HAL_InitTick>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	58024400 	.word	0x58024400
 8009124:	08012864 	.word	0x08012864
 8009128:	2400000c 	.word	0x2400000c
 800912c:	24000008 	.word	0x24000008
 8009130:	24000010 	.word	0x24000010

08009134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009134:	b480      	push	{r7}
 8009136:	b089      	sub	sp, #36	@ 0x24
 8009138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800913a:	4bb3      	ldr	r3, [pc, #716]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009142:	2b18      	cmp	r3, #24
 8009144:	f200 8155 	bhi.w	80093f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009148:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <HAL_RCC_GetSysClockFreq+0x1c>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	080091b5 	.word	0x080091b5
 8009154:	080093f3 	.word	0x080093f3
 8009158:	080093f3 	.word	0x080093f3
 800915c:	080093f3 	.word	0x080093f3
 8009160:	080093f3 	.word	0x080093f3
 8009164:	080093f3 	.word	0x080093f3
 8009168:	080093f3 	.word	0x080093f3
 800916c:	080093f3 	.word	0x080093f3
 8009170:	080091db 	.word	0x080091db
 8009174:	080093f3 	.word	0x080093f3
 8009178:	080093f3 	.word	0x080093f3
 800917c:	080093f3 	.word	0x080093f3
 8009180:	080093f3 	.word	0x080093f3
 8009184:	080093f3 	.word	0x080093f3
 8009188:	080093f3 	.word	0x080093f3
 800918c:	080093f3 	.word	0x080093f3
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080093f3 	.word	0x080093f3
 8009198:	080093f3 	.word	0x080093f3
 800919c:	080093f3 	.word	0x080093f3
 80091a0:	080093f3 	.word	0x080093f3
 80091a4:	080093f3 	.word	0x080093f3
 80091a8:	080093f3 	.word	0x080093f3
 80091ac:	080093f3 	.word	0x080093f3
 80091b0:	080091e7 	.word	0x080091e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b4:	4b94      	ldr	r3, [pc, #592]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d009      	beq.n	80091d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091c0:	4b91      	ldr	r3, [pc, #580]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	08db      	lsrs	r3, r3, #3
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	4a90      	ldr	r2, [pc, #576]	@ (800940c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091cc:	fa22 f303 	lsr.w	r3, r2, r3
 80091d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80091d2:	e111      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80091d4:	4b8d      	ldr	r3, [pc, #564]	@ (800940c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091d6:	61bb      	str	r3, [r7, #24]
      break;
 80091d8:	e10e      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80091da:	4b8d      	ldr	r3, [pc, #564]	@ (8009410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091dc:	61bb      	str	r3, [r7, #24]
      break;
 80091de:	e10b      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80091e0:	4b8c      	ldr	r3, [pc, #560]	@ (8009414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80091e2:	61bb      	str	r3, [r7, #24]
      break;
 80091e4:	e108      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091e6:	4b88      	ldr	r3, [pc, #544]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80091f0:	4b85      	ldr	r3, [pc, #532]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f4:	091b      	lsrs	r3, r3, #4
 80091f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80091fc:	4b82      	ldr	r3, [pc, #520]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009206:	4b80      	ldr	r3, [pc, #512]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800920a:	08db      	lsrs	r3, r3, #3
 800920c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	fb02 f303 	mul.w	r3, r2, r3
 8009216:	ee07 3a90 	vmov	s15, r3
 800921a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80e1 	beq.w	80093ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b02      	cmp	r3, #2
 800922e:	f000 8083 	beq.w	8009338 <HAL_RCC_GetSysClockFreq+0x204>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b02      	cmp	r3, #2
 8009236:	f200 80a1 	bhi.w	800937c <HAL_RCC_GetSysClockFreq+0x248>
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <HAL_RCC_GetSysClockFreq+0x114>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d056      	beq.n	80092f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009246:	e099      	b.n	800937c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009248:	4b6f      	ldr	r3, [pc, #444]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0320 	and.w	r3, r3, #32
 8009250:	2b00      	cmp	r3, #0
 8009252:	d02d      	beq.n	80092b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009254:	4b6c      	ldr	r3, [pc, #432]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	4a6b      	ldr	r2, [pc, #428]	@ (800940c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009260:	fa22 f303 	lsr.w	r3, r2, r3
 8009264:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927e:	4b62      	ldr	r3, [pc, #392]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009292:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800929a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80092ae:	e087      	b.n	80093c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800941c <HAL_RCC_GetSysClockFreq+0x2e8>
 80092be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092c2:	4b51      	ldr	r3, [pc, #324]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80092d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092f2:	e065      	b.n	80093c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009420 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009306:	4b40      	ldr	r3, [pc, #256]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009316:	ed97 6a02 	vldr	s12, [r7, #8]
 800931a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800931e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800932a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009336:	e043      	b.n	80093c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009342:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009424 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934a:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935a:	ed97 6a02 	vldr	s12, [r7, #8]
 800935e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800936e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800937a:	e021      	b.n	80093c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800938a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938e:	4b1e      	ldr	r3, [pc, #120]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939e:	ed97 6a02 	vldr	s12, [r7, #8]
 80093a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80093c0:	4b11      	ldr	r3, [pc, #68]	@ (8009408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c4:	0a5b      	lsrs	r3, r3, #9
 80093c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ca:	3301      	adds	r3, #1
 80093cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e4:	ee17 3a90 	vmov	r3, s15
 80093e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80093ea:	e005      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61bb      	str	r3, [r7, #24]
      break;
 80093f0:	e002      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80093f2:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093f4:	61bb      	str	r3, [r7, #24]
      break;
 80093f6:	bf00      	nop
  }

  return sysclockfreq;
 80093f8:	69bb      	ldr	r3, [r7, #24]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3724      	adds	r7, #36	@ 0x24
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	58024400 	.word	0x58024400
 800940c:	03d09000 	.word	0x03d09000
 8009410:	003d0900 	.word	0x003d0900
 8009414:	016e3600 	.word	0x016e3600
 8009418:	46000000 	.word	0x46000000
 800941c:	4c742400 	.word	0x4c742400
 8009420:	4a742400 	.word	0x4a742400
 8009424:	4bb71b00 	.word	0x4bb71b00

08009428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800942e:	f7ff fe81 	bl	8009134 <HAL_RCC_GetSysClockFreq>
 8009432:	4602      	mov	r2, r0
 8009434:	4b10      	ldr	r3, [pc, #64]	@ (8009478 <HAL_RCC_GetHCLKFreq+0x50>)
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	0a1b      	lsrs	r3, r3, #8
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	490f      	ldr	r1, [pc, #60]	@ (800947c <HAL_RCC_GetHCLKFreq+0x54>)
 8009440:	5ccb      	ldrb	r3, [r1, r3]
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	fa22 f303 	lsr.w	r3, r2, r3
 800944a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800944c:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <HAL_RCC_GetHCLKFreq+0x50>)
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	4a09      	ldr	r2, [pc, #36]	@ (800947c <HAL_RCC_GetHCLKFreq+0x54>)
 8009456:	5cd3      	ldrb	r3, [r2, r3]
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	fa22 f303 	lsr.w	r3, r2, r3
 8009462:	4a07      	ldr	r2, [pc, #28]	@ (8009480 <HAL_RCC_GetHCLKFreq+0x58>)
 8009464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009466:	4a07      	ldr	r2, [pc, #28]	@ (8009484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800946c:	4b04      	ldr	r3, [pc, #16]	@ (8009480 <HAL_RCC_GetHCLKFreq+0x58>)
 800946e:	681b      	ldr	r3, [r3, #0]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	58024400 	.word	0x58024400
 800947c:	08012864 	.word	0x08012864
 8009480:	2400000c 	.word	0x2400000c
 8009484:	24000008 	.word	0x24000008

08009488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800948c:	f7ff ffcc 	bl	8009428 <HAL_RCC_GetHCLKFreq>
 8009490:	4602      	mov	r2, r0
 8009492:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	091b      	lsrs	r3, r3, #4
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	4904      	ldr	r1, [pc, #16]	@ (80094b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800949e:	5ccb      	ldrb	r3, [r1, r3]
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	58024400 	.word	0x58024400
 80094b0:	08012864 	.word	0x08012864

080094b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80094b8:	f7ff ffb6 	bl	8009428 <HAL_RCC_GetHCLKFreq>
 80094bc:	4602      	mov	r2, r0
 80094be:	4b06      	ldr	r3, [pc, #24]	@ (80094d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	4904      	ldr	r1, [pc, #16]	@ (80094dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80094ca:	5ccb      	ldrb	r3, [r1, r3]
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400
 80094dc:	08012864 	.word	0x08012864

080094e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094e4:	b0c6      	sub	sp, #280	@ 0x118
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009504:	2500      	movs	r5, #0
 8009506:	ea54 0305 	orrs.w	r3, r4, r5
 800950a:	d049      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800950c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009516:	d02f      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009518:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800951c:	d828      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800951e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009522:	d01a      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009528:	d822      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800952e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009532:	d007      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009534:	e01c      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009536:	4bab      	ldr	r3, [pc, #684]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	4aaa      	ldr	r2, [pc, #680]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800953c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009542:	e01a      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009548:	3308      	adds	r3, #8
 800954a:	2102      	movs	r1, #2
 800954c:	4618      	mov	r0, r3
 800954e:	f002 fa49 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009558:	e00f      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800955a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800955e:	3328      	adds	r3, #40	@ 0x28
 8009560:	2102      	movs	r1, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f002 faf0 	bl	800bb48 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800956e:	e004      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009582:	4b98      	ldr	r3, [pc, #608]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009586:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800958a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009590:	4a94      	ldr	r2, [pc, #592]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009592:	430b      	orrs	r3, r1
 8009594:	6513      	str	r3, [r2, #80]	@ 0x50
 8009596:	e003      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800959c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80095ac:	f04f 0900 	mov.w	r9, #0
 80095b0:	ea58 0309 	orrs.w	r3, r8, r9
 80095b4:	d047      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80095b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d82a      	bhi.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80095c0:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80095c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c6:	bf00      	nop
 80095c8:	080095dd 	.word	0x080095dd
 80095cc:	080095eb 	.word	0x080095eb
 80095d0:	08009601 	.word	0x08009601
 80095d4:	0800961f 	.word	0x0800961f
 80095d8:	0800961f 	.word	0x0800961f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095dc:	4b81      	ldr	r3, [pc, #516]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e0:	4a80      	ldr	r2, [pc, #512]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095e8:	e01a      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ee:	3308      	adds	r3, #8
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f002 f9f6 	bl	800b9e4 <RCCEx_PLL2_Config>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095fe:	e00f      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009604:	3328      	adds	r3, #40	@ 0x28
 8009606:	2100      	movs	r1, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f002 fa9d 	bl	800bb48 <RCCEx_PLL3_Config>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009614:	e004      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800961c:	e000      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800961e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009628:	4b6e      	ldr	r3, [pc, #440]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800962a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800962c:	f023 0107 	bic.w	r1, r3, #7
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009636:	4a6b      	ldr	r2, [pc, #428]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009638:	430b      	orrs	r3, r1
 800963a:	6513      	str	r3, [r2, #80]	@ 0x50
 800963c:	e003      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009642:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009652:	f04f 0b00 	mov.w	fp, #0
 8009656:	ea5a 030b 	orrs.w	r3, sl, fp
 800965a:	d05b      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009664:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009668:	d03b      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800966a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800966e:	d834      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009670:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009674:	d037      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800967a:	d82e      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800967c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009680:	d033      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009682:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009686:	d828      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800968c:	d01a      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800968e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009692:	d822      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800969c:	d007      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800969e:	e01c      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a0:	4b50      	ldr	r3, [pc, #320]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	4a4f      	ldr	r2, [pc, #316]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096ac:	e01e      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b2:	3308      	adds	r3, #8
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f002 f994 	bl	800b9e4 <RCCEx_PLL2_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096c2:	e013      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c8:	3328      	adds	r3, #40	@ 0x28
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f002 fa3b 	bl	800bb48 <RCCEx_PLL3_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096d8:	e008      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096e0:	e004      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80096ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80096f4:	4b3b      	ldr	r3, [pc, #236]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80096fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009704:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009706:	430b      	orrs	r3, r1
 8009708:	6593      	str	r3, [r2, #88]	@ 0x58
 800970a:	e003      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009724:	2300      	movs	r3, #0
 8009726:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800972a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800972e:	460b      	mov	r3, r1
 8009730:	4313      	orrs	r3, r2
 8009732:	d05d      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009738:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800973c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009740:	d03b      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009742:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009746:	d834      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800974c:	d037      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800974e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009752:	d82e      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009754:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009758:	d033      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800975a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800975e:	d828      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009764:	d01a      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800976a:	d822      	bhi.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009774:	d007      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009776:	e01c      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009778:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	4a19      	ldr	r2, [pc, #100]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800977e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009784:	e01e      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978a:	3308      	adds	r3, #8
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f002 f928 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800979a:	e013      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	3328      	adds	r3, #40	@ 0x28
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f002 f9cf 	bl	800bb48 <RCCEx_PLL3_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097b0:	e008      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097b8:	e004      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80097ba:	bf00      	nop
 80097bc:	e002      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80097c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10d      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80097dc:	4a01      	ldr	r2, [pc, #4]	@ (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80097de:	430b      	orrs	r3, r1
 80097e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80097e2:	e005      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80097e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80097fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009800:	2300      	movs	r3, #0
 8009802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009806:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800980a:	460b      	mov	r3, r1
 800980c:	4313      	orrs	r3, r2
 800980e:	d03a      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009816:	2b30      	cmp	r3, #48	@ 0x30
 8009818:	d01f      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800981a:	2b30      	cmp	r3, #48	@ 0x30
 800981c:	d819      	bhi.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d00c      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009822:	2b20      	cmp	r3, #32
 8009824:	d815      	bhi.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d019      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800982a:	2b10      	cmp	r3, #16
 800982c:	d111      	bne.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982e:	4baa      	ldr	r3, [pc, #680]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	4aa9      	ldr	r2, [pc, #676]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800983a:	e011      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009840:	3308      	adds	r3, #8
 8009842:	2102      	movs	r1, #2
 8009844:	4618      	mov	r0, r3
 8009846:	f002 f8cd 	bl	800b9e4 <RCCEx_PLL2_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009850:	e006      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009858:	e002      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800985a:	bf00      	nop
 800985c:	e000      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800985e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009868:	4b9b      	ldr	r3, [pc, #620]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800986a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009876:	4a98      	ldr	r2, [pc, #608]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009878:	430b      	orrs	r3, r1
 800987a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800987c:	e003      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009896:	2300      	movs	r3, #0
 8009898:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800989c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80098a0:	460b      	mov	r3, r1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d051      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80098a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b0:	d035      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b6:	d82e      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80098b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098bc:	d031      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80098be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c2:	d828      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80098c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098c8:	d01a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ce:	d822      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098d8:	d007      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80098da:	e01c      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4b7e      	ldr	r3, [pc, #504]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	4a7d      	ldr	r2, [pc, #500]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098e8:	e01c      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ee:	3308      	adds	r3, #8
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f002 f876 	bl	800b9e4 <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80098fe:	e011      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009904:	3328      	adds	r3, #40	@ 0x28
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f002 f91d 	bl	800bb48 <RCCEx_PLL3_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009914:	e006      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800992c:	4b6a      	ldr	r3, [pc, #424]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800992e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009930:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800993a:	4a67      	ldr	r2, [pc, #412]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800993c:	430b      	orrs	r3, r1
 800993e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009940:	e003      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009956:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800995a:	2300      	movs	r3, #0
 800995c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009960:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009964:	460b      	mov	r3, r1
 8009966:	4313      	orrs	r3, r2
 8009968:	d053      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009974:	d033      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009976:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800997a:	d82c      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800997c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009980:	d02f      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009986:	d826      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800998c:	d02b      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800998e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009992:	d820      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009998:	d012      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800999a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999e:	d81a      	bhi.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d022      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80099a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a8:	d115      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	3308      	adds	r3, #8
 80099b0:	2101      	movs	r1, #1
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 f816 	bl	800b9e4 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099be:	e015      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c4:	3328      	adds	r3, #40	@ 0x28
 80099c6:	2101      	movs	r1, #1
 80099c8:	4618      	mov	r0, r3
 80099ca:	f002 f8bd 	bl	800bb48 <RCCEx_PLL3_Config>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099d4:	e00a      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099dc:	e006      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80099de:	bf00      	nop
 80099e0:	e004      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80099e2:	bf00      	nop
 80099e4:	e002      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80099f4:	4b38      	ldr	r3, [pc, #224]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80099fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a02:	4a35      	ldr	r2, [pc, #212]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	d058      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a3e:	d033      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a44:	d82c      	bhi.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d02f      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a50:	d826      	bhi.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a56:	d02b      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a5c:	d820      	bhi.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a62:	d012      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a68:	d81a      	bhi.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d022      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a72:	d115      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	3308      	adds	r3, #8
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 ffb1 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a88:	e015      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8e:	3328      	adds	r3, #40	@ 0x28
 8009a90:	2101      	movs	r1, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f002 f858 	bl	800bb48 <RCCEx_PLL3_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a9e:	e00a      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009aa6:	e006      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009aa8:	bf00      	nop
 8009aaa:	e004      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009aac:	bf00      	nop
 8009aae:	e002      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ab0:	bf00      	nop
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10e      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009abe:	4b06      	ldr	r3, [pc, #24]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ace:	4a02      	ldr	r2, [pc, #8]	@ (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ad4:	e006      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009ad6:	bf00      	nop
 8009ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009af4:	2300      	movs	r3, #0
 8009af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009afa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4313      	orrs	r3, r2
 8009b02:	d037      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b0e:	d00e      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b14:	d816      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d018      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b1e:	d111      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b20:	4bc4      	ldr	r3, [pc, #784]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	4ac3      	ldr	r2, [pc, #780]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b2c:	e00f      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b32:	3308      	adds	r3, #8
 8009b34:	2101      	movs	r1, #1
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 ff54 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b42:	e004      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b56:	4bb7      	ldr	r3, [pc, #732]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b64:	4ab3      	ldr	r2, [pc, #716]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b66:	430b      	orrs	r3, r1
 8009b68:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b84:	2300      	movs	r3, #0
 8009b86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4313      	orrs	r3, r2
 8009b92:	d039      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d81c      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009be1 	.word	0x08009be1
 8009ba8:	08009bb5 	.word	0x08009bb5
 8009bac:	08009bc3 	.word	0x08009bc3
 8009bb0:	08009be1 	.word	0x08009be1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4b9f      	ldr	r3, [pc, #636]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	4a9e      	ldr	r2, [pc, #632]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bc0:	e00f      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 ff0a 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bd6:	e004      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bde:	e000      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10a      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bea:	4b92      	ldr	r3, [pc, #584]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bee:	f023 0103 	bic.w	r1, r3, #3
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bfa:	430b      	orrs	r3, r1
 8009bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009bfe:	e003      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f000 8099 	beq.w	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c2a:	4b83      	ldr	r3, [pc, #524]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a82      	ldr	r2, [pc, #520]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c36:	f7f8 fe1b 	bl	8002870 <HAL_GetTick>
 8009c3a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c3e:	e00b      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c40:	f7f8 fe16 	bl	8002870 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b64      	cmp	r3, #100	@ 0x64
 8009c4e:	d903      	bls.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c56:	e005      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c58:	4b77      	ldr	r3, [pc, #476]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0ed      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d173      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c6c:	4b71      	ldr	r3, [pc, #452]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c78:	4053      	eors	r3, r2
 8009c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d015      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c82:	4b6c      	ldr	r3, [pc, #432]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c8e:	4b69      	ldr	r3, [pc, #420]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c92:	4a68      	ldr	r2, [pc, #416]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c9a:	4b66      	ldr	r3, [pc, #408]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c9e:	4a65      	ldr	r2, [pc, #404]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ca6:	4a63      	ldr	r2, [pc, #396]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cba:	d118      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cbc:	f7f8 fdd8 	bl	8002870 <HAL_GetTick>
 8009cc0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cc4:	e00d      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cc6:	f7f8 fdd3 	bl	8002870 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009cd0:	1ad2      	subs	r2, r2, r3
 8009cd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d903      	bls.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009ce0:	e005      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ce2:	4b54      	ldr	r3, [pc, #336]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0eb      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d129      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d06:	d10e      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009d08:	4b4a      	ldr	r3, [pc, #296]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d18:	091a      	lsrs	r2, r3, #4
 8009d1a:	4b48      	ldr	r3, [pc, #288]	@ (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	4a45      	ldr	r2, [pc, #276]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6113      	str	r3, [r2, #16]
 8009d24:	e005      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009d26:	4b43      	ldr	r3, [pc, #268]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	4a42      	ldr	r2, [pc, #264]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d30:	6113      	str	r3, [r2, #16]
 8009d32:	4b40      	ldr	r3, [pc, #256]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d42:	4a3c      	ldr	r2, [pc, #240]	@ (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d48:	e008      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009d52:	e003      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f002 0301 	and.w	r3, r2, #1
 8009d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d76:	460b      	mov	r3, r1
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	f000 808f 	beq.w	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d84:	2b28      	cmp	r3, #40	@ 0x28
 8009d86:	d871      	bhi.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009d88:	a201      	add	r2, pc, #4	@ (adr r2, 8009d90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009e75 	.word	0x08009e75
 8009d94:	08009e6d 	.word	0x08009e6d
 8009d98:	08009e6d 	.word	0x08009e6d
 8009d9c:	08009e6d 	.word	0x08009e6d
 8009da0:	08009e6d 	.word	0x08009e6d
 8009da4:	08009e6d 	.word	0x08009e6d
 8009da8:	08009e6d 	.word	0x08009e6d
 8009dac:	08009e6d 	.word	0x08009e6d
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e6d 	.word	0x08009e6d
 8009db8:	08009e6d 	.word	0x08009e6d
 8009dbc:	08009e6d 	.word	0x08009e6d
 8009dc0:	08009e6d 	.word	0x08009e6d
 8009dc4:	08009e6d 	.word	0x08009e6d
 8009dc8:	08009e6d 	.word	0x08009e6d
 8009dcc:	08009e6d 	.word	0x08009e6d
 8009dd0:	08009e57 	.word	0x08009e57
 8009dd4:	08009e6d 	.word	0x08009e6d
 8009dd8:	08009e6d 	.word	0x08009e6d
 8009ddc:	08009e6d 	.word	0x08009e6d
 8009de0:	08009e6d 	.word	0x08009e6d
 8009de4:	08009e6d 	.word	0x08009e6d
 8009de8:	08009e6d 	.word	0x08009e6d
 8009dec:	08009e6d 	.word	0x08009e6d
 8009df0:	08009e75 	.word	0x08009e75
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009e6d 	.word	0x08009e6d
 8009dfc:	08009e6d 	.word	0x08009e6d
 8009e00:	08009e6d 	.word	0x08009e6d
 8009e04:	08009e6d 	.word	0x08009e6d
 8009e08:	08009e6d 	.word	0x08009e6d
 8009e0c:	08009e6d 	.word	0x08009e6d
 8009e10:	08009e75 	.word	0x08009e75
 8009e14:	08009e6d 	.word	0x08009e6d
 8009e18:	08009e6d 	.word	0x08009e6d
 8009e1c:	08009e6d 	.word	0x08009e6d
 8009e20:	08009e6d 	.word	0x08009e6d
 8009e24:	08009e6d 	.word	0x08009e6d
 8009e28:	08009e6d 	.word	0x08009e6d
 8009e2c:	08009e6d 	.word	0x08009e6d
 8009e30:	08009e75 	.word	0x08009e75
 8009e34:	58024400 	.word	0x58024400
 8009e38:	58024800 	.word	0x58024800
 8009e3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	3308      	adds	r3, #8
 8009e46:	2101      	movs	r1, #1
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 fdcb 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e54:	e00f      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5a:	3328      	adds	r3, #40	@ 0x28
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fe72 	bl	800bb48 <RCCEx_PLL3_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e6a:	e004      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e7e:	4bbf      	ldr	r3, [pc, #764]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e8c:	4abb      	ldr	r2, [pc, #748]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e92:	e003      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f002 0302 	and.w	r3, r2, #2
 8009ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	d041      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	d824      	bhi.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009f19 	.word	0x08009f19
 8009ed0:	08009ee5 	.word	0x08009ee5
 8009ed4:	08009efb 	.word	0x08009efb
 8009ed8:	08009f19 	.word	0x08009f19
 8009edc:	08009f19 	.word	0x08009f19
 8009ee0:	08009f19 	.word	0x08009f19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee8:	3308      	adds	r3, #8
 8009eea:	2101      	movs	r1, #1
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fd79 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ef8:	e00f      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efe:	3328      	adds	r3, #40	@ 0x28
 8009f00:	2101      	movs	r1, #1
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fe20 	bl	800bb48 <RCCEx_PLL3_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f0e:	e004      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f16:	e000      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f22:	4b96      	ldr	r3, [pc, #600]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f26:	f023 0107 	bic.w	r1, r3, #7
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f30:	4a92      	ldr	r2, [pc, #584]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f32:	430b      	orrs	r3, r1
 8009f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f36:	e003      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f002 0304 	and.w	r3, r2, #4
 8009f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f50:	2300      	movs	r3, #0
 8009f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d044      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d825      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f74 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009fc1 	.word	0x08009fc1
 8009f78:	08009f8d 	.word	0x08009f8d
 8009f7c:	08009fa3 	.word	0x08009fa3
 8009f80:	08009fc1 	.word	0x08009fc1
 8009f84:	08009fc1 	.word	0x08009fc1
 8009f88:	08009fc1 	.word	0x08009fc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f90:	3308      	adds	r3, #8
 8009f92:	2101      	movs	r1, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 fd25 	bl	800b9e4 <RCCEx_PLL2_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fa0:	e00f      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa6:	3328      	adds	r3, #40	@ 0x28
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fdcc 	bl	800bb48 <RCCEx_PLL3_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fb6:	e004      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fca:	4b6c      	ldr	r3, [pc, #432]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fce:	f023 0107 	bic.w	r1, r3, #7
 8009fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fda:	4a68      	ldr	r2, [pc, #416]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fe0:	e003      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f002 0320 	and.w	r3, r2, #32
 8009ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a000:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a004:	460b      	mov	r3, r1
 800a006:	4313      	orrs	r3, r2
 800a008:	d055      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a016:	d033      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a01c:	d82c      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a022:	d02f      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a028:	d826      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a02a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a02e:	d02b      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a030:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a034:	d820      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a03a:	d012      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a03c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a040:	d81a      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d022      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a04a:	d115      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a050:	3308      	adds	r3, #8
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fcc5 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a060:	e015      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a066:	3328      	adds	r3, #40	@ 0x28
 800a068:	2102      	movs	r1, #2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 fd6c 	bl	800bb48 <RCCEx_PLL3_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a076:	e00a      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a07e:	e006      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a080:	bf00      	nop
 800a082:	e004      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a084:	bf00      	nop
 800a086:	e002      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a088:	bf00      	nop
 800a08a:	e000      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10b      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a096:	4b39      	ldr	r3, [pc, #228]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0a6:	4a35      	ldr	r2, [pc, #212]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0ac:	e003      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a0c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	d058      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a0e2:	d033      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a0e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a0e8:	d82c      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0ee:	d02f      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a0f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0f4:	d826      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a0f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a0fa:	d02b      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a0fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a100:	d820      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a106:	d012      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a10c:	d81a      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d022      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a116:	d115      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	3308      	adds	r3, #8
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fc5f 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a12c:	e015      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a132:	3328      	adds	r3, #40	@ 0x28
 800a134:	2102      	movs	r1, #2
 800a136:	4618      	mov	r0, r3
 800a138:	f001 fd06 	bl	800bb48 <RCCEx_PLL3_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a142:	e00a      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a14a:	e006      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a14c:	bf00      	nop
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10e      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a162:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a166:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a172:	4a02      	ldr	r2, [pc, #8]	@ (800a17c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a174:	430b      	orrs	r3, r1
 800a176:	6593      	str	r3, [r2, #88]	@ 0x58
 800a178:	e006      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a17a:	bf00      	nop
 800a17c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a198:	2300      	movs	r3, #0
 800a19a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a19e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	d055      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a1b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1b4:	d033      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a1b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1ba:	d82c      	bhi.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c0:	d02f      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a1c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1c6:	d826      	bhi.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a1c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1cc:	d02b      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a1ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1d2:	d820      	bhi.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a1d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1d8:	d012      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a1da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1de:	d81a      	bhi.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d022      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a1e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e8:	d115      	bne.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f001 fbf6 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1fe:	e015      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a204:	3328      	adds	r3, #40	@ 0x28
 800a206:	2102      	movs	r1, #2
 800a208:	4618      	mov	r0, r3
 800a20a:	f001 fc9d 	bl	800bb48 <RCCEx_PLL3_Config>
 800a20e:	4603      	mov	r3, r0
 800a210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a214:	e00a      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a21c:	e006      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a21e:	bf00      	nop
 800a220:	e004      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a222:	bf00      	nop
 800a224:	e002      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a22a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10b      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a234:	4ba0      	ldr	r3, [pc, #640]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a238:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a244:	4a9c      	ldr	r2, [pc, #624]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a246:	430b      	orrs	r3, r1
 800a248:	6593      	str	r3, [r2, #88]	@ 0x58
 800a24a:	e003      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f002 0308 	and.w	r3, r2, #8
 800a260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a264:	2300      	movs	r3, #0
 800a266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a26a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a26e:	460b      	mov	r3, r1
 800a270:	4313      	orrs	r3, r2
 800a272:	d01e      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a280:	d10c      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a286:	3328      	adds	r3, #40	@ 0x28
 800a288:	2102      	movs	r1, #2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 fc5c 	bl	800bb48 <RCCEx_PLL3_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a29c:	4b86      	ldr	r3, [pc, #536]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ac:	4a82      	ldr	r2, [pc, #520]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f002 0310 	and.w	r3, r2, #16
 800a2be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	d01e      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2de:	d10c      	bne.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	3328      	adds	r3, #40	@ 0x28
 800a2e6:	2102      	movs	r1, #2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fc2d 	bl	800bb48 <RCCEx_PLL3_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a30a:	4a6b      	ldr	r2, [pc, #428]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a30c:	430b      	orrs	r3, r1
 800a30e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a31c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a31e:	2300      	movs	r3, #0
 800a320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a322:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d03e      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a338:	d022      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a33a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a33e:	d81b      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a348:	d00b      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a34a:	e015      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a350:	3308      	adds	r3, #8
 800a352:	2100      	movs	r1, #0
 800a354:	4618      	mov	r0, r3
 800a356:	f001 fb45 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a360:	e00f      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a366:	3328      	adds	r3, #40	@ 0x28
 800a368:	2102      	movs	r1, #2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f001 fbec 	bl	800bb48 <RCCEx_PLL3_Config>
 800a370:	4603      	mov	r3, r0
 800a372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a376:	e004      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a37e:	e000      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a38a:	4b4b      	ldr	r3, [pc, #300]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a39a:	4a47      	ldr	r2, [pc, #284]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a39c:	430b      	orrs	r3, r1
 800a39e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3a0:	e003      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a3b6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	d03b      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3d2:	d01f      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a3d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3d8:	d818      	bhi.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a3da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3de:	d003      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a3e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3e4:	d007      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a3e6:	e011      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e8:	4b33      	ldr	r3, [pc, #204]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ec:	4a32      	ldr	r2, [pc, #200]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3f4:	e00f      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fa:	3328      	adds	r3, #40	@ 0x28
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fba2 	bl	800bb48 <RCCEx_PLL3_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a40a:	e004      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a412:	e000      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a414:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a41e:	4b26      	ldr	r3, [pc, #152]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a42e:	4a22      	ldr	r2, [pc, #136]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a430:	430b      	orrs	r3, r1
 800a432:	6553      	str	r3, [r2, #84]	@ 0x54
 800a434:	e003      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a43a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a44a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a44c:	2300      	movs	r3, #0
 800a44e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a450:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a454:	460b      	mov	r3, r1
 800a456:	4313      	orrs	r3, r2
 800a458:	d034      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a468:	d007      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a46a:	e011      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a46c:	4b12      	ldr	r3, [pc, #72]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a470:	4a11      	ldr	r2, [pc, #68]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a478:	e00e      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47e:	3308      	adds	r3, #8
 800a480:	2102      	movs	r1, #2
 800a482:	4618      	mov	r0, r3
 800a484:	f001 faae 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a48e:	e003      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a496:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10d      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a4a0:	4b05      	ldr	r3, [pc, #20]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ae:	4a02      	ldr	r2, [pc, #8]	@ (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4b4:	e006      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a4b6:	bf00      	nop
 800a4b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a4d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	d00c      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e4:	3328      	adds	r3, #40	@ 0x28
 800a4e6:	2102      	movs	r1, #2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f001 fb2d 	bl	800bb48 <RCCEx_PLL3_Config>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a506:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a508:	2300      	movs	r3, #0
 800a50a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a50c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a510:	460b      	mov	r3, r1
 800a512:	4313      	orrs	r3, r2
 800a514:	d036      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a51c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a520:	d018      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a526:	d811      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a52c:	d014      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a52e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a532:	d80b      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d011      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a53c:	d106      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53e:	4bb7      	ldr	r3, [pc, #732]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a542:	4ab6      	ldr	r2, [pc, #728]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a54a:	e008      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a552:	e004      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a554:	bf00      	nop
 800a556:	e002      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a558:	bf00      	nop
 800a55a:	e000      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a55e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10a      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a566:	4bad      	ldr	r3, [pc, #692]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a574:	4aa9      	ldr	r2, [pc, #676]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a576:	430b      	orrs	r3, r1
 800a578:	6553      	str	r3, [r2, #84]	@ 0x54
 800a57a:	e003      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a590:	653b      	str	r3, [r7, #80]	@ 0x50
 800a592:	2300      	movs	r3, #0
 800a594:	657b      	str	r3, [r7, #84]	@ 0x54
 800a596:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a59a:	460b      	mov	r3, r1
 800a59c:	4313      	orrs	r3, r2
 800a59e:	d009      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ae:	4a9b      	ldr	r2, [pc, #620]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	d009      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a5d0:	4b92      	ldr	r3, [pc, #584]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5de:	4a8f      	ldr	r2, [pc, #572]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a5f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	d00e      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a600:	4b86      	ldr	r3, [pc, #536]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	4a85      	ldr	r2, [pc, #532]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a606:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a60a:	6113      	str	r3, [r2, #16]
 800a60c:	4b83      	ldr	r3, [pc, #524]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a60e:	6919      	ldr	r1, [r3, #16]
 800a610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a618:	4a80      	ldr	r2, [pc, #512]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a61a:	430b      	orrs	r3, r1
 800a61c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a62a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a62c:	2300      	movs	r3, #0
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a630:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a634:	460b      	mov	r3, r1
 800a636:	4313      	orrs	r3, r2
 800a638:	d009      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a63a:	4b78      	ldr	r3, [pc, #480]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a63c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a63e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a648:	4a74      	ldr	r2, [pc, #464]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a64a:	430b      	orrs	r3, r1
 800a64c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a65a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a65c:	2300      	movs	r3, #0
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a660:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a664:	460b      	mov	r3, r1
 800a666:	4313      	orrs	r3, r2
 800a668:	d00a      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a66a:	4b6c      	ldr	r3, [pc, #432]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a66e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a67a:	4a68      	ldr	r2, [pc, #416]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a67c:	430b      	orrs	r3, r1
 800a67e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	2100      	movs	r1, #0
 800a68a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a692:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a696:	460b      	mov	r3, r1
 800a698:	4313      	orrs	r3, r2
 800a69a:	d011      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 f99d 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a6b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6239      	str	r1, [r7, #32]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	d011      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f001 f97d 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a6f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	2100      	movs	r1, #0
 800a70a:	61b9      	str	r1, [r7, #24]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	61fb      	str	r3, [r7, #28]
 800a712:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a716:	460b      	mov	r3, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	d011      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a720:	3308      	adds	r3, #8
 800a722:	2102      	movs	r1, #2
 800a724:	4618      	mov	r0, r3
 800a726:	f001 f95d 	bl	800b9e4 <RCCEx_PLL2_Config>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a73c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	2100      	movs	r1, #0
 800a74a:	6139      	str	r1, [r7, #16]
 800a74c:	f003 0308 	and.w	r3, r3, #8
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a756:	460b      	mov	r3, r1
 800a758:	4313      	orrs	r3, r2
 800a75a:	d011      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a760:	3328      	adds	r3, #40	@ 0x28
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f001 f9ef 	bl	800bb48 <RCCEx_PLL3_Config>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a77c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	2100      	movs	r1, #0
 800a78a:	60b9      	str	r1, [r7, #8]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a796:	460b      	mov	r3, r1
 800a798:	4313      	orrs	r3, r2
 800a79a:	d011      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a0:	3328      	adds	r3, #40	@ 0x28
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f001 f9cf 	bl	800bb48 <RCCEx_PLL3_Config>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	6039      	str	r1, [r7, #0]
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	d011      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	3328      	adds	r3, #40	@ 0x28
 800a7e2:	2102      	movs	r1, #2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 f9af 	bl	800bb48 <RCCEx_PLL3_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a800:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	e000      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
}
 800a80e:	4618      	mov	r0, r3
 800a810:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a814:	46bd      	mov	sp, r7
 800a816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a81a:	bf00      	nop
 800a81c:	58024400 	.word	0x58024400

0800a820 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b090      	sub	sp, #64	@ 0x40
 800a824:	af00      	add	r7, sp, #0
 800a826:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a82a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a832:	430b      	orrs	r3, r1
 800a834:	f040 8094 	bne.w	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a838:	4b9b      	ldr	r3, [pc, #620]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a83c:	f003 0307 	and.w	r3, r3, #7
 800a840:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	2b04      	cmp	r3, #4
 800a846:	f200 8087 	bhi.w	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a84a:	a201      	add	r2, pc, #4	@ (adr r2, 800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a865 	.word	0x0800a865
 800a854:	0800a88d 	.word	0x0800a88d
 800a858:	0800a8b5 	.word	0x0800a8b5
 800a85c:	0800a951 	.word	0x0800a951
 800a860:	0800a8dd 	.word	0x0800a8dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a864:	4b90      	ldr	r3, [pc, #576]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a86c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a870:	d108      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a876:	4618      	mov	r0, r3
 800a878:	f000 ff62 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a880:	f000 bc93 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	f000 bc8f 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a88c:	4b86      	ldr	r3, [pc, #536]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a898:	d108      	bne.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a89a:	f107 0318 	add.w	r3, r7, #24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fca6 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a8:	f000 bc7f 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b0:	f000 bc7b 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8b4:	4b7c      	ldr	r3, [pc, #496]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8c0:	d108      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 fde6 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d0:	f000 bc6b 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d8:	f000 bc67 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8dc:	4b72      	ldr	r3, [pc, #456]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8e6:	4b70      	ldr	r3, [pc, #448]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0304 	and.w	r3, r3, #4
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d10c      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d109      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8f8:	4b6b      	ldr	r3, [pc, #428]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	08db      	lsrs	r3, r3, #3
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	4a6a      	ldr	r2, [pc, #424]	@ (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a904:	fa22 f303 	lsr.w	r3, r2, r3
 800a908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a90a:	e01f      	b.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a90c:	4b66      	ldr	r3, [pc, #408]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a918:	d106      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a920:	d102      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a922:	4b63      	ldr	r3, [pc, #396]	@ (800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a926:	e011      	b.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a928:	4b5f      	ldr	r3, [pc, #380]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a934:	d106      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a93c:	d102      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a93e:	4b5d      	ldr	r3, [pc, #372]	@ (800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a942:	e003      	b.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a948:	f000 bc2f 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a94c:	f000 bc2d 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a950:	4b59      	ldr	r3, [pc, #356]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a954:	f000 bc29 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a95c:	f000 bc25 	b.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a964:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a968:	430b      	orrs	r3, r1
 800a96a:	f040 80a7 	bne.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a96e:	4b4e      	ldr	r3, [pc, #312]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a972:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a976:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a97e:	d054      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a986:	f200 808b 	bhi.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a990:	f000 8083 	beq.w	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a996:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a99a:	f200 8081 	bhi.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9a4:	d02f      	beq.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9ac:	d878      	bhi.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9ba:	d012      	beq.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a9bc:	e070      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9be:	4b3a      	ldr	r3, [pc, #232]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9ca:	d107      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 feb5 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9da:	e3e6      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e0:	e3e3      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9e2:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ee:	d107      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9f0:	f107 0318 	add.w	r3, r7, #24
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fbfb 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fe:	e3d4      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa04:	e3d1      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa06:	4b28      	ldr	r3, [pc, #160]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa12:	d107      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa14:	f107 030c 	add.w	r3, r7, #12
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fd3d 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa22:	e3c2      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa28:	e3bf      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa2a:	4b1f      	ldr	r3, [pc, #124]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa34:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d10c      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800aa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d109      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa46:	4b18      	ldr	r3, [pc, #96]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	08db      	lsrs	r3, r3, #3
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	4a16      	ldr	r2, [pc, #88]	@ (800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa52:	fa22 f303 	lsr.w	r3, r2, r3
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa58:	e01e      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa5a:	4b13      	ldr	r3, [pc, #76]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa66:	d106      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800aa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa6e:	d102      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa70:	4b0f      	ldr	r3, [pc, #60]	@ (800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa74:	e010      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa76:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa82:	d106      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8a:	d102      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa8c:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa90:	e002      	b.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa96:	e388      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa98:	e387      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa9a:	4b07      	ldr	r3, [pc, #28]	@ (800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9e:	e384      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e381      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aaa6:	bf00      	nop
 800aaa8:	58024400 	.word	0x58024400
 800aaac:	03d09000 	.word	0x03d09000
 800aab0:	003d0900 	.word	0x003d0900
 800aab4:	016e3600 	.word	0x016e3600
 800aab8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aabc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800aac4:	430b      	orrs	r3, r1
 800aac6:	f040 809c 	bne.w	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aaca:	4b9e      	ldr	r3, [pc, #632]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aace:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aada:	d054      	beq.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aae2:	f200 808b 	bhi.w	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aaec:	f000 8083 	beq.w	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800aaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aaf6:	f200 8081 	bhi.w	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab00:	d02f      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab08:	d878      	bhi.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d004      	beq.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab16:	d012      	beq.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ab18:	e070      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab1a:	4b8a      	ldr	r3, [pc, #552]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab26:	d107      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fe07 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab36:	e338      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab3c:	e335      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab3e:	4b81      	ldr	r3, [pc, #516]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4c:	f107 0318 	add.w	r3, r7, #24
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 fb4d 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab5a:	e326      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e323      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab62:	4b78      	ldr	r3, [pc, #480]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab6e:	d107      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fc8f 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab7e:	e314      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab84:	e311      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab86:	4b6f      	ldr	r3, [pc, #444]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab8e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab90:	4b6c      	ldr	r3, [pc, #432]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d10c      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d109      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aba2:	4b68      	ldr	r3, [pc, #416]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	08db      	lsrs	r3, r3, #3
 800aba8:	f003 0303 	and.w	r3, r3, #3
 800abac:	4a66      	ldr	r2, [pc, #408]	@ (800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800abae:	fa22 f303 	lsr.w	r3, r2, r3
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abb4:	e01e      	b.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abb6:	4b63      	ldr	r3, [pc, #396]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abc2:	d106      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800abc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abca:	d102      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abcc:	4b5f      	ldr	r3, [pc, #380]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abd0:	e010      	b.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abd2:	4b5c      	ldr	r3, [pc, #368]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abde:	d106      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800abe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe6:	d102      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abe8:	4b59      	ldr	r3, [pc, #356]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abec:	e002      	b.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abf2:	e2da      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abf4:	e2d9      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abf6:	4b57      	ldr	r3, [pc, #348]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfa:	e2d6      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac00:	e2d3      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ac0a:	430b      	orrs	r3, r1
 800ac0c:	f040 80a7 	bne.w	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac10:	4b4c      	ldr	r3, [pc, #304]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac20:	d055      	beq.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac28:	f200 8096 	bhi.w	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac32:	f000 8084 	beq.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac3c:	f200 808c 	bhi.w	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ac40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac46:	d030      	beq.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac4e:	f200 8083 	bhi.w	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ac52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d004      	beq.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ac58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac5e:	d012      	beq.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ac60:	e07a      	b.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac62:	4b38      	ldr	r3, [pc, #224]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac6e:	d107      	bne.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 fd63 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac7e:	e294      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac84:	e291      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac86:	4b2f      	ldr	r3, [pc, #188]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac92:	d107      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac94:	f107 0318 	add.w	r3, r7, #24
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 faa9 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca2:	e282      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca8:	e27f      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acaa:	4b26      	ldr	r3, [pc, #152]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acb6:	d107      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acb8:	f107 030c 	add.w	r3, r7, #12
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fbeb 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc6:	e270      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800accc:	e26d      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acce:	4b1d      	ldr	r3, [pc, #116]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d10c      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d109      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acea:	4b16      	ldr	r3, [pc, #88]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	08db      	lsrs	r3, r3, #3
 800acf0:	f003 0303 	and.w	r3, r3, #3
 800acf4:	4a14      	ldr	r2, [pc, #80]	@ (800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800acf6:	fa22 f303 	lsr.w	r3, r2, r3
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acfc:	e01e      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acfe:	4b11      	ldr	r3, [pc, #68]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad0a:	d106      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad12:	d102      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad14:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad18:	e010      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad26:	d106      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ad28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad2e:	d102      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad30:	4b07      	ldr	r3, [pc, #28]	@ (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad34:	e002      	b.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad3a:	e236      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad3c:	e235      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad3e:	4b05      	ldr	r3, [pc, #20]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad42:	e232      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad44:	58024400 	.word	0x58024400
 800ad48:	03d09000 	.word	0x03d09000
 800ad4c:	003d0900 	.word	0x003d0900
 800ad50:	016e3600 	.word	0x016e3600
 800ad54:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5c:	e225      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad62:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ad66:	430b      	orrs	r3, r1
 800ad68:	f040 8085 	bne.w	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad6c:	4b9c      	ldr	r3, [pc, #624]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad70:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ad74:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ad76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad7c:	d06b      	beq.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad84:	d874      	bhi.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad8c:	d056      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad94:	d86c      	bhi.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad9c:	d03b      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ada4:	d864      	bhi.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ada6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adac:	d021      	beq.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800adae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adb4:	d85c      	bhi.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800adb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc2:	d004      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800adc4:	e054      	b.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800adc6:	f7fe fb5f 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800adca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adcc:	e1ed      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adce:	4b84      	ldr	r3, [pc, #528]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800add6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adda:	d107      	bne.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800addc:	f107 0318 	add.w	r3, r7, #24
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fa05 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adea:	e1de      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf0:	e1db      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adf2:	4b7b      	ldr	r3, [pc, #492]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adfe:	d107      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae00:	f107 030c 	add.w	r3, r7, #12
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fb47 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0e:	e1cc      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae14:	e1c9      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae16:	4b72      	ldr	r3, [pc, #456]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d109      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae22:	4b6f      	ldr	r3, [pc, #444]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	08db      	lsrs	r3, r3, #3
 800ae28:	f003 0303 	and.w	r3, r3, #3
 800ae2c:	4a6d      	ldr	r2, [pc, #436]	@ (800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ae2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e1b9      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e1b6      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae3c:	4b68      	ldr	r3, [pc, #416]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae48:	d102      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ae4a:	4b67      	ldr	r3, [pc, #412]	@ (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4e:	e1ac      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae54:	e1a9      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae56:	4b62      	ldr	r3, [pc, #392]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae62:	d102      	bne.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ae64:	4b61      	ldr	r3, [pc, #388]	@ (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae68:	e19f      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae6e:	e19c      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae74:	e199      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae7a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	d173      	bne.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae82:	4b57      	ldr	r3, [pc, #348]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae92:	d02f      	beq.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ae94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae9a:	d863      	bhi.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d004      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea8:	d012      	beq.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800aeaa:	e05b      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeac:	4b4c      	ldr	r3, [pc, #304]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeb8:	d107      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeba:	f107 0318 	add.w	r3, r7, #24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f996 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec8:	e16f      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aece:	e16c      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aed0:	4b43      	ldr	r3, [pc, #268]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aedc:	d107      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aede:	f107 030c 	add.w	r3, r7, #12
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fad8 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeec:	e15d      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef2:	e15a      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aef4:	4b3a      	ldr	r3, [pc, #232]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aefc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aefe:	4b38      	ldr	r3, [pc, #224]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b04      	cmp	r3, #4
 800af08:	d10c      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800af0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af10:	4b33      	ldr	r3, [pc, #204]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	4a32      	ldr	r2, [pc, #200]	@ (800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af22:	e01e      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af24:	4b2e      	ldr	r3, [pc, #184]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af30:	d106      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800af32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af38:	d102      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af3a:	4b2b      	ldr	r3, [pc, #172]	@ (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af3e:	e010      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af40:	4b27      	ldr	r3, [pc, #156]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af4c:	d106      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800af4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af54:	d102      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af56:	4b25      	ldr	r3, [pc, #148]	@ (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af5a:	e002      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af60:	e123      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af62:	e122      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af68:	e11f      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800af72:	430b      	orrs	r3, r1
 800af74:	d13c      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af76:	4b1a      	ldr	r3, [pc, #104]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af8c:	d012      	beq.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800af8e:	e023      	b.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af90:	4b13      	ldr	r3, [pc, #76]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af9c:	d107      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fbcc 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afac:	e0fd      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb2:	e0fa      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afb4:	4b0a      	ldr	r3, [pc, #40]	@ (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afc0:	d107      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc2:	f107 0318 	add.w	r3, r7, #24
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f912 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd0:	e0eb      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd6:	e0e8      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afdc:	e0e5      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800afde:	bf00      	nop
 800afe0:	58024400 	.word	0x58024400
 800afe4:	03d09000 	.word	0x03d09000
 800afe8:	003d0900 	.word	0x003d0900
 800afec:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aff4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aff8:	430b      	orrs	r3, r1
 800affa:	f040 8085 	bne.w	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800affe:	4b6d      	ldr	r3, [pc, #436]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b002:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b006:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b00e:	d06b      	beq.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b016:	d874      	bhi.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b01e:	d056      	beq.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b026:	d86c      	bhi.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b02e:	d03b      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b036:	d864      	bhi.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b03e:	d021      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b046:	d85c      	bhi.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b054:	d004      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b056:	e054      	b.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b058:	f000 f8b4 	bl	800b1c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b05c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b05e:	e0a4      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b060:	4b54      	ldr	r3, [pc, #336]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b06c:	d107      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06e:	f107 0318 	add.w	r3, r7, #24
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f8bc 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b07c:	e095      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b082:	e092      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b084:	4b4b      	ldr	r3, [pc, #300]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b08c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b090:	d107      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f9fe 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a0:	e083      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a6:	e080      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0a8:	4b42      	ldr	r3, [pc, #264]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d109      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	f003 0303 	and.w	r3, r3, #3
 800b0be:	4a3e      	ldr	r2, [pc, #248]	@ (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c6:	e070      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0cc:	e06d      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0ce:	4b39      	ldr	r3, [pc, #228]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0da:	d102      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b0dc:	4b37      	ldr	r3, [pc, #220]	@ (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e0:	e063      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e6:	e060      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0e8:	4b32      	ldr	r3, [pc, #200]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0f4:	d102      	bne.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b0f6:	4b32      	ldr	r3, [pc, #200]	@ (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0fa:	e056      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b100:	e053      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b106:	e050      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b10c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b110:	430b      	orrs	r3, r1
 800b112:	d148      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b114:	4b27      	ldr	r3, [pc, #156]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b118:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b11c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b124:	d02a      	beq.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b12c:	d838      	bhi.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b13a:	d00d      	beq.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b13c:	e030      	b.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b13e:	4b1d      	ldr	r3, [pc, #116]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b14a:	d102      	bne.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b14c:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b150:	e02b      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b156:	e028      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b158:	4b16      	ldr	r3, [pc, #88]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b164:	d107      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fae8 	bl	800b740 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b174:	e019      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b17a:	e016      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b17c:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b188:	d107      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b18a:	f107 0318 	add.w	r3, r7, #24
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 f82e 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b198:	e007      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b19e:	e004      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a4:	e001      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3740      	adds	r7, #64	@ 0x40
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	03d09000 	.word	0x03d09000
 800b1bc:	003d0900 	.word	0x003d0900
 800b1c0:	016e3600 	.word	0x016e3600

0800b1c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b1c8:	f7fe f92e 	bl	8009428 <HAL_RCC_GetHCLKFreq>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	4b06      	ldr	r3, [pc, #24]	@ (800b1e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	091b      	lsrs	r3, r3, #4
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	4904      	ldr	r1, [pc, #16]	@ (800b1ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b1da:	5ccb      	ldrb	r3, [r1, r3]
 800b1dc:	f003 031f 	and.w	r3, r3, #31
 800b1e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	08012864 	.word	0x08012864

0800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b089      	sub	sp, #36	@ 0x24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1f8:	4ba1      	ldr	r3, [pc, #644]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b202:	4b9f      	ldr	r3, [pc, #636]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	0b1b      	lsrs	r3, r3, #12
 800b208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b20c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b20e:	4b9c      	ldr	r3, [pc, #624]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	091b      	lsrs	r3, r3, #4
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b21a:	4b99      	ldr	r3, [pc, #612]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b21c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b21e:	08db      	lsrs	r3, r3, #3
 800b220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	fb02 f303 	mul.w	r3, r2, r3
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 8111 	beq.w	800b460 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b02      	cmp	r3, #2
 800b242:	f000 8083 	beq.w	800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	2b02      	cmp	r3, #2
 800b24a:	f200 80a1 	bhi.w	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d056      	beq.n	800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b25a:	e099      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b25c:	4b88      	ldr	r3, [pc, #544]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0320 	and.w	r3, r3, #32
 800b264:	2b00      	cmp	r3, #0
 800b266:	d02d      	beq.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b268:	4b85      	ldr	r3, [pc, #532]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	4a84      	ldr	r2, [pc, #528]	@ (800b484 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b274:	fa22 f303 	lsr.w	r3, r2, r3
 800b278:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b292:	4b7b      	ldr	r3, [pc, #492]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2c2:	e087      	b.n	800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b48c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d6:	4b6a      	ldr	r3, [pc, #424]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b306:	e065      	b.n	800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b59      	ldr	r3, [pc, #356]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b34a:	e043      	b.n	800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b48      	ldr	r3, [pc, #288]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b372:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b38e:	e021      	b.n	800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a2:	4b37      	ldr	r3, [pc, #220]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b488 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b3d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d8:	0a5b      	lsrs	r3, r3, #9
 800b3da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b402:	4b1f      	ldr	r3, [pc, #124]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b406:	0c1b      	lsrs	r3, r3, #16
 800b408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b41c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b428:	ee17 2a90 	vmov	r2, s15
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b430:	4b13      	ldr	r3, [pc, #76]	@ (800b480 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b434:	0e1b      	lsrs	r3, r3, #24
 800b436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b44a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b456:	ee17 2a90 	vmov	r2, s15
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b45e:	e008      	b.n	800b472 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	609a      	str	r2, [r3, #8]
}
 800b472:	bf00      	nop
 800b474:	3724      	adds	r7, #36	@ 0x24
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	58024400 	.word	0x58024400
 800b484:	03d09000 	.word	0x03d09000
 800b488:	46000000 	.word	0x46000000
 800b48c:	4c742400 	.word	0x4c742400
 800b490:	4a742400 	.word	0x4a742400
 800b494:	4bb71b00 	.word	0x4bb71b00

0800b498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b498:	b480      	push	{r7}
 800b49a:	b089      	sub	sp, #36	@ 0x24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4a0:	4ba1      	ldr	r3, [pc, #644]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b4aa:	4b9f      	ldr	r3, [pc, #636]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ae:	0d1b      	lsrs	r3, r3, #20
 800b4b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b4b6:	4b9c      	ldr	r3, [pc, #624]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ba:	0a1b      	lsrs	r3, r3, #8
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b4c2:	4b99      	ldr	r3, [pc, #612]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c6:	08db      	lsrs	r3, r3, #3
 800b4c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	fb02 f303 	mul.w	r3, r2, r3
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 8111 	beq.w	800b708 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	f000 8083 	beq.w	800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	f200 80a1 	bhi.w	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d056      	beq.n	800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b502:	e099      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b504:	4b88      	ldr	r3, [pc, #544]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 0320 	and.w	r3, r3, #32
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d02d      	beq.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b510:	4b85      	ldr	r3, [pc, #532]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	08db      	lsrs	r3, r3, #3
 800b516:	f003 0303 	and.w	r3, r3, #3
 800b51a:	4a84      	ldr	r2, [pc, #528]	@ (800b72c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b51c:	fa22 f303 	lsr.w	r3, r2, r3
 800b520:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	ee07 3a90 	vmov	s15, r3
 800b528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	ee07 3a90 	vmov	s15, r3
 800b532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b7b      	ldr	r3, [pc, #492]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b56a:	e087      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b734 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b57e:	4b6a      	ldr	r3, [pc, #424]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b592:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ae:	e065      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c2:	4b59      	ldr	r3, [pc, #356]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5f2:	e043      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b73c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	4b48      	ldr	r3, [pc, #288]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b616:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b636:	e021      	b.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b642:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64a:	4b37      	ldr	r3, [pc, #220]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b65e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b67c:	4b2a      	ldr	r3, [pc, #168]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b680:	0a5b      	lsrs	r3, r3, #9
 800b682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b692:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b696:	edd7 6a07 	vldr	s13, [r7, #28]
 800b69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a2:	ee17 2a90 	vmov	r2, s15
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b6aa:	4b1f      	ldr	r3, [pc, #124]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ae:	0c1b      	lsrs	r3, r3, #16
 800b6b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b4:	ee07 3a90 	vmov	s15, r3
 800b6b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d0:	ee17 2a90 	vmov	r2, s15
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b6d8:	4b13      	ldr	r3, [pc, #76]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6dc:	0e1b      	lsrs	r3, r3, #24
 800b6de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fe:	ee17 2a90 	vmov	r2, s15
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b706:	e008      	b.n	800b71a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	609a      	str	r2, [r3, #8]
}
 800b71a:	bf00      	nop
 800b71c:	3724      	adds	r7, #36	@ 0x24
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	58024400 	.word	0x58024400
 800b72c:	03d09000 	.word	0x03d09000
 800b730:	46000000 	.word	0x46000000
 800b734:	4c742400 	.word	0x4c742400
 800b738:	4a742400 	.word	0x4a742400
 800b73c:	4bb71b00 	.word	0x4bb71b00

0800b740 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b740:	b480      	push	{r7}
 800b742:	b089      	sub	sp, #36	@ 0x24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b748:	4ba0      	ldr	r3, [pc, #640]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b752:	4b9e      	ldr	r3, [pc, #632]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	091b      	lsrs	r3, r3, #4
 800b758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b75c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b75e:	4b9b      	ldr	r3, [pc, #620]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b768:	4b98      	ldr	r3, [pc, #608]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b76c:	08db      	lsrs	r3, r3, #3
 800b76e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	fb02 f303 	mul.w	r3, r2, r3
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b780:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 8111 	beq.w	800b9ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	f000 8083 	beq.w	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	2b02      	cmp	r3, #2
 800b798:	f200 80a1 	bhi.w	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d056      	beq.n	800b856 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b7a8:	e099      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7aa:	4b88      	ldr	r3, [pc, #544]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d02d      	beq.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b6:	4b85      	ldr	r3, [pc, #532]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	08db      	lsrs	r3, r3, #3
 800b7bc:	f003 0303 	and.w	r3, r3, #3
 800b7c0:	4a83      	ldr	r2, [pc, #524]	@ (800b9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	ee07 3a90 	vmov	s15, r3
 800b7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e0:	4b7a      	ldr	r3, [pc, #488]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b810:	e087      	b.n	800b922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b824:	4b69      	ldr	r3, [pc, #420]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b834:	ed97 6a03 	vldr	s12, [r7, #12]
 800b838:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b854:	e065      	b.n	800b922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b860:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b9dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b868:	4b58      	ldr	r3, [pc, #352]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b878:	ed97 6a03 	vldr	s12, [r7, #12]
 800b87c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b88c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b890:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b898:	e043      	b.n	800b922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b8a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ac:	4b47      	ldr	r3, [pc, #284]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b4:	ee07 3a90 	vmov	s15, r3
 800b8b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8dc:	e021      	b.n	800b922 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	ee07 3a90 	vmov	s15, r3
 800b8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8f0:	4b36      	ldr	r3, [pc, #216]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f8:	ee07 3a90 	vmov	s15, r3
 800b8fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b900:	ed97 6a03 	vldr	s12, [r7, #12]
 800b904:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b920:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b922:	4b2a      	ldr	r3, [pc, #168]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b926:	0a5b      	lsrs	r3, r3, #9
 800b928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b92c:	ee07 3a90 	vmov	s15, r3
 800b930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b948:	ee17 2a90 	vmov	r2, s15
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b950:	4b1e      	ldr	r3, [pc, #120]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b962:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b96a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b96e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b976:	ee17 2a90 	vmov	r2, s15
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b97e:	4b13      	ldr	r3, [pc, #76]	@ (800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b982:	0e1b      	lsrs	r3, r3, #24
 800b984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b994:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b998:	edd7 6a07 	vldr	s13, [r7, #28]
 800b99c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a4:	ee17 2a90 	vmov	r2, s15
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b9ac:	e008      	b.n	800b9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	609a      	str	r2, [r3, #8]
}
 800b9c0:	bf00      	nop
 800b9c2:	3724      	adds	r7, #36	@ 0x24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	46000000 	.word	0x46000000
 800b9d8:	4c742400 	.word	0x4c742400
 800b9dc:	4a742400 	.word	0x4a742400
 800b9e0:	4bb71b00 	.word	0x4bb71b00

0800b9e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9f2:	4b53      	ldr	r3, [pc, #332]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d101      	bne.n	800ba02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e099      	b.n	800bb36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba02:	4b4f      	ldr	r3, [pc, #316]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a4e      	ldr	r2, [pc, #312]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba0e:	f7f6 ff2f 	bl	8002870 <HAL_GetTick>
 800ba12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba14:	e008      	b.n	800ba28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba16:	f7f6 ff2b 	bl	8002870 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d901      	bls.n	800ba28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e086      	b.n	800bb36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba28:	4b45      	ldr	r3, [pc, #276]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1f0      	bne.n	800ba16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba34:	4b42      	ldr	r3, [pc, #264]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	031b      	lsls	r3, r3, #12
 800ba42:	493f      	ldr	r1, [pc, #252]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	025b      	lsls	r3, r3, #9
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	041b      	lsls	r3, r3, #16
 800ba66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	061b      	lsls	r3, r3, #24
 800ba74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba78:	4931      	ldr	r1, [pc, #196]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba7e:	4b30      	ldr	r3, [pc, #192]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	492d      	ldr	r1, [pc, #180]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba90:	4b2b      	ldr	r3, [pc, #172]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba94:	f023 0220 	bic.w	r2, r3, #32
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	4928      	ldr	r1, [pc, #160]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800baa2:	4b27      	ldr	r3, [pc, #156]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800baa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa6:	4a26      	ldr	r2, [pc, #152]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800baa8:	f023 0310 	bic.w	r3, r3, #16
 800baac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800baae:	4b24      	ldr	r3, [pc, #144]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bab2:	4b24      	ldr	r3, [pc, #144]	@ (800bb44 <RCCEx_PLL2_Config+0x160>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	69d2      	ldr	r2, [r2, #28]
 800baba:	00d2      	lsls	r2, r2, #3
 800babc:	4920      	ldr	r1, [pc, #128]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bac2:	4b1f      	ldr	r3, [pc, #124]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac6:	4a1e      	ldr	r2, [pc, #120]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bac8:	f043 0310 	orr.w	r3, r3, #16
 800bacc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d106      	bne.n	800bae2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bad4:	4b1a      	ldr	r3, [pc, #104]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad8:	4a19      	ldr	r2, [pc, #100]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bada:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bade:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bae0:	e00f      	b.n	800bb02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d106      	bne.n	800baf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bae8:	4b15      	ldr	r3, [pc, #84]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800baea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baec:	4a14      	ldr	r2, [pc, #80]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800baee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800baf4:	e005      	b.n	800bb02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800baf6:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafa:	4a11      	ldr	r2, [pc, #68]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bafc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb02:	4b0f      	ldr	r3, [pc, #60]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a0e      	ldr	r2, [pc, #56]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bb08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb0e:	f7f6 feaf 	bl	8002870 <HAL_GetTick>
 800bb12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb14:	e008      	b.n	800bb28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb16:	f7f6 feab 	bl	8002870 <HAL_GetTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d901      	bls.n	800bb28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e006      	b.n	800bb36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <RCCEx_PLL2_Config+0x15c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0f0      	beq.n	800bb16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	58024400 	.word	0x58024400
 800bb44:	ffff0007 	.word	0xffff0007

0800bb48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb56:	4b53      	ldr	r3, [pc, #332]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d101      	bne.n	800bb66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e099      	b.n	800bc9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb66:	4b4f      	ldr	r3, [pc, #316]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a4e      	ldr	r2, [pc, #312]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bb6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb72:	f7f6 fe7d 	bl	8002870 <HAL_GetTick>
 800bb76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb78:	e008      	b.n	800bb8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb7a:	f7f6 fe79 	bl	8002870 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e086      	b.n	800bc9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb8c:	4b45      	ldr	r3, [pc, #276]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb98:	4b42      	ldr	r3, [pc, #264]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	051b      	lsls	r3, r3, #20
 800bba6:	493f      	ldr	r1, [pc, #252]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	628b      	str	r3, [r1, #40]	@ 0x28
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	025b      	lsls	r3, r3, #9
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	061b      	lsls	r3, r3, #24
 800bbd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbdc:	4931      	ldr	r1, [pc, #196]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bbe2:	4b30      	ldr	r3, [pc, #192]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	492d      	ldr	r1, [pc, #180]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bbf4:	4b2b      	ldr	r3, [pc, #172]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	4928      	ldr	r1, [pc, #160]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc06:	4b27      	ldr	r3, [pc, #156]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0a:	4a26      	ldr	r2, [pc, #152]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc12:	4b24      	ldr	r3, [pc, #144]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc16:	4b24      	ldr	r3, [pc, #144]	@ (800bca8 <RCCEx_PLL3_Config+0x160>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	69d2      	ldr	r2, [r2, #28]
 800bc1e:	00d2      	lsls	r2, r2, #3
 800bc20:	4920      	ldr	r1, [pc, #128]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc26:	4b1f      	ldr	r3, [pc, #124]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bc38:	4b1a      	ldr	r3, [pc, #104]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3c:	4a19      	ldr	r2, [pc, #100]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bc42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc44:	e00f      	b.n	800bc66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d106      	bne.n	800bc5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc4c:	4b15      	ldr	r3, [pc, #84]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	4a14      	ldr	r2, [pc, #80]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bc56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc58:	e005      	b.n	800bc66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc5a:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc5e:	4a11      	ldr	r2, [pc, #68]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc66:	4b0f      	ldr	r3, [pc, #60]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a0e      	ldr	r2, [pc, #56]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc72:	f7f6 fdfd 	bl	8002870 <HAL_GetTick>
 800bc76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc78:	e008      	b.n	800bc8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc7a:	f7f6 fdf9 	bl	8002870 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d901      	bls.n	800bc8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e006      	b.n	800bc9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc8c:	4b05      	ldr	r3, [pc, #20]	@ (800bca4 <RCCEx_PLL3_Config+0x15c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0f0      	beq.n	800bc7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	58024400 	.word	0x58024400
 800bca8:	ffff0007 	.word	0xffff0007

0800bcac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08a      	sub	sp, #40	@ 0x28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e075      	b.n	800bdaa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7f6 fa35 	bl	8002140 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2204      	movs	r2, #4
 800bcda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f868 	bl	800bdb4 <HAL_SD_InitCard>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e05d      	b.n	800bdaa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bcee:	f107 0308 	add.w	r3, r7, #8
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fdaf 	bl	800c858 <HAL_SD_GetCardStatus>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d001      	beq.n	800bd04 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e052      	b.n	800bdaa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bd04:	7e3b      	ldrb	r3, [r7, #24]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bd0a:	7e7b      	ldrb	r3, [r7, #25]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d10a      	bne.n	800bd2e <HAL_SD_Init+0x82>
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <HAL_SD_Init+0x78>
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd2a:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd2c:	e00b      	b.n	800bd46 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d104      	bne.n	800bd40 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd3c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd3e:	e002      	b.n	800bd46 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fe6d 	bl	800ca2c <HAL_SD_ConfigWideBusOperation>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d001      	beq.n	800bd5c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e026      	b.n	800bdaa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bd5c:	f7f6 fd88 	bl	8002870 <HAL_GetTick>
 800bd60:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd62:	e011      	b.n	800bd88 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd64:	f7f6 fd84 	bl	8002870 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd72:	d109      	bne.n	800bd88 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd7a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e010      	b.n	800bdaa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 ff61 	bl	800cc50 <HAL_SD_GetCardState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b04      	cmp	r3, #4
 800bd92:	d1e7      	bne.n	800bd64 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3728      	adds	r7, #40	@ 0x28
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b08d      	sub	sp, #52	@ 0x34
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bdcc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bdd0:	f04f 0100 	mov.w	r1, #0
 800bdd4:	f7fe fd24 	bl	800a820 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdd8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d109      	bne.n	800bdf4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bdee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e070      	b.n	800bed6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	0a1b      	lsrs	r3, r3, #8
 800bdf8:	4a39      	ldr	r2, [pc, #228]	@ (800bee0 <HAL_SD_InitCard+0x12c>)
 800bdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfe:	091b      	lsrs	r3, r3, #4
 800be00:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681c      	ldr	r4, [r3, #0]
 800be06:	466a      	mov	r2, sp
 800be08:	f107 0318 	add.w	r3, r7, #24
 800be0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be10:	e882 0003 	stmia.w	r2, {r0, r1}
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be1a:	4620      	mov	r0, r4
 800be1c:	f003 fffe 	bl	800fe1c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4618      	mov	r0, r3
 800be26:	f004 f841 	bl	800feac <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d005      	beq.n	800be3c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be36:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d007      	beq.n	800be52 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800be42:	4a28      	ldr	r2, [pc, #160]	@ (800bee4 <HAL_SD_InitCard+0x130>)
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4a:	3301      	adds	r3, #1
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7f6 fd1b 	bl	8002888 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 ffea 	bl	800ce2c <SD_PowerON>
 800be58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	431a      	orrs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e02e      	b.n	800bed6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 ff09 	bl	800cc90 <SD_InitCard>
 800be7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00b      	beq.n	800be9e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	431a      	orrs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e01b      	b.n	800bed6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bea6:	4618      	mov	r0, r3
 800bea8:	f004 f896 	bl	800ffd8 <SDMMC_CmdBlockLength>
 800beac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00f      	beq.n	800bed4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a0b      	ldr	r2, [pc, #44]	@ (800bee8 <HAL_SD_InitCard+0x134>)
 800beba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	431a      	orrs	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e000      	b.n	800bed6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	372c      	adds	r7, #44	@ 0x2c
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd90      	pop	{r4, r7, pc}
 800bede:	bf00      	nop
 800bee0:	014f8b59 	.word	0x014f8b59
 800bee4:	00012110 	.word	0x00012110
 800bee8:	1fe00fff 	.word	0x1fe00fff

0800beec <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08c      	sub	sp, #48	@ 0x30
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d107      	bne.n	800bf14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e08d      	b.n	800c030 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	f040 8086 	bne.w	800c02e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bf28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	441a      	add	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d907      	bls.n	800bf46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf3a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e074      	b.n	800c030 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2203      	movs	r2, #3
 800bf4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2200      	movs	r2, #0
 800bf54:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	025a      	lsls	r2, r3, #9
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d002      	beq.n	800bf72 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6e:	025b      	lsls	r3, r3, #9
 800bf70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf72:	f04f 33ff 	mov.w	r3, #4294967295
 800bf76:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	025b      	lsls	r3, r3, #9
 800bf7c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bf7e:	2390      	movs	r3, #144	@ 0x90
 800bf80:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bf82:	2302      	movs	r3, #2
 800bf84:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f107 0210 	add.w	r2, r7, #16
 800bf96:	4611      	mov	r1, r2
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f003 fff1 	bl	800ff80 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfac:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d90a      	bls.n	800bfda <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2282      	movs	r2, #130	@ 0x82
 800bfc8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f004 f847 	bl	8010064 <SDMMC_CmdReadMultiBlock>
 800bfd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bfd8:	e009      	b.n	800bfee <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2281      	movs	r2, #129	@ 0x81
 800bfde:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f004 f819 	bl	801001e <SDMMC_CmdReadSingleBlock>
 800bfec:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d012      	beq.n	800c01a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a0f      	ldr	r2, [pc, #60]	@ (800c038 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800bffa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c002:	431a      	orrs	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e00a      	b.n	800c030 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c028:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e000      	b.n	800c030 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c02e:	2302      	movs	r3, #2
  }
}
 800c030:	4618      	mov	r0, r3
 800c032:	3730      	adds	r7, #48	@ 0x30
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	1fe00fff 	.word	0x1fe00fff

0800c03c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08c      	sub	sp, #48	@ 0x30
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d107      	bne.n	800c064 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c058:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e08d      	b.n	800c180 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	f040 8086 	bne.w	800c17e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	441a      	add	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c082:	429a      	cmp	r2, r3
 800c084:	d907      	bls.n	800c096 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c08a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	e074      	b.n	800c180 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2203      	movs	r2, #3
 800c09a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	025a      	lsls	r2, r3, #9
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d002      	beq.n	800c0c2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	025b      	lsls	r3, r3, #9
 800c0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	025b      	lsls	r3, r3, #9
 800c0cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0ce:	2390      	movs	r3, #144	@ 0x90
 800c0d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f107 0210 	add.w	r2, r7, #16
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f003 ff49 	bl	800ff80 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68da      	ldr	r2, [r3, #12]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0fc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2201      	movs	r2, #1
 800c10c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d90a      	bls.n	800c12a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	22a0      	movs	r2, #160	@ 0xa0
 800c118:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c120:	4618      	mov	r0, r3
 800c122:	f003 ffe5 	bl	80100f0 <SDMMC_CmdWriteMultiBlock>
 800c126:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c128:	e009      	b.n	800c13e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2290      	movs	r2, #144	@ 0x90
 800c12e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c136:	4618      	mov	r0, r3
 800c138:	f003 ffb7 	bl	80100aa <SDMMC_CmdWriteSingleBlock>
 800c13c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a0f      	ldr	r2, [pc, #60]	@ (800c188 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c14a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c152:	431a      	orrs	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e00a      	b.n	800c180 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c178:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e000      	b.n	800c180 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c17e:	2302      	movs	r3, #2
  }
}
 800c180:	4618      	mov	r0, r3
 800c182:	3730      	adds	r7, #48	@ 0x30
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	1fe00fff 	.word	0x1fe00fff

0800c18c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c198:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d008      	beq.n	800c1ba <HAL_SD_IRQHandler+0x2e>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f003 0308 	and.w	r3, r3, #8
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f001 f926 	bl	800d404 <SD_Read_IT>
 800c1b8:	e19a      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80ac 	beq.w	800c322 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4b59      	ldr	r3, [pc, #356]	@ (800c344 <HAL_SD_IRQHandler+0x1b8>)
 800c1e0:	400b      	ands	r3, r1
 800c1e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c1f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c202:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0308 	and.w	r3, r3, #8
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d038      	beq.n	800c280 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d104      	bne.n	800c222 <HAL_SD_IRQHandler+0x96>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d011      	beq.n	800c246 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4618      	mov	r0, r3
 800c228:	f003 ff86 	bl	8010138 <SDMMC_CmdStopTransfer>
 800c22c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d008      	beq.n	800c246 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f95b 	bl	800c4fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a3f      	ldr	r2, [pc, #252]	@ (800c348 <HAL_SD_IRQHandler+0x1bc>)
 800c24c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f003 0301 	and.w	r3, r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	d104      	bne.n	800c270 <HAL_SD_IRQHandler+0xe4>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f004 fc31 	bl	8010ad8 <HAL_SD_RxCpltCallback>
 800c276:	e13b      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f004 fc23 	bl	8010ac4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c27e:	e137      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 8132 	beq.w	800c4f0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2200      	movs	r2, #0
 800c29a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d104      	bne.n	800c2b8 <HAL_SD_IRQHandler+0x12c>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f003 0320 	and.w	r3, r3, #32
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d011      	beq.n	800c2dc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f003 ff3b 	bl	8010138 <SDMMC_CmdStopTransfer>
 800c2c2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d008      	beq.n	800c2dc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f910 	bl	800c4fc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f003 0310 	and.w	r3, r3, #16
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <HAL_SD_IRQHandler+0x172>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f004 fbe0 	bl	8010ac4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d105      	bne.n	800c31a <HAL_SD_IRQHandler+0x18e>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 80eb 	beq.w	800c4f0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f004 fbdc 	bl	8010ad8 <HAL_SD_RxCpltCallback>
}
 800c320:	e0e6      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00d      	beq.n	800c34c <HAL_SD_IRQHandler+0x1c0>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f003 0308 	and.w	r3, r3, #8
 800c336:	2b00      	cmp	r3, #0
 800c338:	d008      	beq.n	800c34c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 f8a8 	bl	800d490 <SD_Write_IT>
 800c340:	e0d6      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
 800c342:	bf00      	nop
 800c344:	ffff3ec5 	.word	0xffff3ec5
 800c348:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c352:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 809d 	beq.w	800c496 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36e:	f043 0202 	orr.w	r2, r3, #2
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c37c:	f003 0308 	and.w	r3, r3, #8
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c388:	f043 0208 	orr.w	r2, r3, #8
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c396:	f003 0320 	and.w	r3, r3, #32
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3a2:	f043 0220 	orr.w	r2, r3, #32
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3b0:	f003 0310 	and.w	r3, r3, #16
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3bc:	f043 0210 	orr.w	r2, r3, #16
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a4b      	ldr	r2, [pc, #300]	@ (800c4f8 <HAL_SD_IRQHandler+0x36c>)
 800c3ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c3da:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68da      	ldr	r2, [r3, #12]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3ea:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c3fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c40a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4618      	mov	r0, r3
 800c412:	f003 fe91 	bl	8010138 <SDMMC_CmdStopTransfer>
 800c416:	4602      	mov	r2, r0
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c430:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c43a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f003 0308 	and.w	r3, r3, #8
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f851 	bl	800c4fc <HAL_SD_ErrorCallback>
}
 800c45a:	e049      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c462:	2b00      	cmp	r3, #0
 800c464:	d044      	beq.n	800c4f0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d040      	beq.n	800c4f0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c47c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f834 	bl	800c4fc <HAL_SD_ErrorCallback>
}
 800c494:	e02c      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c49c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d025      	beq.n	800c4f0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10c      	bne.n	800c4d6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 f84a 	bl	800d560 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c4cc:	e010      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f001 f832 	bl	800d538 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c4d4:	e00c      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f003 0320 	and.w	r3, r3, #32
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 f833 	bl	800d54c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c4e6:	e003      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f001 f81b 	bl	800d524 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c4ee:	e7ff      	b.n	800c4f0 <HAL_SD_IRQHandler+0x364>
 800c4f0:	bf00      	nop
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	18000f3a 	.word	0x18000f3a

0800c4fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c51e:	0f9b      	lsrs	r3, r3, #30
 800c520:	b2da      	uxtb	r2, r3
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c52a:	0e9b      	lsrs	r3, r3, #26
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	b2da      	uxtb	r2, r3
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c53c:	0e1b      	lsrs	r3, r3, #24
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	b2da      	uxtb	r2, r3
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c54e:	0c1b      	lsrs	r3, r3, #16
 800c550:	b2da      	uxtb	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c55a:	0a1b      	lsrs	r3, r3, #8
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c566:	b2da      	uxtb	r2, r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c570:	0d1b      	lsrs	r3, r3, #20
 800c572:	b29a      	uxth	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c57c:	0c1b      	lsrs	r3, r3, #16
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 030f 	and.w	r3, r3, #15
 800c584:	b2da      	uxtb	r2, r3
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c58e:	0bdb      	lsrs	r3, r3, #15
 800c590:	b2db      	uxtb	r3, r3
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	b2da      	uxtb	r2, r3
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5a0:	0b9b      	lsrs	r3, r3, #14
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5b2:	0b5b      	lsrs	r3, r3, #13
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5c4:	0b1b      	lsrs	r3, r3, #12
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d163      	bne.n	800c6a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5e4:	009a      	lsls	r2, r3, #2
 800c5e6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c5f0:	0f92      	lsrs	r2, r2, #30
 800c5f2:	431a      	orrs	r2, r3
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5fc:	0edb      	lsrs	r3, r3, #27
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	b2da      	uxtb	r2, r3
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c60e:	0e1b      	lsrs	r3, r3, #24
 800c610:	b2db      	uxtb	r3, r3
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	b2da      	uxtb	r2, r3
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c620:	0d5b      	lsrs	r3, r3, #21
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 0307 	and.w	r3, r3, #7
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c632:	0c9b      	lsrs	r3, r3, #18
 800c634:	b2db      	uxtb	r3, r3
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c644:	0bdb      	lsrs	r3, r3, #15
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0307 	and.w	r3, r3, #7
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	7e1b      	ldrb	r3, [r3, #24]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	f003 0307 	and.w	r3, r3, #7
 800c666:	3302      	adds	r3, #2
 800c668:	2201      	movs	r2, #1
 800c66a:	fa02 f303 	lsl.w	r3, r2, r3
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c672:	fb03 f202 	mul.w	r2, r3, r2
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	7a1b      	ldrb	r3, [r3, #8]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 030f 	and.w	r3, r3, #15
 800c684:	2201      	movs	r2, #1
 800c686:	409a      	lsls	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c694:	0a52      	lsrs	r2, r2, #9
 800c696:	fb03 f202 	mul.w	r2, r3, r2
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6a4:	655a      	str	r2, [r3, #84]	@ 0x54
 800c6a6:	e031      	b.n	800c70c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d11d      	bne.n	800c6ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6b4:	041b      	lsls	r3, r3, #16
 800c6b6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6be:	0c1b      	lsrs	r3, r3, #16
 800c6c0:	431a      	orrs	r2, r3
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	029a      	lsls	r2, r3, #10
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	655a      	str	r2, [r3, #84]	@ 0x54
 800c6ea:	e00f      	b.n	800c70c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a58      	ldr	r2, [pc, #352]	@ (800c854 <HAL_SD_GetCardCSD+0x344>)
 800c6f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	e09d      	b.n	800c848 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c710:	0b9b      	lsrs	r3, r3, #14
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c722:	09db      	lsrs	r3, r3, #7
 800c724:	b2db      	uxtb	r3, r3
 800c726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c744:	0fdb      	lsrs	r3, r3, #31
 800c746:	b2da      	uxtb	r2, r3
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c750:	0f5b      	lsrs	r3, r3, #29
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0303 	and.w	r3, r3, #3
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c762:	0e9b      	lsrs	r3, r3, #26
 800c764:	b2db      	uxtb	r3, r3
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c774:	0d9b      	lsrs	r3, r3, #22
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 030f 	and.w	r3, r3, #15
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c786:	0d5b      	lsrs	r3, r3, #21
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7a2:	0c1b      	lsrs	r3, r3, #16
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7b6:	0bdb      	lsrs	r3, r3, #15
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7ca:	0b9b      	lsrs	r3, r3, #14
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7de:	0b5b      	lsrs	r3, r3, #13
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7f2:	0b1b      	lsrs	r3, r3, #12
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c806:	0a9b      	lsrs	r3, r3, #10
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	f003 0303 	and.w	r3, r3, #3
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c81a:	0a1b      	lsrs	r3, r3, #8
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	f003 0303 	and.w	r3, r3, #3
 800c822:	b2da      	uxtb	r2, r3
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c82e:	085b      	lsrs	r3, r3, #1
 800c830:	b2db      	uxtb	r3, r3
 800c832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c836:	b2da      	uxtb	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	1fe00fff 	.word	0x1fe00fff

0800c858 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b094      	sub	sp, #80	@ 0x50
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b03      	cmp	r3, #3
 800c872:	d101      	bne.n	800c878 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e0a7      	b.n	800c9c8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c878:	f107 0308 	add.w	r3, r7, #8
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fb62 	bl	800cf48 <SD_SendSDStatus>
 800c884:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d011      	beq.n	800c8b0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a4f      	ldr	r2, [pc, #316]	@ (800c9d0 <HAL_SD_GetCardStatus+0x178>)
 800c892:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c89a:	431a      	orrs	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c8ae:	e070      	b.n	800c992 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	099b      	lsrs	r3, r3, #6
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 0303 	and.w	r3, r3, #3
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	0a1b      	lsrs	r3, r3, #8
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	0e1b      	lsrs	r3, r3, #24
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	061a      	lsls	r2, r3, #24
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	021b      	lsls	r3, r3, #8
 800c8f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c8f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	0a1b      	lsrs	r3, r3, #8
 800c8fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c900:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	0e1b      	lsrs	r3, r3, #24
 800c906:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	0a1b      	lsrs	r3, r3, #8
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	0d1b      	lsrs	r3, r3, #20
 800c922:	b2db      	uxtb	r3, r3
 800c924:	f003 030f 	and.w	r3, r3, #15
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	0c1b      	lsrs	r3, r3, #16
 800c932:	b29b      	uxth	r3, r3
 800c934:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c938:	b29a      	uxth	r2, r3
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	b29b      	uxth	r3, r3
 800c942:	4313      	orrs	r3, r2
 800c944:	b29a      	uxth	r2, r3
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	0a9b      	lsrs	r3, r3, #10
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c954:	b2da      	uxtb	r2, r3
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	f003 0303 	and.w	r3, r3, #3
 800c964:	b2da      	uxtb	r2, r3
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	091b      	lsrs	r3, r3, #4
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f003 030f 	and.w	r3, r3, #15
 800c974:	b2da      	uxtb	r2, r3
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 030f 	and.w	r3, r3, #15
 800c982:	b2da      	uxtb	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	0e1b      	lsrs	r3, r3, #24
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c99a:	4618      	mov	r0, r3
 800c99c:	f003 fb1c 	bl	800ffd8 <SDMMC_CmdBlockLength>
 800c9a0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00d      	beq.n	800c9c4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a08      	ldr	r2, [pc, #32]	@ (800c9d0 <HAL_SD_GetCardStatus+0x178>)
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800c9c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3750      	adds	r7, #80	@ 0x50
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	1fe00fff 	.word	0x1fe00fff

0800c9d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ca2c:	b590      	push	{r4, r7, lr}
 800ca2e:	b08d      	sub	sp, #52	@ 0x34
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2203      	movs	r2, #3
 800ca40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d02e      	beq.n	800caaa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca52:	d106      	bne.n	800ca62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca60:	e029      	b.n	800cab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca68:	d10a      	bne.n	800ca80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fb64 	bl	800d138 <SD_WideBus_Enable>
 800ca70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca7e:	e01a      	b.n	800cab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10a      	bne.n	800ca9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fba1 	bl	800d1ce <SD_WideBus_Disable>
 800ca8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	431a      	orrs	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	635a      	str	r2, [r3, #52]	@ 0x34
 800ca9a:	e00c      	b.n	800cab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caa0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	635a      	str	r2, [r3, #52]	@ 0x34
 800caa8:	e005      	b.n	800cab6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d007      	beq.n	800cace <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a5f      	ldr	r2, [pc, #380]	@ (800cc40 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cac4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cacc:	e096      	b.n	800cbfc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cace:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cad2:	f04f 0100 	mov.w	r1, #0
 800cad6:	f7fd fea3 	bl	800a820 <HAL_RCCEx_GetPeriphCLKFreq>
 800cada:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 8083 	beq.w	800cbea <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	695a      	ldr	r2, [r3, #20]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4950      	ldr	r1, [pc, #320]	@ (800cc44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb02:	fba1 1303 	umull	r1, r3, r1, r3
 800cb06:	0e1b      	lsrs	r3, r3, #24
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d303      	bcc.n	800cb14 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	61bb      	str	r3, [r7, #24]
 800cb12:	e05a      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb1c:	d103      	bne.n	800cb26 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	61bb      	str	r3, [r7, #24]
 800cb24:	e051      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb2e:	d126      	bne.n	800cb7e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10e      	bne.n	800cb56 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	4a43      	ldr	r2, [pc, #268]	@ (800cc48 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d906      	bls.n	800cb4e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	4a40      	ldr	r2, [pc, #256]	@ (800cc44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb44:	fba2 2303 	umull	r2, r3, r2, r3
 800cb48:	0e5b      	lsrs	r3, r3, #25
 800cb4a:	61bb      	str	r3, [r7, #24]
 800cb4c:	e03d      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	61bb      	str	r3, [r7, #24]
 800cb54:	e039      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb62:	4a39      	ldr	r2, [pc, #228]	@ (800cc48 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d906      	bls.n	800cb76 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4a36      	ldr	r2, [pc, #216]	@ (800cc44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb6c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb70:	0e5b      	lsrs	r3, r3, #25
 800cb72:	61bb      	str	r3, [r7, #24]
 800cb74:	e029      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	61bb      	str	r3, [r7, #24]
 800cb7c:	e025      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10e      	bne.n	800cba4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	4a30      	ldr	r2, [pc, #192]	@ (800cc4c <HAL_SD_ConfigWideBusOperation+0x220>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d906      	bls.n	800cb9c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	4a2c      	ldr	r2, [pc, #176]	@ (800cc44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cb92:	fba2 2303 	umull	r2, r3, r2, r3
 800cb96:	0e1b      	lsrs	r3, r3, #24
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	e016      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	61bb      	str	r3, [r7, #24]
 800cba2:	e012      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb0:	4a26      	ldr	r2, [pc, #152]	@ (800cc4c <HAL_SD_ConfigWideBusOperation+0x220>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d906      	bls.n	800cbc4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	4a22      	ldr	r2, [pc, #136]	@ (800cc44 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cbba:	fba2 2303 	umull	r2, r3, r2, r3
 800cbbe:	0e1b      	lsrs	r3, r3, #24
 800cbc0:	61bb      	str	r3, [r7, #24]
 800cbc2:	e002      	b.n	800cbca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681c      	ldr	r4, [r3, #0]
 800cbce:	466a      	mov	r2, sp
 800cbd0:	f107 0314 	add.w	r3, r7, #20
 800cbd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbd8:	e882 0003 	stmia.w	r2, {r0, r1}
 800cbdc:	f107 0308 	add.w	r3, r7, #8
 800cbe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f003 f91a 	bl	800fe1c <SDMMC_Init>
 800cbe8:	e008      	b.n	800cbfc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc04:	4618      	mov	r0, r3
 800cc06:	f003 f9e7 	bl	800ffd8 <SDMMC_CmdBlockLength>
 800cc0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc0c:	6a3b      	ldr	r3, [r7, #32]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00c      	beq.n	800cc2c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a0a      	ldr	r2, [pc, #40]	@ (800cc40 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cc18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	431a      	orrs	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	372c      	adds	r7, #44	@ 0x2c
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd90      	pop	{r4, r7, pc}
 800cc40:	1fe00fff 	.word	0x1fe00fff
 800cc44:	55e63b89 	.word	0x55e63b89
 800cc48:	02faf080 	.word	0x02faf080
 800cc4c:	017d7840 	.word	0x017d7840

0800cc50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cc5c:	f107 030c 	add.w	r3, r7, #12
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa40 	bl	800d0e8 <SD_SendStatus>
 800cc68:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	431a      	orrs	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	0a5b      	lsrs	r3, r3, #9
 800cc80:	f003 030f 	and.w	r3, r3, #15
 800cc84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc86:	693b      	ldr	r3, [r7, #16]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b090      	sub	sp, #64	@ 0x40
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cc9c:	f7f5 fde8 	bl	8002870 <HAL_GetTick>
 800cca0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f003 f911 	bl	800fece <SDMMC_GetPowerState>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d102      	bne.n	800ccb8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ccb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ccb6:	e0b5      	b.n	800ce24 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d02e      	beq.n	800cd1e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f003 fb5c 	bl	8010382 <SDMMC_CmdSendCID>
 800ccca:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <SD_InitCard+0x46>
    {
      return errorstate;
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd4:	e0a6      	b.n	800ce24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f003 f93c 	bl	800ff5a <SDMMC_GetResponse>
 800cce2:	4602      	mov	r2, r0
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2104      	movs	r1, #4
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f003 f933 	bl	800ff5a <SDMMC_GetResponse>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2108      	movs	r1, #8
 800cd00:	4618      	mov	r0, r3
 800cd02:	f003 f92a 	bl	800ff5a <SDMMC_GetResponse>
 800cd06:	4602      	mov	r2, r0
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	210c      	movs	r1, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f003 f921 	bl	800ff5a <SDMMC_GetResponse>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d01d      	beq.n	800cd62 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cd26:	e019      	b.n	800cd5c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f107 020a 	add.w	r2, r7, #10
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f003 fb64 	bl	8010400 <SDMMC_CmdSetRelAdd>
 800cd38:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <SD_InitCard+0xb4>
      {
        return errorstate;
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	e06f      	b.n	800ce24 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cd44:	f7f5 fd94 	bl	8002870 <HAL_GetTick>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d902      	bls.n	800cd5c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800cd56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd5a:	e063      	b.n	800ce24 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cd5c:	897b      	ldrh	r3, [r7, #10]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0e2      	beq.n	800cd28 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d036      	beq.n	800cdd8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cd6a:	897b      	ldrh	r3, [r7, #10]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd7a:	041b      	lsls	r3, r3, #16
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4610      	mov	r0, r2
 800cd80:	f003 fb1e 	bl	80103c0 <SDMMC_CmdSendCSD>
 800cd84:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <SD_InitCard+0x100>
    {
      return errorstate;
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8e:	e049      	b.n	800ce24 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2100      	movs	r1, #0
 800cd96:	4618      	mov	r0, r3
 800cd98:	f003 f8df 	bl	800ff5a <SDMMC_GetResponse>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2104      	movs	r1, #4
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f003 f8d6 	bl	800ff5a <SDMMC_GetResponse>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2108      	movs	r1, #8
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f003 f8cd 	bl	800ff5a <SDMMC_GetResponse>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	210c      	movs	r1, #12
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f003 f8c4 	bl	800ff5a <SDMMC_GetResponse>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2104      	movs	r1, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f003 f8bb 	bl	800ff5a <SDMMC_GetResponse>
 800cde4:	4603      	mov	r3, r0
 800cde6:	0d1a      	lsrs	r2, r3, #20
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cdec:	f107 030c 	add.w	r3, r7, #12
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff fb8c 	bl	800c510 <HAL_SD_GetCardCSD>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d002      	beq.n	800ce04 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdfe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ce02:	e00f      	b.n	800ce24 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce0c:	041b      	lsls	r3, r3, #16
 800ce0e:	4619      	mov	r1, r3
 800ce10:	4610      	mov	r0, r2
 800ce12:	f003 f9cd 	bl	80101b0 <SDMMC_CmdSelDesel>
 800ce16:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <SD_InitCard+0x192>
  {
    return errorstate;
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce20:	e000      	b.n	800ce24 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3740      	adds	r7, #64	@ 0x40
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f003 f9d6 	bl	80101f6 <SDMMC_CmdGoIdleState>
 800ce4a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	e072      	b.n	800cf3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f003 f9e9 	bl	8010232 <SDMMC_CmdOperCond>
 800ce60:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce68:	d10d      	bne.n	800ce86 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f003 f9be 	bl	80101f6 <SDMMC_CmdGoIdleState>
 800ce7a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <SD_PowerON+0x60>
    {
      return errorstate;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	e05a      	b.n	800cf3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d137      	bne.n	800cf04 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f003 f9e9 	bl	8010272 <SDMMC_CmdAppCommand>
 800cea0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d02d      	beq.n	800cf04 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cea8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ceac:	e046      	b.n	800cf3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f003 f9dc 	bl	8010272 <SDMMC_CmdAppCommand>
 800ceba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	e03a      	b.n	800cf3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	491e      	ldr	r1, [pc, #120]	@ (800cf44 <SD_PowerON+0x118>)
 800cecc:	4618      	mov	r0, r3
 800cece:	f003 f9f3 	bl	80102b8 <SDMMC_CmdAppOperCommand>
 800ced2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d002      	beq.n	800cee0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ceda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cede:	e02d      	b.n	800cf3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2100      	movs	r1, #0
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 f837 	bl	800ff5a <SDMMC_GetResponse>
 800ceec:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	0fdb      	lsrs	r3, r3, #31
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d101      	bne.n	800cefa <SD_PowerON+0xce>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <SD_PowerON+0xd0>
 800cefa:	2300      	movs	r3, #0
 800cefc:	613b      	str	r3, [r7, #16]

    count++;
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	3301      	adds	r3, #1
 800cf02:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d802      	bhi.n	800cf14 <SD_PowerON+0xe8>
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d0cc      	beq.n	800ceae <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d902      	bls.n	800cf24 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cf1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cf22:	e00b      	b.n	800cf3c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	c1100000 	.word	0xc1100000

0800cf48 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08c      	sub	sp, #48	@ 0x30
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf52:	f7f5 fc8d 	bl	8002870 <HAL_GetTick>
 800cf56:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2100      	movs	r1, #0
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 fff9 	bl	800ff5a <SDMMC_GetResponse>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf72:	d102      	bne.n	800cf7a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cf74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf78:	e0b0      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2140      	movs	r1, #64	@ 0x40
 800cf80:	4618      	mov	r0, r3
 800cf82:	f003 f829 	bl	800ffd8 <SDMMC_CmdBlockLength>
 800cf86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d005      	beq.n	800cf9a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	e0a0      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa2:	041b      	lsls	r3, r3, #16
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4610      	mov	r0, r2
 800cfa8:	f003 f963 	bl	8010272 <SDMMC_CmdAppCommand>
 800cfac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	e08d      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cfc6:	2340      	movs	r3, #64	@ 0x40
 800cfc8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cfca:	2360      	movs	r3, #96	@ 0x60
 800cfcc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cfce:	2302      	movs	r3, #2
 800cfd0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f107 0208 	add.w	r2, r7, #8
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f002 ffcb 	bl	800ff80 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f003 fa4b 	bl	801048a <SDMMC_CmdStatusRegister>
 800cff4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d02b      	beq.n	800d054 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	e069      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d00e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d013      	beq.n	800d03e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d016:	2300      	movs	r3, #0
 800d018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d01a:	e00d      	b.n	800d038 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f002 ff25 	bl	800fe70 <SDMMC_ReadFIFO>
 800d026:	4602      	mov	r2, r0
 800d028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02a:	601a      	str	r2, [r3, #0]
        pData++;
 800d02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02e:	3304      	adds	r3, #4
 800d030:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	3301      	adds	r3, #1
 800d036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03a:	2b07      	cmp	r3, #7
 800d03c:	d9ee      	bls.n	800d01c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d03e:	f7f5 fc17 	bl	8002870 <HAL_GetTick>
 800d042:	4602      	mov	r2, r0
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04c:	d102      	bne.n	800d054 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d04e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d052:	e043      	b.n	800d0dc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0d2      	beq.n	800d008 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d068:	f003 0308 	and.w	r3, r3, #8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d070:	2308      	movs	r3, #8
 800d072:	e033      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d07a:	f003 0302 	and.w	r3, r3, #2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d082:	2302      	movs	r3, #2
 800d084:	e02a      	b.n	800d0dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d08c:	f003 0320 	and.w	r3, r3, #32
 800d090:	2b00      	cmp	r3, #0
 800d092:	d017      	beq.n	800d0c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d094:	2320      	movs	r3, #32
 800d096:	e021      	b.n	800d0dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f002 fee7 	bl	800fe70 <SDMMC_ReadFIFO>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a6:	601a      	str	r2, [r3, #0]
    pData++;
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0ae:	f7f5 fbdf 	bl	8002870 <HAL_GetTick>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d102      	bne.n	800d0c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d0be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0c2:	e00b      	b.n	800d0dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e2      	bne.n	800d098 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a03      	ldr	r2, [pc, #12]	@ (800d0e4 <SD_SendSDStatus+0x19c>)
 800d0d8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3730      	adds	r7, #48	@ 0x30
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	18000f3a 	.word	0x18000f3a

0800d0e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d0f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d0fc:	e018      	b.n	800d130 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d106:	041b      	lsls	r3, r3, #16
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f003 f99a 	bl	8010444 <SDMMC_CmdSendStatus>
 800d110:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	e009      	b.n	800d130 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2100      	movs	r1, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f002 ff19 	bl	800ff5a <SDMMC_GetResponse>
 800d128:	4602      	mov	r2, r0
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d140:	2300      	movs	r3, #0
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	2300      	movs	r3, #0
 800d146:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2100      	movs	r1, #0
 800d14e:	4618      	mov	r0, r3
 800d150:	f002 ff03 	bl	800ff5a <SDMMC_GetResponse>
 800d154:	4603      	mov	r3, r0
 800d156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d15a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d15e:	d102      	bne.n	800d166 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d160:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d164:	e02f      	b.n	800d1c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d166:	f107 030c 	add.w	r3, r7, #12
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f879 	bl	800d264 <SD_FindSCR>
 800d172:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	e023      	b.n	800d1c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01c      	beq.n	800d1c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d190:	041b      	lsls	r3, r3, #16
 800d192:	4619      	mov	r1, r3
 800d194:	4610      	mov	r0, r2
 800d196:	f003 f86c 	bl	8010272 <SDMMC_CmdAppCommand>
 800d19a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	e00f      	b.n	800d1c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2102      	movs	r1, #2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f003 f8a3 	bl	80102f8 <SDMMC_CmdBusWidth>
 800d1b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	e003      	b.n	800d1c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	e001      	b.n	800d1c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f002 feb8 	bl	800ff5a <SDMMC_GetResponse>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d1f4:	d102      	bne.n	800d1fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d1fa:	e02f      	b.n	800d25c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d1fc:	f107 030c 	add.w	r3, r7, #12
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f82e 	bl	800d264 <SD_FindSCR>
 800d208:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	e023      	b.n	800d25c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d01c      	beq.n	800d258 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d226:	041b      	lsls	r3, r3, #16
 800d228:	4619      	mov	r1, r3
 800d22a:	4610      	mov	r0, r2
 800d22c:	f003 f821 	bl	8010272 <SDMMC_CmdAppCommand>
 800d230:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	e00f      	b.n	800d25c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2100      	movs	r1, #0
 800d242:	4618      	mov	r0, r3
 800d244:	f003 f858 	bl	80102f8 <SDMMC_CmdBusWidth>
 800d248:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	e003      	b.n	800d25c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d254:	2300      	movs	r3, #0
 800d256:	e001      	b.n	800d25c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d258:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08e      	sub	sp, #56	@ 0x38
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d26e:	f7f5 faff 	bl	8002870 <HAL_GetTick>
 800d272:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d278:	2300      	movs	r3, #0
 800d27a:	60bb      	str	r3, [r7, #8]
 800d27c:	2300      	movs	r3, #0
 800d27e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2108      	movs	r1, #8
 800d28a:	4618      	mov	r0, r3
 800d28c:	f002 fea4 	bl	800ffd8 <SDMMC_CmdBlockLength>
 800d290:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29a:	e0ad      	b.n	800d3f8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2a4:	041b      	lsls	r3, r3, #16
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	f002 ffe2 	bl	8010272 <SDMMC_CmdAppCommand>
 800d2ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d001      	beq.n	800d2ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800d2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b8:	e09e      	b.n	800d3f8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d2be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d2c4:	2330      	movs	r3, #48	@ 0x30
 800d2c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f107 0210 	add.w	r2, r7, #16
 800d2dc:	4611      	mov	r1, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f002 fe4e 	bl	800ff80 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f003 f828 	bl	801033e <SDMMC_CmdSendSCR>
 800d2ee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d027      	beq.n	800d346 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f8:	e07e      	b.n	800d3f8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d113      	bne.n	800d330 <SD_FindSCR+0xcc>
 800d308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d110      	bne.n	800d330 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4618      	mov	r0, r3
 800d314:	f002 fdac 	bl	800fe70 <SDMMC_ReadFIFO>
 800d318:	4603      	mov	r3, r0
 800d31a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4618      	mov	r0, r3
 800d322:	f002 fda5 	bl	800fe70 <SDMMC_ReadFIFO>
 800d326:	4603      	mov	r3, r0
 800d328:	60fb      	str	r3, [r7, #12]
      index++;
 800d32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d32c:	3301      	adds	r3, #1
 800d32e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d330:	f7f5 fa9e 	bl	8002870 <HAL_GetTick>
 800d334:	4602      	mov	r2, r0
 800d336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33e:	d102      	bne.n	800d346 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d344:	e058      	b.n	800d3f8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d34c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d350:	4013      	ands	r3, r2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d0d1      	beq.n	800d2fa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d35c:	f003 0308 	and.w	r3, r3, #8
 800d360:	2b00      	cmp	r3, #0
 800d362:	d005      	beq.n	800d370 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2208      	movs	r2, #8
 800d36a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d36c:	2308      	movs	r3, #8
 800d36e:	e043      	b.n	800d3f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d376:	f003 0302 	and.w	r3, r3, #2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d005      	beq.n	800d38a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2202      	movs	r2, #2
 800d384:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d386:	2302      	movs	r3, #2
 800d388:	e036      	b.n	800d3f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d390:	f003 0320 	and.w	r3, r3, #32
 800d394:	2b00      	cmp	r3, #0
 800d396:	d005      	beq.n	800d3a4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2220      	movs	r2, #32
 800d39e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d3a0:	2320      	movs	r3, #32
 800d3a2:	e029      	b.n	800d3f8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a15      	ldr	r2, [pc, #84]	@ (800d400 <SD_FindSCR+0x19c>)
 800d3aa:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	061a      	lsls	r2, r3, #24
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	0a1b      	lsrs	r3, r3, #8
 800d3be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0e1b      	lsrs	r3, r3, #24
 800d3c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	601a      	str	r2, [r3, #0]
    scr++;
 800d3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	061a      	lsls	r2, r3, #24
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	0a1b      	lsrs	r3, r3, #8
 800d3e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	0e1b      	lsrs	r3, r3, #24
 800d3f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3738      	adds	r7, #56	@ 0x38
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	18000f3a 	.word	0x18000f3a

0800d404 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d410:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d416:	2b1f      	cmp	r3, #31
 800d418:	d936      	bls.n	800d488 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d41a:	2300      	movs	r3, #0
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e027      	b.n	800d470 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f002 fd23 	bl	800fe70 <SDMMC_ReadFIFO>
 800d42a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	3301      	adds	r3, #1
 800d438:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	0a1b      	lsrs	r3, r3, #8
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	3301      	adds	r3, #1
 800d448:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	0c1b      	lsrs	r3, r3, #16
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	3301      	adds	r3, #1
 800d458:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	3301      	adds	r3, #1
 800d468:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	3301      	adds	r3, #1
 800d46e:	617b      	str	r3, [r7, #20]
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2b07      	cmp	r3, #7
 800d474:	d9d4      	bls.n	800d420 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d480:	f1a3 0220 	sub.w	r2, r3, #32
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d488:	bf00      	nop
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	69db      	ldr	r3, [r3, #28]
 800d49c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	2b1f      	cmp	r3, #31
 800d4a4:	d93a      	bls.n	800d51c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	617b      	str	r3, [r7, #20]
 800d4aa:	e02b      	b.n	800d504 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	021a      	lsls	r2, r3, #8
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	041a      	lsls	r2, r3, #16
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	061a      	lsls	r2, r3, #24
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f107 020c 	add.w	r2, r7, #12
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f002 fcc6 	bl	800fe8a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	3301      	adds	r3, #1
 800d502:	617b      	str	r3, [r7, #20]
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b07      	cmp	r3, #7
 800d508:	d9d0      	bls.n	800d4ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a1b      	ldr	r3, [r3, #32]
 800d514:	f1a3 0220 	sub.w	r2, r3, #32
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	621a      	str	r2, [r3, #32]
  }
}
 800d51c:	bf00      	nop
 800d51e:	3718      	adds	r7, #24
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e049      	b.n	800d61a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7f4 fe66 	bl	800226c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f000 fc58 	bl	800de68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b01      	cmp	r3, #1
 800d636:	d001      	beq.n	800d63c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e05e      	b.n	800d6fa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2202      	movs	r2, #2
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68da      	ldr	r2, [r3, #12]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f042 0201 	orr.w	r2, r2, #1
 800d652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a2b      	ldr	r2, [pc, #172]	@ (800d708 <HAL_TIM_Base_Start_IT+0xe4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d02c      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d666:	d027      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a27      	ldr	r2, [pc, #156]	@ (800d70c <HAL_TIM_Base_Start_IT+0xe8>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d022      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a26      	ldr	r2, [pc, #152]	@ (800d710 <HAL_TIM_Base_Start_IT+0xec>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d01d      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a24      	ldr	r2, [pc, #144]	@ (800d714 <HAL_TIM_Base_Start_IT+0xf0>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d018      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a23      	ldr	r2, [pc, #140]	@ (800d718 <HAL_TIM_Base_Start_IT+0xf4>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d013      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a21      	ldr	r2, [pc, #132]	@ (800d71c <HAL_TIM_Base_Start_IT+0xf8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d00e      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a20      	ldr	r2, [pc, #128]	@ (800d720 <HAL_TIM_Base_Start_IT+0xfc>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d009      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a1e      	ldr	r2, [pc, #120]	@ (800d724 <HAL_TIM_Base_Start_IT+0x100>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d004      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x94>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a1d      	ldr	r2, [pc, #116]	@ (800d728 <HAL_TIM_Base_Start_IT+0x104>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d115      	bne.n	800d6e4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689a      	ldr	r2, [r3, #8]
 800d6be:	4b1b      	ldr	r3, [pc, #108]	@ (800d72c <HAL_TIM_Base_Start_IT+0x108>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b06      	cmp	r3, #6
 800d6c8:	d015      	beq.n	800d6f6 <HAL_TIM_Base_Start_IT+0xd2>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6d0:	d011      	beq.n	800d6f6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 0201 	orr.w	r2, r2, #1
 800d6e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6e2:	e008      	b.n	800d6f6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f042 0201 	orr.w	r2, r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e000      	b.n	800d6f8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	40010000 	.word	0x40010000
 800d70c:	40000400 	.word	0x40000400
 800d710:	40000800 	.word	0x40000800
 800d714:	40000c00 	.word	0x40000c00
 800d718:	40010400 	.word	0x40010400
 800d71c:	40001800 	.word	0x40001800
 800d720:	40014000 	.word	0x40014000
 800d724:	4000e000 	.word	0x4000e000
 800d728:	4000e400 	.word	0x4000e400
 800d72c:	00010007 	.word	0x00010007

0800d730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e049      	b.n	800d7d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f841 	bl	800d7de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	3304      	adds	r3, #4
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f000 fb7a 	bl	800de68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d7de:	b480      	push	{r7}
 800d7e0:	b083      	sub	sp, #12
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d020      	beq.n	800d856 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d01b      	beq.n	800d856 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f06f 0202 	mvn.w	r2, #2
 800d826:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	f003 0303 	and.w	r3, r3, #3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 faf5 	bl	800de2c <HAL_TIM_IC_CaptureCallback>
 800d842:	e005      	b.n	800d850 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fae7 	bl	800de18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 faf8 	bl	800de40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	f003 0304 	and.w	r3, r3, #4
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d020      	beq.n	800d8a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f003 0304 	and.w	r3, r3, #4
 800d866:	2b00      	cmp	r3, #0
 800d868:	d01b      	beq.n	800d8a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f06f 0204 	mvn.w	r2, #4
 800d872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 facf 	bl	800de2c <HAL_TIM_IC_CaptureCallback>
 800d88e:	e005      	b.n	800d89c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fac1 	bl	800de18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fad2 	bl	800de40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	f003 0308 	and.w	r3, r3, #8
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d020      	beq.n	800d8ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f003 0308 	and.w	r3, r3, #8
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d01b      	beq.n	800d8ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f06f 0208 	mvn.w	r2, #8
 800d8be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2204      	movs	r2, #4
 800d8c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	69db      	ldr	r3, [r3, #28]
 800d8cc:	f003 0303 	and.w	r3, r3, #3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 faa9 	bl	800de2c <HAL_TIM_IC_CaptureCallback>
 800d8da:	e005      	b.n	800d8e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fa9b 	bl	800de18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 faac 	bl	800de40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	f003 0310 	and.w	r3, r3, #16
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d020      	beq.n	800d93a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f003 0310 	and.w	r3, r3, #16
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d01b      	beq.n	800d93a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f06f 0210 	mvn.w	r2, #16
 800d90a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2208      	movs	r2, #8
 800d910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fa83 	bl	800de2c <HAL_TIM_IC_CaptureCallback>
 800d926:	e005      	b.n	800d934 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fa75 	bl	800de18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa86 	bl	800de40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00c      	beq.n	800d95e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f003 0301 	and.w	r3, r3, #1
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f06f 0201 	mvn.w	r2, #1
 800d956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7f4 f811 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d964:	2b00      	cmp	r3, #0
 800d966:	d104      	bne.n	800d972 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d007      	beq.n	800d98c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 ffc6 	bl	800e918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00c      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d007      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 ffbe 	bl	800e92c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00c      	beq.n	800d9d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 fa40 	bl	800de54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00c      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f003 0320 	and.w	r3, r3, #32
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f06f 0220 	mvn.w	r2, #32
 800d9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 ff86 	bl	800e904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9f8:	bf00      	nop
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da16:	2b01      	cmp	r3, #1
 800da18:	d101      	bne.n	800da1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800da1a:	2302      	movs	r3, #2
 800da1c:	e0ff      	b.n	800dc1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b14      	cmp	r3, #20
 800da2a:	f200 80f0 	bhi.w	800dc0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800da2e:	a201      	add	r2, pc, #4	@ (adr r2, 800da34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800da30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da34:	0800da89 	.word	0x0800da89
 800da38:	0800dc0f 	.word	0x0800dc0f
 800da3c:	0800dc0f 	.word	0x0800dc0f
 800da40:	0800dc0f 	.word	0x0800dc0f
 800da44:	0800dac9 	.word	0x0800dac9
 800da48:	0800dc0f 	.word	0x0800dc0f
 800da4c:	0800dc0f 	.word	0x0800dc0f
 800da50:	0800dc0f 	.word	0x0800dc0f
 800da54:	0800db0b 	.word	0x0800db0b
 800da58:	0800dc0f 	.word	0x0800dc0f
 800da5c:	0800dc0f 	.word	0x0800dc0f
 800da60:	0800dc0f 	.word	0x0800dc0f
 800da64:	0800db4b 	.word	0x0800db4b
 800da68:	0800dc0f 	.word	0x0800dc0f
 800da6c:	0800dc0f 	.word	0x0800dc0f
 800da70:	0800dc0f 	.word	0x0800dc0f
 800da74:	0800db8d 	.word	0x0800db8d
 800da78:	0800dc0f 	.word	0x0800dc0f
 800da7c:	0800dc0f 	.word	0x0800dc0f
 800da80:	0800dc0f 	.word	0x0800dc0f
 800da84:	0800dbcd 	.word	0x0800dbcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68b9      	ldr	r1, [r7, #8]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 fa9c 	bl	800dfcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	699a      	ldr	r2, [r3, #24]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f042 0208 	orr.w	r2, r2, #8
 800daa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	699a      	ldr	r2, [r3, #24]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f022 0204 	bic.w	r2, r2, #4
 800dab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6999      	ldr	r1, [r3, #24]
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	691a      	ldr	r2, [r3, #16]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	430a      	orrs	r2, r1
 800dac4:	619a      	str	r2, [r3, #24]
      break;
 800dac6:	e0a5      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68b9      	ldr	r1, [r7, #8]
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 fb0c 	bl	800e0ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	699a      	ldr	r2, [r3, #24]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	699a      	ldr	r2, [r3, #24]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800daf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6999      	ldr	r1, [r3, #24]
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	021a      	lsls	r2, r3, #8
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	619a      	str	r2, [r3, #24]
      break;
 800db08:	e084      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 fb75 	bl	800e200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	69da      	ldr	r2, [r3, #28]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f042 0208 	orr.w	r2, r2, #8
 800db24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	69da      	ldr	r2, [r3, #28]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f022 0204 	bic.w	r2, r2, #4
 800db34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	69d9      	ldr	r1, [r3, #28]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	691a      	ldr	r2, [r3, #16]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	430a      	orrs	r2, r1
 800db46:	61da      	str	r2, [r3, #28]
      break;
 800db48:	e064      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 fbdd 	bl	800e310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	69da      	ldr	r2, [r3, #28]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69da      	ldr	r2, [r3, #28]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	69d9      	ldr	r1, [r3, #28]
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	021a      	lsls	r2, r3, #8
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	430a      	orrs	r2, r1
 800db88:	61da      	str	r2, [r3, #28]
      break;
 800db8a:	e043      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68b9      	ldr	r1, [r7, #8]
 800db92:	4618      	mov	r0, r3
 800db94:	f000 fc26 	bl	800e3e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f042 0208 	orr.w	r2, r2, #8
 800dba6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f022 0204 	bic.w	r2, r2, #4
 800dbb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	691a      	ldr	r2, [r3, #16]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dbca:	e023      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68b9      	ldr	r1, [r7, #8]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fc6a 	bl	800e4ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbe6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	021a      	lsls	r2, r3, #8
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dc0c:	e002      	b.n	800dc14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	75fb      	strb	r3, [r7, #23]
      break;
 800dc12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop

0800dc28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc32:	2300      	movs	r3, #0
 800dc34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_TIM_ConfigClockSource+0x1c>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e0dc      	b.n	800ddfe <HAL_TIM_ConfigClockSource+0x1d6>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	4b6a      	ldr	r3, [pc, #424]	@ (800de08 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dc60:	4013      	ands	r3, r2
 800dc62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dc6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a64      	ldr	r2, [pc, #400]	@ (800de0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	f000 80a9 	beq.w	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc80:	4a62      	ldr	r2, [pc, #392]	@ (800de0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	f200 80ae 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc88:	4a61      	ldr	r2, [pc, #388]	@ (800de10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	f000 80a1 	beq.w	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc90:	4a5f      	ldr	r2, [pc, #380]	@ (800de10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	f200 80a6 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc98:	4a5e      	ldr	r2, [pc, #376]	@ (800de14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	f000 8099 	beq.w	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dca0:	4a5c      	ldr	r2, [pc, #368]	@ (800de14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	f200 809e 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dca8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dcac:	f000 8091 	beq.w	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dcb4:	f200 8096 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcbc:	f000 8089 	beq.w	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcc4:	f200 808e 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dccc:	d03e      	beq.n	800dd4c <HAL_TIM_ConfigClockSource+0x124>
 800dcce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcd2:	f200 8087 	bhi.w	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcda:	f000 8086 	beq.w	800ddea <HAL_TIM_ConfigClockSource+0x1c2>
 800dcde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dce2:	d87f      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dce4:	2b70      	cmp	r3, #112	@ 0x70
 800dce6:	d01a      	beq.n	800dd1e <HAL_TIM_ConfigClockSource+0xf6>
 800dce8:	2b70      	cmp	r3, #112	@ 0x70
 800dcea:	d87b      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcec:	2b60      	cmp	r3, #96	@ 0x60
 800dcee:	d050      	beq.n	800dd92 <HAL_TIM_ConfigClockSource+0x16a>
 800dcf0:	2b60      	cmp	r3, #96	@ 0x60
 800dcf2:	d877      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcf4:	2b50      	cmp	r3, #80	@ 0x50
 800dcf6:	d03c      	beq.n	800dd72 <HAL_TIM_ConfigClockSource+0x14a>
 800dcf8:	2b50      	cmp	r3, #80	@ 0x50
 800dcfa:	d873      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcfc:	2b40      	cmp	r3, #64	@ 0x40
 800dcfe:	d058      	beq.n	800ddb2 <HAL_TIM_ConfigClockSource+0x18a>
 800dd00:	2b40      	cmp	r3, #64	@ 0x40
 800dd02:	d86f      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd04:	2b30      	cmp	r3, #48	@ 0x30
 800dd06:	d064      	beq.n	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd08:	2b30      	cmp	r3, #48	@ 0x30
 800dd0a:	d86b      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd0c:	2b20      	cmp	r3, #32
 800dd0e:	d060      	beq.n	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd10:	2b20      	cmp	r3, #32
 800dd12:	d867      	bhi.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d05c      	beq.n	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd18:	2b10      	cmp	r3, #16
 800dd1a:	d05a      	beq.n	800ddd2 <HAL_TIM_ConfigClockSource+0x1aa>
 800dd1c:	e062      	b.n	800dde4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd2e:	f000 fca1 	bl	800e674 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dd40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	609a      	str	r2, [r3, #8]
      break;
 800dd4a:	e04f      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd5c:	f000 fc8a 	bl	800e674 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689a      	ldr	r2, [r3, #8]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd6e:	609a      	str	r2, [r3, #8]
      break;
 800dd70:	e03c      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd7e:	461a      	mov	r2, r3
 800dd80:	f000 fbfa 	bl	800e578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2150      	movs	r1, #80	@ 0x50
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fc54 	bl	800e638 <TIM_ITRx_SetConfig>
      break;
 800dd90:	e02c      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f000 fc19 	bl	800e5d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2160      	movs	r1, #96	@ 0x60
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 fc44 	bl	800e638 <TIM_ITRx_SetConfig>
      break;
 800ddb0:	e01c      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f000 fbda 	bl	800e578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2140      	movs	r1, #64	@ 0x40
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fc34 	bl	800e638 <TIM_ITRx_SetConfig>
      break;
 800ddd0:	e00c      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4619      	mov	r1, r3
 800dddc:	4610      	mov	r0, r2
 800ddde:	f000 fc2b 	bl	800e638 <TIM_ITRx_SetConfig>
      break;
 800dde2:	e003      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dde4:	2301      	movs	r3, #1
 800dde6:	73fb      	strb	r3, [r7, #15]
      break;
 800dde8:	e000      	b.n	800ddec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ddea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	ffceff88 	.word	0xffceff88
 800de0c:	00100040 	.word	0x00100040
 800de10:	00100030 	.word	0x00100030
 800de14:	00100020 	.word	0x00100020

0800de18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a4a      	ldr	r2, [pc, #296]	@ (800dfa4 <TIM_Base_SetConfig+0x13c>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d013      	beq.n	800dea8 <TIM_Base_SetConfig+0x40>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de86:	d00f      	beq.n	800dea8 <TIM_Base_SetConfig+0x40>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4a47      	ldr	r2, [pc, #284]	@ (800dfa8 <TIM_Base_SetConfig+0x140>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d00b      	beq.n	800dea8 <TIM_Base_SetConfig+0x40>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a46      	ldr	r2, [pc, #280]	@ (800dfac <TIM_Base_SetConfig+0x144>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d007      	beq.n	800dea8 <TIM_Base_SetConfig+0x40>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4a45      	ldr	r2, [pc, #276]	@ (800dfb0 <TIM_Base_SetConfig+0x148>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d003      	beq.n	800dea8 <TIM_Base_SetConfig+0x40>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a44      	ldr	r2, [pc, #272]	@ (800dfb4 <TIM_Base_SetConfig+0x14c>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d108      	bne.n	800deba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a39      	ldr	r2, [pc, #228]	@ (800dfa4 <TIM_Base_SetConfig+0x13c>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d027      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dec8:	d023      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a36      	ldr	r2, [pc, #216]	@ (800dfa8 <TIM_Base_SetConfig+0x140>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d01f      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a35      	ldr	r2, [pc, #212]	@ (800dfac <TIM_Base_SetConfig+0x144>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d01b      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a34      	ldr	r2, [pc, #208]	@ (800dfb0 <TIM_Base_SetConfig+0x148>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d017      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a33      	ldr	r2, [pc, #204]	@ (800dfb4 <TIM_Base_SetConfig+0x14c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d013      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a32      	ldr	r2, [pc, #200]	@ (800dfb8 <TIM_Base_SetConfig+0x150>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d00f      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a31      	ldr	r2, [pc, #196]	@ (800dfbc <TIM_Base_SetConfig+0x154>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d00b      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a30      	ldr	r2, [pc, #192]	@ (800dfc0 <TIM_Base_SetConfig+0x158>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d007      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a2f      	ldr	r2, [pc, #188]	@ (800dfc4 <TIM_Base_SetConfig+0x15c>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d003      	beq.n	800df12 <TIM_Base_SetConfig+0xaa>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4a2e      	ldr	r2, [pc, #184]	@ (800dfc8 <TIM_Base_SetConfig+0x160>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d108      	bne.n	800df24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	68fa      	ldr	r2, [r7, #12]
 800df20:	4313      	orrs	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	4313      	orrs	r3, r2
 800df30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	4a16      	ldr	r2, [pc, #88]	@ (800dfa4 <TIM_Base_SetConfig+0x13c>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d00f      	beq.n	800df70 <TIM_Base_SetConfig+0x108>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4a18      	ldr	r2, [pc, #96]	@ (800dfb4 <TIM_Base_SetConfig+0x14c>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d00b      	beq.n	800df70 <TIM_Base_SetConfig+0x108>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	4a17      	ldr	r2, [pc, #92]	@ (800dfb8 <TIM_Base_SetConfig+0x150>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d007      	beq.n	800df70 <TIM_Base_SetConfig+0x108>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a16      	ldr	r2, [pc, #88]	@ (800dfbc <TIM_Base_SetConfig+0x154>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d003      	beq.n	800df70 <TIM_Base_SetConfig+0x108>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a15      	ldr	r2, [pc, #84]	@ (800dfc0 <TIM_Base_SetConfig+0x158>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d103      	bne.n	800df78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	691a      	ldr	r2, [r3, #16]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b01      	cmp	r3, #1
 800df88:	d105      	bne.n	800df96 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f023 0201 	bic.w	r2, r3, #1
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	611a      	str	r2, [r3, #16]
  }
}
 800df96:	bf00      	nop
 800df98:	3714      	adds	r7, #20
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	40010000 	.word	0x40010000
 800dfa8:	40000400 	.word	0x40000400
 800dfac:	40000800 	.word	0x40000800
 800dfb0:	40000c00 	.word	0x40000c00
 800dfb4:	40010400 	.word	0x40010400
 800dfb8:	40014000 	.word	0x40014000
 800dfbc:	40014400 	.word	0x40014400
 800dfc0:	40014800 	.word	0x40014800
 800dfc4:	4000e000 	.word	0x4000e000
 800dfc8:	4000e400 	.word	0x4000e400

0800dfcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b087      	sub	sp, #28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a1b      	ldr	r3, [r3, #32]
 800dfda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	f023 0201 	bic.w	r2, r3, #1
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	4b37      	ldr	r3, [pc, #220]	@ (800e0d4 <TIM_OC1_SetConfig+0x108>)
 800dff8:	4013      	ands	r3, r2
 800dffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f023 0303 	bic.w	r3, r3, #3
 800e002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f023 0302 	bic.w	r3, r3, #2
 800e014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a2d      	ldr	r2, [pc, #180]	@ (800e0d8 <TIM_OC1_SetConfig+0x10c>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d00f      	beq.n	800e048 <TIM_OC1_SetConfig+0x7c>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a2c      	ldr	r2, [pc, #176]	@ (800e0dc <TIM_OC1_SetConfig+0x110>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d00b      	beq.n	800e048 <TIM_OC1_SetConfig+0x7c>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a2b      	ldr	r2, [pc, #172]	@ (800e0e0 <TIM_OC1_SetConfig+0x114>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d007      	beq.n	800e048 <TIM_OC1_SetConfig+0x7c>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a2a      	ldr	r2, [pc, #168]	@ (800e0e4 <TIM_OC1_SetConfig+0x118>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d003      	beq.n	800e048 <TIM_OC1_SetConfig+0x7c>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a29      	ldr	r2, [pc, #164]	@ (800e0e8 <TIM_OC1_SetConfig+0x11c>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d10c      	bne.n	800e062 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f023 0308 	bic.w	r3, r3, #8
 800e04e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	4313      	orrs	r3, r2
 800e058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f023 0304 	bic.w	r3, r3, #4
 800e060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a1c      	ldr	r2, [pc, #112]	@ (800e0d8 <TIM_OC1_SetConfig+0x10c>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d00f      	beq.n	800e08a <TIM_OC1_SetConfig+0xbe>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a1b      	ldr	r2, [pc, #108]	@ (800e0dc <TIM_OC1_SetConfig+0x110>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d00b      	beq.n	800e08a <TIM_OC1_SetConfig+0xbe>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4a1a      	ldr	r2, [pc, #104]	@ (800e0e0 <TIM_OC1_SetConfig+0x114>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d007      	beq.n	800e08a <TIM_OC1_SetConfig+0xbe>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4a19      	ldr	r2, [pc, #100]	@ (800e0e4 <TIM_OC1_SetConfig+0x118>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d003      	beq.n	800e08a <TIM_OC1_SetConfig+0xbe>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a18      	ldr	r2, [pc, #96]	@ (800e0e8 <TIM_OC1_SetConfig+0x11c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d111      	bne.n	800e0ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	621a      	str	r2, [r3, #32]
}
 800e0c8:	bf00      	nop
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	fffeff8f 	.word	0xfffeff8f
 800e0d8:	40010000 	.word	0x40010000
 800e0dc:	40010400 	.word	0x40010400
 800e0e0:	40014000 	.word	0x40014000
 800e0e4:	40014400 	.word	0x40014400
 800e0e8:	40014800 	.word	0x40014800

0800e0ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b087      	sub	sp, #28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	f023 0210 	bic.w	r2, r3, #16
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4b34      	ldr	r3, [pc, #208]	@ (800e1e8 <TIM_OC2_SetConfig+0xfc>)
 800e118:	4013      	ands	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	021b      	lsls	r3, r3, #8
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	4313      	orrs	r3, r2
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	f023 0320 	bic.w	r3, r3, #32
 800e136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	011b      	lsls	r3, r3, #4
 800e13e:	697a      	ldr	r2, [r7, #20]
 800e140:	4313      	orrs	r3, r2
 800e142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a29      	ldr	r2, [pc, #164]	@ (800e1ec <TIM_OC2_SetConfig+0x100>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d003      	beq.n	800e154 <TIM_OC2_SetConfig+0x68>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a28      	ldr	r2, [pc, #160]	@ (800e1f0 <TIM_OC2_SetConfig+0x104>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d10d      	bne.n	800e170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e15a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	4313      	orrs	r3, r2
 800e166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e16e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a1e      	ldr	r2, [pc, #120]	@ (800e1ec <TIM_OC2_SetConfig+0x100>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00f      	beq.n	800e198 <TIM_OC2_SetConfig+0xac>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a1d      	ldr	r2, [pc, #116]	@ (800e1f0 <TIM_OC2_SetConfig+0x104>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00b      	beq.n	800e198 <TIM_OC2_SetConfig+0xac>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a1c      	ldr	r2, [pc, #112]	@ (800e1f4 <TIM_OC2_SetConfig+0x108>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d007      	beq.n	800e198 <TIM_OC2_SetConfig+0xac>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1f8 <TIM_OC2_SetConfig+0x10c>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d003      	beq.n	800e198 <TIM_OC2_SetConfig+0xac>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a1a      	ldr	r2, [pc, #104]	@ (800e1fc <TIM_OC2_SetConfig+0x110>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d113      	bne.n	800e1c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e19e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	693a      	ldr	r2, [r7, #16]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	693a      	ldr	r2, [r7, #16]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	685a      	ldr	r2, [r3, #4]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	621a      	str	r2, [r3, #32]
}
 800e1da:	bf00      	nop
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	feff8fff 	.word	0xfeff8fff
 800e1ec:	40010000 	.word	0x40010000
 800e1f0:	40010400 	.word	0x40010400
 800e1f4:	40014000 	.word	0x40014000
 800e1f8:	40014400 	.word	0x40014400
 800e1fc:	40014800 	.word	0x40014800

0800e200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e200:	b480      	push	{r7}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a1b      	ldr	r3, [r3, #32]
 800e20e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a1b      	ldr	r3, [r3, #32]
 800e214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	69db      	ldr	r3, [r3, #28]
 800e226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	4b33      	ldr	r3, [pc, #204]	@ (800e2f8 <TIM_OC3_SetConfig+0xf8>)
 800e22c:	4013      	ands	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f023 0303 	bic.w	r3, r3, #3
 800e236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	021b      	lsls	r3, r3, #8
 800e250:	697a      	ldr	r2, [r7, #20]
 800e252:	4313      	orrs	r3, r2
 800e254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	4a28      	ldr	r2, [pc, #160]	@ (800e2fc <TIM_OC3_SetConfig+0xfc>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d003      	beq.n	800e266 <TIM_OC3_SetConfig+0x66>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4a27      	ldr	r2, [pc, #156]	@ (800e300 <TIM_OC3_SetConfig+0x100>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d10d      	bne.n	800e282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e26c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	021b      	lsls	r3, r3, #8
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	4313      	orrs	r3, r2
 800e278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a1d      	ldr	r2, [pc, #116]	@ (800e2fc <TIM_OC3_SetConfig+0xfc>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d00f      	beq.n	800e2aa <TIM_OC3_SetConfig+0xaa>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a1c      	ldr	r2, [pc, #112]	@ (800e300 <TIM_OC3_SetConfig+0x100>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d00b      	beq.n	800e2aa <TIM_OC3_SetConfig+0xaa>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a1b      	ldr	r2, [pc, #108]	@ (800e304 <TIM_OC3_SetConfig+0x104>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d007      	beq.n	800e2aa <TIM_OC3_SetConfig+0xaa>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a1a      	ldr	r2, [pc, #104]	@ (800e308 <TIM_OC3_SetConfig+0x108>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d003      	beq.n	800e2aa <TIM_OC3_SetConfig+0xaa>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a19      	ldr	r2, [pc, #100]	@ (800e30c <TIM_OC3_SetConfig+0x10c>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d113      	bne.n	800e2d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	011b      	lsls	r3, r3, #4
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	011b      	lsls	r3, r3, #4
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	621a      	str	r2, [r3, #32]
}
 800e2ec:	bf00      	nop
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	fffeff8f 	.word	0xfffeff8f
 800e2fc:	40010000 	.word	0x40010000
 800e300:	40010400 	.word	0x40010400
 800e304:	40014000 	.word	0x40014000
 800e308:	40014400 	.word	0x40014400
 800e30c:	40014800 	.word	0x40014800

0800e310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	69db      	ldr	r3, [r3, #28]
 800e336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4b24      	ldr	r3, [pc, #144]	@ (800e3cc <TIM_OC4_SetConfig+0xbc>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	021b      	lsls	r3, r3, #8
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	4313      	orrs	r3, r2
 800e352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e35a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	031b      	lsls	r3, r3, #12
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	4313      	orrs	r3, r2
 800e366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a19      	ldr	r2, [pc, #100]	@ (800e3d0 <TIM_OC4_SetConfig+0xc0>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d00f      	beq.n	800e390 <TIM_OC4_SetConfig+0x80>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a18      	ldr	r2, [pc, #96]	@ (800e3d4 <TIM_OC4_SetConfig+0xc4>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d00b      	beq.n	800e390 <TIM_OC4_SetConfig+0x80>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a17      	ldr	r2, [pc, #92]	@ (800e3d8 <TIM_OC4_SetConfig+0xc8>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d007      	beq.n	800e390 <TIM_OC4_SetConfig+0x80>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a16      	ldr	r2, [pc, #88]	@ (800e3dc <TIM_OC4_SetConfig+0xcc>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d003      	beq.n	800e390 <TIM_OC4_SetConfig+0x80>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a15      	ldr	r2, [pc, #84]	@ (800e3e0 <TIM_OC4_SetConfig+0xd0>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d109      	bne.n	800e3a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	695b      	ldr	r3, [r3, #20]
 800e39c:	019b      	lsls	r3, r3, #6
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	621a      	str	r2, [r3, #32]
}
 800e3be:	bf00      	nop
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	feff8fff 	.word	0xfeff8fff
 800e3d0:	40010000 	.word	0x40010000
 800e3d4:	40010400 	.word	0x40010400
 800e3d8:	40014000 	.word	0x40014000
 800e3dc:	40014400 	.word	0x40014400
 800e3e0:	40014800 	.word	0x40014800

0800e3e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	4b21      	ldr	r3, [pc, #132]	@ (800e494 <TIM_OC5_SetConfig+0xb0>)
 800e410:	4013      	ands	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e424:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	041b      	lsls	r3, r3, #16
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	4313      	orrs	r3, r2
 800e430:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a18      	ldr	r2, [pc, #96]	@ (800e498 <TIM_OC5_SetConfig+0xb4>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d00f      	beq.n	800e45a <TIM_OC5_SetConfig+0x76>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4a17      	ldr	r2, [pc, #92]	@ (800e49c <TIM_OC5_SetConfig+0xb8>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d00b      	beq.n	800e45a <TIM_OC5_SetConfig+0x76>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a16      	ldr	r2, [pc, #88]	@ (800e4a0 <TIM_OC5_SetConfig+0xbc>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d007      	beq.n	800e45a <TIM_OC5_SetConfig+0x76>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a15      	ldr	r2, [pc, #84]	@ (800e4a4 <TIM_OC5_SetConfig+0xc0>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d003      	beq.n	800e45a <TIM_OC5_SetConfig+0x76>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a14      	ldr	r2, [pc, #80]	@ (800e4a8 <TIM_OC5_SetConfig+0xc4>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d109      	bne.n	800e46e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	021b      	lsls	r3, r3, #8
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	685a      	ldr	r2, [r3, #4]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	621a      	str	r2, [r3, #32]
}
 800e488:	bf00      	nop
 800e48a:	371c      	adds	r7, #28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr
 800e494:	fffeff8f 	.word	0xfffeff8f
 800e498:	40010000 	.word	0x40010000
 800e49c:	40010400 	.word	0x40010400
 800e4a0:	40014000 	.word	0x40014000
 800e4a4:	40014400 	.word	0x40014400
 800e4a8:	40014800 	.word	0x40014800

0800e4ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b087      	sub	sp, #28
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a1b      	ldr	r3, [r3, #32]
 800e4ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a1b      	ldr	r3, [r3, #32]
 800e4c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	4b22      	ldr	r3, [pc, #136]	@ (800e560 <TIM_OC6_SetConfig+0xb4>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e4ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	051b      	lsls	r3, r3, #20
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a19      	ldr	r2, [pc, #100]	@ (800e564 <TIM_OC6_SetConfig+0xb8>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d00f      	beq.n	800e524 <TIM_OC6_SetConfig+0x78>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4a18      	ldr	r2, [pc, #96]	@ (800e568 <TIM_OC6_SetConfig+0xbc>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d00b      	beq.n	800e524 <TIM_OC6_SetConfig+0x78>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a17      	ldr	r2, [pc, #92]	@ (800e56c <TIM_OC6_SetConfig+0xc0>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d007      	beq.n	800e524 <TIM_OC6_SetConfig+0x78>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a16      	ldr	r2, [pc, #88]	@ (800e570 <TIM_OC6_SetConfig+0xc4>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d003      	beq.n	800e524 <TIM_OC6_SetConfig+0x78>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4a15      	ldr	r2, [pc, #84]	@ (800e574 <TIM_OC6_SetConfig+0xc8>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d109      	bne.n	800e538 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e52a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	029b      	lsls	r3, r3, #10
 800e532:	697a      	ldr	r2, [r7, #20]
 800e534:	4313      	orrs	r3, r2
 800e536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	697a      	ldr	r2, [r7, #20]
 800e53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685a      	ldr	r2, [r3, #4]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	621a      	str	r2, [r3, #32]
}
 800e552:	bf00      	nop
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	feff8fff 	.word	0xfeff8fff
 800e564:	40010000 	.word	0x40010000
 800e568:	40010400 	.word	0x40010400
 800e56c:	40014000 	.word	0x40014000
 800e570:	40014400 	.word	0x40014400
 800e574:	40014800 	.word	0x40014800

0800e578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e578:	b480      	push	{r7}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6a1b      	ldr	r3, [r3, #32]
 800e588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	f023 0201 	bic.w	r2, r3, #1
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	699b      	ldr	r3, [r3, #24]
 800e59a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e5a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	011b      	lsls	r3, r3, #4
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	f023 030a 	bic.w	r3, r3, #10
 800e5b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	621a      	str	r2, [r3, #32]
}
 800e5ca:	bf00      	nop
 800e5cc:	371c      	adds	r7, #28
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b087      	sub	sp, #28
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	f023 0210 	bic.w	r2, r3, #16
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	699b      	ldr	r3, [r3, #24]
 800e5f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	031b      	lsls	r3, r3, #12
 800e606:	693a      	ldr	r2, [r7, #16]
 800e608:	4313      	orrs	r3, r2
 800e60a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	011b      	lsls	r3, r3, #4
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	621a      	str	r2, [r3, #32]
}
 800e62a:	bf00      	nop
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
	...

0800e638 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	4b09      	ldr	r3, [pc, #36]	@ (800e670 <TIM_ITRx_SetConfig+0x38>)
 800e64c:	4013      	ands	r3, r2
 800e64e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4313      	orrs	r3, r2
 800e656:	f043 0307 	orr.w	r3, r3, #7
 800e65a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68fa      	ldr	r2, [r7, #12]
 800e660:	609a      	str	r2, [r3, #8]
}
 800e662:	bf00      	nop
 800e664:	3714      	adds	r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	ffcfff8f 	.word	0xffcfff8f

0800e674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e674:	b480      	push	{r7}
 800e676:	b087      	sub	sp, #28
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
 800e680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e68e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	021a      	lsls	r2, r3, #8
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	431a      	orrs	r2, r3
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	609a      	str	r2, [r3, #8]
}
 800e6a8:	bf00      	nop
 800e6aa:	371c      	adds	r7, #28
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d101      	bne.n	800e6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	e077      	b.n	800e7bc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2202      	movs	r2, #2
 800e6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a35      	ldr	r2, [pc, #212]	@ (800e7c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d004      	beq.n	800e700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a34      	ldr	r2, [pc, #208]	@ (800e7cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d108      	bne.n	800e712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	4313      	orrs	r3, r2
 800e722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a25      	ldr	r2, [pc, #148]	@ (800e7c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d02c      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e73e:	d027      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a22      	ldr	r2, [pc, #136]	@ (800e7d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d022      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a21      	ldr	r2, [pc, #132]	@ (800e7d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e750:	4293      	cmp	r3, r2
 800e752:	d01d      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a1f      	ldr	r2, [pc, #124]	@ (800e7d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d018      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a1a      	ldr	r2, [pc, #104]	@ (800e7cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d013      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a1b      	ldr	r2, [pc, #108]	@ (800e7dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d00e      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a1a      	ldr	r2, [pc, #104]	@ (800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d009      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a18      	ldr	r2, [pc, #96]	@ (800e7e4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d004      	beq.n	800e790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a17      	ldr	r2, [pc, #92]	@ (800e7e8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10c      	bne.n	800e7aa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3714      	adds	r7, #20
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	40010000 	.word	0x40010000
 800e7cc:	40010400 	.word	0x40010400
 800e7d0:	40000400 	.word	0x40000400
 800e7d4:	40000800 	.word	0x40000800
 800e7d8:	40000c00 	.word	0x40000c00
 800e7dc:	40001800 	.word	0x40001800
 800e7e0:	40014000 	.word	0x40014000
 800e7e4:	4000e000 	.word	0x4000e000
 800e7e8:	4000e400 	.word	0x4000e400

0800e7ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e800:	2b01      	cmp	r3, #1
 800e802:	d101      	bne.n	800e808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e804:	2302      	movs	r3, #2
 800e806:	e073      	b.n	800e8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	4313      	orrs	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4313      	orrs	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4313      	orrs	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	4313      	orrs	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	4313      	orrs	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e86e:	4313      	orrs	r3, r2
 800e870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	041b      	lsls	r3, r3, #16
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	69db      	ldr	r3, [r3, #28]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a19      	ldr	r2, [pc, #100]	@ (800e8fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d004      	beq.n	800e8a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a18      	ldr	r2, [pc, #96]	@ (800e900 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d11c      	bne.n	800e8de <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ae:	051b      	lsls	r3, r3, #20
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	40010000 	.word	0x40010000
 800e900:	40010400 	.word	0x40010400

0800e904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e90c:	bf00      	nop
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	e042      	b.n	800e9d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d106      	bne.n	800e96a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7f3 fcfd 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2224      	movs	r2, #36	@ 0x24
 800e96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f022 0201 	bic.w	r2, r2, #1
 800e980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 ff22 	bl	800f7d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f8b3 	bl	800eafc <UART_SetConfig>
 800e996:	4603      	mov	r3, r0
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d101      	bne.n	800e9a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e01b      	b.n	800e9d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e9ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e9be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f042 0201 	orr.w	r2, r2, #1
 800e9ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 ffa1 	bl	800f918 <UART_CheckIdleState>
 800e9d6:	4603      	mov	r3, r0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08a      	sub	sp, #40	@ 0x28
 800e9e4:	af02      	add	r7, sp, #8
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	603b      	str	r3, [r7, #0]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9f6:	2b20      	cmp	r3, #32
 800e9f8:	d17b      	bne.n	800eaf2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <HAL_UART_Transmit+0x26>
 800ea00:	88fb      	ldrh	r3, [r7, #6]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e074      	b.n	800eaf4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2221      	movs	r2, #33	@ 0x21
 800ea16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea1a:	f7f3 ff29 	bl	8002870 <HAL_GetTick>
 800ea1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	88fa      	ldrh	r2, [r7, #6]
 800ea24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	88fa      	ldrh	r2, [r7, #6]
 800ea2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea38:	d108      	bne.n	800ea4c <HAL_UART_Transmit+0x6c>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d104      	bne.n	800ea4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	61bb      	str	r3, [r7, #24]
 800ea4a:	e003      	b.n	800ea54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea54:	e030      	b.n	800eab8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2180      	movs	r1, #128	@ 0x80
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f001 f803 	bl	800fa6c <UART_WaitOnFlagUntilTimeout>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2220      	movs	r2, #32
 800ea70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ea74:	2303      	movs	r3, #3
 800ea76:	e03d      	b.n	800eaf4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10b      	bne.n	800ea96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	3302      	adds	r3, #2
 800ea92:	61bb      	str	r3, [r7, #24]
 800ea94:	e007      	b.n	800eaa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	781a      	ldrb	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	3b01      	subs	r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1c8      	bne.n	800ea56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2200      	movs	r2, #0
 800eacc:	2140      	movs	r1, #64	@ 0x40
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 ffcc 	bl	800fa6c <UART_WaitOnFlagUntilTimeout>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2220      	movs	r2, #32
 800eade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800eae2:	2303      	movs	r3, #3
 800eae4:	e006      	b.n	800eaf4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2220      	movs	r2, #32
 800eaea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e000      	b.n	800eaf4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eaf2:	2302      	movs	r3, #2
  }
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eafc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb00:	b092      	sub	sp, #72	@ 0x48
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	431a      	orrs	r2, r3
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	431a      	orrs	r2, r3
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	4bbe      	ldr	r3, [pc, #760]	@ (800ee24 <UART_SetConfig+0x328>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	6812      	ldr	r2, [r2, #0]
 800eb32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb34:	430b      	orrs	r3, r1
 800eb36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	68da      	ldr	r2, [r3, #12]
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	430a      	orrs	r2, r1
 800eb4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4ab3      	ldr	r2, [pc, #716]	@ (800ee28 <UART_SetConfig+0x32c>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d004      	beq.n	800eb68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	6a1b      	ldr	r3, [r3, #32]
 800eb62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb64:	4313      	orrs	r3, r2
 800eb66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	689a      	ldr	r2, [r3, #8]
 800eb6e:	4baf      	ldr	r3, [pc, #700]	@ (800ee2c <UART_SetConfig+0x330>)
 800eb70:	4013      	ands	r3, r2
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	6812      	ldr	r2, [r2, #0]
 800eb76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb78:	430b      	orrs	r3, r1
 800eb7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb82:	f023 010f 	bic.w	r1, r3, #15
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	430a      	orrs	r2, r1
 800eb90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4aa6      	ldr	r2, [pc, #664]	@ (800ee30 <UART_SetConfig+0x334>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d177      	bne.n	800ec8c <UART_SetConfig+0x190>
 800eb9c:	4ba5      	ldr	r3, [pc, #660]	@ (800ee34 <UART_SetConfig+0x338>)
 800eb9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eba4:	2b28      	cmp	r3, #40	@ 0x28
 800eba6:	d86d      	bhi.n	800ec84 <UART_SetConfig+0x188>
 800eba8:	a201      	add	r2, pc, #4	@ (adr r2, 800ebb0 <UART_SetConfig+0xb4>)
 800ebaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebae:	bf00      	nop
 800ebb0:	0800ec55 	.word	0x0800ec55
 800ebb4:	0800ec85 	.word	0x0800ec85
 800ebb8:	0800ec85 	.word	0x0800ec85
 800ebbc:	0800ec85 	.word	0x0800ec85
 800ebc0:	0800ec85 	.word	0x0800ec85
 800ebc4:	0800ec85 	.word	0x0800ec85
 800ebc8:	0800ec85 	.word	0x0800ec85
 800ebcc:	0800ec85 	.word	0x0800ec85
 800ebd0:	0800ec5d 	.word	0x0800ec5d
 800ebd4:	0800ec85 	.word	0x0800ec85
 800ebd8:	0800ec85 	.word	0x0800ec85
 800ebdc:	0800ec85 	.word	0x0800ec85
 800ebe0:	0800ec85 	.word	0x0800ec85
 800ebe4:	0800ec85 	.word	0x0800ec85
 800ebe8:	0800ec85 	.word	0x0800ec85
 800ebec:	0800ec85 	.word	0x0800ec85
 800ebf0:	0800ec65 	.word	0x0800ec65
 800ebf4:	0800ec85 	.word	0x0800ec85
 800ebf8:	0800ec85 	.word	0x0800ec85
 800ebfc:	0800ec85 	.word	0x0800ec85
 800ec00:	0800ec85 	.word	0x0800ec85
 800ec04:	0800ec85 	.word	0x0800ec85
 800ec08:	0800ec85 	.word	0x0800ec85
 800ec0c:	0800ec85 	.word	0x0800ec85
 800ec10:	0800ec6d 	.word	0x0800ec6d
 800ec14:	0800ec85 	.word	0x0800ec85
 800ec18:	0800ec85 	.word	0x0800ec85
 800ec1c:	0800ec85 	.word	0x0800ec85
 800ec20:	0800ec85 	.word	0x0800ec85
 800ec24:	0800ec85 	.word	0x0800ec85
 800ec28:	0800ec85 	.word	0x0800ec85
 800ec2c:	0800ec85 	.word	0x0800ec85
 800ec30:	0800ec75 	.word	0x0800ec75
 800ec34:	0800ec85 	.word	0x0800ec85
 800ec38:	0800ec85 	.word	0x0800ec85
 800ec3c:	0800ec85 	.word	0x0800ec85
 800ec40:	0800ec85 	.word	0x0800ec85
 800ec44:	0800ec85 	.word	0x0800ec85
 800ec48:	0800ec85 	.word	0x0800ec85
 800ec4c:	0800ec85 	.word	0x0800ec85
 800ec50:	0800ec7d 	.word	0x0800ec7d
 800ec54:	2301      	movs	r3, #1
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e326      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec5c:	2304      	movs	r3, #4
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec62:	e322      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec64:	2308      	movs	r3, #8
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6a:	e31e      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec6c:	2310      	movs	r3, #16
 800ec6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec72:	e31a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec74:	2320      	movs	r3, #32
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7a:	e316      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec7c:	2340      	movs	r3, #64	@ 0x40
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec82:	e312      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec84:	2380      	movs	r3, #128	@ 0x80
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8a:	e30e      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a69      	ldr	r2, [pc, #420]	@ (800ee38 <UART_SetConfig+0x33c>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d130      	bne.n	800ecf8 <UART_SetConfig+0x1fc>
 800ec96:	4b67      	ldr	r3, [pc, #412]	@ (800ee34 <UART_SetConfig+0x338>)
 800ec98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec9a:	f003 0307 	and.w	r3, r3, #7
 800ec9e:	2b05      	cmp	r3, #5
 800eca0:	d826      	bhi.n	800ecf0 <UART_SetConfig+0x1f4>
 800eca2:	a201      	add	r2, pc, #4	@ (adr r2, 800eca8 <UART_SetConfig+0x1ac>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800ecc1 	.word	0x0800ecc1
 800ecac:	0800ecc9 	.word	0x0800ecc9
 800ecb0:	0800ecd1 	.word	0x0800ecd1
 800ecb4:	0800ecd9 	.word	0x0800ecd9
 800ecb8:	0800ece1 	.word	0x0800ece1
 800ecbc:	0800ece9 	.word	0x0800ece9
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e2f0      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ecc8:	2304      	movs	r3, #4
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e2ec      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ecd0:	2308      	movs	r3, #8
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e2e8      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ecd8:	2310      	movs	r3, #16
 800ecda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecde:	e2e4      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ece0:	2320      	movs	r3, #32
 800ece2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece6:	e2e0      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ece8:	2340      	movs	r3, #64	@ 0x40
 800ecea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecee:	e2dc      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ecf0:	2380      	movs	r3, #128	@ 0x80
 800ecf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf6:	e2d8      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a4f      	ldr	r2, [pc, #316]	@ (800ee3c <UART_SetConfig+0x340>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d130      	bne.n	800ed64 <UART_SetConfig+0x268>
 800ed02:	4b4c      	ldr	r3, [pc, #304]	@ (800ee34 <UART_SetConfig+0x338>)
 800ed04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b05      	cmp	r3, #5
 800ed0c:	d826      	bhi.n	800ed5c <UART_SetConfig+0x260>
 800ed0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed14 <UART_SetConfig+0x218>)
 800ed10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed14:	0800ed2d 	.word	0x0800ed2d
 800ed18:	0800ed35 	.word	0x0800ed35
 800ed1c:	0800ed3d 	.word	0x0800ed3d
 800ed20:	0800ed45 	.word	0x0800ed45
 800ed24:	0800ed4d 	.word	0x0800ed4d
 800ed28:	0800ed55 	.word	0x0800ed55
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e2ba      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed34:	2304      	movs	r3, #4
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3a:	e2b6      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed3c:	2308      	movs	r3, #8
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e2b2      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed44:	2310      	movs	r3, #16
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4a:	e2ae      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed52:	e2aa      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed54:	2340      	movs	r3, #64	@ 0x40
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5a:	e2a6      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed5c:	2380      	movs	r3, #128	@ 0x80
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed62:	e2a2      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a35      	ldr	r2, [pc, #212]	@ (800ee40 <UART_SetConfig+0x344>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d130      	bne.n	800edd0 <UART_SetConfig+0x2d4>
 800ed6e:	4b31      	ldr	r3, [pc, #196]	@ (800ee34 <UART_SetConfig+0x338>)
 800ed70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	d826      	bhi.n	800edc8 <UART_SetConfig+0x2cc>
 800ed7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed80 <UART_SetConfig+0x284>)
 800ed7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed80:	0800ed99 	.word	0x0800ed99
 800ed84:	0800eda1 	.word	0x0800eda1
 800ed88:	0800eda9 	.word	0x0800eda9
 800ed8c:	0800edb1 	.word	0x0800edb1
 800ed90:	0800edb9 	.word	0x0800edb9
 800ed94:	0800edc1 	.word	0x0800edc1
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9e:	e284      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800eda0:	2304      	movs	r3, #4
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda6:	e280      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800eda8:	2308      	movs	r3, #8
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edae:	e27c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800edb0:	2310      	movs	r3, #16
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb6:	e278      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800edb8:	2320      	movs	r3, #32
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edbe:	e274      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800edc0:	2340      	movs	r3, #64	@ 0x40
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc6:	e270      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800edc8:	2380      	movs	r3, #128	@ 0x80
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edce:	e26c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a1b      	ldr	r2, [pc, #108]	@ (800ee44 <UART_SetConfig+0x348>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d142      	bne.n	800ee60 <UART_SetConfig+0x364>
 800edda:	4b16      	ldr	r3, [pc, #88]	@ (800ee34 <UART_SetConfig+0x338>)
 800eddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	2b05      	cmp	r3, #5
 800ede4:	d838      	bhi.n	800ee58 <UART_SetConfig+0x35c>
 800ede6:	a201      	add	r2, pc, #4	@ (adr r2, 800edec <UART_SetConfig+0x2f0>)
 800ede8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edec:	0800ee05 	.word	0x0800ee05
 800edf0:	0800ee0d 	.word	0x0800ee0d
 800edf4:	0800ee15 	.word	0x0800ee15
 800edf8:	0800ee1d 	.word	0x0800ee1d
 800edfc:	0800ee49 	.word	0x0800ee49
 800ee00:	0800ee51 	.word	0x0800ee51
 800ee04:	2300      	movs	r3, #0
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0a:	e24e      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee12:	e24a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee14:	2308      	movs	r3, #8
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1a:	e246      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e242      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee24:	cfff69f3 	.word	0xcfff69f3
 800ee28:	58000c00 	.word	0x58000c00
 800ee2c:	11fff4ff 	.word	0x11fff4ff
 800ee30:	40011000 	.word	0x40011000
 800ee34:	58024400 	.word	0x58024400
 800ee38:	40004400 	.word	0x40004400
 800ee3c:	40004800 	.word	0x40004800
 800ee40:	40004c00 	.word	0x40004c00
 800ee44:	40005000 	.word	0x40005000
 800ee48:	2320      	movs	r3, #32
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4e:	e22c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee50:	2340      	movs	r3, #64	@ 0x40
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee56:	e228      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee58:	2380      	movs	r3, #128	@ 0x80
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5e:	e224      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4ab1      	ldr	r2, [pc, #708]	@ (800f12c <UART_SetConfig+0x630>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d176      	bne.n	800ef58 <UART_SetConfig+0x45c>
 800ee6a:	4bb1      	ldr	r3, [pc, #708]	@ (800f130 <UART_SetConfig+0x634>)
 800ee6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee72:	2b28      	cmp	r3, #40	@ 0x28
 800ee74:	d86c      	bhi.n	800ef50 <UART_SetConfig+0x454>
 800ee76:	a201      	add	r2, pc, #4	@ (adr r2, 800ee7c <UART_SetConfig+0x380>)
 800ee78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7c:	0800ef21 	.word	0x0800ef21
 800ee80:	0800ef51 	.word	0x0800ef51
 800ee84:	0800ef51 	.word	0x0800ef51
 800ee88:	0800ef51 	.word	0x0800ef51
 800ee8c:	0800ef51 	.word	0x0800ef51
 800ee90:	0800ef51 	.word	0x0800ef51
 800ee94:	0800ef51 	.word	0x0800ef51
 800ee98:	0800ef51 	.word	0x0800ef51
 800ee9c:	0800ef29 	.word	0x0800ef29
 800eea0:	0800ef51 	.word	0x0800ef51
 800eea4:	0800ef51 	.word	0x0800ef51
 800eea8:	0800ef51 	.word	0x0800ef51
 800eeac:	0800ef51 	.word	0x0800ef51
 800eeb0:	0800ef51 	.word	0x0800ef51
 800eeb4:	0800ef51 	.word	0x0800ef51
 800eeb8:	0800ef51 	.word	0x0800ef51
 800eebc:	0800ef31 	.word	0x0800ef31
 800eec0:	0800ef51 	.word	0x0800ef51
 800eec4:	0800ef51 	.word	0x0800ef51
 800eec8:	0800ef51 	.word	0x0800ef51
 800eecc:	0800ef51 	.word	0x0800ef51
 800eed0:	0800ef51 	.word	0x0800ef51
 800eed4:	0800ef51 	.word	0x0800ef51
 800eed8:	0800ef51 	.word	0x0800ef51
 800eedc:	0800ef39 	.word	0x0800ef39
 800eee0:	0800ef51 	.word	0x0800ef51
 800eee4:	0800ef51 	.word	0x0800ef51
 800eee8:	0800ef51 	.word	0x0800ef51
 800eeec:	0800ef51 	.word	0x0800ef51
 800eef0:	0800ef51 	.word	0x0800ef51
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef51 	.word	0x0800ef51
 800eefc:	0800ef41 	.word	0x0800ef41
 800ef00:	0800ef51 	.word	0x0800ef51
 800ef04:	0800ef51 	.word	0x0800ef51
 800ef08:	0800ef51 	.word	0x0800ef51
 800ef0c:	0800ef51 	.word	0x0800ef51
 800ef10:	0800ef51 	.word	0x0800ef51
 800ef14:	0800ef51 	.word	0x0800ef51
 800ef18:	0800ef51 	.word	0x0800ef51
 800ef1c:	0800ef49 	.word	0x0800ef49
 800ef20:	2301      	movs	r3, #1
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef26:	e1c0      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef28:	2304      	movs	r3, #4
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2e:	e1bc      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef30:	2308      	movs	r3, #8
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef36:	e1b8      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef38:	2310      	movs	r3, #16
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3e:	e1b4      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef40:	2320      	movs	r3, #32
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef46:	e1b0      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef48:	2340      	movs	r3, #64	@ 0x40
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4e:	e1ac      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef50:	2380      	movs	r3, #128	@ 0x80
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef56:	e1a8      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a75      	ldr	r2, [pc, #468]	@ (800f134 <UART_SetConfig+0x638>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d130      	bne.n	800efc4 <UART_SetConfig+0x4c8>
 800ef62:	4b73      	ldr	r3, [pc, #460]	@ (800f130 <UART_SetConfig+0x634>)
 800ef64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef66:	f003 0307 	and.w	r3, r3, #7
 800ef6a:	2b05      	cmp	r3, #5
 800ef6c:	d826      	bhi.n	800efbc <UART_SetConfig+0x4c0>
 800ef6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef74 <UART_SetConfig+0x478>)
 800ef70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef74:	0800ef8d 	.word	0x0800ef8d
 800ef78:	0800ef95 	.word	0x0800ef95
 800ef7c:	0800ef9d 	.word	0x0800ef9d
 800ef80:	0800efa5 	.word	0x0800efa5
 800ef84:	0800efad 	.word	0x0800efad
 800ef88:	0800efb5 	.word	0x0800efb5
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef92:	e18a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef94:	2304      	movs	r3, #4
 800ef96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9a:	e186      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800ef9c:	2308      	movs	r3, #8
 800ef9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa2:	e182      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800efa4:	2310      	movs	r3, #16
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efaa:	e17e      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800efac:	2320      	movs	r3, #32
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb2:	e17a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800efb4:	2340      	movs	r3, #64	@ 0x40
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efba:	e176      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800efbc:	2380      	movs	r3, #128	@ 0x80
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc2:	e172      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a5b      	ldr	r2, [pc, #364]	@ (800f138 <UART_SetConfig+0x63c>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d130      	bne.n	800f030 <UART_SetConfig+0x534>
 800efce:	4b58      	ldr	r3, [pc, #352]	@ (800f130 <UART_SetConfig+0x634>)
 800efd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efd2:	f003 0307 	and.w	r3, r3, #7
 800efd6:	2b05      	cmp	r3, #5
 800efd8:	d826      	bhi.n	800f028 <UART_SetConfig+0x52c>
 800efda:	a201      	add	r2, pc, #4	@ (adr r2, 800efe0 <UART_SetConfig+0x4e4>)
 800efdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe0:	0800eff9 	.word	0x0800eff9
 800efe4:	0800f001 	.word	0x0800f001
 800efe8:	0800f009 	.word	0x0800f009
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f019 	.word	0x0800f019
 800eff4:	0800f021 	.word	0x0800f021
 800eff8:	2300      	movs	r3, #0
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effe:	e154      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f000:	2304      	movs	r3, #4
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f006:	e150      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f008:	2308      	movs	r3, #8
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f00e:	e14c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f010:	2310      	movs	r3, #16
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f016:	e148      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f018:	2320      	movs	r3, #32
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f01e:	e144      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f020:	2340      	movs	r3, #64	@ 0x40
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f026:	e140      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f028:	2380      	movs	r3, #128	@ 0x80
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02e:	e13c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a41      	ldr	r2, [pc, #260]	@ (800f13c <UART_SetConfig+0x640>)
 800f036:	4293      	cmp	r3, r2
 800f038:	f040 8082 	bne.w	800f140 <UART_SetConfig+0x644>
 800f03c:	4b3c      	ldr	r3, [pc, #240]	@ (800f130 <UART_SetConfig+0x634>)
 800f03e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f044:	2b28      	cmp	r3, #40	@ 0x28
 800f046:	d86d      	bhi.n	800f124 <UART_SetConfig+0x628>
 800f048:	a201      	add	r2, pc, #4	@ (adr r2, 800f050 <UART_SetConfig+0x554>)
 800f04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04e:	bf00      	nop
 800f050:	0800f0f5 	.word	0x0800f0f5
 800f054:	0800f125 	.word	0x0800f125
 800f058:	0800f125 	.word	0x0800f125
 800f05c:	0800f125 	.word	0x0800f125
 800f060:	0800f125 	.word	0x0800f125
 800f064:	0800f125 	.word	0x0800f125
 800f068:	0800f125 	.word	0x0800f125
 800f06c:	0800f125 	.word	0x0800f125
 800f070:	0800f0fd 	.word	0x0800f0fd
 800f074:	0800f125 	.word	0x0800f125
 800f078:	0800f125 	.word	0x0800f125
 800f07c:	0800f125 	.word	0x0800f125
 800f080:	0800f125 	.word	0x0800f125
 800f084:	0800f125 	.word	0x0800f125
 800f088:	0800f125 	.word	0x0800f125
 800f08c:	0800f125 	.word	0x0800f125
 800f090:	0800f105 	.word	0x0800f105
 800f094:	0800f125 	.word	0x0800f125
 800f098:	0800f125 	.word	0x0800f125
 800f09c:	0800f125 	.word	0x0800f125
 800f0a0:	0800f125 	.word	0x0800f125
 800f0a4:	0800f125 	.word	0x0800f125
 800f0a8:	0800f125 	.word	0x0800f125
 800f0ac:	0800f125 	.word	0x0800f125
 800f0b0:	0800f10d 	.word	0x0800f10d
 800f0b4:	0800f125 	.word	0x0800f125
 800f0b8:	0800f125 	.word	0x0800f125
 800f0bc:	0800f125 	.word	0x0800f125
 800f0c0:	0800f125 	.word	0x0800f125
 800f0c4:	0800f125 	.word	0x0800f125
 800f0c8:	0800f125 	.word	0x0800f125
 800f0cc:	0800f125 	.word	0x0800f125
 800f0d0:	0800f115 	.word	0x0800f115
 800f0d4:	0800f125 	.word	0x0800f125
 800f0d8:	0800f125 	.word	0x0800f125
 800f0dc:	0800f125 	.word	0x0800f125
 800f0e0:	0800f125 	.word	0x0800f125
 800f0e4:	0800f125 	.word	0x0800f125
 800f0e8:	0800f125 	.word	0x0800f125
 800f0ec:	0800f125 	.word	0x0800f125
 800f0f0:	0800f11d 	.word	0x0800f11d
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fa:	e0d6      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f0fc:	2304      	movs	r3, #4
 800f0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f102:	e0d2      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f104:	2308      	movs	r3, #8
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10a:	e0ce      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f10c:	2310      	movs	r3, #16
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f112:	e0ca      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f114:	2320      	movs	r3, #32
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11a:	e0c6      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f11c:	2340      	movs	r3, #64	@ 0x40
 800f11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f122:	e0c2      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f124:	2380      	movs	r3, #128	@ 0x80
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12a:	e0be      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f12c:	40011400 	.word	0x40011400
 800f130:	58024400 	.word	0x58024400
 800f134:	40007800 	.word	0x40007800
 800f138:	40007c00 	.word	0x40007c00
 800f13c:	40011800 	.word	0x40011800
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4aad      	ldr	r2, [pc, #692]	@ (800f3fc <UART_SetConfig+0x900>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d176      	bne.n	800f238 <UART_SetConfig+0x73c>
 800f14a:	4bad      	ldr	r3, [pc, #692]	@ (800f400 <UART_SetConfig+0x904>)
 800f14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f14e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f152:	2b28      	cmp	r3, #40	@ 0x28
 800f154:	d86c      	bhi.n	800f230 <UART_SetConfig+0x734>
 800f156:	a201      	add	r2, pc, #4	@ (adr r2, 800f15c <UART_SetConfig+0x660>)
 800f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15c:	0800f201 	.word	0x0800f201
 800f160:	0800f231 	.word	0x0800f231
 800f164:	0800f231 	.word	0x0800f231
 800f168:	0800f231 	.word	0x0800f231
 800f16c:	0800f231 	.word	0x0800f231
 800f170:	0800f231 	.word	0x0800f231
 800f174:	0800f231 	.word	0x0800f231
 800f178:	0800f231 	.word	0x0800f231
 800f17c:	0800f209 	.word	0x0800f209
 800f180:	0800f231 	.word	0x0800f231
 800f184:	0800f231 	.word	0x0800f231
 800f188:	0800f231 	.word	0x0800f231
 800f18c:	0800f231 	.word	0x0800f231
 800f190:	0800f231 	.word	0x0800f231
 800f194:	0800f231 	.word	0x0800f231
 800f198:	0800f231 	.word	0x0800f231
 800f19c:	0800f211 	.word	0x0800f211
 800f1a0:	0800f231 	.word	0x0800f231
 800f1a4:	0800f231 	.word	0x0800f231
 800f1a8:	0800f231 	.word	0x0800f231
 800f1ac:	0800f231 	.word	0x0800f231
 800f1b0:	0800f231 	.word	0x0800f231
 800f1b4:	0800f231 	.word	0x0800f231
 800f1b8:	0800f231 	.word	0x0800f231
 800f1bc:	0800f219 	.word	0x0800f219
 800f1c0:	0800f231 	.word	0x0800f231
 800f1c4:	0800f231 	.word	0x0800f231
 800f1c8:	0800f231 	.word	0x0800f231
 800f1cc:	0800f231 	.word	0x0800f231
 800f1d0:	0800f231 	.word	0x0800f231
 800f1d4:	0800f231 	.word	0x0800f231
 800f1d8:	0800f231 	.word	0x0800f231
 800f1dc:	0800f221 	.word	0x0800f221
 800f1e0:	0800f231 	.word	0x0800f231
 800f1e4:	0800f231 	.word	0x0800f231
 800f1e8:	0800f231 	.word	0x0800f231
 800f1ec:	0800f231 	.word	0x0800f231
 800f1f0:	0800f231 	.word	0x0800f231
 800f1f4:	0800f231 	.word	0x0800f231
 800f1f8:	0800f231 	.word	0x0800f231
 800f1fc:	0800f229 	.word	0x0800f229
 800f200:	2301      	movs	r3, #1
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f206:	e050      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f208:	2304      	movs	r3, #4
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20e:	e04c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f210:	2308      	movs	r3, #8
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f216:	e048      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f218:	2310      	movs	r3, #16
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21e:	e044      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f220:	2320      	movs	r3, #32
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e040      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f228:	2340      	movs	r3, #64	@ 0x40
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e03c      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f230:	2380      	movs	r3, #128	@ 0x80
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f236:	e038      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a71      	ldr	r2, [pc, #452]	@ (800f404 <UART_SetConfig+0x908>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d130      	bne.n	800f2a4 <UART_SetConfig+0x7a8>
 800f242:	4b6f      	ldr	r3, [pc, #444]	@ (800f400 <UART_SetConfig+0x904>)
 800f244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f246:	f003 0307 	and.w	r3, r3, #7
 800f24a:	2b05      	cmp	r3, #5
 800f24c:	d826      	bhi.n	800f29c <UART_SetConfig+0x7a0>
 800f24e:	a201      	add	r2, pc, #4	@ (adr r2, 800f254 <UART_SetConfig+0x758>)
 800f250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f254:	0800f26d 	.word	0x0800f26d
 800f258:	0800f275 	.word	0x0800f275
 800f25c:	0800f27d 	.word	0x0800f27d
 800f260:	0800f285 	.word	0x0800f285
 800f264:	0800f28d 	.word	0x0800f28d
 800f268:	0800f295 	.word	0x0800f295
 800f26c:	2302      	movs	r3, #2
 800f26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f272:	e01a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f274:	2304      	movs	r3, #4
 800f276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27a:	e016      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f27c:	2308      	movs	r3, #8
 800f27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f282:	e012      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f284:	2310      	movs	r3, #16
 800f286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28a:	e00e      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f28c:	2320      	movs	r3, #32
 800f28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f292:	e00a      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f294:	2340      	movs	r3, #64	@ 0x40
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29a:	e006      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f29c:	2380      	movs	r3, #128	@ 0x80
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a2:	e002      	b.n	800f2aa <UART_SetConfig+0x7ae>
 800f2a4:	2380      	movs	r3, #128	@ 0x80
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a55      	ldr	r2, [pc, #340]	@ (800f404 <UART_SetConfig+0x908>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	f040 80f8 	bne.w	800f4a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f2b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f2ba:	2b20      	cmp	r3, #32
 800f2bc:	dc46      	bgt.n	800f34c <UART_SetConfig+0x850>
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	db75      	blt.n	800f3ae <UART_SetConfig+0x8b2>
 800f2c2:	3b02      	subs	r3, #2
 800f2c4:	2b1e      	cmp	r3, #30
 800f2c6:	d872      	bhi.n	800f3ae <UART_SetConfig+0x8b2>
 800f2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800f2d0 <UART_SetConfig+0x7d4>)
 800f2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ce:	bf00      	nop
 800f2d0:	0800f353 	.word	0x0800f353
 800f2d4:	0800f3af 	.word	0x0800f3af
 800f2d8:	0800f35b 	.word	0x0800f35b
 800f2dc:	0800f3af 	.word	0x0800f3af
 800f2e0:	0800f3af 	.word	0x0800f3af
 800f2e4:	0800f3af 	.word	0x0800f3af
 800f2e8:	0800f36b 	.word	0x0800f36b
 800f2ec:	0800f3af 	.word	0x0800f3af
 800f2f0:	0800f3af 	.word	0x0800f3af
 800f2f4:	0800f3af 	.word	0x0800f3af
 800f2f8:	0800f3af 	.word	0x0800f3af
 800f2fc:	0800f3af 	.word	0x0800f3af
 800f300:	0800f3af 	.word	0x0800f3af
 800f304:	0800f3af 	.word	0x0800f3af
 800f308:	0800f37b 	.word	0x0800f37b
 800f30c:	0800f3af 	.word	0x0800f3af
 800f310:	0800f3af 	.word	0x0800f3af
 800f314:	0800f3af 	.word	0x0800f3af
 800f318:	0800f3af 	.word	0x0800f3af
 800f31c:	0800f3af 	.word	0x0800f3af
 800f320:	0800f3af 	.word	0x0800f3af
 800f324:	0800f3af 	.word	0x0800f3af
 800f328:	0800f3af 	.word	0x0800f3af
 800f32c:	0800f3af 	.word	0x0800f3af
 800f330:	0800f3af 	.word	0x0800f3af
 800f334:	0800f3af 	.word	0x0800f3af
 800f338:	0800f3af 	.word	0x0800f3af
 800f33c:	0800f3af 	.word	0x0800f3af
 800f340:	0800f3af 	.word	0x0800f3af
 800f344:	0800f3af 	.word	0x0800f3af
 800f348:	0800f3a1 	.word	0x0800f3a1
 800f34c:	2b40      	cmp	r3, #64	@ 0x40
 800f34e:	d02a      	beq.n	800f3a6 <UART_SetConfig+0x8aa>
 800f350:	e02d      	b.n	800f3ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f352:	f7fb ff37 	bl	800b1c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f358:	e02f      	b.n	800f3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f35a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fb ff46 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f368:	e027      	b.n	800f3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f36a:	f107 0318 	add.w	r3, r7, #24
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fc f892 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f378:	e01f      	b.n	800f3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f37a:	4b21      	ldr	r3, [pc, #132]	@ (800f400 <UART_SetConfig+0x904>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f003 0320 	and.w	r3, r3, #32
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f386:	4b1e      	ldr	r3, [pc, #120]	@ (800f400 <UART_SetConfig+0x904>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	08db      	lsrs	r3, r3, #3
 800f38c:	f003 0303 	and.w	r3, r3, #3
 800f390:	4a1d      	ldr	r2, [pc, #116]	@ (800f408 <UART_SetConfig+0x90c>)
 800f392:	fa22 f303 	lsr.w	r3, r2, r3
 800f396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f398:	e00f      	b.n	800f3ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f39a:	4b1b      	ldr	r3, [pc, #108]	@ (800f408 <UART_SetConfig+0x90c>)
 800f39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f39e:	e00c      	b.n	800f3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f40c <UART_SetConfig+0x910>)
 800f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3a4:	e009      	b.n	800f3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3ac:	e005      	b.n	800f3ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f3b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 81ee 	beq.w	800f79e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c6:	4a12      	ldr	r2, [pc, #72]	@ (800f410 <UART_SetConfig+0x914>)
 800f3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3d4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	685a      	ldr	r2, [r3, #4]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	005b      	lsls	r3, r3, #1
 800f3de:	4413      	add	r3, r2
 800f3e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d305      	bcc.n	800f3f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d910      	bls.n	800f414 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f3f8:	e1d1      	b.n	800f79e <UART_SetConfig+0xca2>
 800f3fa:	bf00      	nop
 800f3fc:	40011c00 	.word	0x40011c00
 800f400:	58024400 	.word	0x58024400
 800f404:	58000c00 	.word	0x58000c00
 800f408:	03d09000 	.word	0x03d09000
 800f40c:	003d0900 	.word	0x003d0900
 800f410:	0801288c 	.word	0x0801288c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f416:	2200      	movs	r2, #0
 800f418:	60bb      	str	r3, [r7, #8]
 800f41a:	60fa      	str	r2, [r7, #12]
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f420:	4ac0      	ldr	r2, [pc, #768]	@ (800f724 <UART_SetConfig+0xc28>)
 800f422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f426:	b29b      	uxth	r3, r3
 800f428:	2200      	movs	r2, #0
 800f42a:	603b      	str	r3, [r7, #0]
 800f42c:	607a      	str	r2, [r7, #4]
 800f42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f436:	f7f0 ffc3 	bl	80003c0 <__aeabi_uldivmod>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	4610      	mov	r0, r2
 800f440:	4619      	mov	r1, r3
 800f442:	f04f 0200 	mov.w	r2, #0
 800f446:	f04f 0300 	mov.w	r3, #0
 800f44a:	020b      	lsls	r3, r1, #8
 800f44c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f450:	0202      	lsls	r2, r0, #8
 800f452:	6979      	ldr	r1, [r7, #20]
 800f454:	6849      	ldr	r1, [r1, #4]
 800f456:	0849      	lsrs	r1, r1, #1
 800f458:	2000      	movs	r0, #0
 800f45a:	460c      	mov	r4, r1
 800f45c:	4605      	mov	r5, r0
 800f45e:	eb12 0804 	adds.w	r8, r2, r4
 800f462:	eb43 0905 	adc.w	r9, r3, r5
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	469a      	mov	sl, r3
 800f46e:	4693      	mov	fp, r2
 800f470:	4652      	mov	r2, sl
 800f472:	465b      	mov	r3, fp
 800f474:	4640      	mov	r0, r8
 800f476:	4649      	mov	r1, r9
 800f478:	f7f0 ffa2 	bl	80003c0 <__aeabi_uldivmod>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4613      	mov	r3, r2
 800f482:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f48a:	d308      	bcc.n	800f49e <UART_SetConfig+0x9a2>
 800f48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f492:	d204      	bcs.n	800f49e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f49a:	60da      	str	r2, [r3, #12]
 800f49c:	e17f      	b.n	800f79e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f4a4:	e17b      	b.n	800f79e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	69db      	ldr	r3, [r3, #28]
 800f4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f4ae:	f040 80bd 	bne.w	800f62c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f4b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	2b20      	cmp	r3, #32
 800f4b8:	dc48      	bgt.n	800f54c <UART_SetConfig+0xa50>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	db7b      	blt.n	800f5b6 <UART_SetConfig+0xaba>
 800f4be:	2b20      	cmp	r3, #32
 800f4c0:	d879      	bhi.n	800f5b6 <UART_SetConfig+0xaba>
 800f4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4c8 <UART_SetConfig+0x9cc>)
 800f4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c8:	0800f553 	.word	0x0800f553
 800f4cc:	0800f55b 	.word	0x0800f55b
 800f4d0:	0800f5b7 	.word	0x0800f5b7
 800f4d4:	0800f5b7 	.word	0x0800f5b7
 800f4d8:	0800f563 	.word	0x0800f563
 800f4dc:	0800f5b7 	.word	0x0800f5b7
 800f4e0:	0800f5b7 	.word	0x0800f5b7
 800f4e4:	0800f5b7 	.word	0x0800f5b7
 800f4e8:	0800f573 	.word	0x0800f573
 800f4ec:	0800f5b7 	.word	0x0800f5b7
 800f4f0:	0800f5b7 	.word	0x0800f5b7
 800f4f4:	0800f5b7 	.word	0x0800f5b7
 800f4f8:	0800f5b7 	.word	0x0800f5b7
 800f4fc:	0800f5b7 	.word	0x0800f5b7
 800f500:	0800f5b7 	.word	0x0800f5b7
 800f504:	0800f5b7 	.word	0x0800f5b7
 800f508:	0800f583 	.word	0x0800f583
 800f50c:	0800f5b7 	.word	0x0800f5b7
 800f510:	0800f5b7 	.word	0x0800f5b7
 800f514:	0800f5b7 	.word	0x0800f5b7
 800f518:	0800f5b7 	.word	0x0800f5b7
 800f51c:	0800f5b7 	.word	0x0800f5b7
 800f520:	0800f5b7 	.word	0x0800f5b7
 800f524:	0800f5b7 	.word	0x0800f5b7
 800f528:	0800f5b7 	.word	0x0800f5b7
 800f52c:	0800f5b7 	.word	0x0800f5b7
 800f530:	0800f5b7 	.word	0x0800f5b7
 800f534:	0800f5b7 	.word	0x0800f5b7
 800f538:	0800f5b7 	.word	0x0800f5b7
 800f53c:	0800f5b7 	.word	0x0800f5b7
 800f540:	0800f5b7 	.word	0x0800f5b7
 800f544:	0800f5b7 	.word	0x0800f5b7
 800f548:	0800f5a9 	.word	0x0800f5a9
 800f54c:	2b40      	cmp	r3, #64	@ 0x40
 800f54e:	d02e      	beq.n	800f5ae <UART_SetConfig+0xab2>
 800f550:	e031      	b.n	800f5b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f552:	f7f9 ff99 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800f556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f558:	e033      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f55a:	f7f9 ffab 	bl	80094b4 <HAL_RCC_GetPCLK2Freq>
 800f55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f560:	e02f      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f566:	4618      	mov	r0, r3
 800f568:	f7fb fe42 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f570:	e027      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f572:	f107 0318 	add.w	r3, r7, #24
 800f576:	4618      	mov	r0, r3
 800f578:	f7fb ff8e 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f580:	e01f      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f582:	4b69      	ldr	r3, [pc, #420]	@ (800f728 <UART_SetConfig+0xc2c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 0320 	and.w	r3, r3, #32
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d009      	beq.n	800f5a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f58e:	4b66      	ldr	r3, [pc, #408]	@ (800f728 <UART_SetConfig+0xc2c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	08db      	lsrs	r3, r3, #3
 800f594:	f003 0303 	and.w	r3, r3, #3
 800f598:	4a64      	ldr	r2, [pc, #400]	@ (800f72c <UART_SetConfig+0xc30>)
 800f59a:	fa22 f303 	lsr.w	r3, r2, r3
 800f59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5a0:	e00f      	b.n	800f5c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f5a2:	4b62      	ldr	r3, [pc, #392]	@ (800f72c <UART_SetConfig+0xc30>)
 800f5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5a6:	e00c      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5a8:	4b61      	ldr	r3, [pc, #388]	@ (800f730 <UART_SetConfig+0xc34>)
 800f5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ac:	e009      	b.n	800f5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5b4:	e005      	b.n	800f5c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f5c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80ea 	beq.w	800f79e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ce:	4a55      	ldr	r2, [pc, #340]	@ (800f724 <UART_SetConfig+0xc28>)
 800f5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5dc:	005a      	lsls	r2, r3, #1
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	441a      	add	r2, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f2:	2b0f      	cmp	r3, #15
 800f5f4:	d916      	bls.n	800f624 <UART_SetConfig+0xb28>
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5fc:	d212      	bcs.n	800f624 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f600:	b29b      	uxth	r3, r3
 800f602:	f023 030f 	bic.w	r3, r3, #15
 800f606:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60a:	085b      	lsrs	r3, r3, #1
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	f003 0307 	and.w	r3, r3, #7
 800f612:	b29a      	uxth	r2, r3
 800f614:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f616:	4313      	orrs	r3, r2
 800f618:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	e0bc      	b.n	800f79e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f62a:	e0b8      	b.n	800f79e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f62c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f630:	2b20      	cmp	r3, #32
 800f632:	dc4b      	bgt.n	800f6cc <UART_SetConfig+0xbd0>
 800f634:	2b00      	cmp	r3, #0
 800f636:	f2c0 8087 	blt.w	800f748 <UART_SetConfig+0xc4c>
 800f63a:	2b20      	cmp	r3, #32
 800f63c:	f200 8084 	bhi.w	800f748 <UART_SetConfig+0xc4c>
 800f640:	a201      	add	r2, pc, #4	@ (adr r2, 800f648 <UART_SetConfig+0xb4c>)
 800f642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f646:	bf00      	nop
 800f648:	0800f6d3 	.word	0x0800f6d3
 800f64c:	0800f6db 	.word	0x0800f6db
 800f650:	0800f749 	.word	0x0800f749
 800f654:	0800f749 	.word	0x0800f749
 800f658:	0800f6e3 	.word	0x0800f6e3
 800f65c:	0800f749 	.word	0x0800f749
 800f660:	0800f749 	.word	0x0800f749
 800f664:	0800f749 	.word	0x0800f749
 800f668:	0800f6f3 	.word	0x0800f6f3
 800f66c:	0800f749 	.word	0x0800f749
 800f670:	0800f749 	.word	0x0800f749
 800f674:	0800f749 	.word	0x0800f749
 800f678:	0800f749 	.word	0x0800f749
 800f67c:	0800f749 	.word	0x0800f749
 800f680:	0800f749 	.word	0x0800f749
 800f684:	0800f749 	.word	0x0800f749
 800f688:	0800f703 	.word	0x0800f703
 800f68c:	0800f749 	.word	0x0800f749
 800f690:	0800f749 	.word	0x0800f749
 800f694:	0800f749 	.word	0x0800f749
 800f698:	0800f749 	.word	0x0800f749
 800f69c:	0800f749 	.word	0x0800f749
 800f6a0:	0800f749 	.word	0x0800f749
 800f6a4:	0800f749 	.word	0x0800f749
 800f6a8:	0800f749 	.word	0x0800f749
 800f6ac:	0800f749 	.word	0x0800f749
 800f6b0:	0800f749 	.word	0x0800f749
 800f6b4:	0800f749 	.word	0x0800f749
 800f6b8:	0800f749 	.word	0x0800f749
 800f6bc:	0800f749 	.word	0x0800f749
 800f6c0:	0800f749 	.word	0x0800f749
 800f6c4:	0800f749 	.word	0x0800f749
 800f6c8:	0800f73b 	.word	0x0800f73b
 800f6cc:	2b40      	cmp	r3, #64	@ 0x40
 800f6ce:	d037      	beq.n	800f740 <UART_SetConfig+0xc44>
 800f6d0:	e03a      	b.n	800f748 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6d2:	f7f9 fed9 	bl	8009488 <HAL_RCC_GetPCLK1Freq>
 800f6d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6d8:	e03c      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6da:	f7f9 feeb 	bl	80094b4 <HAL_RCC_GetPCLK2Freq>
 800f6de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6e0:	e038      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fb fd82 	bl	800b1f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6f0:	e030      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6f2:	f107 0318 	add.w	r3, r7, #24
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fb fece 	bl	800b498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f700:	e028      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f702:	4b09      	ldr	r3, [pc, #36]	@ (800f728 <UART_SetConfig+0xc2c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f003 0320 	and.w	r3, r3, #32
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d012      	beq.n	800f734 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f70e:	4b06      	ldr	r3, [pc, #24]	@ (800f728 <UART_SetConfig+0xc2c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	08db      	lsrs	r3, r3, #3
 800f714:	f003 0303 	and.w	r3, r3, #3
 800f718:	4a04      	ldr	r2, [pc, #16]	@ (800f72c <UART_SetConfig+0xc30>)
 800f71a:	fa22 f303 	lsr.w	r3, r2, r3
 800f71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f720:	e018      	b.n	800f754 <UART_SetConfig+0xc58>
 800f722:	bf00      	nop
 800f724:	0801288c 	.word	0x0801288c
 800f728:	58024400 	.word	0x58024400
 800f72c:	03d09000 	.word	0x03d09000
 800f730:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f734:	4b24      	ldr	r3, [pc, #144]	@ (800f7c8 <UART_SetConfig+0xccc>)
 800f736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f738:	e00c      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f73a:	4b24      	ldr	r3, [pc, #144]	@ (800f7cc <UART_SetConfig+0xcd0>)
 800f73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f73e:	e009      	b.n	800f754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f746:	e005      	b.n	800f754 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f748:	2300      	movs	r3, #0
 800f74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f752:	bf00      	nop
    }

    if (pclk != 0U)
 800f754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f756:	2b00      	cmp	r3, #0
 800f758:	d021      	beq.n	800f79e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f75e:	4a1c      	ldr	r2, [pc, #112]	@ (800f7d0 <UART_SetConfig+0xcd4>)
 800f760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f764:	461a      	mov	r2, r3
 800f766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f768:	fbb3 f2f2 	udiv	r2, r3, r2
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	085b      	lsrs	r3, r3, #1
 800f772:	441a      	add	r2, r3
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	fbb2 f3f3 	udiv	r3, r2, r3
 800f77c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f780:	2b0f      	cmp	r3, #15
 800f782:	d909      	bls.n	800f798 <UART_SetConfig+0xc9c>
 800f784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f78a:	d205      	bcs.n	800f798 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78e:	b29a      	uxth	r2, r3
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	60da      	str	r2, [r3, #12]
 800f796:	e002      	b.n	800f79e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f7ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3748      	adds	r7, #72	@ 0x48
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7c8:	03d09000 	.word	0x03d09000
 800f7cc:	003d0900 	.word	0x003d0900
 800f7d0:	0801288c 	.word	0x0801288c

0800f7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7e0:	f003 0308 	and.w	r3, r3, #8
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00a      	beq.n	800f7fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	430a      	orrs	r2, r1
 800f7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f802:	f003 0301 	and.w	r3, r3, #1
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00a      	beq.n	800f820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	430a      	orrs	r2, r1
 800f81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00a      	beq.n	800f842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f846:	f003 0304 	and.w	r3, r3, #4
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00a      	beq.n	800f864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	430a      	orrs	r2, r1
 800f862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f868:	f003 0310 	and.w	r3, r3, #16
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00a      	beq.n	800f886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	430a      	orrs	r2, r1
 800f884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f88a:	f003 0320 	and.w	r3, r3, #32
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00a      	beq.n	800f8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	430a      	orrs	r2, r1
 800f8a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d01a      	beq.n	800f8ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8d2:	d10a      	bne.n	800f8ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	430a      	orrs	r2, r1
 800f8e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00a      	beq.n	800f90c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	430a      	orrs	r2, r1
 800f90a:	605a      	str	r2, [r3, #4]
  }
}
 800f90c:	bf00      	nop
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b098      	sub	sp, #96	@ 0x60
 800f91c:	af02      	add	r7, sp, #8
 800f91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f928:	f7f2 ffa2 	bl	8002870 <HAL_GetTick>
 800f92c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 0308 	and.w	r3, r3, #8
 800f938:	2b08      	cmp	r3, #8
 800f93a:	d12f      	bne.n	800f99c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f93c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f944:	2200      	movs	r2, #0
 800f946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f88e 	bl	800fa6c <UART_WaitOnFlagUntilTimeout>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d022      	beq.n	800f99c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f974:	647b      	str	r3, [r7, #68]	@ 0x44
 800f976:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f97a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f97c:	e841 2300 	strex	r3, r2, [r1]
 800f980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1e6      	bne.n	800f956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2220      	movs	r2, #32
 800f98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f998:	2303      	movs	r3, #3
 800f99a:	e063      	b.n	800fa64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f003 0304 	and.w	r3, r3, #4
 800f9a6:	2b04      	cmp	r3, #4
 800f9a8:	d149      	bne.n	800fa3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 f857 	bl	800fa6c <UART_WaitOnFlagUntilTimeout>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d03c      	beq.n	800fa3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9cc:	e853 3f00 	ldrex	r3, [r3]
 800f9d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f9d2:	6a3b      	ldr	r3, [r7, #32]
 800f9d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9ea:	e841 2300 	strex	r3, r2, [r1]
 800f9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e6      	bne.n	800f9c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f023 0301 	bic.w	r3, r3, #1
 800fa0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3308      	adds	r3, #8
 800fa14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa16:	61fa      	str	r2, [r7, #28]
 800fa18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1a:	69b9      	ldr	r1, [r7, #24]
 800fa1c:	69fa      	ldr	r2, [r7, #28]
 800fa1e:	e841 2300 	strex	r3, r2, [r1]
 800fa22:	617b      	str	r3, [r7, #20]
   return(result);
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1e5      	bne.n	800f9f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e012      	b.n	800fa64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2220      	movs	r2, #32
 800fa42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2220      	movs	r2, #32
 800fa4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3758      	adds	r7, #88	@ 0x58
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	603b      	str	r3, [r7, #0]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa7c:	e04f      	b.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa84:	d04b      	beq.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa86:	f7f2 fef3 	bl	8002870 <HAL_GetTick>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	69ba      	ldr	r2, [r7, #24]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d302      	bcc.n	800fa9c <UART_WaitOnFlagUntilTimeout+0x30>
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e04e      	b.n	800fb3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f003 0304 	and.w	r3, r3, #4
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d037      	beq.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	2b80      	cmp	r3, #128	@ 0x80
 800fab2:	d034      	beq.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	2b40      	cmp	r3, #64	@ 0x40
 800fab8:	d031      	beq.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	69db      	ldr	r3, [r3, #28]
 800fac0:	f003 0308 	and.w	r3, r3, #8
 800fac4:	2b08      	cmp	r3, #8
 800fac6:	d110      	bne.n	800faea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2208      	movs	r2, #8
 800face:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f000 f839 	bl	800fb48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2208      	movs	r2, #8
 800fada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fae6:	2301      	movs	r3, #1
 800fae8:	e029      	b.n	800fb3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	69db      	ldr	r3, [r3, #28]
 800faf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800faf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800faf8:	d111      	bne.n	800fb1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 f81f 	bl	800fb48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2220      	movs	r2, #32
 800fb0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	e00f      	b.n	800fb3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	69da      	ldr	r2, [r3, #28]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	4013      	ands	r3, r2
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	bf0c      	ite	eq
 800fb2e:	2301      	moveq	r3, #1
 800fb30:	2300      	movne	r3, #0
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	461a      	mov	r2, r3
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d0a0      	beq.n	800fa7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
	...

0800fb48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b095      	sub	sp, #84	@ 0x54
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb58:	e853 3f00 	ldrex	r3, [r3]
 800fb5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e6      	bne.n	800fb50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	4b1e      	ldr	r3, [pc, #120]	@ (800fc10 <UART_EndRxTransfer+0xc8>)
 800fb96:	4013      	ands	r3, r2
 800fb98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e5      	bne.n	800fb82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d118      	bne.n	800fbf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	f023 0310 	bic.w	r3, r3, #16
 800fbd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbdc:	61bb      	str	r3, [r7, #24]
 800fbde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6979      	ldr	r1, [r7, #20]
 800fbe2:	69ba      	ldr	r2, [r7, #24]
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e6      	bne.n	800fbbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2220      	movs	r2, #32
 800fbf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc04:	bf00      	nop
 800fc06:	3754      	adds	r7, #84	@ 0x54
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr
 800fc10:	effffffe 	.word	0xeffffffe

0800fc14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b085      	sub	sp, #20
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d101      	bne.n	800fc2a <HAL_UARTEx_DisableFifoMode+0x16>
 800fc26:	2302      	movs	r3, #2
 800fc28:	e027      	b.n	800fc7a <HAL_UARTEx_DisableFifoMode+0x66>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2224      	movs	r2, #36	@ 0x24
 800fc36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f022 0201 	bic.w	r2, r2, #1
 800fc50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fc58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2220      	movs	r2, #32
 800fc6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc78:	2300      	movs	r3, #0
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3714      	adds	r7, #20
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr

0800fc86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b084      	sub	sp, #16
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
 800fc8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d101      	bne.n	800fc9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	e02d      	b.n	800fcfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2224      	movs	r2, #36	@ 0x24
 800fcaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f022 0201 	bic.w	r2, r2, #1
 800fcc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	430a      	orrs	r2, r1
 800fcd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f850 	bl	800fd80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2220      	movs	r2, #32
 800fcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b084      	sub	sp, #16
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d101      	bne.n	800fd1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd16:	2302      	movs	r3, #2
 800fd18:	e02d      	b.n	800fd76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2224      	movs	r2, #36	@ 0x24
 800fd26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f022 0201 	bic.w	r2, r2, #1
 800fd40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	430a      	orrs	r2, r1
 800fd54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f812 	bl	800fd80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2220      	movs	r2, #32
 800fd68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
	...

0800fd80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d108      	bne.n	800fda2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2201      	movs	r2, #1
 800fd94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fda0:	e031      	b.n	800fe06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fda2:	2310      	movs	r3, #16
 800fda4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fda6:	2310      	movs	r3, #16
 800fda8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	0e5b      	lsrs	r3, r3, #25
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	f003 0307 	and.w	r3, r3, #7
 800fdb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	0f5b      	lsrs	r3, r3, #29
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	f003 0307 	and.w	r3, r3, #7
 800fdc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fdca:	7bbb      	ldrb	r3, [r7, #14]
 800fdcc:	7b3a      	ldrb	r2, [r7, #12]
 800fdce:	4911      	ldr	r1, [pc, #68]	@ (800fe14 <UARTEx_SetNbDataToProcess+0x94>)
 800fdd0:	5c8a      	ldrb	r2, [r1, r2]
 800fdd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fdd6:	7b3a      	ldrb	r2, [r7, #12]
 800fdd8:	490f      	ldr	r1, [pc, #60]	@ (800fe18 <UARTEx_SetNbDataToProcess+0x98>)
 800fdda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fddc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fde0:	b29a      	uxth	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	7b7a      	ldrb	r2, [r7, #13]
 800fdec:	4909      	ldr	r1, [pc, #36]	@ (800fe14 <UARTEx_SetNbDataToProcess+0x94>)
 800fdee:	5c8a      	ldrb	r2, [r1, r2]
 800fdf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fdf4:	7b7a      	ldrb	r2, [r7, #13]
 800fdf6:	4908      	ldr	r1, [pc, #32]	@ (800fe18 <UARTEx_SetNbDataToProcess+0x98>)
 800fdf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fdfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe06:	bf00      	nop
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	080128a4 	.word	0x080128a4
 800fe18:	080128ac 	.word	0x080128ac

0800fe1c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	b480      	push	{r7}
 800fe20:	b085      	sub	sp, #20
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
 800fe26:	f107 001c 	add.w	r0, r7, #28
 800fe2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fe32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fe34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fe36:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fe38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fe3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fe3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fe3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fe40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fe42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	4b07      	ldr	r3, [pc, #28]	@ (800fe6c <SDMMC_Init+0x50>)
 800fe50:	4013      	ands	r3, r2
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	431a      	orrs	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3714      	adds	r7, #20
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	b004      	add	sp, #16
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	ffc02c00 	.word	0xffc02c00

0800fe70 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	370c      	adds	r7, #12
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fe8a:	b480      	push	{r7}
 800fe8c:	b083      	sub	sp, #12
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fe9e:	2300      	movs	r3, #0
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f043 0203 	orr.w	r2, r3, #3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f003 0303 	and.w	r3, r3, #3
}
 800fede:	4618      	mov	r0, r3
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
	...

0800feec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ff10:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ff16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	68da      	ldr	r2, [r3, #12]
 800ff22:	4b06      	ldr	r3, [pc, #24]	@ (800ff3c <SDMMC_SendCommand+0x50>)
 800ff24:	4013      	ands	r3, r2
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	431a      	orrs	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3714      	adds	r7, #20
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	fffee0c0 	.word	0xfffee0c0

0800ff40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	b2db      	uxtb	r3, r3
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3314      	adds	r3, #20
 800ff68:	461a      	mov	r2, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	685a      	ldr	r2, [r3, #4]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ffa6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ffac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ffb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	431a      	orrs	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ffca:	2300      	movs	r3, #0

}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ffe6:	2310      	movs	r3, #16
 800ffe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fff0:	2300      	movs	r3, #0
 800fff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fffa:	f107 0308 	add.w	r3, r7, #8
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ff73 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010006:	f241 3288 	movw	r2, #5000	@ 0x1388
 801000a:	2110      	movs	r1, #16
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fa5f 	bl	80104d0 <SDMMC_GetCmdResp1>
 8010012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010014:	69fb      	ldr	r3, [r7, #28]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3720      	adds	r7, #32
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b088      	sub	sp, #32
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801002c:	2311      	movs	r3, #17
 801002e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010036:	2300      	movs	r3, #0
 8010038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801003a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801003e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010040:	f107 0308 	add.w	r3, r7, #8
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff ff50 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801004c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010050:	2111      	movs	r1, #17
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fa3c 	bl	80104d0 <SDMMC_GetCmdResp1>
 8010058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801005a:	69fb      	ldr	r3, [r7, #28]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3720      	adds	r7, #32
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010072:	2312      	movs	r3, #18
 8010074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801007a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801007c:	2300      	movs	r3, #0
 801007e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010086:	f107 0308 	add.w	r3, r7, #8
 801008a:	4619      	mov	r1, r3
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7ff ff2d 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010096:	2112      	movs	r1, #18
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 fa19 	bl	80104d0 <SDMMC_GetCmdResp1>
 801009e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100a0:	69fb      	ldr	r3, [r7, #28]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3720      	adds	r7, #32
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b088      	sub	sp, #32
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80100b8:	2318      	movs	r3, #24
 80100ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100cc:	f107 0308 	add.w	r3, r7, #8
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff ff0a 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80100d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100dc:	2118      	movs	r1, #24
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 f9f6 	bl	80104d0 <SDMMC_GetCmdResp1>
 80100e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100e6:	69fb      	ldr	r3, [r7, #28]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3720      	adds	r7, #32
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b088      	sub	sp, #32
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80100fe:	2319      	movs	r3, #25
 8010100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010108:	2300      	movs	r3, #0
 801010a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801010c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010112:	f107 0308 	add.w	r3, r7, #8
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7ff fee7 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801011e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010122:	2119      	movs	r1, #25
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f000 f9d3 	bl	80104d0 <SDMMC_GetCmdResp1>
 801012a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801012c:	69fb      	ldr	r3, [r7, #28]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3720      	adds	r7, #32
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010140:	2300      	movs	r3, #0
 8010142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010144:	230c      	movs	r3, #12
 8010146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801014c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801014e:	2300      	movs	r3, #0
 8010150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010156:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010170:	f107 0308 	add.w	r3, r7, #8
 8010174:	4619      	mov	r1, r3
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff feb8 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801017c:	4a0b      	ldr	r2, [pc, #44]	@ (80101ac <SDMMC_CmdStopTransfer+0x74>)
 801017e:	210c      	movs	r1, #12
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f9a5 	bl	80104d0 <SDMMC_GetCmdResp1>
 8010186:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801019a:	d101      	bne.n	80101a0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801019c:	2300      	movs	r3, #0
 801019e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80101a0:	69fb      	ldr	r3, [r7, #28]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3720      	adds	r7, #32
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	05f5e100 	.word	0x05f5e100

080101b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b088      	sub	sp, #32
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80101be:	2307      	movs	r3, #7
 80101c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c8:	2300      	movs	r3, #0
 80101ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d2:	f107 0308 	add.w	r3, r7, #8
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7ff fe87 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80101de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101e2:	2107      	movs	r1, #7
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f973 	bl	80104d0 <SDMMC_GetCmdResp1>
 80101ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ec:	69fb      	ldr	r3, [r7, #28]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3720      	adds	r7, #32
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b088      	sub	sp, #32
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80101fe:	2300      	movs	r3, #0
 8010200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010206:	2300      	movs	r3, #0
 8010208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801020a:	2300      	movs	r3, #0
 801020c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801020e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010214:	f107 0308 	add.w	r3, r7, #8
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7ff fe66 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fb97 	bl	8010954 <SDMMC_GetCmdError>
 8010226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010228:	69fb      	ldr	r3, [r7, #28]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3720      	adds	r7, #32
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b088      	sub	sp, #32
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801023a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801023e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010240:	2308      	movs	r3, #8
 8010242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801024a:	2300      	movs	r3, #0
 801024c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801024e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010252:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010254:	f107 0308 	add.w	r3, r7, #8
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7ff fe46 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 fb29 	bl	80108b8 <SDMMC_GetCmdResp7>
 8010266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010268:	69fb      	ldr	r3, [r7, #28]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3720      	adds	r7, #32
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b088      	sub	sp, #32
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010280:	2337      	movs	r3, #55	@ 0x37
 8010282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801028a:	2300      	movs	r3, #0
 801028c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801028e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010294:	f107 0308 	add.w	r3, r7, #8
 8010298:	4619      	mov	r1, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f7ff fe26 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80102a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102a4:	2137      	movs	r1, #55	@ 0x37
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f912 	bl	80104d0 <SDMMC_GetCmdResp1>
 80102ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ae:	69fb      	ldr	r3, [r7, #28]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3720      	adds	r7, #32
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80102c6:	2329      	movs	r3, #41	@ 0x29
 80102c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102d0:	2300      	movs	r3, #0
 80102d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102da:	f107 0308 	add.w	r3, r7, #8
 80102de:	4619      	mov	r1, r3
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff fe03 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fa2e 	bl	8010748 <SDMMC_GetCmdResp3>
 80102ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ee:	69fb      	ldr	r3, [r7, #28]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3720      	adds	r7, #32
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010306:	2306      	movs	r3, #6
 8010308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801030a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801030e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010310:	2300      	movs	r3, #0
 8010312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	4619      	mov	r1, r3
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff fde3 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010326:	f241 3288 	movw	r2, #5000	@ 0x1388
 801032a:	2106      	movs	r1, #6
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f8cf 	bl	80104d0 <SDMMC_GetCmdResp1>
 8010332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010334:	69fb      	ldr	r3, [r7, #28]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3720      	adds	r7, #32
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801033e:	b580      	push	{r7, lr}
 8010340:	b088      	sub	sp, #32
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010346:	2300      	movs	r3, #0
 8010348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801034a:	2333      	movs	r3, #51	@ 0x33
 801034c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801034e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010354:	2300      	movs	r3, #0
 8010356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801035c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801035e:	f107 0308 	add.w	r3, r7, #8
 8010362:	4619      	mov	r1, r3
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff fdc1 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801036a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801036e:	2133      	movs	r1, #51	@ 0x33
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f8ad 	bl	80104d0 <SDMMC_GetCmdResp1>
 8010376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010378:	69fb      	ldr	r3, [r7, #28]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3720      	adds	r7, #32
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b088      	sub	sp, #32
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801038e:	2302      	movs	r3, #2
 8010390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010392:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010398:	2300      	movs	r3, #0
 801039a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801039c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a2:	f107 0308 	add.w	r3, r7, #8
 80103a6:	4619      	mov	r1, r3
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7ff fd9f 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f980 	bl	80106b4 <SDMMC_GetCmdResp2>
 80103b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b6:	69fb      	ldr	r3, [r7, #28]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3720      	adds	r7, #32
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b088      	sub	sp, #32
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80103ce:	2309      	movs	r3, #9
 80103d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80103d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80103d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d8:	2300      	movs	r3, #0
 80103da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103e2:	f107 0308 	add.w	r3, r7, #8
 80103e6:	4619      	mov	r1, r3
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff fd7f 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f960 	bl	80106b4 <SDMMC_GetCmdResp2>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801040a:	2300      	movs	r3, #0
 801040c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801040e:	2303      	movs	r3, #3
 8010410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010418:	2300      	movs	r3, #0
 801041a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010422:	f107 0308 	add.w	r3, r7, #8
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff fd5f 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	2103      	movs	r1, #3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f9c8 	bl	80107c8 <SDMMC_GetCmdResp6>
 8010438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043a:	69fb      	ldr	r3, [r7, #28]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010452:	230d      	movs	r3, #13
 8010454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801045a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045c:	2300      	movs	r3, #0
 801045e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010460:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010466:	f107 0308 	add.w	r3, r7, #8
 801046a:	4619      	mov	r1, r3
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff fd3d 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010476:	210d      	movs	r1, #13
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f829 	bl	80104d0 <SDMMC_GetCmdResp1>
 801047e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010480:	69fb      	ldr	r3, [r7, #28]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3720      	adds	r7, #32
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b088      	sub	sp, #32
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010496:	230d      	movs	r3, #13
 8010498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801049a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801049e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104a0:	2300      	movs	r3, #0
 80104a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104aa:	f107 0308 	add.w	r3, r7, #8
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff fd1b 	bl	800feec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80104b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104ba:	210d      	movs	r1, #13
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f807 	bl	80104d0 <SDMMC_GetCmdResp1>
 80104c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c4:	69fb      	ldr	r3, [r7, #28]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3720      	adds	r7, #32
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	460b      	mov	r3, r1
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104de:	4b70      	ldr	r3, [pc, #448]	@ (80106a0 <SDMMC_GetCmdResp1+0x1d0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a70      	ldr	r2, [pc, #448]	@ (80106a4 <SDMMC_GetCmdResp1+0x1d4>)
 80104e4:	fba2 2303 	umull	r2, r3, r2, r3
 80104e8:	0a5a      	lsrs	r2, r3, #9
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	fb02 f303 	mul.w	r3, r2, r3
 80104f0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	1e5a      	subs	r2, r3, #1
 80104f6:	61fa      	str	r2, [r7, #28]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010500:	e0c9      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010506:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010508:	69ba      	ldr	r2, [r7, #24]
 801050a:	4b67      	ldr	r3, [pc, #412]	@ (80106a8 <SDMMC_GetCmdResp1+0x1d8>)
 801050c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0ef      	beq.n	80104f2 <SDMMC_GetCmdResp1+0x22>
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1ea      	bne.n	80104f2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010520:	f003 0304 	and.w	r3, r3, #4
 8010524:	2b00      	cmp	r3, #0
 8010526:	d004      	beq.n	8010532 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2204      	movs	r2, #4
 801052c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801052e:	2304      	movs	r3, #4
 8010530:	e0b1      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2201      	movs	r2, #1
 8010542:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010544:	2301      	movs	r3, #1
 8010546:	e0a6      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	4a58      	ldr	r2, [pc, #352]	@ (80106ac <SDMMC_GetCmdResp1+0x1dc>)
 801054c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801054e:	68f8      	ldr	r0, [r7, #12]
 8010550:	f7ff fcf6 	bl	800ff40 <SDMMC_GetCommandResponse>
 8010554:	4603      	mov	r3, r0
 8010556:	461a      	mov	r2, r3
 8010558:	7afb      	ldrb	r3, [r7, #11]
 801055a:	4293      	cmp	r3, r2
 801055c:	d001      	beq.n	8010562 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801055e:	2301      	movs	r3, #1
 8010560:	e099      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010562:	2100      	movs	r1, #0
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f7ff fcf8 	bl	800ff5a <SDMMC_GetResponse>
 801056a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801056c:	697a      	ldr	r2, [r7, #20]
 801056e:	4b50      	ldr	r3, [pc, #320]	@ (80106b0 <SDMMC_GetCmdResp1+0x1e0>)
 8010570:	4013      	ands	r3, r2
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010576:	2300      	movs	r3, #0
 8010578:	e08d      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	2b00      	cmp	r3, #0
 801057e:	da02      	bge.n	8010586 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010580:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010584:	e087      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010590:	2340      	movs	r3, #64	@ 0x40
 8010592:	e080      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801059e:	2380      	movs	r3, #128	@ 0x80
 80105a0:	e079      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d002      	beq.n	80105b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105b0:	e071      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80105bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80105c0:	e069      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80105cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105d0:	e061      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d002      	beq.n	80105e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80105dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80105e0:	e059      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d002      	beq.n	80105f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80105ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105f0:	e051      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d002      	beq.n	8010602 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010600:	e049      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010608:	2b00      	cmp	r3, #0
 801060a:	d002      	beq.n	8010612 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801060c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010610:	e041      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010618:	2b00      	cmp	r3, #0
 801061a:	d002      	beq.n	8010622 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801061c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010620:	e039      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801062c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010630:	e031      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010638:	2b00      	cmp	r3, #0
 801063a:	d002      	beq.n	8010642 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801063c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010640:	e029      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010648:	2b00      	cmp	r3, #0
 801064a:	d002      	beq.n	8010652 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801064c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010650:	e021      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d002      	beq.n	8010662 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801065c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010660:	e019      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801066c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010670:	e011      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801067c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010680:	e009      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f003 0308 	and.w	r3, r3, #8
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801068c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010690:	e001      	b.n	8010696 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010692:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010696:	4618      	mov	r0, r3
 8010698:	3720      	adds	r7, #32
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	24000008 	.word	0x24000008
 80106a4:	10624dd3 	.word	0x10624dd3
 80106a8:	00200045 	.word	0x00200045
 80106ac:	002000c5 	.word	0x002000c5
 80106b0:	fdffe008 	.word	0xfdffe008

080106b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106bc:	4b1f      	ldr	r3, [pc, #124]	@ (801073c <SDMMC_GetCmdResp2+0x88>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a1f      	ldr	r2, [pc, #124]	@ (8010740 <SDMMC_GetCmdResp2+0x8c>)
 80106c2:	fba2 2303 	umull	r2, r3, r2, r3
 80106c6:	0a5b      	lsrs	r3, r3, #9
 80106c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106cc:	fb02 f303 	mul.w	r3, r2, r3
 80106d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	1e5a      	subs	r2, r3, #1
 80106d6:	60fa      	str	r2, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d102      	bne.n	80106e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80106e0:	e026      	b.n	8010730 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0ef      	beq.n	80106d2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1ea      	bne.n	80106d2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010700:	f003 0304 	and.w	r3, r3, #4
 8010704:	2b00      	cmp	r3, #0
 8010706:	d004      	beq.n	8010712 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2204      	movs	r2, #4
 801070c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801070e:	2304      	movs	r3, #4
 8010710:	e00e      	b.n	8010730 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010724:	2301      	movs	r3, #1
 8010726:	e003      	b.n	8010730 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	4a06      	ldr	r2, [pc, #24]	@ (8010744 <SDMMC_GetCmdResp2+0x90>)
 801072c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	24000008 	.word	0x24000008
 8010740:	10624dd3 	.word	0x10624dd3
 8010744:	002000c5 	.word	0x002000c5

08010748 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010750:	4b1a      	ldr	r3, [pc, #104]	@ (80107bc <SDMMC_GetCmdResp3+0x74>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a1a      	ldr	r2, [pc, #104]	@ (80107c0 <SDMMC_GetCmdResp3+0x78>)
 8010756:	fba2 2303 	umull	r2, r3, r2, r3
 801075a:	0a5b      	lsrs	r3, r3, #9
 801075c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010760:	fb02 f303 	mul.w	r3, r2, r3
 8010764:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	1e5a      	subs	r2, r3, #1
 801076a:	60fa      	str	r2, [r7, #12]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d102      	bne.n	8010776 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010770:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010774:	e01b      	b.n	80107ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801077a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0ef      	beq.n	8010766 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1ea      	bne.n	8010766 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2204      	movs	r2, #4
 80107a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107a2:	2304      	movs	r3, #4
 80107a4:	e003      	b.n	80107ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4a06      	ldr	r2, [pc, #24]	@ (80107c4 <SDMMC_GetCmdResp3+0x7c>)
 80107aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	24000008 	.word	0x24000008
 80107c0:	10624dd3 	.word	0x10624dd3
 80107c4:	002000c5 	.word	0x002000c5

080107c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b088      	sub	sp, #32
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	460b      	mov	r3, r1
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107d6:	4b35      	ldr	r3, [pc, #212]	@ (80108ac <SDMMC_GetCmdResp6+0xe4>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4a35      	ldr	r2, [pc, #212]	@ (80108b0 <SDMMC_GetCmdResp6+0xe8>)
 80107dc:	fba2 2303 	umull	r2, r3, r2, r3
 80107e0:	0a5b      	lsrs	r3, r3, #9
 80107e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107e6:	fb02 f303 	mul.w	r3, r2, r3
 80107ea:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	1e5a      	subs	r2, r3, #1
 80107f0:	61fa      	str	r2, [r7, #28]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d102      	bne.n	80107fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107fa:	e052      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010800:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010808:	2b00      	cmp	r3, #0
 801080a:	d0ef      	beq.n	80107ec <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1ea      	bne.n	80107ec <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081a:	f003 0304 	and.w	r3, r3, #4
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2204      	movs	r2, #4
 8010826:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010828:	2304      	movs	r3, #4
 801082a:	e03a      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801083e:	2301      	movs	r3, #1
 8010840:	e02f      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7ff fb7c 	bl	800ff40 <SDMMC_GetCommandResponse>
 8010848:	4603      	mov	r3, r0
 801084a:	461a      	mov	r2, r3
 801084c:	7afb      	ldrb	r3, [r7, #11]
 801084e:	4293      	cmp	r3, r2
 8010850:	d001      	beq.n	8010856 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010852:	2301      	movs	r3, #1
 8010854:	e025      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	4a16      	ldr	r2, [pc, #88]	@ (80108b4 <SDMMC_GetCmdResp6+0xec>)
 801085a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801085c:	2100      	movs	r1, #0
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ff fb7b 	bl	800ff5a <SDMMC_GetResponse>
 8010864:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	0c1b      	lsrs	r3, r3, #16
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801087a:	2300      	movs	r3, #0
 801087c:	e011      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801088c:	e009      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801089c:	e001      	b.n	80108a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801089e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3720      	adds	r7, #32
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	24000008 	.word	0x24000008
 80108b0:	10624dd3 	.word	0x10624dd3
 80108b4:	002000c5 	.word	0x002000c5

080108b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80108c0:	4b22      	ldr	r3, [pc, #136]	@ (801094c <SDMMC_GetCmdResp7+0x94>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a22      	ldr	r2, [pc, #136]	@ (8010950 <SDMMC_GetCmdResp7+0x98>)
 80108c6:	fba2 2303 	umull	r2, r3, r2, r3
 80108ca:	0a5b      	lsrs	r3, r3, #9
 80108cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108d0:	fb02 f303 	mul.w	r3, r2, r3
 80108d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	1e5a      	subs	r2, r3, #1
 80108da:	60fa      	str	r2, [r7, #12]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d102      	bne.n	80108e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108e4:	e02c      	b.n	8010940 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d0ef      	beq.n	80108d6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d1ea      	bne.n	80108d6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010904:	f003 0304 	and.w	r3, r3, #4
 8010908:	2b00      	cmp	r3, #0
 801090a:	d004      	beq.n	8010916 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2204      	movs	r2, #4
 8010910:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010912:	2304      	movs	r3, #4
 8010914:	e014      	b.n	8010940 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d004      	beq.n	801092c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2201      	movs	r2, #1
 8010926:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010928:	2301      	movs	r3, #1
 801092a:	e009      	b.n	8010940 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2240      	movs	r2, #64	@ 0x40
 801093c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801093e:	2300      	movs	r3, #0

}
 8010940:	4618      	mov	r0, r3
 8010942:	3714      	adds	r7, #20
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr
 801094c:	24000008 	.word	0x24000008
 8010950:	10624dd3 	.word	0x10624dd3

08010954 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801095c:	4b11      	ldr	r3, [pc, #68]	@ (80109a4 <SDMMC_GetCmdError+0x50>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a11      	ldr	r2, [pc, #68]	@ (80109a8 <SDMMC_GetCmdError+0x54>)
 8010962:	fba2 2303 	umull	r2, r3, r2, r3
 8010966:	0a5b      	lsrs	r3, r3, #9
 8010968:	f241 3288 	movw	r2, #5000	@ 0x1388
 801096c:	fb02 f303 	mul.w	r3, r2, r3
 8010970:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	1e5a      	subs	r2, r3, #1
 8010976:	60fa      	str	r2, [r7, #12]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d102      	bne.n	8010982 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801097c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010980:	e009      	b.n	8010996 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0f1      	beq.n	8010972 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4a06      	ldr	r2, [pc, #24]	@ (80109ac <SDMMC_GetCmdError+0x58>)
 8010992:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	24000008 	.word	0x24000008
 80109a8:	10624dd3 	.word	0x10624dd3
 80109ac:	002000c5 	.word	0x002000c5

080109b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80109b4:	4904      	ldr	r1, [pc, #16]	@ (80109c8 <MX_FATFS_Init+0x18>)
 80109b6:	4805      	ldr	r0, [pc, #20]	@ (80109cc <MX_FATFS_Init+0x1c>)
 80109b8:	f001 f908 	bl	8011bcc <FATFS_LinkDriver>
 80109bc:	4603      	mov	r3, r0
 80109be:	461a      	mov	r2, r3
 80109c0:	4b03      	ldr	r3, [pc, #12]	@ (80109d0 <MX_FATFS_Init+0x20>)
 80109c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80109c4:	bf00      	nop
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	24001884 	.word	0x24001884
 80109cc:	080128b4 	.word	0x080128b4
 80109d0:	24001880 	.word	0x24001880

080109d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80109de:	f000 f885 	bl	8010aec <BSP_SD_IsDetected>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d001      	beq.n	80109ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80109e8:	2302      	movs	r3, #2
 80109ea:	e012      	b.n	8010a12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80109ec:	480b      	ldr	r0, [pc, #44]	@ (8010a1c <BSP_SD_Init+0x48>)
 80109ee:	f7fb f95d 	bl	800bcac <HAL_SD_Init>
 80109f2:	4603      	mov	r3, r0
 80109f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80109f6:	79fb      	ldrb	r3, [r7, #7]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d109      	bne.n	8010a10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80109fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010a00:	4806      	ldr	r0, [pc, #24]	@ (8010a1c <BSP_SD_Init+0x48>)
 8010a02:	f7fc f813 	bl	800ca2c <HAL_SD_ConfigWideBusOperation>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d001      	beq.n	8010a10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010a10:	79fb      	ldrb	r3, [r7, #7]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	240003c4 	.word	0x240003c4

08010a20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	68ba      	ldr	r2, [r7, #8]
 8010a34:	68f9      	ldr	r1, [r7, #12]
 8010a36:	4806      	ldr	r0, [pc, #24]	@ (8010a50 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010a38:	f7fb fa58 	bl	800beec <HAL_SD_ReadBlocks_DMA>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d001      	beq.n	8010a46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3718      	adds	r7, #24
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	240003c4 	.word	0x240003c4

08010a54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b086      	sub	sp, #24
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	68ba      	ldr	r2, [r7, #8]
 8010a68:	68f9      	ldr	r1, [r7, #12]
 8010a6a:	4806      	ldr	r0, [pc, #24]	@ (8010a84 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010a6c:	f7fb fae6 	bl	800c03c <HAL_SD_WriteBlocks_DMA>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d001      	beq.n	8010a7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a76:	2301      	movs	r3, #1
 8010a78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3718      	adds	r7, #24
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	240003c4 	.word	0x240003c4

08010a88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a8c:	4805      	ldr	r0, [pc, #20]	@ (8010aa4 <BSP_SD_GetCardState+0x1c>)
 8010a8e:	f7fc f8df 	bl	800cc50 <HAL_SD_GetCardState>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b04      	cmp	r3, #4
 8010a96:	bf14      	ite	ne
 8010a98:	2301      	movne	r3, #1
 8010a9a:	2300      	moveq	r3, #0
 8010a9c:	b2db      	uxtb	r3, r3
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	240003c4 	.word	0x240003c4

08010aa8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010ab0:	6879      	ldr	r1, [r7, #4]
 8010ab2:	4803      	ldr	r0, [pc, #12]	@ (8010ac0 <BSP_SD_GetCardInfo+0x18>)
 8010ab4:	f7fb ff8e 	bl	800c9d4 <HAL_SD_GetCardInfo>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	240003c4 	.word	0x240003c4

08010ac4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010acc:	f000 f9a0 	bl	8010e10 <BSP_SD_WriteCpltCallback>
}
 8010ad0:	bf00      	nop
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010ae0:	f000 f9a2 	bl	8010e28 <BSP_SD_ReadCpltCallback>
}
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010af2:	2301      	movs	r3, #1
 8010af4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010af6:	f000 f80b 	bl	8010b10 <BSP_PlatformIsDetected>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010b00:	2300      	movs	r3, #0
 8010b02:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010b04:	79fb      	ldrb	r3, [r7, #7]
 8010b06:	b2db      	uxtb	r3, r3
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010b16:	2301      	movs	r3, #1
 8010b18:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010b1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010b1e:	4806      	ldr	r0, [pc, #24]	@ (8010b38 <BSP_PlatformIsDetected+0x28>)
 8010b20:	f7f7 fd0c 	bl	800853c <HAL_GPIO_ReadPin>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d001      	beq.n	8010b2e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	58021400 	.word	0x58021400

08010b3c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010b44:	f7f1 fe94 	bl	8002870 <HAL_GetTick>
 8010b48:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010b4a:	e006      	b.n	8010b5a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b4c:	f7ff ff9c 	bl	8010a88 <BSP_SD_GetCardState>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	e009      	b.n	8010b6e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010b5a:	f7f1 fe89 	bl	8002870 <HAL_GetTick>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	1ad3      	subs	r3, r2, r3
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d8f0      	bhi.n	8010b4c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
	...

08010b78 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010b82:	4b0b      	ldr	r3, [pc, #44]	@ (8010bb0 <SD_CheckStatus+0x38>)
 8010b84:	2201      	movs	r2, #1
 8010b86:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010b88:	f7ff ff7e 	bl	8010a88 <BSP_SD_GetCardState>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d107      	bne.n	8010ba2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010b92:	4b07      	ldr	r3, [pc, #28]	@ (8010bb0 <SD_CheckStatus+0x38>)
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	f023 0301 	bic.w	r3, r3, #1
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	4b04      	ldr	r3, [pc, #16]	@ (8010bb0 <SD_CheckStatus+0x38>)
 8010ba0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010ba2:	4b03      	ldr	r3, [pc, #12]	@ (8010bb0 <SD_CheckStatus+0x38>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	b2db      	uxtb	r3, r3
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	24000015 	.word	0x24000015

08010bb4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010bbe:	f7ff ff09 	bl	80109d4 <BSP_SD_Init>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d107      	bne.n	8010bd8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010bc8:	79fb      	ldrb	r3, [r7, #7]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7ff ffd4 	bl	8010b78 <SD_CheckStatus>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	4b04      	ldr	r3, [pc, #16]	@ (8010be8 <SD_initialize+0x34>)
 8010bd6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010bd8:	4b03      	ldr	r3, [pc, #12]	@ (8010be8 <SD_initialize+0x34>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	b2db      	uxtb	r3, r3
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	24000015 	.word	0x24000015

08010bec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010bf6:	79fb      	ldrb	r3, [r7, #7]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff ffbd 	bl	8010b78 <SD_CheckStatus>
 8010bfe:	4603      	mov	r3, r0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60b9      	str	r1, [r7, #8]
 8010c10:	607a      	str	r2, [r7, #4]
 8010c12:	603b      	str	r3, [r7, #0]
 8010c14:	4603      	mov	r3, r0
 8010c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c1c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010c20:	f7ff ff8c 	bl	8010b3c <SD_CheckStatusWithTimeout>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	da01      	bge.n	8010c2e <SD_read+0x26>
  {
    return res;
 8010c2a:	7dfb      	ldrb	r3, [r7, #23]
 8010c2c:	e03b      	b.n	8010ca6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	6879      	ldr	r1, [r7, #4]
 8010c32:	68b8      	ldr	r0, [r7, #8]
 8010c34:	f7ff fef4 	bl	8010a20 <BSP_SD_ReadBlocks_DMA>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d132      	bne.n	8010ca4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8010cb0 <SD_read+0xa8>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010c44:	f7f1 fe14 	bl	8002870 <HAL_GetTick>
 8010c48:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c4a:	bf00      	nop
 8010c4c:	4b18      	ldr	r3, [pc, #96]	@ (8010cb0 <SD_read+0xa8>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d108      	bne.n	8010c66 <SD_read+0x5e>
 8010c54:	f7f1 fe0c 	bl	8002870 <HAL_GetTick>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d9f2      	bls.n	8010c4c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010c66:	4b12      	ldr	r3, [pc, #72]	@ (8010cb0 <SD_read+0xa8>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d102      	bne.n	8010c74 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	75fb      	strb	r3, [r7, #23]
 8010c72:	e017      	b.n	8010ca4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010c74:	4b0e      	ldr	r3, [pc, #56]	@ (8010cb0 <SD_read+0xa8>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010c7a:	f7f1 fdf9 	bl	8002870 <HAL_GetTick>
 8010c7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c80:	e007      	b.n	8010c92 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c82:	f7ff ff01 	bl	8010a88 <BSP_SD_GetCardState>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d102      	bne.n	8010c92 <SD_read+0x8a>
          {
            res = RES_OK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010c90:	e008      	b.n	8010ca4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c92:	f7f1 fded 	bl	8002870 <HAL_GetTick>
 8010c96:	4602      	mov	r2, r0
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d9ee      	bls.n	8010c82 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3718      	adds	r7, #24
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	24001890 	.word	0x24001890

08010cb4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b086      	sub	sp, #24
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60b9      	str	r1, [r7, #8]
 8010cbc:	607a      	str	r2, [r7, #4]
 8010cbe:	603b      	str	r3, [r7, #0]
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010cc8:	4b24      	ldr	r3, [pc, #144]	@ (8010d5c <SD_write+0xa8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010cce:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010cd2:	f7ff ff33 	bl	8010b3c <SD_CheckStatusWithTimeout>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da01      	bge.n	8010ce0 <SD_write+0x2c>
  {
    return res;
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
 8010cde:	e038      	b.n	8010d52 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	6879      	ldr	r1, [r7, #4]
 8010ce4:	68b8      	ldr	r0, [r7, #8]
 8010ce6:	f7ff feb5 	bl	8010a54 <BSP_SD_WriteBlocks_DMA>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d12f      	bne.n	8010d50 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010cf0:	f7f1 fdbe 	bl	8002870 <HAL_GetTick>
 8010cf4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010cf6:	bf00      	nop
 8010cf8:	4b18      	ldr	r3, [pc, #96]	@ (8010d5c <SD_write+0xa8>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d108      	bne.n	8010d12 <SD_write+0x5e>
 8010d00:	f7f1 fdb6 	bl	8002870 <HAL_GetTick>
 8010d04:	4602      	mov	r2, r0
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d9f2      	bls.n	8010cf8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010d12:	4b12      	ldr	r3, [pc, #72]	@ (8010d5c <SD_write+0xa8>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d102      	bne.n	8010d20 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	75fb      	strb	r3, [r7, #23]
 8010d1e:	e017      	b.n	8010d50 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010d20:	4b0e      	ldr	r3, [pc, #56]	@ (8010d5c <SD_write+0xa8>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d26:	f7f1 fda3 	bl	8002870 <HAL_GetTick>
 8010d2a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d2c:	e007      	b.n	8010d3e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d2e:	f7ff feab 	bl	8010a88 <BSP_SD_GetCardState>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <SD_write+0x8a>
          {
            res = RES_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75fb      	strb	r3, [r7, #23]
            break;
 8010d3c:	e008      	b.n	8010d50 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d3e:	f7f1 fd97 	bl	8002870 <HAL_GetTick>
 8010d42:	4602      	mov	r2, r0
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	1ad3      	subs	r3, r2, r3
 8010d48:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d9ee      	bls.n	8010d2e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3718      	adds	r7, #24
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	2400188c 	.word	0x2400188c

08010d60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08c      	sub	sp, #48	@ 0x30
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	603a      	str	r2, [r7, #0]
 8010d6a:	71fb      	strb	r3, [r7, #7]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010d70:	2301      	movs	r3, #1
 8010d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010d76:	4b25      	ldr	r3, [pc, #148]	@ (8010e0c <SD_ioctl+0xac>)
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <SD_ioctl+0x28>
 8010d84:	2303      	movs	r3, #3
 8010d86:	e03c      	b.n	8010e02 <SD_ioctl+0xa2>

  switch (cmd)
 8010d88:	79bb      	ldrb	r3, [r7, #6]
 8010d8a:	2b03      	cmp	r3, #3
 8010d8c:	d834      	bhi.n	8010df8 <SD_ioctl+0x98>
 8010d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d94 <SD_ioctl+0x34>)
 8010d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d94:	08010da5 	.word	0x08010da5
 8010d98:	08010dad 	.word	0x08010dad
 8010d9c:	08010dc5 	.word	0x08010dc5
 8010da0:	08010ddf 	.word	0x08010ddf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010daa:	e028      	b.n	8010dfe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010dac:	f107 0308 	add.w	r3, r7, #8
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff fe79 	bl	8010aa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010db6:	6a3a      	ldr	r2, [r7, #32]
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010dc2:	e01c      	b.n	8010dfe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010dc4:	f107 0308 	add.w	r3, r7, #8
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff fe6d 	bl	8010aa8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010ddc:	e00f      	b.n	8010dfe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010dde:	f107 0308 	add.w	r3, r7, #8
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7ff fe60 	bl	8010aa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dea:	0a5a      	lsrs	r2, r3, #9
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010df0:	2300      	movs	r3, #0
 8010df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010df6:	e002      	b.n	8010dfe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010df8:	2304      	movs	r3, #4
 8010dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3730      	adds	r7, #48	@ 0x30
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	24000015 	.word	0x24000015

08010e10 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010e10:	b480      	push	{r7}
 8010e12:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010e14:	4b03      	ldr	r3, [pc, #12]	@ (8010e24 <BSP_SD_WriteCpltCallback+0x14>)
 8010e16:	2201      	movs	r2, #1
 8010e18:	601a      	str	r2, [r3, #0]
}
 8010e1a:	bf00      	nop
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	2400188c 	.word	0x2400188c

08010e28 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010e2c:	4b03      	ldr	r3, [pc, #12]	@ (8010e3c <BSP_SD_ReadCpltCallback+0x14>)
 8010e2e:	2201      	movs	r2, #1
 8010e30:	601a      	str	r2, [r3, #0]
}
 8010e32:	bf00      	nop
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	24001890 	.word	0x24001890

08010e40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	4603      	mov	r3, r0
 8010e48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010e4a:	79fb      	ldrb	r3, [r7, #7]
 8010e4c:	4a08      	ldr	r2, [pc, #32]	@ (8010e70 <disk_status+0x30>)
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	79fa      	ldrb	r2, [r7, #7]
 8010e58:	4905      	ldr	r1, [pc, #20]	@ (8010e70 <disk_status+0x30>)
 8010e5a:	440a      	add	r2, r1
 8010e5c:	7a12      	ldrb	r2, [r2, #8]
 8010e5e:	4610      	mov	r0, r2
 8010e60:	4798      	blx	r3
 8010e62:	4603      	mov	r3, r0
 8010e64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	24001abc 	.word	0x24001abc

08010e74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	4a0e      	ldr	r2, [pc, #56]	@ (8010ec0 <disk_initialize+0x4c>)
 8010e86:	5cd3      	ldrb	r3, [r2, r3]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d114      	bne.n	8010eb6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8010ec0 <disk_initialize+0x4c>)
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4413      	add	r3, r2
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	79fa      	ldrb	r2, [r7, #7]
 8010e9a:	4909      	ldr	r1, [pc, #36]	@ (8010ec0 <disk_initialize+0x4c>)
 8010e9c:	440a      	add	r2, r1
 8010e9e:	7a12      	ldrb	r2, [r2, #8]
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	4798      	blx	r3
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d103      	bne.n	8010eb6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	4a03      	ldr	r2, [pc, #12]	@ (8010ec0 <disk_initialize+0x4c>)
 8010eb2:	2101      	movs	r1, #1
 8010eb4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3710      	adds	r7, #16
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	24001abc 	.word	0x24001abc

08010ec4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010ec4:	b590      	push	{r4, r7, lr}
 8010ec6:	b087      	sub	sp, #28
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
 8010ece:	603b      	str	r3, [r7, #0]
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8010f00 <disk_read+0x3c>)
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4413      	add	r3, r2
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	689c      	ldr	r4, [r3, #8]
 8010ee0:	7bfb      	ldrb	r3, [r7, #15]
 8010ee2:	4a07      	ldr	r2, [pc, #28]	@ (8010f00 <disk_read+0x3c>)
 8010ee4:	4413      	add	r3, r2
 8010ee6:	7a18      	ldrb	r0, [r3, #8]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	68b9      	ldr	r1, [r7, #8]
 8010eee:	47a0      	blx	r4
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd90      	pop	{r4, r7, pc}
 8010efe:	bf00      	nop
 8010f00:	24001abc 	.word	0x24001abc

08010f04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010f04:	b590      	push	{r4, r7, lr}
 8010f06:	b087      	sub	sp, #28
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	607a      	str	r2, [r7, #4]
 8010f0e:	603b      	str	r3, [r7, #0]
 8010f10:	4603      	mov	r3, r0
 8010f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
 8010f16:	4a0a      	ldr	r2, [pc, #40]	@ (8010f40 <disk_write+0x3c>)
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	4413      	add	r3, r2
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	68dc      	ldr	r4, [r3, #12]
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
 8010f22:	4a07      	ldr	r2, [pc, #28]	@ (8010f40 <disk_write+0x3c>)
 8010f24:	4413      	add	r3, r2
 8010f26:	7a18      	ldrb	r0, [r3, #8]
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	68b9      	ldr	r1, [r7, #8]
 8010f2e:	47a0      	blx	r4
 8010f30:	4603      	mov	r3, r0
 8010f32:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd90      	pop	{r4, r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	24001abc 	.word	0x24001abc

08010f44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	603a      	str	r2, [r7, #0]
 8010f4e:	71fb      	strb	r3, [r7, #7]
 8010f50:	460b      	mov	r3, r1
 8010f52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010f54:	79fb      	ldrb	r3, [r7, #7]
 8010f56:	4a09      	ldr	r2, [pc, #36]	@ (8010f7c <disk_ioctl+0x38>)
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	79fa      	ldrb	r2, [r7, #7]
 8010f62:	4906      	ldr	r1, [pc, #24]	@ (8010f7c <disk_ioctl+0x38>)
 8010f64:	440a      	add	r2, r1
 8010f66:	7a10      	ldrb	r0, [r2, #8]
 8010f68:	79b9      	ldrb	r1, [r7, #6]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	4798      	blx	r3
 8010f6e:	4603      	mov	r3, r0
 8010f70:	73fb      	strb	r3, [r7, #15]
  return res;
 8010f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3710      	adds	r7, #16
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	24001abc 	.word	0x24001abc

08010f80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010f80:	b480      	push	{r7}
 8010f82:	b085      	sub	sp, #20
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010f90:	89fb      	ldrh	r3, [r7, #14]
 8010f92:	021b      	lsls	r3, r3, #8
 8010f94:	b21a      	sxth	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	b21b      	sxth	r3, r3
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	b21b      	sxth	r3, r3
 8010fa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010fa2:	89fb      	ldrh	r3, [r7, #14]
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3714      	adds	r7, #20
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	3303      	adds	r3, #3
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	021b      	lsls	r3, r3, #8
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	3202      	adds	r2, #2
 8010fc8:	7812      	ldrb	r2, [r2, #0]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	021b      	lsls	r3, r3, #8
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	3201      	adds	r2, #1
 8010fd6:	7812      	ldrb	r2, [r2, #0]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	021b      	lsls	r3, r3, #8
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	7812      	ldrb	r2, [r2, #0]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	60fb      	str	r3, [r7, #12]
	return rv;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
	...

08010ff8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011000:	2300      	movs	r3, #0
 8011002:	60fb      	str	r3, [r7, #12]
 8011004:	e010      	b.n	8011028 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011006:	4a0d      	ldr	r2, [pc, #52]	@ (801103c <clear_lock+0x44>)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	011b      	lsls	r3, r3, #4
 801100c:	4413      	add	r3, r2
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	429a      	cmp	r2, r3
 8011014:	d105      	bne.n	8011022 <clear_lock+0x2a>
 8011016:	4a09      	ldr	r2, [pc, #36]	@ (801103c <clear_lock+0x44>)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	011b      	lsls	r3, r3, #4
 801101c:	4413      	add	r3, r2
 801101e:	2200      	movs	r2, #0
 8011020:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d9eb      	bls.n	8011006 <clear_lock+0xe>
	}
}
 801102e:	bf00      	nop
 8011030:	bf00      	nop
 8011032:	3714      	adds	r7, #20
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	2400189c 	.word	0x2400189c

08011040 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b086      	sub	sp, #24
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	78db      	ldrb	r3, [r3, #3]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d034      	beq.n	80110be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011058:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	7858      	ldrb	r0, [r3, #1]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011064:	2301      	movs	r3, #1
 8011066:	697a      	ldr	r2, [r7, #20]
 8011068:	f7ff ff4c 	bl	8010f04 <disk_write>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011072:	2301      	movs	r3, #1
 8011074:	73fb      	strb	r3, [r7, #15]
 8011076:	e022      	b.n	80110be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011082:	697a      	ldr	r2, [r7, #20]
 8011084:	1ad2      	subs	r2, r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6a1b      	ldr	r3, [r3, #32]
 801108a:	429a      	cmp	r2, r3
 801108c:	d217      	bcs.n	80110be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	789b      	ldrb	r3, [r3, #2]
 8011092:	613b      	str	r3, [r7, #16]
 8011094:	e010      	b.n	80110b8 <sync_window+0x78>
					wsect += fs->fsize;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6a1b      	ldr	r3, [r3, #32]
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	4413      	add	r3, r2
 801109e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	7858      	ldrb	r0, [r3, #1]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80110aa:	2301      	movs	r3, #1
 80110ac:	697a      	ldr	r2, [r7, #20]
 80110ae:	f7ff ff29 	bl	8010f04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3b01      	subs	r3, #1
 80110b6:	613b      	str	r3, [r7, #16]
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d8eb      	bhi.n	8011096 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80110be:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3718      	adds	r7, #24
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110da:	683a      	ldr	r2, [r7, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d01b      	beq.n	8011118 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7ff ffad 	bl	8011040 <sync_window>
 80110e6:	4603      	mov	r3, r0
 80110e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80110ea:	7bfb      	ldrb	r3, [r7, #15]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d113      	bne.n	8011118 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	7858      	ldrb	r0, [r3, #1]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80110fa:	2301      	movs	r3, #1
 80110fc:	683a      	ldr	r2, [r7, #0]
 80110fe:	f7ff fee1 	bl	8010ec4 <disk_read>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d004      	beq.n	8011112 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011108:	f04f 33ff 	mov.w	r3, #4294967295
 801110c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801110e:	2301      	movs	r3, #1
 8011110:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8011118:	7bfb      	ldrb	r3, [r7, #15]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b086      	sub	sp, #24
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d904      	bls.n	8011142 <get_fat+0x20>
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	69db      	ldr	r3, [r3, #28]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	429a      	cmp	r2, r3
 8011140:	d302      	bcc.n	8011148 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011142:	2301      	movs	r3, #1
 8011144:	617b      	str	r3, [r7, #20]
 8011146:	e0ba      	b.n	80112be <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011148:	f04f 33ff 	mov.w	r3, #4294967295
 801114c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b03      	cmp	r3, #3
 8011154:	f000 8082 	beq.w	801125c <get_fat+0x13a>
 8011158:	2b03      	cmp	r3, #3
 801115a:	f300 80a6 	bgt.w	80112aa <get_fat+0x188>
 801115e:	2b01      	cmp	r3, #1
 8011160:	d002      	beq.n	8011168 <get_fat+0x46>
 8011162:	2b02      	cmp	r3, #2
 8011164:	d055      	beq.n	8011212 <get_fat+0xf0>
 8011166:	e0a0      	b.n	80112aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	085b      	lsrs	r3, r3, #1
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	4413      	add	r3, r2
 8011174:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	899b      	ldrh	r3, [r3, #12]
 801117e:	4619      	mov	r1, r3
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	fbb3 f3f1 	udiv	r3, r3, r1
 8011186:	4413      	add	r3, r2
 8011188:	4619      	mov	r1, r3
 801118a:	6938      	ldr	r0, [r7, #16]
 801118c:	f7ff ff9c 	bl	80110c8 <move_window>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	f040 808c 	bne.w	80112b0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	60fa      	str	r2, [r7, #12]
 801119e:	693a      	ldr	r2, [r7, #16]
 80111a0:	8992      	ldrh	r2, [r2, #12]
 80111a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80111a6:	fb01 f202 	mul.w	r2, r1, r2
 80111aa:	1a9b      	subs	r3, r3, r2
 80111ac:	693a      	ldr	r2, [r7, #16]
 80111ae:	4413      	add	r3, r2
 80111b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80111b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	899b      	ldrh	r3, [r3, #12]
 80111be:	4619      	mov	r1, r3
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80111c6:	4413      	add	r3, r2
 80111c8:	4619      	mov	r1, r3
 80111ca:	6938      	ldr	r0, [r7, #16]
 80111cc:	f7ff ff7c 	bl	80110c8 <move_window>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d16e      	bne.n	80112b4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	461a      	mov	r2, r3
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	fbb3 f1f2 	udiv	r1, r3, r2
 80111e2:	fb01 f202 	mul.w	r2, r1, r2
 80111e6:	1a9b      	subs	r3, r3, r2
 80111e8:	693a      	ldr	r2, [r7, #16]
 80111ea:	4413      	add	r3, r2
 80111ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80111f0:	021b      	lsls	r3, r3, #8
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	4313      	orrs	r3, r2
 80111f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d002      	beq.n	8011208 <get_fat+0xe6>
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	091b      	lsrs	r3, r3, #4
 8011206:	e002      	b.n	801120e <get_fat+0xec>
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801120e:	617b      	str	r3, [r7, #20]
			break;
 8011210:	e055      	b.n	80112be <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	899b      	ldrh	r3, [r3, #12]
 801121a:	085b      	lsrs	r3, r3, #1
 801121c:	b29b      	uxth	r3, r3
 801121e:	4619      	mov	r1, r3
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	fbb3 f3f1 	udiv	r3, r3, r1
 8011226:	4413      	add	r3, r2
 8011228:	4619      	mov	r1, r3
 801122a:	6938      	ldr	r0, [r7, #16]
 801122c:	f7ff ff4c 	bl	80110c8 <move_window>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d140      	bne.n	80112b8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	005b      	lsls	r3, r3, #1
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	8992      	ldrh	r2, [r2, #12]
 8011244:	fbb3 f0f2 	udiv	r0, r3, r2
 8011248:	fb00 f202 	mul.w	r2, r0, r2
 801124c:	1a9b      	subs	r3, r3, r2
 801124e:	440b      	add	r3, r1
 8011250:	4618      	mov	r0, r3
 8011252:	f7ff fe95 	bl	8010f80 <ld_word>
 8011256:	4603      	mov	r3, r0
 8011258:	617b      	str	r3, [r7, #20]
			break;
 801125a:	e030      	b.n	80112be <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	899b      	ldrh	r3, [r3, #12]
 8011264:	089b      	lsrs	r3, r3, #2
 8011266:	b29b      	uxth	r3, r3
 8011268:	4619      	mov	r1, r3
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011270:	4413      	add	r3, r2
 8011272:	4619      	mov	r1, r3
 8011274:	6938      	ldr	r0, [r7, #16]
 8011276:	f7ff ff27 	bl	80110c8 <move_window>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d11d      	bne.n	80112bc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	693a      	ldr	r2, [r7, #16]
 801128c:	8992      	ldrh	r2, [r2, #12]
 801128e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011292:	fb00 f202 	mul.w	r2, r0, r2
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	440b      	add	r3, r1
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fe88 	bl	8010fb0 <ld_dword>
 80112a0:	4603      	mov	r3, r0
 80112a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80112a6:	617b      	str	r3, [r7, #20]
			break;
 80112a8:	e009      	b.n	80112be <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80112aa:	2301      	movs	r3, #1
 80112ac:	617b      	str	r3, [r7, #20]
 80112ae:	e006      	b.n	80112be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112b0:	bf00      	nop
 80112b2:	e004      	b.n	80112be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80112b4:	bf00      	nop
 80112b6:	e002      	b.n	80112be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80112b8:	bf00      	nop
 80112ba:	e000      	b.n	80112be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80112bc:	bf00      	nop
		}
	}

	return val;
 80112be:	697b      	ldr	r3, [r7, #20]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3718      	adds	r7, #24
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b087      	sub	sp, #28
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80112d0:	f04f 33ff 	mov.w	r3, #4294967295
 80112d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d031      	beq.n	8011342 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	617b      	str	r3, [r7, #20]
 80112e4:	e002      	b.n	80112ec <get_ldnumber+0x24>
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	3301      	adds	r3, #1
 80112ea:	617b      	str	r3, [r7, #20]
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b1f      	cmp	r3, #31
 80112f2:	d903      	bls.n	80112fc <get_ldnumber+0x34>
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80112fa:	d1f4      	bne.n	80112e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	2b3a      	cmp	r3, #58	@ 0x3a
 8011302:	d11c      	bne.n	801133e <get_ldnumber+0x76>
			tp = *path;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	1c5a      	adds	r2, r3, #1
 801130e:	60fa      	str	r2, [r7, #12]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	3b30      	subs	r3, #48	@ 0x30
 8011314:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2b09      	cmp	r3, #9
 801131a:	d80e      	bhi.n	801133a <get_ldnumber+0x72>
 801131c:	68fa      	ldr	r2, [r7, #12]
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	429a      	cmp	r2, r3
 8011322:	d10a      	bne.n	801133a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d107      	bne.n	801133a <get_ldnumber+0x72>
					vol = (int)i;
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	3301      	adds	r3, #1
 8011332:	617b      	str	r3, [r7, #20]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	e002      	b.n	8011344 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801133e:	2300      	movs	r3, #0
 8011340:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011342:	693b      	ldr	r3, [r7, #16]
}
 8011344:	4618      	mov	r0, r3
 8011346:	371c      	adds	r7, #28
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2200      	movs	r2, #0
 801135e:	70da      	strb	r2, [r3, #3]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f04f 32ff 	mov.w	r2, #4294967295
 8011366:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011368:	6839      	ldr	r1, [r7, #0]
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7ff feac 	bl	80110c8 <move_window>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <check_fs+0x2a>
 8011376:	2304      	movs	r3, #4
 8011378:	e038      	b.n	80113ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	3338      	adds	r3, #56	@ 0x38
 801137e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011382:	4618      	mov	r0, r3
 8011384:	f7ff fdfc 	bl	8010f80 <ld_word>
 8011388:	4603      	mov	r3, r0
 801138a:	461a      	mov	r2, r3
 801138c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011390:	429a      	cmp	r2, r3
 8011392:	d001      	beq.n	8011398 <check_fs+0x48>
 8011394:	2303      	movs	r3, #3
 8011396:	e029      	b.n	80113ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801139e:	2be9      	cmp	r3, #233	@ 0xe9
 80113a0:	d009      	beq.n	80113b6 <check_fs+0x66>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80113a8:	2beb      	cmp	r3, #235	@ 0xeb
 80113aa:	d11e      	bne.n	80113ea <check_fs+0x9a>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80113b2:	2b90      	cmp	r3, #144	@ 0x90
 80113b4:	d119      	bne.n	80113ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	3338      	adds	r3, #56	@ 0x38
 80113ba:	3336      	adds	r3, #54	@ 0x36
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fdf7 	bl	8010fb0 <ld_dword>
 80113c2:	4603      	mov	r3, r0
 80113c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80113c8:	4a0a      	ldr	r2, [pc, #40]	@ (80113f4 <check_fs+0xa4>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d101      	bne.n	80113d2 <check_fs+0x82>
 80113ce:	2300      	movs	r3, #0
 80113d0:	e00c      	b.n	80113ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	3338      	adds	r3, #56	@ 0x38
 80113d6:	3352      	adds	r3, #82	@ 0x52
 80113d8:	4618      	mov	r0, r3
 80113da:	f7ff fde9 	bl	8010fb0 <ld_dword>
 80113de:	4603      	mov	r3, r0
 80113e0:	4a05      	ldr	r2, [pc, #20]	@ (80113f8 <check_fs+0xa8>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d101      	bne.n	80113ea <check_fs+0x9a>
 80113e6:	2300      	movs	r3, #0
 80113e8:	e000      	b.n	80113ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80113ea:	2302      	movs	r3, #2
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	00544146 	.word	0x00544146
 80113f8:	33544146 	.word	0x33544146

080113fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b096      	sub	sp, #88	@ 0x58
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	4613      	mov	r3, r2
 8011408:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	2200      	movs	r2, #0
 801140e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f7ff ff59 	bl	80112c8 <get_ldnumber>
 8011416:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801141a:	2b00      	cmp	r3, #0
 801141c:	da01      	bge.n	8011422 <find_volume+0x26>
 801141e:	230b      	movs	r3, #11
 8011420:	e27f      	b.n	8011922 <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011422:	4a9e      	ldr	r2, [pc, #632]	@ (801169c <find_volume+0x2a0>)
 8011424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801142a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801142c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <find_volume+0x3a>
 8011432:	230c      	movs	r3, #12
 8011434:	e275      	b.n	8011922 <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801143a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	f023 0301 	bic.w	r3, r3, #1
 8011442:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01a      	beq.n	8011482 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801144c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801144e:	785b      	ldrb	r3, [r3, #1]
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fcf5 	bl	8010e40 <disk_status>
 8011456:	4603      	mov	r3, r0
 8011458:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801145c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011460:	f003 0301 	and.w	r3, r3, #1
 8011464:	2b00      	cmp	r3, #0
 8011466:	d10c      	bne.n	8011482 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011468:	79fb      	ldrb	r3, [r7, #7]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d007      	beq.n	801147e <find_volume+0x82>
 801146e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011472:	f003 0304 	and.w	r3, r3, #4
 8011476:	2b00      	cmp	r3, #0
 8011478:	d001      	beq.n	801147e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801147a:	230a      	movs	r3, #10
 801147c:	e251      	b.n	8011922 <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 801147e:	2300      	movs	r3, #0
 8011480:	e24f      	b.n	8011922 <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011484:	2200      	movs	r2, #0
 8011486:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011488:	4a85      	ldr	r2, [pc, #532]	@ (80116a0 <find_volume+0x2a4>)
 801148a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801148c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011492:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011496:	785b      	ldrb	r3, [r3, #1]
 8011498:	4618      	mov	r0, r3
 801149a:	f7ff fceb 	bl	8010e74 <disk_initialize>
 801149e:	4603      	mov	r3, r0
 80114a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80114a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114a8:	f003 0301 	and.w	r3, r3, #1
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80114b0:	2303      	movs	r3, #3
 80114b2:	e236      	b.n	8011922 <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80114b4:	79fb      	ldrb	r3, [r7, #7]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d007      	beq.n	80114ca <find_volume+0xce>
 80114ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114be:	f003 0304 	and.w	r3, r3, #4
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d001      	beq.n	80114ca <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 80114c6:	230a      	movs	r3, #10
 80114c8:	e22b      	b.n	8011922 <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80114ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114cc:	7858      	ldrb	r0, [r3, #1]
 80114ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d0:	330c      	adds	r3, #12
 80114d2:	461a      	mov	r2, r3
 80114d4:	2102      	movs	r1, #2
 80114d6:	f7ff fd35 	bl	8010f44 <disk_ioctl>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <find_volume+0xe8>
 80114e0:	2301      	movs	r3, #1
 80114e2:	e21e      	b.n	8011922 <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80114e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e6:	899b      	ldrh	r3, [r3, #12]
 80114e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114ec:	d80d      	bhi.n	801150a <find_volume+0x10e>
 80114ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f0:	899b      	ldrh	r3, [r3, #12]
 80114f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114f6:	d308      	bcc.n	801150a <find_volume+0x10e>
 80114f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114fa:	899b      	ldrh	r3, [r3, #12]
 80114fc:	461a      	mov	r2, r3
 80114fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011500:	899b      	ldrh	r3, [r3, #12]
 8011502:	3b01      	subs	r3, #1
 8011504:	4013      	ands	r3, r2
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <find_volume+0x112>
 801150a:	2301      	movs	r3, #1
 801150c:	e209      	b.n	8011922 <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801150e:	2300      	movs	r3, #0
 8011510:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011512:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011514:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011516:	f7ff ff1b 	bl	8011350 <check_fs>
 801151a:	4603      	mov	r3, r0
 801151c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011524:	2b02      	cmp	r3, #2
 8011526:	d00a      	beq.n	801153e <find_volume+0x142>
 8011528:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801152c:	2b01      	cmp	r3, #1
 801152e:	d85b      	bhi.n	80115e8 <find_volume+0x1ec>
 8011530:	4a5b      	ldr	r2, [pc, #364]	@ (80116a0 <find_volume+0x2a4>)
 8011532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011534:	005b      	lsls	r3, r3, #1
 8011536:	4413      	add	r3, r2
 8011538:	785b      	ldrb	r3, [r3, #1]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d054      	beq.n	80115e8 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801153e:	2300      	movs	r3, #0
 8011540:	643b      	str	r3, [r7, #64]	@ 0x40
 8011542:	e01e      	b.n	8011582 <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011546:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801154a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801154c:	011b      	lsls	r3, r3, #4
 801154e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011552:	4413      	add	r3, r2
 8011554:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011558:	3304      	adds	r3, #4
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d006      	beq.n	801156e <find_volume+0x172>
 8011560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011562:	3308      	adds	r3, #8
 8011564:	4618      	mov	r0, r3
 8011566:	f7ff fd23 	bl	8010fb0 <ld_dword>
 801156a:	4602      	mov	r2, r0
 801156c:	e000      	b.n	8011570 <find_volume+0x174>
 801156e:	2200      	movs	r2, #0
 8011570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	3358      	adds	r3, #88	@ 0x58
 8011576:	443b      	add	r3, r7
 8011578:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801157c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801157e:	3301      	adds	r3, #1
 8011580:	643b      	str	r3, [r7, #64]	@ 0x40
 8011582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011584:	2b03      	cmp	r3, #3
 8011586:	d9dd      	bls.n	8011544 <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011588:	4a45      	ldr	r2, [pc, #276]	@ (80116a0 <find_volume+0x2a4>)
 801158a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	4413      	add	r3, r2
 8011590:	785b      	ldrb	r3, [r3, #1]
 8011592:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011596:	2b00      	cmp	r3, #0
 8011598:	d002      	beq.n	80115a0 <find_volume+0x1a4>
 801159a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801159c:	3b01      	subs	r3, #1
 801159e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80115a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	3358      	adds	r3, #88	@ 0x58
 80115a6:	443b      	add	r3, r7
 80115a8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80115ac:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80115ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d005      	beq.n	80115c0 <find_volume+0x1c4>
 80115b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80115b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80115b8:	f7ff feca 	bl	8011350 <check_fs>
 80115bc:	4603      	mov	r3, r0
 80115be:	e000      	b.n	80115c2 <find_volume+0x1c6>
 80115c0:	2303      	movs	r3, #3
 80115c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80115c6:	4a36      	ldr	r2, [pc, #216]	@ (80116a0 <find_volume+0x2a4>)
 80115c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	4413      	add	r3, r2
 80115ce:	785b      	ldrb	r3, [r3, #1]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d109      	bne.n	80115e8 <find_volume+0x1ec>
 80115d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d905      	bls.n	80115e8 <find_volume+0x1ec>
 80115dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115de:	3301      	adds	r3, #1
 80115e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80115e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115e4:	2b03      	cmp	r3, #3
 80115e6:	d9db      	bls.n	80115a0 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80115e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115ec:	2b04      	cmp	r3, #4
 80115ee:	d101      	bne.n	80115f4 <find_volume+0x1f8>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e196      	b.n	8011922 <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80115f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d901      	bls.n	8011600 <find_volume+0x204>
 80115fc:	230d      	movs	r3, #13
 80115fe:	e190      	b.n	8011922 <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011602:	3338      	adds	r3, #56	@ 0x38
 8011604:	330b      	adds	r3, #11
 8011606:	4618      	mov	r0, r3
 8011608:	f7ff fcba 	bl	8010f80 <ld_word>
 801160c:	4603      	mov	r3, r0
 801160e:	461a      	mov	r2, r3
 8011610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	429a      	cmp	r2, r3
 8011616:	d001      	beq.n	801161c <find_volume+0x220>
 8011618:	230d      	movs	r3, #13
 801161a:	e182      	b.n	8011922 <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801161c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161e:	3338      	adds	r3, #56	@ 0x38
 8011620:	3316      	adds	r3, #22
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff fcac 	bl	8010f80 <ld_word>
 8011628:	4603      	mov	r3, r0
 801162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801162c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <find_volume+0x244>
 8011632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011634:	3338      	adds	r3, #56	@ 0x38
 8011636:	3324      	adds	r3, #36	@ 0x24
 8011638:	4618      	mov	r0, r3
 801163a:	f7ff fcb9 	bl	8010fb0 <ld_dword>
 801163e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011644:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011648:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011652:	789b      	ldrb	r3, [r3, #2]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d005      	beq.n	8011664 <find_volume+0x268>
 8011658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165a:	789b      	ldrb	r3, [r3, #2]
 801165c:	2b02      	cmp	r3, #2
 801165e:	d001      	beq.n	8011664 <find_volume+0x268>
 8011660:	230d      	movs	r3, #13
 8011662:	e15e      	b.n	8011922 <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011666:	789b      	ldrb	r3, [r3, #2]
 8011668:	461a      	mov	r2, r3
 801166a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801166c:	fb02 f303 	mul.w	r3, r2, r3
 8011670:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011678:	461a      	mov	r2, r3
 801167a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801167c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801167e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011680:	895b      	ldrh	r3, [r3, #10]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d008      	beq.n	8011698 <find_volume+0x29c>
 8011686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011688:	895b      	ldrh	r3, [r3, #10]
 801168a:	461a      	mov	r2, r3
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	895b      	ldrh	r3, [r3, #10]
 8011690:	3b01      	subs	r3, #1
 8011692:	4013      	ands	r3, r2
 8011694:	2b00      	cmp	r3, #0
 8011696:	d005      	beq.n	80116a4 <find_volume+0x2a8>
 8011698:	230d      	movs	r3, #13
 801169a:	e142      	b.n	8011922 <find_volume+0x526>
 801169c:	24001894 	.word	0x24001894
 80116a0:	24001888 	.word	0x24001888

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	3338      	adds	r3, #56	@ 0x38
 80116a8:	3311      	adds	r3, #17
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7ff fc68 	bl	8010f80 <ld_word>
 80116b0:	4603      	mov	r3, r0
 80116b2:	461a      	mov	r2, r3
 80116b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80116b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ba:	891b      	ldrh	r3, [r3, #8]
 80116bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116be:	8992      	ldrh	r2, [r2, #12]
 80116c0:	0952      	lsrs	r2, r2, #5
 80116c2:	b292      	uxth	r2, r2
 80116c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80116c8:	fb01 f202 	mul.w	r2, r1, r2
 80116cc:	1a9b      	subs	r3, r3, r2
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d001      	beq.n	80116d8 <find_volume+0x2dc>
 80116d4:	230d      	movs	r3, #13
 80116d6:	e124      	b.n	8011922 <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80116d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116da:	3338      	adds	r3, #56	@ 0x38
 80116dc:	3313      	adds	r3, #19
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff fc4e 	bl	8010f80 <ld_word>
 80116e4:	4603      	mov	r3, r0
 80116e6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80116e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d106      	bne.n	80116fc <find_volume+0x300>
 80116ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f0:	3338      	adds	r3, #56	@ 0x38
 80116f2:	3320      	adds	r3, #32
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7ff fc5b 	bl	8010fb0 <ld_dword>
 80116fa:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80116fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fe:	3338      	adds	r3, #56	@ 0x38
 8011700:	330e      	adds	r3, #14
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff fc3c 	bl	8010f80 <ld_word>
 8011708:	4603      	mov	r3, r0
 801170a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801170c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <find_volume+0x31a>
 8011712:	230d      	movs	r3, #13
 8011714:	e105      	b.n	8011922 <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011716:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801171a:	4413      	add	r3, r2
 801171c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801171e:	8911      	ldrh	r1, [r2, #8]
 8011720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011722:	8992      	ldrh	r2, [r2, #12]
 8011724:	0952      	lsrs	r2, r2, #5
 8011726:	b292      	uxth	r2, r2
 8011728:	fbb1 f2f2 	udiv	r2, r1, r2
 801172c:	b292      	uxth	r2, r2
 801172e:	4413      	add	r3, r2
 8011730:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011736:	429a      	cmp	r2, r3
 8011738:	d201      	bcs.n	801173e <find_volume+0x342>
 801173a:	230d      	movs	r3, #13
 801173c:	e0f1      	b.n	8011922 <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801173e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011746:	8952      	ldrh	r2, [r2, #10]
 8011748:	fbb3 f3f2 	udiv	r3, r3, r2
 801174c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <find_volume+0x35c>
 8011754:	230d      	movs	r3, #13
 8011756:	e0e4      	b.n	8011922 <find_volume+0x526>
		fmt = FS_FAT32;
 8011758:	2303      	movs	r3, #3
 801175a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011764:	4293      	cmp	r3, r2
 8011766:	d802      	bhi.n	801176e <find_volume+0x372>
 8011768:	2302      	movs	r3, #2
 801176a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011770:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011774:	4293      	cmp	r3, r2
 8011776:	d802      	bhi.n	801177e <find_volume+0x382>
 8011778:	2301      	movs	r3, #1
 801177a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011780:	1c9a      	adds	r2, r3, #2
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011788:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801178a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801178c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801178e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011790:	441a      	add	r2, r3
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011796:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179a:	441a      	add	r2, r3
 801179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80117a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80117a4:	2b03      	cmp	r3, #3
 80117a6:	d11e      	bne.n	80117e6 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80117a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117aa:	3338      	adds	r3, #56	@ 0x38
 80117ac:	332a      	adds	r3, #42	@ 0x2a
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7ff fbe6 	bl	8010f80 <ld_word>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <find_volume+0x3c2>
 80117ba:	230d      	movs	r3, #13
 80117bc:	e0b1      	b.n	8011922 <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80117be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c0:	891b      	ldrh	r3, [r3, #8]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <find_volume+0x3ce>
 80117c6:	230d      	movs	r3, #13
 80117c8:	e0ab      	b.n	8011922 <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80117ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117cc:	3338      	adds	r3, #56	@ 0x38
 80117ce:	332c      	adds	r3, #44	@ 0x2c
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7ff fbed 	bl	8010fb0 <ld_dword>
 80117d6:	4602      	mov	r2, r0
 80117d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117da:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80117dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117de:	69db      	ldr	r3, [r3, #28]
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80117e4:	e01f      	b.n	8011826 <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80117e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e8:	891b      	ldrh	r3, [r3, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <find_volume+0x3f6>
 80117ee:	230d      	movs	r3, #13
 80117f0:	e097      	b.n	8011922 <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80117f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80117f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117f8:	441a      	add	r2, r3
 80117fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80117fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011802:	2b02      	cmp	r3, #2
 8011804:	d103      	bne.n	801180e <find_volume+0x412>
 8011806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011808:	69db      	ldr	r3, [r3, #28]
 801180a:	005b      	lsls	r3, r3, #1
 801180c:	e00a      	b.n	8011824 <find_volume+0x428>
 801180e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011810:	69da      	ldr	r2, [r3, #28]
 8011812:	4613      	mov	r3, r2
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	4413      	add	r3, r2
 8011818:	085a      	lsrs	r2, r3, #1
 801181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801181c:	69db      	ldr	r3, [r3, #28]
 801181e:	f003 0301 	and.w	r3, r3, #1
 8011822:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011824:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	6a1a      	ldr	r2, [r3, #32]
 801182a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801182c:	899b      	ldrh	r3, [r3, #12]
 801182e:	4619      	mov	r1, r3
 8011830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011832:	440b      	add	r3, r1
 8011834:	3b01      	subs	r3, #1
 8011836:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011838:	8989      	ldrh	r1, [r1, #12]
 801183a:	fbb3 f3f1 	udiv	r3, r3, r1
 801183e:	429a      	cmp	r2, r3
 8011840:	d201      	bcs.n	8011846 <find_volume+0x44a>
 8011842:	230d      	movs	r3, #13
 8011844:	e06d      	b.n	8011922 <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011848:	f04f 32ff 	mov.w	r2, #4294967295
 801184c:	619a      	str	r2, [r3, #24]
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	699a      	ldr	r2, [r3, #24]
 8011852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011854:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011858:	2280      	movs	r2, #128	@ 0x80
 801185a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801185c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011860:	2b03      	cmp	r3, #3
 8011862:	d149      	bne.n	80118f8 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	3338      	adds	r3, #56	@ 0x38
 8011868:	3330      	adds	r3, #48	@ 0x30
 801186a:	4618      	mov	r0, r3
 801186c:	f7ff fb88 	bl	8010f80 <ld_word>
 8011870:	4603      	mov	r3, r0
 8011872:	2b01      	cmp	r3, #1
 8011874:	d140      	bne.n	80118f8 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011878:	3301      	adds	r3, #1
 801187a:	4619      	mov	r1, r3
 801187c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801187e:	f7ff fc23 	bl	80110c8 <move_window>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d137      	bne.n	80118f8 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 8011888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188a:	2200      	movs	r2, #0
 801188c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011890:	3338      	adds	r3, #56	@ 0x38
 8011892:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011896:	4618      	mov	r0, r3
 8011898:	f7ff fb72 	bl	8010f80 <ld_word>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d127      	bne.n	80118f8 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80118a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118aa:	3338      	adds	r3, #56	@ 0x38
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff fb7f 	bl	8010fb0 <ld_dword>
 80118b2:	4603      	mov	r3, r0
 80118b4:	4a1d      	ldr	r2, [pc, #116]	@ (801192c <find_volume+0x530>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d11e      	bne.n	80118f8 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80118ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118bc:	3338      	adds	r3, #56	@ 0x38
 80118be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ff fb74 	bl	8010fb0 <ld_dword>
 80118c8:	4603      	mov	r3, r0
 80118ca:	4a19      	ldr	r2, [pc, #100]	@ (8011930 <find_volume+0x534>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d113      	bne.n	80118f8 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80118d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d2:	3338      	adds	r3, #56	@ 0x38
 80118d4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff fb69 	bl	8010fb0 <ld_dword>
 80118de:	4602      	mov	r2, r0
 80118e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80118e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e6:	3338      	adds	r3, #56	@ 0x38
 80118e8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7ff fb5f 	bl	8010fb0 <ld_dword>
 80118f2:	4602      	mov	r2, r0
 80118f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80118f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118fa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80118fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011900:	4b0c      	ldr	r3, [pc, #48]	@ (8011934 <find_volume+0x538>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	3301      	adds	r3, #1
 8011906:	b29a      	uxth	r2, r3
 8011908:	4b0a      	ldr	r3, [pc, #40]	@ (8011934 <find_volume+0x538>)
 801190a:	801a      	strh	r2, [r3, #0]
 801190c:	4b09      	ldr	r3, [pc, #36]	@ (8011934 <find_volume+0x538>)
 801190e:	881a      	ldrh	r2, [r3, #0]
 8011910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011912:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011916:	4a08      	ldr	r2, [pc, #32]	@ (8011938 <find_volume+0x53c>)
 8011918:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801191a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801191c:	f7ff fb6c 	bl	8010ff8 <clear_lock>
#endif
	return FR_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3758      	adds	r7, #88	@ 0x58
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	41615252 	.word	0x41615252
 8011930:	61417272 	.word	0x61417272
 8011934:	24001898 	.word	0x24001898
 8011938:	240018bc 	.word	0x240018bc

0801193c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b088      	sub	sp, #32
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	4613      	mov	r3, r2
 8011948:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801194e:	f107 0310 	add.w	r3, r7, #16
 8011952:	4618      	mov	r0, r3
 8011954:	f7ff fcb8 	bl	80112c8 <get_ldnumber>
 8011958:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	2b00      	cmp	r3, #0
 801195e:	da01      	bge.n	8011964 <f_mount+0x28>
 8011960:	230b      	movs	r3, #11
 8011962:	e02b      	b.n	80119bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011964:	4a17      	ldr	r2, [pc, #92]	@ (80119c4 <f_mount+0x88>)
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801196c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d005      	beq.n	8011980 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011974:	69b8      	ldr	r0, [r7, #24]
 8011976:	f7ff fb3f 	bl	8010ff8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	2200      	movs	r2, #0
 801197e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	490d      	ldr	r1, [pc, #52]	@ (80119c4 <f_mount+0x88>)
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <f_mount+0x66>
 801199c:	79fb      	ldrb	r3, [r7, #7]
 801199e:	2b01      	cmp	r3, #1
 80119a0:	d001      	beq.n	80119a6 <f_mount+0x6a>
 80119a2:	2300      	movs	r3, #0
 80119a4:	e00a      	b.n	80119bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80119a6:	f107 010c 	add.w	r1, r7, #12
 80119aa:	f107 0308 	add.w	r3, r7, #8
 80119ae:	2200      	movs	r2, #0
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7ff fd23 	bl	80113fc <find_volume>
 80119b6:	4603      	mov	r3, r0
 80119b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3720      	adds	r7, #32
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	24001894 	.word	0x24001894

080119c8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b092      	sub	sp, #72	@ 0x48
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80119d4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80119d8:	f107 030c 	add.w	r3, r7, #12
 80119dc:	2200      	movs	r2, #0
 80119de:	4618      	mov	r0, r3
 80119e0:	f7ff fd0c 	bl	80113fc <find_volume>
 80119e4:	4603      	mov	r3, r0
 80119e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80119ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f040 8099 	bne.w	8011b26 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80119f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80119fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fc:	699a      	ldr	r2, [r3, #24]
 80119fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	3b02      	subs	r3, #2
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d804      	bhi.n	8011a12 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0a:	699a      	ldr	r2, [r3, #24]
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	601a      	str	r2, [r3, #0]
 8011a10:	e089      	b.n	8011b26 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d128      	bne.n	8011a70 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011a1e:	2302      	movs	r3, #2
 8011a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a24:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011a26:	f107 0314 	add.w	r3, r7, #20
 8011a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7ff fb78 	bl	8011122 <get_fat>
 8011a32:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a3a:	d103      	bne.n	8011a44 <f_getfree+0x7c>
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011a42:	e063      	b.n	8011b0c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d103      	bne.n	8011a52 <f_getfree+0x8a>
 8011a4a:	2302      	movs	r3, #2
 8011a4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011a50:	e05c      	b.n	8011b0c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d102      	bne.n	8011a5e <f_getfree+0x96>
 8011a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8011a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a60:	3301      	adds	r3, #1
 8011a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a66:	69db      	ldr	r3, [r3, #28]
 8011a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d3db      	bcc.n	8011a26 <f_getfree+0x5e>
 8011a6e:	e04d      	b.n	8011b0c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a72:	69db      	ldr	r3, [r3, #28]
 8011a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a80:	2300      	movs	r3, #0
 8011a82:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8011a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d113      	bne.n	8011ab2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8e:	1c5a      	adds	r2, r3, #1
 8011a90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011a92:	4619      	mov	r1, r3
 8011a94:	f7ff fb18 	bl	80110c8 <move_window>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8011a9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d131      	bne.n	8011b0a <f_getfree+0x142>
							p = fs->win;
 8011aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa8:	3338      	adds	r3, #56	@ 0x38
 8011aaa:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8011aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d10f      	bne.n	8011ada <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011aba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011abc:	f7ff fa60 	bl	8010f80 <ld_word>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <f_getfree+0x104>
 8011ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ac8:	3301      	adds	r3, #1
 8011aca:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8011acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ace:	3302      	adds	r3, #2
 8011ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ad4:	3b02      	subs	r3, #2
 8011ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ad8:	e010      	b.n	8011afc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011ada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011adc:	f7ff fa68 	bl	8010fb0 <ld_dword>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d102      	bne.n	8011af0 <f_getfree+0x128>
 8011aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aec:	3301      	adds	r3, #1
 8011aee:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8011af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af2:	3304      	adds	r3, #4
 8011af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8011af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011af8:	3b04      	subs	r3, #4
 8011afa:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8011afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011afe:	3b01      	subs	r3, #1
 8011b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1bd      	bne.n	8011a84 <f_getfree+0xbc>
 8011b08:	e000      	b.n	8011b0c <f_getfree+0x144>
							if (res != FR_OK) break;
 8011b0a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b10:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b16:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1a:	791a      	ldrb	r2, [r3, #4]
 8011b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1e:	f042 0201 	orr.w	r2, r2, #1
 8011b22:	b2d2      	uxtb	r2, r2
 8011b24:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011b26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3748      	adds	r7, #72	@ 0x48
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
	...

08011b34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b087      	sub	sp, #28
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	60b9      	str	r1, [r7, #8]
 8011b3e:	4613      	mov	r3, r2
 8011b40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011b42:	2301      	movs	r3, #1
 8011b44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b4c:	7a5b      	ldrb	r3, [r3, #9]
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d131      	bne.n	8011bb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b54:	4b1c      	ldr	r3, [pc, #112]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b56:	7a5b      	ldrb	r3, [r3, #9]
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b5e:	2100      	movs	r1, #0
 8011b60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b62:	4b19      	ldr	r3, [pc, #100]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b64:	7a5b      	ldrb	r3, [r3, #9]
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	4a17      	ldr	r2, [pc, #92]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4413      	add	r3, r2
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b72:	4b15      	ldr	r3, [pc, #84]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b74:	7a5b      	ldrb	r3, [r3, #9]
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4b13      	ldr	r3, [pc, #76]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b7c:	4413      	add	r3, r2
 8011b7e:	79fa      	ldrb	r2, [r7, #7]
 8011b80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011b82:	4b11      	ldr	r3, [pc, #68]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b84:	7a5b      	ldrb	r3, [r3, #9]
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	1c5a      	adds	r2, r3, #1
 8011b8a:	b2d1      	uxtb	r1, r2
 8011b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8011bc8 <FATFS_LinkDriverEx+0x94>)
 8011b8e:	7251      	strb	r1, [r2, #9]
 8011b90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011b92:	7dbb      	ldrb	r3, [r7, #22]
 8011b94:	3330      	adds	r3, #48	@ 0x30
 8011b96:	b2da      	uxtb	r2, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	223a      	movs	r2, #58	@ 0x3a
 8011ba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	3302      	adds	r3, #2
 8011ba8:	222f      	movs	r2, #47	@ 0x2f
 8011baa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	3303      	adds	r3, #3
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	371c      	adds	r7, #28
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop
 8011bc8:	24001abc 	.word	0x24001abc

08011bcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	6839      	ldr	r1, [r7, #0]
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff ffaa 	bl	8011b34 <FATFS_LinkDriverEx>
 8011be0:	4603      	mov	r3, r0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <siprintf>:
 8011bec:	b40e      	push	{r1, r2, r3}
 8011bee:	b500      	push	{lr}
 8011bf0:	b09c      	sub	sp, #112	@ 0x70
 8011bf2:	ab1d      	add	r3, sp, #116	@ 0x74
 8011bf4:	9002      	str	r0, [sp, #8]
 8011bf6:	9006      	str	r0, [sp, #24]
 8011bf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011bfc:	4809      	ldr	r0, [pc, #36]	@ (8011c24 <siprintf+0x38>)
 8011bfe:	9107      	str	r1, [sp, #28]
 8011c00:	9104      	str	r1, [sp, #16]
 8011c02:	4909      	ldr	r1, [pc, #36]	@ (8011c28 <siprintf+0x3c>)
 8011c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c08:	9105      	str	r1, [sp, #20]
 8011c0a:	6800      	ldr	r0, [r0, #0]
 8011c0c:	9301      	str	r3, [sp, #4]
 8011c0e:	a902      	add	r1, sp, #8
 8011c10:	f000 f9a2 	bl	8011f58 <_svfiprintf_r>
 8011c14:	9b02      	ldr	r3, [sp, #8]
 8011c16:	2200      	movs	r2, #0
 8011c18:	701a      	strb	r2, [r3, #0]
 8011c1a:	b01c      	add	sp, #112	@ 0x70
 8011c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c20:	b003      	add	sp, #12
 8011c22:	4770      	bx	lr
 8011c24:	24000018 	.word	0x24000018
 8011c28:	ffff0208 	.word	0xffff0208

08011c2c <memset>:
 8011c2c:	4402      	add	r2, r0
 8011c2e:	4603      	mov	r3, r0
 8011c30:	4293      	cmp	r3, r2
 8011c32:	d100      	bne.n	8011c36 <memset+0xa>
 8011c34:	4770      	bx	lr
 8011c36:	f803 1b01 	strb.w	r1, [r3], #1
 8011c3a:	e7f9      	b.n	8011c30 <memset+0x4>

08011c3c <__errno>:
 8011c3c:	4b01      	ldr	r3, [pc, #4]	@ (8011c44 <__errno+0x8>)
 8011c3e:	6818      	ldr	r0, [r3, #0]
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	24000018 	.word	0x24000018

08011c48 <__libc_init_array>:
 8011c48:	b570      	push	{r4, r5, r6, lr}
 8011c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8011c80 <__libc_init_array+0x38>)
 8011c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8011c84 <__libc_init_array+0x3c>)
 8011c4e:	1b64      	subs	r4, r4, r5
 8011c50:	10a4      	asrs	r4, r4, #2
 8011c52:	2600      	movs	r6, #0
 8011c54:	42a6      	cmp	r6, r4
 8011c56:	d109      	bne.n	8011c6c <__libc_init_array+0x24>
 8011c58:	4d0b      	ldr	r5, [pc, #44]	@ (8011c88 <__libc_init_array+0x40>)
 8011c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8011c8c <__libc_init_array+0x44>)
 8011c5c:	f000 fc66 	bl	801252c <_init>
 8011c60:	1b64      	subs	r4, r4, r5
 8011c62:	10a4      	asrs	r4, r4, #2
 8011c64:	2600      	movs	r6, #0
 8011c66:	42a6      	cmp	r6, r4
 8011c68:	d105      	bne.n	8011c76 <__libc_init_array+0x2e>
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c70:	4798      	blx	r3
 8011c72:	3601      	adds	r6, #1
 8011c74:	e7ee      	b.n	8011c54 <__libc_init_array+0xc>
 8011c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c7a:	4798      	blx	r3
 8011c7c:	3601      	adds	r6, #1
 8011c7e:	e7f2      	b.n	8011c66 <__libc_init_array+0x1e>
 8011c80:	08012904 	.word	0x08012904
 8011c84:	08012904 	.word	0x08012904
 8011c88:	08012904 	.word	0x08012904
 8011c8c:	08012908 	.word	0x08012908

08011c90 <__retarget_lock_acquire_recursive>:
 8011c90:	4770      	bx	lr

08011c92 <__retarget_lock_release_recursive>:
 8011c92:	4770      	bx	lr

08011c94 <memcpy>:
 8011c94:	440a      	add	r2, r1
 8011c96:	4291      	cmp	r1, r2
 8011c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c9c:	d100      	bne.n	8011ca0 <memcpy+0xc>
 8011c9e:	4770      	bx	lr
 8011ca0:	b510      	push	{r4, lr}
 8011ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011caa:	4291      	cmp	r1, r2
 8011cac:	d1f9      	bne.n	8011ca2 <memcpy+0xe>
 8011cae:	bd10      	pop	{r4, pc}

08011cb0 <_free_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	2900      	cmp	r1, #0
 8011cb6:	d041      	beq.n	8011d3c <_free_r+0x8c>
 8011cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cbc:	1f0c      	subs	r4, r1, #4
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	bfb8      	it	lt
 8011cc2:	18e4      	addlt	r4, r4, r3
 8011cc4:	f000 f8e0 	bl	8011e88 <__malloc_lock>
 8011cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8011d40 <_free_r+0x90>)
 8011cca:	6813      	ldr	r3, [r2, #0]
 8011ccc:	b933      	cbnz	r3, 8011cdc <_free_r+0x2c>
 8011cce:	6063      	str	r3, [r4, #4]
 8011cd0:	6014      	str	r4, [r2, #0]
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cd8:	f000 b8dc 	b.w	8011e94 <__malloc_unlock>
 8011cdc:	42a3      	cmp	r3, r4
 8011cde:	d908      	bls.n	8011cf2 <_free_r+0x42>
 8011ce0:	6820      	ldr	r0, [r4, #0]
 8011ce2:	1821      	adds	r1, r4, r0
 8011ce4:	428b      	cmp	r3, r1
 8011ce6:	bf01      	itttt	eq
 8011ce8:	6819      	ldreq	r1, [r3, #0]
 8011cea:	685b      	ldreq	r3, [r3, #4]
 8011cec:	1809      	addeq	r1, r1, r0
 8011cee:	6021      	streq	r1, [r4, #0]
 8011cf0:	e7ed      	b.n	8011cce <_free_r+0x1e>
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	b10b      	cbz	r3, 8011cfc <_free_r+0x4c>
 8011cf8:	42a3      	cmp	r3, r4
 8011cfa:	d9fa      	bls.n	8011cf2 <_free_r+0x42>
 8011cfc:	6811      	ldr	r1, [r2, #0]
 8011cfe:	1850      	adds	r0, r2, r1
 8011d00:	42a0      	cmp	r0, r4
 8011d02:	d10b      	bne.n	8011d1c <_free_r+0x6c>
 8011d04:	6820      	ldr	r0, [r4, #0]
 8011d06:	4401      	add	r1, r0
 8011d08:	1850      	adds	r0, r2, r1
 8011d0a:	4283      	cmp	r3, r0
 8011d0c:	6011      	str	r1, [r2, #0]
 8011d0e:	d1e0      	bne.n	8011cd2 <_free_r+0x22>
 8011d10:	6818      	ldr	r0, [r3, #0]
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	6053      	str	r3, [r2, #4]
 8011d16:	4408      	add	r0, r1
 8011d18:	6010      	str	r0, [r2, #0]
 8011d1a:	e7da      	b.n	8011cd2 <_free_r+0x22>
 8011d1c:	d902      	bls.n	8011d24 <_free_r+0x74>
 8011d1e:	230c      	movs	r3, #12
 8011d20:	602b      	str	r3, [r5, #0]
 8011d22:	e7d6      	b.n	8011cd2 <_free_r+0x22>
 8011d24:	6820      	ldr	r0, [r4, #0]
 8011d26:	1821      	adds	r1, r4, r0
 8011d28:	428b      	cmp	r3, r1
 8011d2a:	bf04      	itt	eq
 8011d2c:	6819      	ldreq	r1, [r3, #0]
 8011d2e:	685b      	ldreq	r3, [r3, #4]
 8011d30:	6063      	str	r3, [r4, #4]
 8011d32:	bf04      	itt	eq
 8011d34:	1809      	addeq	r1, r1, r0
 8011d36:	6021      	streq	r1, [r4, #0]
 8011d38:	6054      	str	r4, [r2, #4]
 8011d3a:	e7ca      	b.n	8011cd2 <_free_r+0x22>
 8011d3c:	bd38      	pop	{r3, r4, r5, pc}
 8011d3e:	bf00      	nop
 8011d40:	24001c0c 	.word	0x24001c0c

08011d44 <sbrk_aligned>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4e0f      	ldr	r6, [pc, #60]	@ (8011d84 <sbrk_aligned+0x40>)
 8011d48:	460c      	mov	r4, r1
 8011d4a:	6831      	ldr	r1, [r6, #0]
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	b911      	cbnz	r1, 8011d56 <sbrk_aligned+0x12>
 8011d50:	f000 fba6 	bl	80124a0 <_sbrk_r>
 8011d54:	6030      	str	r0, [r6, #0]
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f000 fba1 	bl	80124a0 <_sbrk_r>
 8011d5e:	1c43      	adds	r3, r0, #1
 8011d60:	d103      	bne.n	8011d6a <sbrk_aligned+0x26>
 8011d62:	f04f 34ff 	mov.w	r4, #4294967295
 8011d66:	4620      	mov	r0, r4
 8011d68:	bd70      	pop	{r4, r5, r6, pc}
 8011d6a:	1cc4      	adds	r4, r0, #3
 8011d6c:	f024 0403 	bic.w	r4, r4, #3
 8011d70:	42a0      	cmp	r0, r4
 8011d72:	d0f8      	beq.n	8011d66 <sbrk_aligned+0x22>
 8011d74:	1a21      	subs	r1, r4, r0
 8011d76:	4628      	mov	r0, r5
 8011d78:	f000 fb92 	bl	80124a0 <_sbrk_r>
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	d1f2      	bne.n	8011d66 <sbrk_aligned+0x22>
 8011d80:	e7ef      	b.n	8011d62 <sbrk_aligned+0x1e>
 8011d82:	bf00      	nop
 8011d84:	24001c08 	.word	0x24001c08

08011d88 <_malloc_r>:
 8011d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d8c:	1ccd      	adds	r5, r1, #3
 8011d8e:	f025 0503 	bic.w	r5, r5, #3
 8011d92:	3508      	adds	r5, #8
 8011d94:	2d0c      	cmp	r5, #12
 8011d96:	bf38      	it	cc
 8011d98:	250c      	movcc	r5, #12
 8011d9a:	2d00      	cmp	r5, #0
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	db01      	blt.n	8011da4 <_malloc_r+0x1c>
 8011da0:	42a9      	cmp	r1, r5
 8011da2:	d904      	bls.n	8011dae <_malloc_r+0x26>
 8011da4:	230c      	movs	r3, #12
 8011da6:	6033      	str	r3, [r6, #0]
 8011da8:	2000      	movs	r0, #0
 8011daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011e84 <_malloc_r+0xfc>
 8011db2:	f000 f869 	bl	8011e88 <__malloc_lock>
 8011db6:	f8d8 3000 	ldr.w	r3, [r8]
 8011dba:	461c      	mov	r4, r3
 8011dbc:	bb44      	cbnz	r4, 8011e10 <_malloc_r+0x88>
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f7ff ffbf 	bl	8011d44 <sbrk_aligned>
 8011dc6:	1c43      	adds	r3, r0, #1
 8011dc8:	4604      	mov	r4, r0
 8011dca:	d158      	bne.n	8011e7e <_malloc_r+0xf6>
 8011dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8011dd0:	4627      	mov	r7, r4
 8011dd2:	2f00      	cmp	r7, #0
 8011dd4:	d143      	bne.n	8011e5e <_malloc_r+0xd6>
 8011dd6:	2c00      	cmp	r4, #0
 8011dd8:	d04b      	beq.n	8011e72 <_malloc_r+0xea>
 8011dda:	6823      	ldr	r3, [r4, #0]
 8011ddc:	4639      	mov	r1, r7
 8011dde:	4630      	mov	r0, r6
 8011de0:	eb04 0903 	add.w	r9, r4, r3
 8011de4:	f000 fb5c 	bl	80124a0 <_sbrk_r>
 8011de8:	4581      	cmp	r9, r0
 8011dea:	d142      	bne.n	8011e72 <_malloc_r+0xea>
 8011dec:	6821      	ldr	r1, [r4, #0]
 8011dee:	1a6d      	subs	r5, r5, r1
 8011df0:	4629      	mov	r1, r5
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff ffa6 	bl	8011d44 <sbrk_aligned>
 8011df8:	3001      	adds	r0, #1
 8011dfa:	d03a      	beq.n	8011e72 <_malloc_r+0xea>
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	442b      	add	r3, r5
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	f8d8 3000 	ldr.w	r3, [r8]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	bb62      	cbnz	r2, 8011e64 <_malloc_r+0xdc>
 8011e0a:	f8c8 7000 	str.w	r7, [r8]
 8011e0e:	e00f      	b.n	8011e30 <_malloc_r+0xa8>
 8011e10:	6822      	ldr	r2, [r4, #0]
 8011e12:	1b52      	subs	r2, r2, r5
 8011e14:	d420      	bmi.n	8011e58 <_malloc_r+0xd0>
 8011e16:	2a0b      	cmp	r2, #11
 8011e18:	d917      	bls.n	8011e4a <_malloc_r+0xc2>
 8011e1a:	1961      	adds	r1, r4, r5
 8011e1c:	42a3      	cmp	r3, r4
 8011e1e:	6025      	str	r5, [r4, #0]
 8011e20:	bf18      	it	ne
 8011e22:	6059      	strne	r1, [r3, #4]
 8011e24:	6863      	ldr	r3, [r4, #4]
 8011e26:	bf08      	it	eq
 8011e28:	f8c8 1000 	streq.w	r1, [r8]
 8011e2c:	5162      	str	r2, [r4, r5]
 8011e2e:	604b      	str	r3, [r1, #4]
 8011e30:	4630      	mov	r0, r6
 8011e32:	f000 f82f 	bl	8011e94 <__malloc_unlock>
 8011e36:	f104 000b 	add.w	r0, r4, #11
 8011e3a:	1d23      	adds	r3, r4, #4
 8011e3c:	f020 0007 	bic.w	r0, r0, #7
 8011e40:	1ac2      	subs	r2, r0, r3
 8011e42:	bf1c      	itt	ne
 8011e44:	1a1b      	subne	r3, r3, r0
 8011e46:	50a3      	strne	r3, [r4, r2]
 8011e48:	e7af      	b.n	8011daa <_malloc_r+0x22>
 8011e4a:	6862      	ldr	r2, [r4, #4]
 8011e4c:	42a3      	cmp	r3, r4
 8011e4e:	bf0c      	ite	eq
 8011e50:	f8c8 2000 	streq.w	r2, [r8]
 8011e54:	605a      	strne	r2, [r3, #4]
 8011e56:	e7eb      	b.n	8011e30 <_malloc_r+0xa8>
 8011e58:	4623      	mov	r3, r4
 8011e5a:	6864      	ldr	r4, [r4, #4]
 8011e5c:	e7ae      	b.n	8011dbc <_malloc_r+0x34>
 8011e5e:	463c      	mov	r4, r7
 8011e60:	687f      	ldr	r7, [r7, #4]
 8011e62:	e7b6      	b.n	8011dd2 <_malloc_r+0x4a>
 8011e64:	461a      	mov	r2, r3
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	42a3      	cmp	r3, r4
 8011e6a:	d1fb      	bne.n	8011e64 <_malloc_r+0xdc>
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	6053      	str	r3, [r2, #4]
 8011e70:	e7de      	b.n	8011e30 <_malloc_r+0xa8>
 8011e72:	230c      	movs	r3, #12
 8011e74:	6033      	str	r3, [r6, #0]
 8011e76:	4630      	mov	r0, r6
 8011e78:	f000 f80c 	bl	8011e94 <__malloc_unlock>
 8011e7c:	e794      	b.n	8011da8 <_malloc_r+0x20>
 8011e7e:	6005      	str	r5, [r0, #0]
 8011e80:	e7d6      	b.n	8011e30 <_malloc_r+0xa8>
 8011e82:	bf00      	nop
 8011e84:	24001c0c 	.word	0x24001c0c

08011e88 <__malloc_lock>:
 8011e88:	4801      	ldr	r0, [pc, #4]	@ (8011e90 <__malloc_lock+0x8>)
 8011e8a:	f7ff bf01 	b.w	8011c90 <__retarget_lock_acquire_recursive>
 8011e8e:	bf00      	nop
 8011e90:	24001c04 	.word	0x24001c04

08011e94 <__malloc_unlock>:
 8011e94:	4801      	ldr	r0, [pc, #4]	@ (8011e9c <__malloc_unlock+0x8>)
 8011e96:	f7ff befc 	b.w	8011c92 <__retarget_lock_release_recursive>
 8011e9a:	bf00      	nop
 8011e9c:	24001c04 	.word	0x24001c04

08011ea0 <__ssputs_r>:
 8011ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea4:	688e      	ldr	r6, [r1, #8]
 8011ea6:	461f      	mov	r7, r3
 8011ea8:	42be      	cmp	r6, r7
 8011eaa:	680b      	ldr	r3, [r1, #0]
 8011eac:	4682      	mov	sl, r0
 8011eae:	460c      	mov	r4, r1
 8011eb0:	4690      	mov	r8, r2
 8011eb2:	d82d      	bhi.n	8011f10 <__ssputs_r+0x70>
 8011eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011eb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ebc:	d026      	beq.n	8011f0c <__ssputs_r+0x6c>
 8011ebe:	6965      	ldr	r5, [r4, #20]
 8011ec0:	6909      	ldr	r1, [r1, #16]
 8011ec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ec6:	eba3 0901 	sub.w	r9, r3, r1
 8011eca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ece:	1c7b      	adds	r3, r7, #1
 8011ed0:	444b      	add	r3, r9
 8011ed2:	106d      	asrs	r5, r5, #1
 8011ed4:	429d      	cmp	r5, r3
 8011ed6:	bf38      	it	cc
 8011ed8:	461d      	movcc	r5, r3
 8011eda:	0553      	lsls	r3, r2, #21
 8011edc:	d527      	bpl.n	8011f2e <__ssputs_r+0x8e>
 8011ede:	4629      	mov	r1, r5
 8011ee0:	f7ff ff52 	bl	8011d88 <_malloc_r>
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	b360      	cbz	r0, 8011f42 <__ssputs_r+0xa2>
 8011ee8:	6921      	ldr	r1, [r4, #16]
 8011eea:	464a      	mov	r2, r9
 8011eec:	f7ff fed2 	bl	8011c94 <memcpy>
 8011ef0:	89a3      	ldrh	r3, [r4, #12]
 8011ef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011efa:	81a3      	strh	r3, [r4, #12]
 8011efc:	6126      	str	r6, [r4, #16]
 8011efe:	6165      	str	r5, [r4, #20]
 8011f00:	444e      	add	r6, r9
 8011f02:	eba5 0509 	sub.w	r5, r5, r9
 8011f06:	6026      	str	r6, [r4, #0]
 8011f08:	60a5      	str	r5, [r4, #8]
 8011f0a:	463e      	mov	r6, r7
 8011f0c:	42be      	cmp	r6, r7
 8011f0e:	d900      	bls.n	8011f12 <__ssputs_r+0x72>
 8011f10:	463e      	mov	r6, r7
 8011f12:	6820      	ldr	r0, [r4, #0]
 8011f14:	4632      	mov	r2, r6
 8011f16:	4641      	mov	r1, r8
 8011f18:	f000 faa8 	bl	801246c <memmove>
 8011f1c:	68a3      	ldr	r3, [r4, #8]
 8011f1e:	1b9b      	subs	r3, r3, r6
 8011f20:	60a3      	str	r3, [r4, #8]
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	4433      	add	r3, r6
 8011f26:	6023      	str	r3, [r4, #0]
 8011f28:	2000      	movs	r0, #0
 8011f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2e:	462a      	mov	r2, r5
 8011f30:	f000 fac6 	bl	80124c0 <_realloc_r>
 8011f34:	4606      	mov	r6, r0
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d1e0      	bne.n	8011efc <__ssputs_r+0x5c>
 8011f3a:	6921      	ldr	r1, [r4, #16]
 8011f3c:	4650      	mov	r0, sl
 8011f3e:	f7ff feb7 	bl	8011cb0 <_free_r>
 8011f42:	230c      	movs	r3, #12
 8011f44:	f8ca 3000 	str.w	r3, [sl]
 8011f48:	89a3      	ldrh	r3, [r4, #12]
 8011f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f4e:	81a3      	strh	r3, [r4, #12]
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295
 8011f54:	e7e9      	b.n	8011f2a <__ssputs_r+0x8a>
	...

08011f58 <_svfiprintf_r>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	4698      	mov	r8, r3
 8011f5e:	898b      	ldrh	r3, [r1, #12]
 8011f60:	061b      	lsls	r3, r3, #24
 8011f62:	b09d      	sub	sp, #116	@ 0x74
 8011f64:	4607      	mov	r7, r0
 8011f66:	460d      	mov	r5, r1
 8011f68:	4614      	mov	r4, r2
 8011f6a:	d510      	bpl.n	8011f8e <_svfiprintf_r+0x36>
 8011f6c:	690b      	ldr	r3, [r1, #16]
 8011f6e:	b973      	cbnz	r3, 8011f8e <_svfiprintf_r+0x36>
 8011f70:	2140      	movs	r1, #64	@ 0x40
 8011f72:	f7ff ff09 	bl	8011d88 <_malloc_r>
 8011f76:	6028      	str	r0, [r5, #0]
 8011f78:	6128      	str	r0, [r5, #16]
 8011f7a:	b930      	cbnz	r0, 8011f8a <_svfiprintf_r+0x32>
 8011f7c:	230c      	movs	r3, #12
 8011f7e:	603b      	str	r3, [r7, #0]
 8011f80:	f04f 30ff 	mov.w	r0, #4294967295
 8011f84:	b01d      	add	sp, #116	@ 0x74
 8011f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8a:	2340      	movs	r3, #64	@ 0x40
 8011f8c:	616b      	str	r3, [r5, #20]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f92:	2320      	movs	r3, #32
 8011f94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f9c:	2330      	movs	r3, #48	@ 0x30
 8011f9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801213c <_svfiprintf_r+0x1e4>
 8011fa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011fa6:	f04f 0901 	mov.w	r9, #1
 8011faa:	4623      	mov	r3, r4
 8011fac:	469a      	mov	sl, r3
 8011fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fb2:	b10a      	cbz	r2, 8011fb8 <_svfiprintf_r+0x60>
 8011fb4:	2a25      	cmp	r2, #37	@ 0x25
 8011fb6:	d1f9      	bne.n	8011fac <_svfiprintf_r+0x54>
 8011fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8011fbc:	d00b      	beq.n	8011fd6 <_svfiprintf_r+0x7e>
 8011fbe:	465b      	mov	r3, fp
 8011fc0:	4622      	mov	r2, r4
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	4638      	mov	r0, r7
 8011fc6:	f7ff ff6b 	bl	8011ea0 <__ssputs_r>
 8011fca:	3001      	adds	r0, #1
 8011fcc:	f000 80a7 	beq.w	801211e <_svfiprintf_r+0x1c6>
 8011fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fd2:	445a      	add	r2, fp
 8011fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	f000 809f 	beq.w	801211e <_svfiprintf_r+0x1c6>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fea:	f10a 0a01 	add.w	sl, sl, #1
 8011fee:	9304      	str	r3, [sp, #16]
 8011ff0:	9307      	str	r3, [sp, #28]
 8011ff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ff6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ff8:	4654      	mov	r4, sl
 8011ffa:	2205      	movs	r2, #5
 8011ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012000:	484e      	ldr	r0, [pc, #312]	@ (801213c <_svfiprintf_r+0x1e4>)
 8012002:	f7ee f98d 	bl	8000320 <memchr>
 8012006:	9a04      	ldr	r2, [sp, #16]
 8012008:	b9d8      	cbnz	r0, 8012042 <_svfiprintf_r+0xea>
 801200a:	06d0      	lsls	r0, r2, #27
 801200c:	bf44      	itt	mi
 801200e:	2320      	movmi	r3, #32
 8012010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012014:	0711      	lsls	r1, r2, #28
 8012016:	bf44      	itt	mi
 8012018:	232b      	movmi	r3, #43	@ 0x2b
 801201a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801201e:	f89a 3000 	ldrb.w	r3, [sl]
 8012022:	2b2a      	cmp	r3, #42	@ 0x2a
 8012024:	d015      	beq.n	8012052 <_svfiprintf_r+0xfa>
 8012026:	9a07      	ldr	r2, [sp, #28]
 8012028:	4654      	mov	r4, sl
 801202a:	2000      	movs	r0, #0
 801202c:	f04f 0c0a 	mov.w	ip, #10
 8012030:	4621      	mov	r1, r4
 8012032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012036:	3b30      	subs	r3, #48	@ 0x30
 8012038:	2b09      	cmp	r3, #9
 801203a:	d94b      	bls.n	80120d4 <_svfiprintf_r+0x17c>
 801203c:	b1b0      	cbz	r0, 801206c <_svfiprintf_r+0x114>
 801203e:	9207      	str	r2, [sp, #28]
 8012040:	e014      	b.n	801206c <_svfiprintf_r+0x114>
 8012042:	eba0 0308 	sub.w	r3, r0, r8
 8012046:	fa09 f303 	lsl.w	r3, r9, r3
 801204a:	4313      	orrs	r3, r2
 801204c:	9304      	str	r3, [sp, #16]
 801204e:	46a2      	mov	sl, r4
 8012050:	e7d2      	b.n	8011ff8 <_svfiprintf_r+0xa0>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	1d19      	adds	r1, r3, #4
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	9103      	str	r1, [sp, #12]
 801205a:	2b00      	cmp	r3, #0
 801205c:	bfbb      	ittet	lt
 801205e:	425b      	neglt	r3, r3
 8012060:	f042 0202 	orrlt.w	r2, r2, #2
 8012064:	9307      	strge	r3, [sp, #28]
 8012066:	9307      	strlt	r3, [sp, #28]
 8012068:	bfb8      	it	lt
 801206a:	9204      	strlt	r2, [sp, #16]
 801206c:	7823      	ldrb	r3, [r4, #0]
 801206e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012070:	d10a      	bne.n	8012088 <_svfiprintf_r+0x130>
 8012072:	7863      	ldrb	r3, [r4, #1]
 8012074:	2b2a      	cmp	r3, #42	@ 0x2a
 8012076:	d132      	bne.n	80120de <_svfiprintf_r+0x186>
 8012078:	9b03      	ldr	r3, [sp, #12]
 801207a:	1d1a      	adds	r2, r3, #4
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	9203      	str	r2, [sp, #12]
 8012080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012084:	3402      	adds	r4, #2
 8012086:	9305      	str	r3, [sp, #20]
 8012088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801214c <_svfiprintf_r+0x1f4>
 801208c:	7821      	ldrb	r1, [r4, #0]
 801208e:	2203      	movs	r2, #3
 8012090:	4650      	mov	r0, sl
 8012092:	f7ee f945 	bl	8000320 <memchr>
 8012096:	b138      	cbz	r0, 80120a8 <_svfiprintf_r+0x150>
 8012098:	9b04      	ldr	r3, [sp, #16]
 801209a:	eba0 000a 	sub.w	r0, r0, sl
 801209e:	2240      	movs	r2, #64	@ 0x40
 80120a0:	4082      	lsls	r2, r0
 80120a2:	4313      	orrs	r3, r2
 80120a4:	3401      	adds	r4, #1
 80120a6:	9304      	str	r3, [sp, #16]
 80120a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ac:	4824      	ldr	r0, [pc, #144]	@ (8012140 <_svfiprintf_r+0x1e8>)
 80120ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120b2:	2206      	movs	r2, #6
 80120b4:	f7ee f934 	bl	8000320 <memchr>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d036      	beq.n	801212a <_svfiprintf_r+0x1d2>
 80120bc:	4b21      	ldr	r3, [pc, #132]	@ (8012144 <_svfiprintf_r+0x1ec>)
 80120be:	bb1b      	cbnz	r3, 8012108 <_svfiprintf_r+0x1b0>
 80120c0:	9b03      	ldr	r3, [sp, #12]
 80120c2:	3307      	adds	r3, #7
 80120c4:	f023 0307 	bic.w	r3, r3, #7
 80120c8:	3308      	adds	r3, #8
 80120ca:	9303      	str	r3, [sp, #12]
 80120cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ce:	4433      	add	r3, r6
 80120d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80120d2:	e76a      	b.n	8011faa <_svfiprintf_r+0x52>
 80120d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80120d8:	460c      	mov	r4, r1
 80120da:	2001      	movs	r0, #1
 80120dc:	e7a8      	b.n	8012030 <_svfiprintf_r+0xd8>
 80120de:	2300      	movs	r3, #0
 80120e0:	3401      	adds	r4, #1
 80120e2:	9305      	str	r3, [sp, #20]
 80120e4:	4619      	mov	r1, r3
 80120e6:	f04f 0c0a 	mov.w	ip, #10
 80120ea:	4620      	mov	r0, r4
 80120ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120f0:	3a30      	subs	r2, #48	@ 0x30
 80120f2:	2a09      	cmp	r2, #9
 80120f4:	d903      	bls.n	80120fe <_svfiprintf_r+0x1a6>
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0c6      	beq.n	8012088 <_svfiprintf_r+0x130>
 80120fa:	9105      	str	r1, [sp, #20]
 80120fc:	e7c4      	b.n	8012088 <_svfiprintf_r+0x130>
 80120fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012102:	4604      	mov	r4, r0
 8012104:	2301      	movs	r3, #1
 8012106:	e7f0      	b.n	80120ea <_svfiprintf_r+0x192>
 8012108:	ab03      	add	r3, sp, #12
 801210a:	9300      	str	r3, [sp, #0]
 801210c:	462a      	mov	r2, r5
 801210e:	4b0e      	ldr	r3, [pc, #56]	@ (8012148 <_svfiprintf_r+0x1f0>)
 8012110:	a904      	add	r1, sp, #16
 8012112:	4638      	mov	r0, r7
 8012114:	f3af 8000 	nop.w
 8012118:	1c42      	adds	r2, r0, #1
 801211a:	4606      	mov	r6, r0
 801211c:	d1d6      	bne.n	80120cc <_svfiprintf_r+0x174>
 801211e:	89ab      	ldrh	r3, [r5, #12]
 8012120:	065b      	lsls	r3, r3, #25
 8012122:	f53f af2d 	bmi.w	8011f80 <_svfiprintf_r+0x28>
 8012126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012128:	e72c      	b.n	8011f84 <_svfiprintf_r+0x2c>
 801212a:	ab03      	add	r3, sp, #12
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	462a      	mov	r2, r5
 8012130:	4b05      	ldr	r3, [pc, #20]	@ (8012148 <_svfiprintf_r+0x1f0>)
 8012132:	a904      	add	r1, sp, #16
 8012134:	4638      	mov	r0, r7
 8012136:	f000 f879 	bl	801222c <_printf_i>
 801213a:	e7ed      	b.n	8012118 <_svfiprintf_r+0x1c0>
 801213c:	080128c8 	.word	0x080128c8
 8012140:	080128d2 	.word	0x080128d2
 8012144:	00000000 	.word	0x00000000
 8012148:	08011ea1 	.word	0x08011ea1
 801214c:	080128ce 	.word	0x080128ce

08012150 <_printf_common>:
 8012150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012154:	4616      	mov	r6, r2
 8012156:	4698      	mov	r8, r3
 8012158:	688a      	ldr	r2, [r1, #8]
 801215a:	690b      	ldr	r3, [r1, #16]
 801215c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012160:	4293      	cmp	r3, r2
 8012162:	bfb8      	it	lt
 8012164:	4613      	movlt	r3, r2
 8012166:	6033      	str	r3, [r6, #0]
 8012168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801216c:	4607      	mov	r7, r0
 801216e:	460c      	mov	r4, r1
 8012170:	b10a      	cbz	r2, 8012176 <_printf_common+0x26>
 8012172:	3301      	adds	r3, #1
 8012174:	6033      	str	r3, [r6, #0]
 8012176:	6823      	ldr	r3, [r4, #0]
 8012178:	0699      	lsls	r1, r3, #26
 801217a:	bf42      	ittt	mi
 801217c:	6833      	ldrmi	r3, [r6, #0]
 801217e:	3302      	addmi	r3, #2
 8012180:	6033      	strmi	r3, [r6, #0]
 8012182:	6825      	ldr	r5, [r4, #0]
 8012184:	f015 0506 	ands.w	r5, r5, #6
 8012188:	d106      	bne.n	8012198 <_printf_common+0x48>
 801218a:	f104 0a19 	add.w	sl, r4, #25
 801218e:	68e3      	ldr	r3, [r4, #12]
 8012190:	6832      	ldr	r2, [r6, #0]
 8012192:	1a9b      	subs	r3, r3, r2
 8012194:	42ab      	cmp	r3, r5
 8012196:	dc26      	bgt.n	80121e6 <_printf_common+0x96>
 8012198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801219c:	6822      	ldr	r2, [r4, #0]
 801219e:	3b00      	subs	r3, #0
 80121a0:	bf18      	it	ne
 80121a2:	2301      	movne	r3, #1
 80121a4:	0692      	lsls	r2, r2, #26
 80121a6:	d42b      	bmi.n	8012200 <_printf_common+0xb0>
 80121a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80121ac:	4641      	mov	r1, r8
 80121ae:	4638      	mov	r0, r7
 80121b0:	47c8      	blx	r9
 80121b2:	3001      	adds	r0, #1
 80121b4:	d01e      	beq.n	80121f4 <_printf_common+0xa4>
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	6922      	ldr	r2, [r4, #16]
 80121ba:	f003 0306 	and.w	r3, r3, #6
 80121be:	2b04      	cmp	r3, #4
 80121c0:	bf02      	ittt	eq
 80121c2:	68e5      	ldreq	r5, [r4, #12]
 80121c4:	6833      	ldreq	r3, [r6, #0]
 80121c6:	1aed      	subeq	r5, r5, r3
 80121c8:	68a3      	ldr	r3, [r4, #8]
 80121ca:	bf0c      	ite	eq
 80121cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121d0:	2500      	movne	r5, #0
 80121d2:	4293      	cmp	r3, r2
 80121d4:	bfc4      	itt	gt
 80121d6:	1a9b      	subgt	r3, r3, r2
 80121d8:	18ed      	addgt	r5, r5, r3
 80121da:	2600      	movs	r6, #0
 80121dc:	341a      	adds	r4, #26
 80121de:	42b5      	cmp	r5, r6
 80121e0:	d11a      	bne.n	8012218 <_printf_common+0xc8>
 80121e2:	2000      	movs	r0, #0
 80121e4:	e008      	b.n	80121f8 <_printf_common+0xa8>
 80121e6:	2301      	movs	r3, #1
 80121e8:	4652      	mov	r2, sl
 80121ea:	4641      	mov	r1, r8
 80121ec:	4638      	mov	r0, r7
 80121ee:	47c8      	blx	r9
 80121f0:	3001      	adds	r0, #1
 80121f2:	d103      	bne.n	80121fc <_printf_common+0xac>
 80121f4:	f04f 30ff 	mov.w	r0, #4294967295
 80121f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fc:	3501      	adds	r5, #1
 80121fe:	e7c6      	b.n	801218e <_printf_common+0x3e>
 8012200:	18e1      	adds	r1, r4, r3
 8012202:	1c5a      	adds	r2, r3, #1
 8012204:	2030      	movs	r0, #48	@ 0x30
 8012206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801220a:	4422      	add	r2, r4
 801220c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012214:	3302      	adds	r3, #2
 8012216:	e7c7      	b.n	80121a8 <_printf_common+0x58>
 8012218:	2301      	movs	r3, #1
 801221a:	4622      	mov	r2, r4
 801221c:	4641      	mov	r1, r8
 801221e:	4638      	mov	r0, r7
 8012220:	47c8      	blx	r9
 8012222:	3001      	adds	r0, #1
 8012224:	d0e6      	beq.n	80121f4 <_printf_common+0xa4>
 8012226:	3601      	adds	r6, #1
 8012228:	e7d9      	b.n	80121de <_printf_common+0x8e>
	...

0801222c <_printf_i>:
 801222c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012230:	7e0f      	ldrb	r7, [r1, #24]
 8012232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012234:	2f78      	cmp	r7, #120	@ 0x78
 8012236:	4691      	mov	r9, r2
 8012238:	4680      	mov	r8, r0
 801223a:	460c      	mov	r4, r1
 801223c:	469a      	mov	sl, r3
 801223e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012242:	d807      	bhi.n	8012254 <_printf_i+0x28>
 8012244:	2f62      	cmp	r7, #98	@ 0x62
 8012246:	d80a      	bhi.n	801225e <_printf_i+0x32>
 8012248:	2f00      	cmp	r7, #0
 801224a:	f000 80d2 	beq.w	80123f2 <_printf_i+0x1c6>
 801224e:	2f58      	cmp	r7, #88	@ 0x58
 8012250:	f000 80b9 	beq.w	80123c6 <_printf_i+0x19a>
 8012254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801225c:	e03a      	b.n	80122d4 <_printf_i+0xa8>
 801225e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012262:	2b15      	cmp	r3, #21
 8012264:	d8f6      	bhi.n	8012254 <_printf_i+0x28>
 8012266:	a101      	add	r1, pc, #4	@ (adr r1, 801226c <_printf_i+0x40>)
 8012268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801226c:	080122c5 	.word	0x080122c5
 8012270:	080122d9 	.word	0x080122d9
 8012274:	08012255 	.word	0x08012255
 8012278:	08012255 	.word	0x08012255
 801227c:	08012255 	.word	0x08012255
 8012280:	08012255 	.word	0x08012255
 8012284:	080122d9 	.word	0x080122d9
 8012288:	08012255 	.word	0x08012255
 801228c:	08012255 	.word	0x08012255
 8012290:	08012255 	.word	0x08012255
 8012294:	08012255 	.word	0x08012255
 8012298:	080123d9 	.word	0x080123d9
 801229c:	08012303 	.word	0x08012303
 80122a0:	08012393 	.word	0x08012393
 80122a4:	08012255 	.word	0x08012255
 80122a8:	08012255 	.word	0x08012255
 80122ac:	080123fb 	.word	0x080123fb
 80122b0:	08012255 	.word	0x08012255
 80122b4:	08012303 	.word	0x08012303
 80122b8:	08012255 	.word	0x08012255
 80122bc:	08012255 	.word	0x08012255
 80122c0:	0801239b 	.word	0x0801239b
 80122c4:	6833      	ldr	r3, [r6, #0]
 80122c6:	1d1a      	adds	r2, r3, #4
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	6032      	str	r2, [r6, #0]
 80122cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80122d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80122d4:	2301      	movs	r3, #1
 80122d6:	e09d      	b.n	8012414 <_printf_i+0x1e8>
 80122d8:	6833      	ldr	r3, [r6, #0]
 80122da:	6820      	ldr	r0, [r4, #0]
 80122dc:	1d19      	adds	r1, r3, #4
 80122de:	6031      	str	r1, [r6, #0]
 80122e0:	0606      	lsls	r6, r0, #24
 80122e2:	d501      	bpl.n	80122e8 <_printf_i+0xbc>
 80122e4:	681d      	ldr	r5, [r3, #0]
 80122e6:	e003      	b.n	80122f0 <_printf_i+0xc4>
 80122e8:	0645      	lsls	r5, r0, #25
 80122ea:	d5fb      	bpl.n	80122e4 <_printf_i+0xb8>
 80122ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80122f0:	2d00      	cmp	r5, #0
 80122f2:	da03      	bge.n	80122fc <_printf_i+0xd0>
 80122f4:	232d      	movs	r3, #45	@ 0x2d
 80122f6:	426d      	negs	r5, r5
 80122f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122fc:	4859      	ldr	r0, [pc, #356]	@ (8012464 <_printf_i+0x238>)
 80122fe:	230a      	movs	r3, #10
 8012300:	e011      	b.n	8012326 <_printf_i+0xfa>
 8012302:	6821      	ldr	r1, [r4, #0]
 8012304:	6833      	ldr	r3, [r6, #0]
 8012306:	0608      	lsls	r0, r1, #24
 8012308:	f853 5b04 	ldr.w	r5, [r3], #4
 801230c:	d402      	bmi.n	8012314 <_printf_i+0xe8>
 801230e:	0649      	lsls	r1, r1, #25
 8012310:	bf48      	it	mi
 8012312:	b2ad      	uxthmi	r5, r5
 8012314:	2f6f      	cmp	r7, #111	@ 0x6f
 8012316:	4853      	ldr	r0, [pc, #332]	@ (8012464 <_printf_i+0x238>)
 8012318:	6033      	str	r3, [r6, #0]
 801231a:	bf14      	ite	ne
 801231c:	230a      	movne	r3, #10
 801231e:	2308      	moveq	r3, #8
 8012320:	2100      	movs	r1, #0
 8012322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012326:	6866      	ldr	r6, [r4, #4]
 8012328:	60a6      	str	r6, [r4, #8]
 801232a:	2e00      	cmp	r6, #0
 801232c:	bfa2      	ittt	ge
 801232e:	6821      	ldrge	r1, [r4, #0]
 8012330:	f021 0104 	bicge.w	r1, r1, #4
 8012334:	6021      	strge	r1, [r4, #0]
 8012336:	b90d      	cbnz	r5, 801233c <_printf_i+0x110>
 8012338:	2e00      	cmp	r6, #0
 801233a:	d04b      	beq.n	80123d4 <_printf_i+0x1a8>
 801233c:	4616      	mov	r6, r2
 801233e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012342:	fb03 5711 	mls	r7, r3, r1, r5
 8012346:	5dc7      	ldrb	r7, [r0, r7]
 8012348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801234c:	462f      	mov	r7, r5
 801234e:	42bb      	cmp	r3, r7
 8012350:	460d      	mov	r5, r1
 8012352:	d9f4      	bls.n	801233e <_printf_i+0x112>
 8012354:	2b08      	cmp	r3, #8
 8012356:	d10b      	bne.n	8012370 <_printf_i+0x144>
 8012358:	6823      	ldr	r3, [r4, #0]
 801235a:	07df      	lsls	r7, r3, #31
 801235c:	d508      	bpl.n	8012370 <_printf_i+0x144>
 801235e:	6923      	ldr	r3, [r4, #16]
 8012360:	6861      	ldr	r1, [r4, #4]
 8012362:	4299      	cmp	r1, r3
 8012364:	bfde      	ittt	le
 8012366:	2330      	movle	r3, #48	@ 0x30
 8012368:	f806 3c01 	strble.w	r3, [r6, #-1]
 801236c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012370:	1b92      	subs	r2, r2, r6
 8012372:	6122      	str	r2, [r4, #16]
 8012374:	f8cd a000 	str.w	sl, [sp]
 8012378:	464b      	mov	r3, r9
 801237a:	aa03      	add	r2, sp, #12
 801237c:	4621      	mov	r1, r4
 801237e:	4640      	mov	r0, r8
 8012380:	f7ff fee6 	bl	8012150 <_printf_common>
 8012384:	3001      	adds	r0, #1
 8012386:	d14a      	bne.n	801241e <_printf_i+0x1f2>
 8012388:	f04f 30ff 	mov.w	r0, #4294967295
 801238c:	b004      	add	sp, #16
 801238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	f043 0320 	orr.w	r3, r3, #32
 8012398:	6023      	str	r3, [r4, #0]
 801239a:	4833      	ldr	r0, [pc, #204]	@ (8012468 <_printf_i+0x23c>)
 801239c:	2778      	movs	r7, #120	@ 0x78
 801239e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	6831      	ldr	r1, [r6, #0]
 80123a6:	061f      	lsls	r7, r3, #24
 80123a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80123ac:	d402      	bmi.n	80123b4 <_printf_i+0x188>
 80123ae:	065f      	lsls	r7, r3, #25
 80123b0:	bf48      	it	mi
 80123b2:	b2ad      	uxthmi	r5, r5
 80123b4:	6031      	str	r1, [r6, #0]
 80123b6:	07d9      	lsls	r1, r3, #31
 80123b8:	bf44      	itt	mi
 80123ba:	f043 0320 	orrmi.w	r3, r3, #32
 80123be:	6023      	strmi	r3, [r4, #0]
 80123c0:	b11d      	cbz	r5, 80123ca <_printf_i+0x19e>
 80123c2:	2310      	movs	r3, #16
 80123c4:	e7ac      	b.n	8012320 <_printf_i+0xf4>
 80123c6:	4827      	ldr	r0, [pc, #156]	@ (8012464 <_printf_i+0x238>)
 80123c8:	e7e9      	b.n	801239e <_printf_i+0x172>
 80123ca:	6823      	ldr	r3, [r4, #0]
 80123cc:	f023 0320 	bic.w	r3, r3, #32
 80123d0:	6023      	str	r3, [r4, #0]
 80123d2:	e7f6      	b.n	80123c2 <_printf_i+0x196>
 80123d4:	4616      	mov	r6, r2
 80123d6:	e7bd      	b.n	8012354 <_printf_i+0x128>
 80123d8:	6833      	ldr	r3, [r6, #0]
 80123da:	6825      	ldr	r5, [r4, #0]
 80123dc:	6961      	ldr	r1, [r4, #20]
 80123de:	1d18      	adds	r0, r3, #4
 80123e0:	6030      	str	r0, [r6, #0]
 80123e2:	062e      	lsls	r6, r5, #24
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	d501      	bpl.n	80123ec <_printf_i+0x1c0>
 80123e8:	6019      	str	r1, [r3, #0]
 80123ea:	e002      	b.n	80123f2 <_printf_i+0x1c6>
 80123ec:	0668      	lsls	r0, r5, #25
 80123ee:	d5fb      	bpl.n	80123e8 <_printf_i+0x1bc>
 80123f0:	8019      	strh	r1, [r3, #0]
 80123f2:	2300      	movs	r3, #0
 80123f4:	6123      	str	r3, [r4, #16]
 80123f6:	4616      	mov	r6, r2
 80123f8:	e7bc      	b.n	8012374 <_printf_i+0x148>
 80123fa:	6833      	ldr	r3, [r6, #0]
 80123fc:	1d1a      	adds	r2, r3, #4
 80123fe:	6032      	str	r2, [r6, #0]
 8012400:	681e      	ldr	r6, [r3, #0]
 8012402:	6862      	ldr	r2, [r4, #4]
 8012404:	2100      	movs	r1, #0
 8012406:	4630      	mov	r0, r6
 8012408:	f7ed ff8a 	bl	8000320 <memchr>
 801240c:	b108      	cbz	r0, 8012412 <_printf_i+0x1e6>
 801240e:	1b80      	subs	r0, r0, r6
 8012410:	6060      	str	r0, [r4, #4]
 8012412:	6863      	ldr	r3, [r4, #4]
 8012414:	6123      	str	r3, [r4, #16]
 8012416:	2300      	movs	r3, #0
 8012418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801241c:	e7aa      	b.n	8012374 <_printf_i+0x148>
 801241e:	6923      	ldr	r3, [r4, #16]
 8012420:	4632      	mov	r2, r6
 8012422:	4649      	mov	r1, r9
 8012424:	4640      	mov	r0, r8
 8012426:	47d0      	blx	sl
 8012428:	3001      	adds	r0, #1
 801242a:	d0ad      	beq.n	8012388 <_printf_i+0x15c>
 801242c:	6823      	ldr	r3, [r4, #0]
 801242e:	079b      	lsls	r3, r3, #30
 8012430:	d413      	bmi.n	801245a <_printf_i+0x22e>
 8012432:	68e0      	ldr	r0, [r4, #12]
 8012434:	9b03      	ldr	r3, [sp, #12]
 8012436:	4298      	cmp	r0, r3
 8012438:	bfb8      	it	lt
 801243a:	4618      	movlt	r0, r3
 801243c:	e7a6      	b.n	801238c <_printf_i+0x160>
 801243e:	2301      	movs	r3, #1
 8012440:	4632      	mov	r2, r6
 8012442:	4649      	mov	r1, r9
 8012444:	4640      	mov	r0, r8
 8012446:	47d0      	blx	sl
 8012448:	3001      	adds	r0, #1
 801244a:	d09d      	beq.n	8012388 <_printf_i+0x15c>
 801244c:	3501      	adds	r5, #1
 801244e:	68e3      	ldr	r3, [r4, #12]
 8012450:	9903      	ldr	r1, [sp, #12]
 8012452:	1a5b      	subs	r3, r3, r1
 8012454:	42ab      	cmp	r3, r5
 8012456:	dcf2      	bgt.n	801243e <_printf_i+0x212>
 8012458:	e7eb      	b.n	8012432 <_printf_i+0x206>
 801245a:	2500      	movs	r5, #0
 801245c:	f104 0619 	add.w	r6, r4, #25
 8012460:	e7f5      	b.n	801244e <_printf_i+0x222>
 8012462:	bf00      	nop
 8012464:	080128d9 	.word	0x080128d9
 8012468:	080128ea 	.word	0x080128ea

0801246c <memmove>:
 801246c:	4288      	cmp	r0, r1
 801246e:	b510      	push	{r4, lr}
 8012470:	eb01 0402 	add.w	r4, r1, r2
 8012474:	d902      	bls.n	801247c <memmove+0x10>
 8012476:	4284      	cmp	r4, r0
 8012478:	4623      	mov	r3, r4
 801247a:	d807      	bhi.n	801248c <memmove+0x20>
 801247c:	1e43      	subs	r3, r0, #1
 801247e:	42a1      	cmp	r1, r4
 8012480:	d008      	beq.n	8012494 <memmove+0x28>
 8012482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012486:	f803 2f01 	strb.w	r2, [r3, #1]!
 801248a:	e7f8      	b.n	801247e <memmove+0x12>
 801248c:	4402      	add	r2, r0
 801248e:	4601      	mov	r1, r0
 8012490:	428a      	cmp	r2, r1
 8012492:	d100      	bne.n	8012496 <memmove+0x2a>
 8012494:	bd10      	pop	{r4, pc}
 8012496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801249a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801249e:	e7f7      	b.n	8012490 <memmove+0x24>

080124a0 <_sbrk_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4d06      	ldr	r5, [pc, #24]	@ (80124bc <_sbrk_r+0x1c>)
 80124a4:	2300      	movs	r3, #0
 80124a6:	4604      	mov	r4, r0
 80124a8:	4608      	mov	r0, r1
 80124aa:	602b      	str	r3, [r5, #0]
 80124ac:	f7f0 f882 	bl	80025b4 <_sbrk>
 80124b0:	1c43      	adds	r3, r0, #1
 80124b2:	d102      	bne.n	80124ba <_sbrk_r+0x1a>
 80124b4:	682b      	ldr	r3, [r5, #0]
 80124b6:	b103      	cbz	r3, 80124ba <_sbrk_r+0x1a>
 80124b8:	6023      	str	r3, [r4, #0]
 80124ba:	bd38      	pop	{r3, r4, r5, pc}
 80124bc:	24001c00 	.word	0x24001c00

080124c0 <_realloc_r>:
 80124c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c4:	4680      	mov	r8, r0
 80124c6:	4615      	mov	r5, r2
 80124c8:	460c      	mov	r4, r1
 80124ca:	b921      	cbnz	r1, 80124d6 <_realloc_r+0x16>
 80124cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	4611      	mov	r1, r2
 80124d2:	f7ff bc59 	b.w	8011d88 <_malloc_r>
 80124d6:	b92a      	cbnz	r2, 80124e4 <_realloc_r+0x24>
 80124d8:	f7ff fbea 	bl	8011cb0 <_free_r>
 80124dc:	2400      	movs	r4, #0
 80124de:	4620      	mov	r0, r4
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124e4:	f000 f81a 	bl	801251c <_malloc_usable_size_r>
 80124e8:	4285      	cmp	r5, r0
 80124ea:	4606      	mov	r6, r0
 80124ec:	d802      	bhi.n	80124f4 <_realloc_r+0x34>
 80124ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80124f2:	d8f4      	bhi.n	80124de <_realloc_r+0x1e>
 80124f4:	4629      	mov	r1, r5
 80124f6:	4640      	mov	r0, r8
 80124f8:	f7ff fc46 	bl	8011d88 <_malloc_r>
 80124fc:	4607      	mov	r7, r0
 80124fe:	2800      	cmp	r0, #0
 8012500:	d0ec      	beq.n	80124dc <_realloc_r+0x1c>
 8012502:	42b5      	cmp	r5, r6
 8012504:	462a      	mov	r2, r5
 8012506:	4621      	mov	r1, r4
 8012508:	bf28      	it	cs
 801250a:	4632      	movcs	r2, r6
 801250c:	f7ff fbc2 	bl	8011c94 <memcpy>
 8012510:	4621      	mov	r1, r4
 8012512:	4640      	mov	r0, r8
 8012514:	f7ff fbcc 	bl	8011cb0 <_free_r>
 8012518:	463c      	mov	r4, r7
 801251a:	e7e0      	b.n	80124de <_realloc_r+0x1e>

0801251c <_malloc_usable_size_r>:
 801251c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012520:	1f18      	subs	r0, r3, #4
 8012522:	2b00      	cmp	r3, #0
 8012524:	bfbc      	itt	lt
 8012526:	580b      	ldrlt	r3, [r1, r0]
 8012528:	18c0      	addlt	r0, r0, r3
 801252a:	4770      	bx	lr

0801252c <_init>:
 801252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252e:	bf00      	nop
 8012530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012532:	bc08      	pop	{r3}
 8012534:	469e      	mov	lr, r3
 8012536:	4770      	bx	lr

08012538 <_fini>:
 8012538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253a:	bf00      	nop
 801253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801253e:	bc08      	pop	{r3}
 8012540:	469e      	mov	lr, r3
 8012542:	4770      	bx	lr
