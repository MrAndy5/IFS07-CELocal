
FHUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005a24  08005a24  00006a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005a44  08005a44  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005a44  08005a44  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005a58  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005a58  00007194  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe92  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcd  00000000  00000000  00016ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00018aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  00019790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aacd  00000000  00000000  0001a14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e334  00000000  00000000  00044c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116b09  00000000  00000000  00052f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169a54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  00169a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0016d1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08005a0c 	.word	0x08005a0c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08005a0c 	.word	0x08005a0c

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fca2 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f878 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 fa14 	bl	80006cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a4:	f000 f8ea 	bl	800047c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80002a8:	f000 f9b0 	bl	800060c <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80002ac:	f000 f94a 	bl	8000544 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80002b0:	4830      	ldr	r0, [pc, #192]	@ (8000374 <main+0xe0>)
 80002b2:	f002 feaf 	bl	8003014 <HAL_FDCAN_Start>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <main+0x2c>
		Error_Handler();
 80002bc:	f000 fa70 	bl	80007a0 <Error_Handler>
	/*if (HAL_ADC_Start(&hadc1) != HAL_OK){
		Error_Handler();
	}*/

	//HAL_ADC_Start(&hadc1);
	ADC_Select_S1();
 80002c0:	f000 fa1e 	bl	8000700 <ADC_Select_S1>
	ADC_Select_S2();
 80002c4:	f000 fa44 	bl	8000750 <ADC_Select_S2>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 80002c8:	482b      	ldr	r0, [pc, #172]	@ (8000378 <main+0xe4>)
 80002ca:	f001 f973 	bl	80015b4 <HAL_ADC_Start>
		s1_aceleracion = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002ce:	f04f 31ff 	mov.w	r1, #4294967295
 80002d2:	4829      	ldr	r0, [pc, #164]	@ (8000378 <main+0xe4>)
 80002d4:	f001 fa5c 	bl	8001790 <HAL_ADC_PollForConversion>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	4b27      	ldr	r3, [pc, #156]	@ (800037c <main+0xe8>)
 80002de:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80002e0:	4825      	ldr	r0, [pc, #148]	@ (8000378 <main+0xe4>)
 80002e2:	f001 fa21 	bl	8001728 <HAL_ADC_Stop>
		HAL_Delay(10);
 80002e6:	200a      	movs	r0, #10
 80002e8:	f000 fd38 	bl	8000d5c <HAL_Delay>

		HAL_ADC_Start(&hadc2);
 80002ec:	4824      	ldr	r0, [pc, #144]	@ (8000380 <main+0xec>)
 80002ee:	f001 f961 	bl	80015b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80002f2:	f04f 31ff 	mov.w	r1, #4294967295
 80002f6:	4822      	ldr	r0, [pc, #136]	@ (8000380 <main+0xec>)
 80002f8:	f001 fa4a 	bl	8001790 <HAL_ADC_PollForConversion>
		s2_aceleracion = HAL_ADC_GetValue(&hadc2);
 80002fc:	4820      	ldr	r0, [pc, #128]	@ (8000380 <main+0xec>)
 80002fe:	f001 fb1f 	bl	8001940 <HAL_ADC_GetValue>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <main+0xf0>)
 8000308:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc2);
 800030a:	481d      	ldr	r0, [pc, #116]	@ (8000380 <main+0xec>)
 800030c:	f001 fa0c 	bl	8001728 <HAL_ADC_Stop>
		HAL_Delay(10);
 8000310:	200a      	movs	r0, #10
 8000312:	f000 fd23 	bl	8000d5c <HAL_Delay>

		TxHeader.Identifier = 0x100;
 8000316:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <main+0xf4>)
 8000318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800031c:	601a      	str	r2, [r3, #0]
		TxHeader.DataLength = 4;
 800031e:	4b1a      	ldr	r3, [pc, #104]	@ (8000388 <main+0xf4>)
 8000320:	2204      	movs	r2, #4
 8000322:	60da      	str	r2, [r3, #12]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <main+0xf4>)
 8000326:	2200      	movs	r2, #0
 8000328:	605a      	str	r2, [r3, #4]
		TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <main+0xf4>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <main+0xf4>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]

		TxData[0] = (s1_aceleracion >> 8) & 0xFF; // Los 4 bits más significativos
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <main+0xe8>)
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	0a1b      	lsrs	r3, r3, #8
 800033c:	b29b      	uxth	r3, r3
 800033e:	b2da      	uxtb	r2, r3
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <main+0xf8>)
 8000342:	701a      	strb	r2, [r3, #0]
		TxData[1] = s1_aceleracion & 0xFF;        // Los 8 bits menos significativos
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <main+0xe8>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b10      	ldr	r3, [pc, #64]	@ (800038c <main+0xf8>)
 800034c:	705a      	strb	r2, [r3, #1]

		TxData[2] = (s2_aceleracion >> 8) & 0xFF; // Los 4 bits más significativos
 800034e:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <main+0xf0>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	0a1b      	lsrs	r3, r3, #8
 8000354:	b29b      	uxth	r3, r3
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <main+0xf8>)
 800035a:	709a      	strb	r2, [r3, #2]
		TxData[3] = s2_aceleracion & 0xFF;        // Los 8 bits menos significativos
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <main+0xf0>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <main+0xf8>)
 8000364:	70da      	strb	r2, [r3, #3]


		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK) {
 8000366:	4a09      	ldr	r2, [pc, #36]	@ (800038c <main+0xf8>)
 8000368:	4907      	ldr	r1, [pc, #28]	@ (8000388 <main+0xf4>)
 800036a:	4802      	ldr	r0, [pc, #8]	@ (8000374 <main+0xe0>)
 800036c:	f002 fe7a 	bl	8003064 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_ADC_Start(&hadc1);
 8000370:	e7aa      	b.n	80002c8 <main+0x34>
 8000372:	bf00      	nop
 8000374:	200000f8 	.word	0x200000f8
 8000378:	20000028 	.word	0x20000028
 800037c:	20000188 	.word	0x20000188
 8000380:	20000090 	.word	0x20000090
 8000384:	2000018a 	.word	0x2000018a
 8000388:	2000015c 	.word	0x2000015c
 800038c:	20000180 	.word	0x20000180

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b09c      	sub	sp, #112	@ 0x70
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0320 	add.w	r3, r7, #32
 800039a:	2250      	movs	r2, #80	@ 0x50
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f005 fb08 	bl	80059b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 0308 	add.w	r3, r7, #8
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000474 <SystemClock_Config+0xe4>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000474 <SystemClock_Config+0xe4>)
 80003bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003c0:	6113      	str	r3, [r2, #16]
 80003c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000474 <SystemClock_Config+0xe4>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ce:	bf00      	nop
 80003d0:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <SystemClock_Config+0xe4>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	2b08      	cmp	r3, #8
 80003da:	d1f9      	bne.n	80003d0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80003dc:	2312      	movs	r3, #18
 80003de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80003e4:	2308      	movs	r3, #8
 80003e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e8:	2340      	movs	r3, #64	@ 0x40
 80003ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003f2:	2320      	movs	r3, #32
 80003f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000402:	2381      	movs	r3, #129	@ 0x81
 8000404:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000406:	2302      	movs	r3, #2
 8000408:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800040a:	2306      	movs	r3, #6
 800040c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000412:	2308      	movs	r3, #8
 8000414:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000416:	2300      	movs	r3, #0
 8000418:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0320 	add.w	r3, r7, #32
 8000422:	4618      	mov	r0, r3
 8000424:	f003 f89e 	bl	8003564 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800042e:	f000 f9b7 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	231f      	movs	r3, #31
 8000434:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2101      	movs	r1, #1
 8000450:	4618      	mov	r0, r3
 8000452:	f003 fcbf 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800045c:	f000 f9a0 	bl	80007a0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <SystemClock_Config+0xe8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <SystemClock_Config+0xe8>)
 8000466:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	3770      	adds	r7, #112	@ 0x70
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	44020800 	.word	0x44020800
 8000478:	40022000 	.word	0x40022000

0800047c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000482:	463b      	mov	r3, r7
 8000484:	2220      	movs	r2, #32
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f005 fa93 	bl	80059b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800048e:	4b2a      	ldr	r3, [pc, #168]	@ (8000538 <MX_ADC1_Init+0xbc>)
 8000490:	4a2a      	ldr	r2, [pc, #168]	@ (800053c <MX_ADC1_Init+0xc0>)
 8000492:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000494:	4b28      	ldr	r3, [pc, #160]	@ (8000538 <MX_ADC1_Init+0xbc>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800049a:	4b27      	ldr	r3, [pc, #156]	@ (8000538 <MX_ADC1_Init+0xbc>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a0:	4b25      	ldr	r3, [pc, #148]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a6:	4b24      	ldr	r3, [pc, #144]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ac:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004b2:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004be:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d2:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004d8:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f4:	4810      	ldr	r0, [pc, #64]	@ (8000538 <MX_ADC1_Init+0xbc>)
 80004f6:	f000 ff09 	bl	800130c <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000500:	f000 f94e 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <MX_ADC1_Init+0xc4>)
 8000506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2306      	movs	r3, #6
 800050a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000510:	237f      	movs	r3, #127	@ 0x7f
 8000512:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000514:	2304      	movs	r3, #4
 8000516:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <MX_ADC1_Init+0xbc>)
 8000522:	f001 fc53 	bl	8001dcc <HAL_ADC_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800052c:	f000 f938 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000028 	.word	0x20000028
 800053c:	42028000 	.word	0x42028000
 8000540:	3ac04000 	.word	0x3ac04000

08000544 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f005 fa2f 	bl	80059b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000558:	4a2a      	ldr	r2, [pc, #168]	@ (8000604 <MX_ADC2_Init+0xc0>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <MX_ADC2_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000562:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <MX_ADC2_Init+0xbc>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056e:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000576:	2204      	movs	r2, #4
 8000578:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <MX_ADC2_Init+0xbc>)
 800057c:	2200      	movs	r2, #0
 800057e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000582:	2200      	movs	r2, #0
 8000584:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000588:	2201      	movs	r2, #1
 800058a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800058c:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <MX_ADC2_Init+0xbc>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_ADC2_Init+0xbc>)
 8000596:	2200      	movs	r2, #0
 8000598:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <MX_ADC2_Init+0xbc>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc2.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005be:	f000 fea5 	bl	800130c <HAL_ADC_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80005c8:	f000 f8ea 	bl	80007a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_ADC2_Init+0xc4>)
 80005ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d0:	2306      	movs	r3, #6
 80005d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d8:	237f      	movs	r3, #127	@ 0x7f
 80005da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005dc:	2304      	movs	r3, #4
 80005de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_ADC2_Init+0xbc>)
 80005ea:	f001 fbef 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80005f4:	f000 f8d4 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000090 	.word	0x20000090
 8000604:	42028100 	.word	0x42028100
 8000608:	3ef08000 	.word	0x3ef08000

0800060c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000612:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000614:	4a2c      	ldr	r2, [pc, #176]	@ (80006c8 <MX_FDCAN1_Init+0xbc>)
 8000616:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000618:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000624:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800062a:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800062c:	2200      	movs	r2, #0
 800062e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000632:	2200      	movs	r2, #0
 8000634:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000638:	2200      	movs	r2, #0
 800063a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 43;
 800063c:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800063e:	222b      	movs	r2, #43	@ 0x2b
 8000640:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000642:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000644:	2201      	movs	r2, #1
 8000646:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000650:	2202      	movs	r2, #2
 8000652:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000656:	2201      	movs	r2, #1
 8000658:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800065c:	2201      	movs	r2, #1
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000662:	2201      	movs	r2, #1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000668:	2201      	movs	r2, #1
 800066a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800066e:	2201      	movs	r2, #1
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000674:	2201      	movs	r2, #1
 8000676:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 800067a:	2200      	movs	r2, #0
 800067c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 8000680:	f002 fb14 	bl	8002cac <HAL_FDCAN_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800068a:	f000 f889 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000696:	2302      	movs	r3, #2
 8000698:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800069a:	2301      	movs	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_FDCAN1_Init+0xb8>)
 80006ac:	f002 fc58 	bl	8002f60 <HAL_FDCAN_ConfigFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_FDCAN1_Init+0xae>
		Error_Handler();
 80006b6:	f000 f873 	bl	80007a0 <Error_Handler>
	}

  /* USER CODE END FDCAN1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000f8 	.word	0x200000f8
 80006c8:	4000a400 	.word	0x4000a400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_GPIO_Init+0x30>)
 80006d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d8:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <MX_GPIO_Init+0x30>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_GPIO_Init+0x30>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	44020c00 	.word	0x44020c00

08000700 <ADC_Select_S1>:

/* USER CODE BEGIN 4 */

void ADC_Select_S1 (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f005 f951 	bl	80059b4 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <ADC_Select_S1+0x48>)
 8000714:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2306      	movs	r3, #6
 8000718:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071e:	237f      	movs	r3, #127	@ 0x7f
 8000720:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <ADC_Select_S1+0x4c>)
 8000730:	f001 fb4c 	bl	8001dcc <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <ADC_Select_S1+0x3e>
	  {
	    Error_Handler();
 800073a:	f000 f831 	bl	80007a0 <Error_Handler>
	  }
}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	3ac04000 	.word	0x3ac04000
 800074c:	20000028 	.word	0x20000028

08000750 <ADC_Select_S2>:
	    Error_Handler();
	  }
}

void ADC_Select_S2 (void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f005 f929 	bl	80059b4 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <ADC_Select_S2+0x48>)
 8000764:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000766:	2306      	movs	r3, #6
 8000768:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076e:	237f      	movs	r3, #127	@ 0x7f
 8000770:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000772:	2304      	movs	r3, #4
 8000774:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <ADC_Select_S2+0x4c>)
 8000780:	f001 fb24 	bl	8001dcc <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <ADC_Select_S2+0x3e>
	  {
	    Error_Handler();
 800078a:	f000 f809 	bl	80007a0 <Error_Handler>
	  }
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	3ef08000 	.word	0x3ef08000
 800079c:	20000090 	.word	0x20000090

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0c0      	sub	sp, #256	@ 0x100
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	22d0      	movs	r2, #208	@ 0xd0
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 f8e9 	bl	80059b4 <memset>
  if(hadc->Instance==ADC1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a54      	ldr	r2, [pc, #336]	@ (8000938 <HAL_ADC_MspInit+0x17c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d151      	bne.n	8000890 <HAL_ADC_MspInit+0xd4>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80007ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80007f0:	f04f 0300 	mov.w	r3, #0
 80007f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80007f8:	2304      	movs	r3, #4
 80007fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fde6 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 800080e:	f7ff ffc7 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000812:	4b4a      	ldr	r3, [pc, #296]	@ (800093c <HAL_ADC_MspInit+0x180>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a48      	ldr	r2, [pc, #288]	@ (800093c <HAL_ADC_MspInit+0x180>)
 800081a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800081c:	4b47      	ldr	r3, [pc, #284]	@ (800093c <HAL_ADC_MspInit+0x180>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10e      	bne.n	8000842 <HAL_ADC_MspInit+0x86>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000824:	4b46      	ldr	r3, [pc, #280]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 8000826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082a:	4a45      	ldr	r2, [pc, #276]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 800082c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000830:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000834:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 8000836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 8000844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000848:	4a3d      	ldr	r2, [pc, #244]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000852:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 8000854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_INP1
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|S_APPS_1_Pin|S_APPS_2_Pin;
 8000860:	230e      	movs	r3, #14
 8000862:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000876:	4619      	mov	r1, r3
 8000878:	4832      	ldr	r0, [pc, #200]	@ (8000944 <HAL_ADC_MspInit+0x188>)
 800087a:	f002 fd15 	bl	80032a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2025      	movs	r0, #37	@ 0x25
 8000884:	f002 f93a 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000888:	2025      	movs	r0, #37	@ 0x25
 800088a:	f002 f951 	bl	8002b30 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800088e:	e04d      	b.n	800092c <HAL_ADC_MspInit+0x170>
  else if(hadc->Instance==ADC2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a2c      	ldr	r2, [pc, #176]	@ (8000948 <HAL_ADC_MspInit+0x18c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d148      	bne.n	800092c <HAL_ADC_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800089a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800089e:	f04f 0300 	mov.w	r3, #0
 80008a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80008a6:	2304      	movs	r3, #4
 80008a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fd8f 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_ADC_MspInit+0x104>
      Error_Handler();
 80008bc:	f7ff ff70 	bl	80007a0 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <HAL_ADC_MspInit+0x180>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <HAL_ADC_MspInit+0x180>)
 80008c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <HAL_ADC_MspInit+0x180>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10e      	bne.n	80008f0 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 80008d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 80008da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 80008e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 80008f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_ADC_MspInit+0x184>)
 8000902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_APPS_2_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(S_APPS_2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <HAL_ADC_MspInit+0x188>)
 8000928:	f002 fcbe 	bl	80032a8 <HAL_GPIO_Init>
}
 800092c:	bf00      	nop
 800092e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	42028000 	.word	0x42028000
 800093c:	2000018c 	.word	0x2000018c
 8000940:	44020c00 	.word	0x44020c00
 8000944:	42020000 	.word	0x42020000
 8000948:	42028100 	.word	0x42028100

0800094c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0be      	sub	sp, #248	@ 0xf8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	22d0      	movs	r2, #208	@ 0xd0
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f005 f821 	bl	80059b4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a27      	ldr	r2, [pc, #156]	@ (8000a14 <HAL_FDCAN_MspInit+0xc8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d147      	bne.n	8000a0c <HAL_FDCAN_MspInit+0xc0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0304 	mov.w	r3, #4
 8000984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fd1d 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80009a0:	f7ff fefe 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009b0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c8:	4a13      	ldr	r2, [pc, #76]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_FDCAN_MspInit+0xcc>)
 80009d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009fa:	2309      	movs	r3, #9
 80009fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_FDCAN_MspInit+0xd0>)
 8000a08:	f002 fc4e 	bl	80032a8 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	37f8      	adds	r7, #248	@ 0xf8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	4000a400 	.word	0x4000a400
 8000a18:	44020c00 	.word	0x44020c00
 8000a1c:	42020000 	.word	0x42020000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <NMI_Handler+0x4>

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f951 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <ADC1_IRQHandler+0x10>)
 8000a86:	f000 ff69 	bl	800195c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000028 	.word	0x20000028

08000a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9a:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <SystemInit+0xdc>)
 8000a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa0:	4a33      	ldr	r2, [pc, #204]	@ (8000b70 <SystemInit+0xdc>)
 8000aa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000aaa:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <SystemInit+0xe0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <SystemInit+0xe0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <SystemInit+0xe0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000abc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <SystemInit+0xe0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	492c      	ldr	r1, [pc, #176]	@ (8000b74 <SystemInit+0xe0>)
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <SystemInit+0xe4>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <SystemInit+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <SystemInit+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <SystemInit+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <SystemInit+0xe0>)
 8000adc:	4a27      	ldr	r2, [pc, #156]	@ (8000b7c <SystemInit+0xe8>)
 8000ade:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <SystemInit+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <SystemInit+0xe0>)
 8000ae8:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <SystemInit+0xe8>)
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000aec:	4b21      	ldr	r3, [pc, #132]	@ (8000b74 <SystemInit+0xe0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <SystemInit+0xe0>)
 8000af4:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <SystemInit+0xe8>)
 8000af6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <SystemInit+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <SystemInit+0xe0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <SystemInit+0xe0>)
 8000b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <SystemInit+0xe0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <SystemInit+0xdc>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <SystemInit+0xec>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b20:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b28:	d003      	beq.n	8000b32 <SystemInit+0x9e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b30:	d117      	bne.n	8000b62 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0xec>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <SystemInit+0xec>)
 8000b40:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <SystemInit+0xf0>)
 8000b42:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <SystemInit+0xec>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <SystemInit+0xf4>)
 8000b48:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <SystemInit+0xec>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <SystemInit+0xec>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <SystemInit+0xec>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a09      	ldr	r2, [pc, #36]	@ (8000b80 <SystemInit+0xec>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	61d3      	str	r3, [r2, #28]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	44020c00 	.word	0x44020c00
 8000b78:	eae2eae3 	.word	0xeae2eae3
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	40022000 	.word	0x40022000
 8000b84:	08192a3b 	.word	0x08192a3b
 8000b88:	4c5d6e7f 	.word	0x4c5d6e7f

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff ff80 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bba:	f004 ff03 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fb69 	bl	8000294 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	08005a4c 	.word	0x08005a4c
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000194 	.word	0x20000194

08000bdc <ADC2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f001 ff7e 	bl	8002ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bea:	f003 faab 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_Init+0x44>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	490b      	ldr	r1, [pc, #44]	@ (8000c28 <HAL_Init+0x48>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_Init+0x4c>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c04:	2004      	movs	r0, #4
 8000c06:	f001 ffc3 	bl	8002b90 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f810 	bl	8000c30 <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e002      	b.n	8000c20 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff fdc7 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	44020c00 	.word	0x44020c00
 8000c28:	08005a24 	.word	0x08005a24
 8000c2c:	20000000 	.word	0x20000000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c3c:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <HAL_InitTick+0xdc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e05c      	b.n	8000d02 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c48:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <HAL_InitTick+0xe0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d10c      	bne.n	8000c6e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_InitTick+0xe4>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <HAL_InitTick+0xdc>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e037      	b.n	8000cde <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c6e:	f001 ffe7 	bl	8002c40 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c72:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d023      	beq.n	8000cc2 <HAL_InitTick+0x92>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d82d      	bhi.n	8000cdc <HAL_InitTick+0xac>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_InitTick+0x5e>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c8c:	e026      	b.n	8000cdc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_InitTick+0xe4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <HAL_InitTick+0xdc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	60fb      	str	r3, [r7, #12]
        break;
 8000ca6:	e01a      	b.n	8000cde <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_InitTick+0xdc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cb6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	60fb      	str	r3, [r7, #12]
        break;
 8000cc0:	e00d      	b.n	8000cde <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0xdc>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd8:	60fb      	str	r3, [r7, #12]
        break;
 8000cda:	e000      	b.n	8000cde <HAL_InitTick+0xae>
        break;
 8000cdc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f001 ff34 	bl	8002b4c <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e009      	b.n	8000d02 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf6:	f001 ff01 	bl	8002afc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000cfa:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_InitTick+0xe8>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	e000e010 	.word	0xe000e010
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000190 	.word	0x20000190

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000190 	.word	0x20000190

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	609a      	str	r2, [r3, #8]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000e3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	42028000 	.word	0x42028000

08000e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3360      	adds	r3, #96	@ 0x60
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <LL_ADC_SetOffset+0x44>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	03fff000 	.word	0x03fff000

08000ea0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3360      	adds	r3, #96	@ 0x60
 8000eae:	461a      	mov	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3360      	adds	r3, #96	@ 0x60
 8000edc:	461a      	mov	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b087      	sub	sp, #28
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3360      	adds	r3, #96	@ 0x60
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f2c:	bf00      	nop
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3360      	adds	r3, #96	@ 0x60
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b087      	sub	sp, #28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3330      	adds	r3, #48	@ 0x30
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	4413      	add	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	211f      	movs	r1, #31
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0e9b      	lsrs	r3, r3, #26
 8000ff2:	f003 011f 	and.w	r1, r3, #31
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3314      	adds	r3, #20
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	0e5b      	lsrs	r3, r3, #25
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	0d1b      	lsrs	r3, r3, #20
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	2107      	movs	r1, #7
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	0d1b      	lsrs	r3, r3, #20
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	431a      	orrs	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0318 	and.w	r3, r3, #24
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010b4:	40d9      	lsrs	r1, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	400b      	ands	r3, r1
 80010ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010be:	431a      	orrs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	000fffff 	.word	0x000fffff

080010d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 031f 	and.w	r3, r3, #31
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6093      	str	r3, [r2, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001148:	d101      	bne.n	800114e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001170:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001198:	d101      	bne.n	800119e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <LL_ADC_IsEnabled+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_IsEnabled+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d101      	bne.n	800123a <LL_ADC_IsDisableOngoing+0x18>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsDisableOngoing+0x1a>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d101      	bne.n	80012b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d101      	bne.n	80012fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b089      	sub	sp, #36	@ 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e136      	b.n	8001594 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fa41 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fef1 	bl	8001134 <LL_ADC_IsDeepPowerDownEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fed7 	bl	8001110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff0c 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fef0 	bl	800115c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800137c:	4b87      	ldr	r3, [pc, #540]	@ (800159c <HAL_ADC_Init+0x290>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	4a87      	ldr	r2, [pc, #540]	@ (80015a0 <HAL_ADC_Init+0x294>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	3301      	adds	r3, #1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001390:	e002      	b.n	8001398 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff feee 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	f043 0210 	orr.w	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff62 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 80013d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80cf 	bne.w	8001582 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 80cb 	bne.w	8001582 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013f4:	f043 0202 	orr.w	r2, r3, #2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fefb 	bl	80011fc <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d110      	bne.n	800142e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800140c:	4865      	ldr	r0, [pc, #404]	@ (80015a4 <HAL_ADC_Init+0x298>)
 800140e:	f7ff fef5 	bl	80011fc <LL_ADC_IsEnabled>
 8001412:	4604      	mov	r4, r0
 8001414:	4864      	ldr	r0, [pc, #400]	@ (80015a8 <HAL_ADC_Init+0x29c>)
 8001416:	f7ff fef1 	bl	80011fc <LL_ADC_IsEnabled>
 800141a:	4603      	mov	r3, r0
 800141c:	4323      	orrs	r3, r4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4619      	mov	r1, r3
 8001428:	4860      	ldr	r0, [pc, #384]	@ (80015ac <HAL_ADC_Init+0x2a0>)
 800142a:	f7ff fcbb 	bl	8000da4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e5b      	ldrb	r3, [r3, #25]
 8001432:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001438:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800143e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001444:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	3b01      	subs	r3, #1
 8001462:	045b      	lsls	r3, r3, #17
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001476:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <HAL_ADC_Init+0x2a4>)
 800148e:	4013      	ands	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	430b      	orrs	r3, r1
 8001498:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff16 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 80014ba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d13d      	bne.n	800153e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d13a      	bne.n	800153e <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
 80014cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014d4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014e4:	f023 0302 	bic.w	r3, r3, #2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	69b9      	ldr	r1, [r7, #24]
 80014ee:	430b      	orrs	r3, r1
 80014f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d118      	bne.n	800152e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800151e:	430a      	orrs	r2, r1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	e007      	b.n	800153e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10c      	bne.n	8001560 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	f023 010f 	bic.w	r1, r3, #15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	@ 0x30
 800155e:	e007      	b.n	8001570 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020f 	bic.w	r2, r2, #15
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001592:	7ffb      	ldrb	r3, [r7, #31]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3724      	adds	r7, #36	@ 0x24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	053e2d63 	.word	0x053e2d63
 80015a4:	42028000 	.word	0x42028000
 80015a8:	42028100 	.word	0x42028100
 80015ac:	42028300 	.word	0x42028300
 80015b0:	fff04007 	.word	0xfff04007

080015b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015bc:	4857      	ldr	r0, [pc, #348]	@ (800171c <HAL_ADC_Start+0x168>)
 80015be:	f7ff fd8b 	bl	80010d8 <LL_ADC_GetMultimode>
 80015c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe65 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 809c 	bne.w	800170e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_Start+0x30>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e097      	b.n	8001714 <HAL_ADC_Start+0x160>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f001 f8b9 	bl	8002764 <ADC_Enable>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 8083 	bne.w	8001704 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a42      	ldr	r2, [pc, #264]	@ (8001720 <HAL_ADC_Start+0x16c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d002      	beq.n	8001622 <HAL_ADC_Start+0x6e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e000      	b.n	8001624 <HAL_ADC_Start+0x70>
 8001622:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <HAL_ADC_Start+0x170>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4293      	cmp	r3, r2
 800162a:	d002      	beq.n	8001632 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800164a:	d106      	bne.n	800165a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	f023 0206 	bic.w	r2, r3, #6
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001658:	e002      	b.n	8001660 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	221c      	movs	r2, #28
 8001666:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <HAL_ADC_Start+0x16c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d002      	beq.n	8001680 <HAL_ADC_Start+0xcc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e000      	b.n	8001682 <HAL_ADC_Start+0xce>
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_ADC_Start+0x170>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	4293      	cmp	r3, r2
 8001688:	d008      	beq.n	800169c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d002      	beq.n	800169c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d114      	bne.n	80016c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdc2 	bl	8001248 <LL_ADC_REG_StartConversion>
 80016c4:	e025      	b.n	8001712 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <HAL_ADC_Start+0x16c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d002      	beq.n	80016e2 <HAL_ADC_Start+0x12e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	e000      	b.n	80016e4 <HAL_ADC_Start+0x130>
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_ADC_Start+0x170>)
 80016e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00f      	beq.n	8001712 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	659a      	str	r2, [r3, #88]	@ 0x58
 8001702:	e006      	b.n	8001712 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800170c:	e001      	b.n	8001712 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800170e:	2302      	movs	r3, #2
 8001710:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001712:	7dfb      	ldrb	r3, [r7, #23]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	42028300 	.word	0x42028300
 8001720:	42028100 	.word	0x42028100
 8001724:	42028000 	.word	0x42028000

08001728 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_Stop+0x16>
 800173a:	2302      	movs	r3, #2
 800173c:	e023      	b.n	8001786 <HAL_ADC_Stop+0x5e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001746:	2103      	movs	r1, #3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 ff4f 	bl	80025ec <ADC_ConversionStop>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f001 f885 	bl	8002868 <ADC_Disable>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800179a:	4866      	ldr	r0, [pc, #408]	@ (8001934 <HAL_ADC_PollForConversion+0x1a4>)
 800179c:	f7ff fc9c 	bl	80010d8 <LL_ADC_GetMultimode>
 80017a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d102      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017aa:	2308      	movs	r3, #8
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e02a      	b.n	8001806 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d111      	bne.n	80017e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0a4      	b.n	800192a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017e0:	2304      	movs	r3, #4
 80017e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017e4:	e00f      	b.n	8001806 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017e6:	4853      	ldr	r0, [pc, #332]	@ (8001934 <HAL_ADC_PollForConversion+0x1a4>)
 80017e8:	f7ff fc84 	bl	80010f4 <LL_ADC_GetMultiDMATransfer>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	f043 0220 	orr.w	r2, r3, #32
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e093      	b.n	800192a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001802:	2304      	movs	r3, #4
 8001804:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001806:	f7ff fa9d 	bl	8000d44 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800180c:	e021      	b.n	8001852 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d01d      	beq.n	8001852 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001816:	f7ff fa95 	bl	8000d44 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <HAL_ADC_PollForConversion+0x9c>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d112      	bne.n	8001852 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	f043 0204 	orr.w	r2, r3, #4
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e06b      	b.n	800192a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0d6      	beq.n	800180e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb8f 	bl	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01c      	beq.n	80018b6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7e5b      	ldrb	r3, [r3, #25]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d118      	bne.n	80018b6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b08      	cmp	r3, #8
 8001890:	d111      	bne.n	80018b6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d105      	bne.n	80018b6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001938 <HAL_ADC_PollForConversion+0x1a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d002      	beq.n	80018c6 <HAL_ADC_PollForConversion+0x136>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e000      	b.n	80018c8 <HAL_ADC_PollForConversion+0x138>
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_ADC_PollForConversion+0x1ac>)
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d008      	beq.n	80018e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b09      	cmp	r3, #9
 80018e0:	d104      	bne.n	80018ec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e00c      	b.n	8001906 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a11      	ldr	r2, [pc, #68]	@ (8001938 <HAL_ADC_PollForConversion+0x1a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d002      	beq.n	80018fc <HAL_ADC_PollForConversion+0x16c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e000      	b.n	80018fe <HAL_ADC_PollForConversion+0x16e>
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_ADC_PollForConversion+0x1ac>)
 80018fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d104      	bne.n	8001916 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2208      	movs	r2, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e008      	b.n	8001928 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	220c      	movs	r2, #12
 8001926:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	42028300 	.word	0x42028300
 8001938:	42028100 	.word	0x42028100
 800193c:	42028000 	.word	0x42028000

08001940 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001978:	4882      	ldr	r0, [pc, #520]	@ (8001b84 <HAL_ADC_IRQHandler+0x228>)
 800197a:	f7ff fbad 	bl	80010d8 <LL_ADC_GetMultimode>
 800197e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d017      	beq.n	80019ba <HAL_ADC_IRQHandler+0x5e>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d012      	beq.n	80019ba <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 ffe2 	bl	8002976 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_IRQHandler+0x72>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8083 	beq.w	8001ae0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d07d      	beq.n	8001ae0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fac7 	bl	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d062      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5d      	ldr	r2, [pc, #372]	@ (8001b88 <HAL_ADC_IRQHandler+0x22c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d002      	beq.n	8001a1c <HAL_ADC_IRQHandler+0xc0>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_IRQHandler+0xc2>
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <HAL_ADC_IRQHandler+0x230>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d008      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d002      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	d104      	bne.n	8001a42 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	e00c      	b.n	8001a5c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a50      	ldr	r2, [pc, #320]	@ (8001b88 <HAL_ADC_IRQHandler+0x22c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d002      	beq.n	8001a52 <HAL_ADC_IRQHandler+0xf6>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e000      	b.n	8001a54 <HAL_ADC_IRQHandler+0xf8>
 8001a52:	4b4e      	ldr	r3, [pc, #312]	@ (8001b8c <HAL_ADC_IRQHandler+0x230>)
 8001a54:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d135      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d12e      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fc0d 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11a      	bne.n	8001aba <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020c 	bic.w	r2, r2, #12
 8001a92:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d112      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ab8:	e00b      	b.n	8001ad2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f043 0210 	orr.w	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f95c 	bl	8001d90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	220c      	movs	r2, #12
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x198>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 809f 	beq.w	8001c3e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8099 	beq.w	8001c3e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fa72 	bl	8001012 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b2e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa2d 	bl	8000f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b3a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_ADC_IRQHandler+0x22c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x1f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_IRQHandler+0x1f2>
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_ADC_IRQHandler+0x230>)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d008      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d002      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d104      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	e013      	b.n	8001b9a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_ADC_IRQHandler+0x22c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_ADC_IRQHandler+0x234>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_ADC_IRQHandler+0x236>
 8001b82:	bf00      	nop
 8001b84:	42028300 	.word	0x42028300
 8001b88:	42028100 	.word	0x42028100
 8001b8c:	42028000 	.word	0x42028000
 8001b90:	4b7d      	ldr	r3, [pc, #500]	@ (8001d88 <HAL_ADC_IRQHandler+0x42c>)
 8001b92:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d047      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_ADC_IRQHandler+0x25e>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03f      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d13a      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc4:	2b40      	cmp	r3, #64	@ 0x40
 8001bc6:	d133      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12e      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb85 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d11a      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bf0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d112      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f043 0201 	orr.w	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c16:	e00b      	b.n	8001c30 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fe78 	bl	8002926 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2260      	movs	r2, #96	@ 0x60
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d011      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x310>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8a0 	bl	8001da4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2280      	movs	r2, #128	@ 0x80
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x340>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fe5e 	bl	800294e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d012      	beq.n	8001ccc <HAL_ADC_IRQHandler+0x370>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fe50 	bl	8002962 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x3e8>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d031      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cec:	e014      	b.n	8001d18 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cf4:	4825      	ldr	r0, [pc, #148]	@ (8001d8c <HAL_ADC_IRQHandler+0x430>)
 8001cf6:	f7ff f9fd 	bl	80010f4 <LL_ADC_GetMultiDMATransfer>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d00:	2301      	movs	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d04:	e008      	b.n	8001d18 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10e      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f83e 	bl	8001db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2210      	movs	r2, #16
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d018      	beq.n	8001d80 <HAL_ADC_IRQHandler+0x424>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	f043 0208 	orr.w	r2, r3, #8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d78:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fddd 	bl	800293a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	42028000 	.word	0x42028000
 8001d8c:	42028300 	.word	0x42028300

08001d90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0b6      	sub	sp, #216	@ 0xd8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x22>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e3e6      	b.n	80025bc <HAL_ADC_ConfigChannel+0x7f0>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa4c 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 83cb 	bne.w	800259e <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d009      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4ab0      	ldr	r2, [pc, #704]	@ (80020d8 <HAL_ADC_ConfigChannel+0x30c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d109      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x62>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4aaf      	ldr	r2, [pc, #700]	@ (80020dc <HAL_ADC_ConfigChannel+0x310>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d104      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f801 	bl	8000e30 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff f8bd 	bl	8000fba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fa27 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001e4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fa47 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001e58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 81dd 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 81d8 	bne.w	8002220 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e78:	d10f      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7ff f8d7 	bl	8001038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f86b 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e98:	e00e      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f7ff f8c6 	bl	8001038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f85b 	bl	8000f6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d022      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eea:	f7fe ffb5 	bl	8000e58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff f801 	bl	8000f02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x14a>
 8001f10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x14c>
 8001f16:	2300      	movs	r3, #0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff f80d 	bl	8000f38 <LL_ADC_SetOffsetSaturation>
 8001f1e:	e17f      	b.n	8002220 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ffba 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x180>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ffaf 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	e01e      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1be>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ffa4 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8001f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8001f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e004      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8001f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x1d6>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x208>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8001fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe ff73 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ff57 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x246>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe ff4c 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x284>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ff41 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002034:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8002044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x29c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	e018      	b.n	800209a <HAL_ADC_ConfigChannel+0x2ce>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800207c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e004      	b.n	800209a <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800209a:	429a      	cmp	r2, r3
 800209c:	d106      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe ff10 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fef4 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x314>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2102      	movs	r1, #2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fee9 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	e022      	b.n	800211e <HAL_ADC_ConfigChannel+0x352>
 80020d8:	04300002 	.word	0x04300002
 80020dc:	407f0000 	.word	0x407f0000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2102      	movs	r1, #2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe feda 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80020fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e004      	b.n	800211c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002112:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x36a>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0e9b      	lsrs	r3, r3, #26
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	e016      	b.n	8002164 <HAL_ADC_ConfigChannel+0x398>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800214a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800214e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 800215a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	2102      	movs	r1, #2
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe feab 	bl	8000ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2103      	movs	r1, #3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fe8f 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x3d6>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2103      	movs	r1, #3
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fe84 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	0e9b      	lsrs	r3, r3, #26
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	e017      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x406>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2103      	movs	r1, #3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fe79 	bl	8000ea0 <LL_ADC_GetOffsetChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x41e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	e011      	b.n	800220e <HAL_ADC_ConfigChannel+0x442>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80021f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80021fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8002206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800220e:	429a      	cmp	r2, r3
 8002210:	d106      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	2103      	movs	r1, #3
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fe56 	bl	8000ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe ffe9 	bl	80011fc <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 813f 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	461a      	mov	r2, r3
 8002240:	f7fe ff26 	bl	8001090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a8e      	ldr	r2, [pc, #568]	@ (8002484 <HAL_ADC_ConfigChannel+0x6b8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f040 8130 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x4ac>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	3301      	adds	r3, #1
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2b09      	cmp	r3, #9
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e019      	b.n	80022ac <HAL_ADC_ConfigChannel+0x4e0>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002288:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800228a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e003      	b.n	800229c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8002294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	bf94      	ite	ls
 80022a6:	2301      	movls	r3, #1
 80022a8:	2300      	movhi	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d079      	beq.n	80023a4 <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x500>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	3301      	adds	r3, #1
 80022c4:	069b      	lsls	r3, r3, #26
 80022c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ca:	e015      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x52c>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 80022e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	069b      	lsls	r3, r3, #26
 80022f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x54c>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	e017      	b.n	8002348 <HAL_ADC_ConfigChannel+0x57c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800232a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e003      	b.n	800233c <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	ea42 0103 	orr.w	r1, r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_ADC_ConfigChannel+0x5a2>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	051b      	lsls	r3, r3, #20
 800236c:	e018      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x5d4>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800237c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e003      	b.n	8002392 <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 800238a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a0:	430b      	orrs	r3, r1
 80023a2:	e080      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x5f4>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	069b      	lsls	r3, r3, #26
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023be:	e015      	b.n	80023ec <HAL_ADC_ConfigChannel+0x620>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	e003      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_ConfigChannel+0x640>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x670>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	61fb      	str	r3, [r7, #28]
  return result;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10d      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x69c>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	3b1e      	subs	r3, #30
 8002460:	051b      	lsls	r3, r3, #20
 8002462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002466:	e01d      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x6d8>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	613b      	str	r3, [r7, #16]
  return result;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e005      	b.n	8002490 <HAL_ADC_ConfigChannel+0x6c4>
 8002484:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	051b      	lsls	r3, r3, #20
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fdc4 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b43      	ldr	r3, [pc, #268]	@ (80025c4 <HAL_ADC_ConfigChannel+0x7f8>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d079      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024bc:	4842      	ldr	r0, [pc, #264]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7fc>)
 80024be:	f7fe fc97 	bl	8000df0 <LL_ADC_GetCommonPathInternalCh>
 80024c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a40      	ldr	r2, [pc, #256]	@ (80025cc <HAL_ADC_ConfigChannel+0x800>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d124      	bne.n	800251a <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11e      	bne.n	800251a <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a3b      	ldr	r2, [pc, #236]	@ (80025d0 <HAL_ADC_ConfigChannel+0x804>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d164      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024ee:	4619      	mov	r1, r3
 80024f0:	4835      	ldr	r0, [pc, #212]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7fc>)
 80024f2:	f7fe fc6a 	bl	8000dca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <HAL_ADC_ConfigChannel+0x808>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	4a36      	ldr	r2, [pc, #216]	@ (80025d8 <HAL_ADC_ConfigChannel+0x80c>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	3301      	adds	r3, #1
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800250a:	e002      	b.n	8002512 <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3b01      	subs	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002518:	e04a      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2f      	ldr	r2, [pc, #188]	@ (80025dc <HAL_ADC_ConfigChannel+0x810>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d113      	bne.n	800254c <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2a      	ldr	r2, [pc, #168]	@ (80025e0 <HAL_ADC_ConfigChannel+0x814>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d13a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002542:	4619      	mov	r1, r3
 8002544:	4820      	ldr	r0, [pc, #128]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002546:	f7fe fc40 	bl	8000dca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800254a:	e031      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a24      	ldr	r2, [pc, #144]	@ (80025e4 <HAL_ADC_ConfigChannel+0x818>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d113      	bne.n	800257e <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800255a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1a      	ldr	r2, [pc, #104]	@ (80025d0 <HAL_ADC_ConfigChannel+0x804>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d121      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800256c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002574:	4619      	mov	r1, r3
 8002576:	4814      	ldr	r0, [pc, #80]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002578:	f7fe fc27 	bl	8000dca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800257c:	e018      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_ADC_ConfigChannel+0x81c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d113      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_ADC_ConfigChannel+0x804>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fc38 	bl	8000e0c <LL_ADC_EnableChannelVDDcore>
 800259c:	e008      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80025b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025bc:	4618      	mov	r0, r3
 80025be:	37d8      	adds	r7, #216	@ 0xd8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	80080000 	.word	0x80080000
 80025c8:	42028300 	.word	0x42028300
 80025cc:	c3210000 	.word	0xc3210000
 80025d0:	42028000 	.word	0x42028000
 80025d4:	20000000 	.word	0x20000000
 80025d8:	053e2d63 	.word	0x053e2d63
 80025dc:	43290000 	.word	0x43290000
 80025e0:	42028100 	.word	0x42028100
 80025e4:	c7520000 	.word	0xc7520000
 80025e8:	475a0000 	.word	0x475a0000

080025ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fe48 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8002608:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fe69 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8002614:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8098 	beq.w	8002754 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d02a      	beq.n	8002688 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7e5b      	ldrb	r3, [r3, #25]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d126      	bne.n	8002688 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7e1b      	ldrb	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d122      	bne.n	8002688 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002646:	e014      	b.n	8002672 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4a45      	ldr	r2, [pc, #276]	@ (8002760 <ADC_ConversionStop+0x174>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d90d      	bls.n	800266c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f043 0210 	orr.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e074      	b.n	8002756 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b40      	cmp	r3, #64	@ 0x40
 800267e:	d1e3      	bne.n	8002648 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2240      	movs	r2, #64	@ 0x40
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d014      	beq.n	80026b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fe00 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fdbd 	bl	8001222 <LL_ADC_IsDisableOngoing>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fddc 	bl	8001270 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d014      	beq.n	80026e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fe0f 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fda5 	bl	8001222 <LL_ADC_IsDisableOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fdeb 	bl	80012be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d005      	beq.n	80026fa <ADC_ConversionStop+0x10e>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d105      	bne.n	8002700 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026f4:	230c      	movs	r3, #12
 80026f6:	617b      	str	r3, [r7, #20]
        break;
 80026f8:	e005      	b.n	8002706 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026fa:	2308      	movs	r3, #8
 80026fc:	617b      	str	r3, [r7, #20]
        break;
 80026fe:	e002      	b.n	8002706 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002700:	2304      	movs	r3, #4
 8002702:	617b      	str	r3, [r7, #20]
        break;
 8002704:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002706:	f7fe fb1d 	bl	8000d44 <HAL_GetTick>
 800270a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800270c:	e01b      	b.n	8002746 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800270e:	f7fe fb19 	bl	8000d44 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b05      	cmp	r3, #5
 800271a:	d914      	bls.n	8002746 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1dc      	bne.n	800270e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	a33fffff 	.word	0xa33fffff

08002764 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fd41 	bl	80011fc <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d166      	bne.n	800284e <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <ADC_Enable+0xf4>)
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	f043 0210 	orr.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e052      	b.n	8002850 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fcfc 	bl	80011ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027b4:	4829      	ldr	r0, [pc, #164]	@ (800285c <ADC_Enable+0xf8>)
 80027b6:	f7fe fb1b 	bl	8000df0 <LL_ADC_GetCommonPathInternalCh>
 80027ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <ADC_Enable+0xfc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <ADC_Enable+0x100>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027d8:	e002      	b.n	80027e0 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027e6:	f7fe faad 	bl	8000d44 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ec:	e028      	b.n	8002840 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fd02 	bl	80011fc <LL_ADC_IsEnabled>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fcd2 	bl	80011ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002808:	f7fe fa9c 	bl	8000d44 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d914      	bls.n	8002840 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00d      	beq.n	8002840 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	f043 0210 	orr.w	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e007      	b.n	8002850 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d1cf      	bne.n	80027ee <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	8000003f 	.word	0x8000003f
 800285c:	42028300 	.word	0x42028300
 8002860:	20000000 	.word	0x20000000
 8002864:	053e2d63 	.word	0x053e2d63

08002868 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fcd4 	bl	8001222 <LL_ADC_IsDisableOngoing>
 800287a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fcbb 	bl	80011fc <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d047      	beq.n	800291c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d144      	bne.n	800291c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030d 	and.w	r3, r3, #13
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10c      	bne.n	80028ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fc95 	bl	80011d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2203      	movs	r2, #3
 80028b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fa47 	bl	8000d44 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028b8:	e029      	b.n	800290e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e023      	b.n	800291e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028d6:	f7fe fa35 	bl	8000d44 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d914      	bls.n	800290e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e007      	b.n	800291e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1dc      	bne.n	80028d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff4c 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0a:	f7ff ff63 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f7ff ffb3 	bl	8002a80 <NVIC_EncodePriority>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff82 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff56 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00d      	b.n	8002b7e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <HAL_SYSTICK_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_SYSTICK_Config+0x40>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_SYSTICK_Config+0x40>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <HAL_SYSTICK_Config+0x40>)
 8002b76:	f043 0303 	orr.w	r3, r3, #3
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d844      	bhi.n	8002c28 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bc7 	.word	0x08002bc7
 8002ba8:	08002be5 	.word	0x08002be5
 8002bac:	08002c07 	.word	0x08002c07
 8002bb0:	08002c29 	.word	0x08002c29
 8002bb4:	08002bb9 	.word	0x08002bb9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6013      	str	r3, [r2, #0]
      break;
 8002bc4:	e031      	b.n	8002c2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bd8:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bda:	f023 030c 	bic.w	r3, r3, #12
 8002bde:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002be2:	e022      	b.n	8002c2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bf6:	f023 030c 	bic.w	r3, r3, #12
 8002bfa:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002c04:	e011      	b.n	8002c2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c18:	f023 030c 	bic.w	r3, r3, #12
 8002c1c:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
 8002c22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002c26:	e000      	b.n	8002c2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002c28:	bf00      	nop
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010
 8002c3c:	44020c00 	.word	0x44020c00

08002c40 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002c46:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002c52:	2304      	movs	r3, #4
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e01e      	b.n	8002c96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002c5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d00f      	beq.n	8002c8a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d80f      	bhi.n	8002c90 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d003      	beq.n	8002c84 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002c7c:	e008      	b.n	8002c90 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
        break;
 8002c82:	e008      	b.n	8002c96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002c84:	2301      	movs	r3, #1
 8002c86:	607b      	str	r3, [r7, #4]
        break;
 8002c88:	e005      	b.n	8002c96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	607b      	str	r3, [r7, #4]
        break;
 8002c8e:	e002      	b.n	8002c96 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
        break;
 8002c94:	bf00      	nop
    }
  }
  return systick_source;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000e010 	.word	0xe000e010
 8002ca8:	44020c00 	.word	0x44020c00

08002cac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e147      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fd fe3a 	bl	800094c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7fe f82c 	bl	8000d44 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cee:	e012      	b.n	8002d16 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cf0:	f7fe f828 	bl	8000d44 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b0a      	cmp	r3, #10
 8002cfc:	d90b      	bls.n	8002d16 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e11b      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d0e5      	beq.n	8002cf0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d34:	f7fe f806 	bl	8000d44 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d3a:	e012      	b.n	8002d62 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d3c:	f7fe f802 	bl	8000d44 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b0a      	cmp	r3, #10
 8002d48:	d90b      	bls.n	8002d62 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0f5      	b.n	8002f4e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0e5      	beq.n	8002d3c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0202 	orr.w	r2, r2, #2
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a74      	ldr	r2, [pc, #464]	@ (8002f58 <HAL_FDCAN_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d103      	bne.n	8002d92 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d8a:	4a74      	ldr	r2, [pc, #464]	@ (8002f5c <HAL_FDCAN_Init+0x2b0>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7c1b      	ldrb	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da8:	619a      	str	r2, [r3, #24]
 8002daa:	e007      	b.n	8002dbc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7c5b      	ldrb	r3, [r3, #17]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dd2:	619a      	str	r2, [r3, #24]
 8002dd4:	e007      	b.n	8002de6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002de4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7c9b      	ldrb	r3, [r3, #18]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d108      	bne.n	8002e00 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dfc:	619a      	str	r2, [r3, #24]
 8002dfe:	e007      	b.n	8002e10 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e0e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002e34:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0210 	bic.w	r2, r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0204 	orr.w	r2, r2, #4
 8002e5c:	619a      	str	r2, [r3, #24]
 8002e5e:	e02c      	b.n	8002eba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d028      	beq.n	8002eba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d01c      	beq.n	8002eaa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e7e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0210 	orr.w	r2, r2, #16
 8002e8e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d110      	bne.n	8002eba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	619a      	str	r2, [r3, #24]
 8002ea8:	e007      	b.n	8002eba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ed2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ee2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ee4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eee:	d115      	bne.n	8002f1c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	3b01      	subs	r3, #1
 8002efc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002efe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	3b01      	subs	r3, #1
 8002f06:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002f18:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002f1a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8da 	bl	80030ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	4000a400 	.word	0x4000a400
 8002f5c:	4000a500 	.word	0x4000a500

08002f60 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f70:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d002      	beq.n	8002f7e <HAL_FDCAN_ConfigFilter+0x1e>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d13d      	bne.n	8002ffa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d119      	bne.n	8002fba <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002f92:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002f9a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e01d      	b.n	8002ff6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	075a      	lsls	r2, r3, #29
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	079a      	lsls	r2, r3, #30
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3304      	adds	r3, #4
 8002fee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e006      	b.n	8003008 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d110      	bne.n	800304a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e006      	b.n	8003058 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d12c      	bne.n	80030d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003090:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e023      	b.n	80030e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f87c 	bl	80031b0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80030c8:	2201      	movs	r2, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e006      	b.n	80030e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	f043 0208 	orr.w	r2, r3, #8
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80030f4:	4b2c      	ldr	r3, [pc, #176]	@ (80031a8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80030f6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	@ (80031ac <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d103      	bne.n	800310a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003108:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003118:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800313e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003146:	061a      	lsls	r2, r3, #24
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e005      	b.n	800318c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3304      	adds	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3f3      	bcc.n	8003180 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	4000ac00 	.word	0x4000ac00
 80031ac:	4000a800 	.word	0x4000a800

080031b0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80031ce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e00a      	b.n	80031f2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80031e4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80031ea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80031ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031f0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80031fc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003202:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003208:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	440b      	add	r3, r1
 8003224:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	3304      	adds	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	3304      	adds	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e020      	b.n	8003286 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3303      	adds	r3, #3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3302      	adds	r3, #2
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	440b      	add	r3, r1
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800325c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	440b      	add	r3, r1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800326a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	440a      	add	r2, r1
 8003272:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003274:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3304      	adds	r3, #4
 800327e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	3304      	adds	r3, #4
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4a06      	ldr	r2, [pc, #24]	@ (80032a4 <FDCAN_CopyMessageToRAM+0xf4>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
 800328e:	461a      	mov	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4293      	cmp	r3, r2
 8003294:	d3d6      	bcc.n	8003244 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	3724      	adds	r7, #36	@ 0x24
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	08005a34 	.word	0x08005a34

080032a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032b6:	e142      	b.n	800353e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8134 	beq.w	8003538 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x38>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d125      	bne.n	800332c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4013      	ands	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3208      	adds	r2, #8
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d00b      	beq.n	8003380 <HAL_GPIO_Init+0xd8>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003374:	2b11      	cmp	r3, #17
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b12      	cmp	r3, #18
 800337e:	d130      	bne.n	80033e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033b6:	2201      	movs	r2, #1
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4013      	ands	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 0201 	and.w	r2, r3, #1
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d109      	bne.n	8003402 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d11b      	bne.n	8003432 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d017      	beq.n	8003432 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4013      	ands	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d07c      	beq.n	8003538 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800343e:	4a47      	ldr	r2, [pc, #284]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	3318      	adds	r3, #24
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4013      	ands	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	0a9a      	lsrs	r2, r3, #10
 8003466:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_GPIO_Init+0x2b8>)
 8003468:	4013      	ands	r3, r2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	f002 0203 	and.w	r2, r2, #3
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	4093      	lsls	r3, r2
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800347a:	4938      	ldr	r1, [pc, #224]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3318      	adds	r3, #24
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4013      	ands	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80034ac:	4a2b      	ldr	r2, [pc, #172]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034b2:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4013      	ands	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80034d6:	4a21      	ldr	r2, [pc, #132]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80034dc:	4b1f      	ldr	r3, [pc, #124]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 80034de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4013      	ands	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003502:	4a16      	ldr	r2, [pc, #88]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800350a:	4b14      	ldr	r3, [pc, #80]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003510:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43db      	mvns	r3, r3
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <HAL_GPIO_Init+0x2b4>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3301      	adds	r3, #1
 800353c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f aeb5 	bne.w	80032b8 <HAL_GPIO_Init+0x10>
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	44022000 	.word	0x44022000
 8003560:	002f7f7f 	.word	0x002f7f7f

08003564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f000 bc28 	b.w	8003dc8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003578:	4b94      	ldr	r3, [pc, #592]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 0318 	and.w	r3, r3, #24
 8003580:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003582:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05b      	beq.n	8003650 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x46>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2b18      	cmp	r3, #24
 80035a2:	d114      	bne.n	80035ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d111      	bne.n	80035ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f000 bc08 	b.w	8003dc8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80035b8:	4b84      	ldr	r3, [pc, #528]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	4981      	ldr	r1, [pc, #516]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80035cc:	e040      	b.n	8003650 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d023      	beq.n	800361e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035d6:	4b7d      	ldr	r3, [pc, #500]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7c      	ldr	r2, [pc, #496]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd fbaf 	bl	8000d44 <HAL_GetTick>
 80035e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80035ea:	f7fd fbab 	bl	8000d44 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e3e5      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80035fc:	4b73      	ldr	r3, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003608:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	496d      	ldr	r1, [pc, #436]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003618:	4313      	orrs	r3, r2
 800361a:	618b      	str	r3, [r1, #24]
 800361c:	e018      	b.n	8003650 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800361e:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd fb8b 	bl	8000d44 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003632:	f7fd fb87 	bl	8000d44 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e3c1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003644:	4b61      	ldr	r3, [pc, #388]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a0 	beq.w	800379e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x10c>
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b18      	cmp	r3, #24
 8003668:	d109      	bne.n	800367e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 8092 	bne.w	800379e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e3a4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x132>
 8003688:	4b50      	ldr	r3, [pc, #320]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a4f      	ldr	r2, [pc, #316]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e058      	b.n	8003748 <HAL_RCC_OscConfig+0x1e4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d112      	bne.n	80036c4 <HAL_RCC_OscConfig+0x160>
 800369e:	4b4b      	ldr	r3, [pc, #300]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4a      	ldr	r2, [pc, #296]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a47      	ldr	r2, [pc, #284]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b45      	ldr	r3, [pc, #276]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a44      	ldr	r2, [pc, #272]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e041      	b.n	8003748 <HAL_RCC_OscConfig+0x1e4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x190>
 80036ce:	4b3f      	ldr	r3, [pc, #252]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a3e      	ldr	r2, [pc, #248]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b3c      	ldr	r3, [pc, #240]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3b      	ldr	r2, [pc, #236]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b39      	ldr	r3, [pc, #228]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a38      	ldr	r2, [pc, #224]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e029      	b.n	8003748 <HAL_RCC_OscConfig+0x1e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x1c0>
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e011      	b.n	8003748 <HAL_RCC_OscConfig+0x1e4>
 8003724:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a28      	ldr	r2, [pc, #160]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b26      	ldr	r3, [pc, #152]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b23      	ldr	r3, [pc, #140]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003742:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd faf8 	bl	8000d44 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003758:	f7fd faf4 	bl	8000d44 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e32e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376a:	4b18      	ldr	r3, [pc, #96]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x1f4>
 8003776:	e012      	b.n	800379e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fae4 	bl	8000d44 <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003780:	f7fd fae0 	bl	8000d44 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e31a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003792:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <HAL_RCC_OscConfig+0x268>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 809a 	beq.w	80038e0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x25a>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b18      	cmp	r3, #24
 80037b6:	d149      	bne.n	800384c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d146      	bne.n	800384c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e2fe      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
 80037ca:	bf00      	nop
 80037cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80037d6:	4b9a      	ldr	r3, [pc, #616]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0218 	and.w	r2, r3, #24
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d014      	beq.n	8003810 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80037e6:	4b96      	ldr	r3, [pc, #600]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0218 	bic.w	r2, r3, #24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4993      	ldr	r1, [pc, #588]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80037f8:	f000 fdd0 	bl	800439c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037fc:	4b91      	ldr	r3, [pc, #580]	@ (8003a44 <HAL_RCC_OscConfig+0x4e0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fa15 	bl	8000c30 <HAL_InitTick>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e2db      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd fa98 	bl	8000d44 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003818:	f7fd fa94 	bl	8000d44 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e2ce      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003836:	4b82      	ldr	r3, [pc, #520]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	497e      	ldr	r1, [pc, #504]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800384a:	e049      	b.n	80038e0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02c      	beq.n	80038ae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003854:	4b7a      	ldr	r3, [pc, #488]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 0218 	bic.w	r2, r3, #24
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4977      	ldr	r1, [pc, #476]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003866:	4b76      	ldr	r3, [pc, #472]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a75      	ldr	r2, [pc, #468]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fa67 	bl	8000d44 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800387a:	f7fd fa63 	bl	8000d44 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e29d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003898:	4b69      	ldr	r3, [pc, #420]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	4966      	ldr	r1, [pc, #408]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	610b      	str	r3, [r1, #16]
 80038ac:	e018      	b.n	80038e0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b64      	ldr	r3, [pc, #400]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a63      	ldr	r2, [pc, #396]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fa43 	bl	8000d44 <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80038c2:	f7fd fa3f 	bl	8000d44 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e279      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d03c      	beq.n	8003966 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01c      	beq.n	800392e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f4:	4b52      	ldr	r3, [pc, #328]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fa:	4a51      	ldr	r2, [pc, #324]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80038fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003900:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fa1e 	bl	8000d44 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800390c:	f7fd fa1a 	bl	8000d44 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e254      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800391e:	4b48      	ldr	r3, [pc, #288]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ef      	beq.n	800390c <HAL_RCC_OscConfig+0x3a8>
 800392c:	e01b      	b.n	8003966 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392e:	4b44      	ldr	r3, [pc, #272]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003934:	4a42      	ldr	r2, [pc, #264]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003936:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800393a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fa01 	bl	8000d44 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003946:	f7fd f9fd 	bl	8000d44 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e237      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003958:	4b39      	ldr	r3, [pc, #228]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 800395a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800395e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ef      	bne.n	8003946 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80d2 	beq.w	8003b18 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003974:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x4e4>)
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d118      	bne.n	80039b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003980:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <HAL_RCC_OscConfig+0x4e4>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	4a30      	ldr	r2, [pc, #192]	@ (8003a48 <HAL_RCC_OscConfig+0x4e4>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398c:	f7fd f9da 	bl	8000d44 <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003994:	f7fd f9d6 	bl	8000d44 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e210      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80039a6:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_RCC_OscConfig+0x4e4>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d108      	bne.n	80039cc <HAL_RCC_OscConfig+0x468>
 80039ba:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039ca:	e074      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d118      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4a2>
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039da:	4a19      	ldr	r2, [pc, #100]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039e4:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039ea:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039fa:	4a11      	ldr	r2, [pc, #68]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a04:	e057      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d11e      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4e8>
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a14:	4a0a      	ldr	r2, [pc, #40]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a1e:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a24:	4a06      	ldr	r2, [pc, #24]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a2e:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a34:	4a02      	ldr	r2, [pc, #8]	@ (8003a40 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a3e:	e03a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
 8003a40:	44020c00 	.word	0x44020c00
 8003a44:	20000004 	.word	0x20000004
 8003a48:	44020800 	.word	0x44020800
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b85      	cmp	r3, #133	@ 0x85
 8003a52:	d118      	bne.n	8003a86 <HAL_RCC_OscConfig+0x522>
 8003a54:	4ba2      	ldr	r3, [pc, #648]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a5a:	4aa1      	ldr	r2, [pc, #644]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a64:	4b9e      	ldr	r3, [pc, #632]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6a:	4a9d      	ldr	r2, [pc, #628]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a74:	4b9a      	ldr	r3, [pc, #616]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7a:	4a99      	ldr	r2, [pc, #612]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a84:	e017      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
 8003a86:	4b96      	ldr	r3, [pc, #600]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a8c:	4a94      	ldr	r2, [pc, #592]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a96:	4b92      	ldr	r3, [pc, #584]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a9c:	4a90      	ldr	r2, [pc, #576]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aac:	4a8c      	ldr	r2, [pc, #560]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd f941 	bl	8000d44 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fd f93d 	bl	8000d44 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e175      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	4b80      	ldr	r3, [pc, #512]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ed      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x562>
 8003aea:	e015      	b.n	8003b18 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fd f92a 	bl	8000d44 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fd f926 	bl	8000d44 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e15e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0a:	4b75      	ldr	r3, [pc, #468]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ed      	bne.n	8003af4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d036      	beq.n	8003b92 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d019      	beq.n	8003b60 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6b      	ldr	r2, [pc, #428]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd f904 	bl	8000d44 <HAL_GetTick>
 8003b3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003b40:	f7fd f900 	bl	8000d44 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e13a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b52:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x5dc>
 8003b5e:	e018      	b.n	8003b92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b60:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd f8ea 	bl	8000d44 <HAL_GetTick>
 8003b70:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003b74:	f7fd f8e6 	bl	8000d44 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e120      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b86:	4b56      	ldr	r3, [pc, #344]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8115 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	f000 80af 	beq.w	8003d02 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	f040 8086 	bne.w	8003cba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003bae:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003bb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd f8c3 	bl	8000d44 <HAL_GetTick>
 8003bbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003bc2:	f7fd f8bf 	bl	8000d44 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0f9      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bd4:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003be0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003be8:	f023 0303 	bic.w	r3, r3, #3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bf4:	0212      	lsls	r2, r2, #8
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	4939      	ldr	r1, [pc, #228]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	628b      	str	r3, [r1, #40]	@ 0x28
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	3b01      	subs	r3, #1
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c2e:	492c      	ldr	r1, [pc, #176]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	4a29      	ldr	r2, [pc, #164]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c44:	4a26      	ldr	r2, [pc, #152]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c50:	f043 0310 	orr.w	r3, r3, #16
 8003c54:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	f023 020c 	bic.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	491f      	ldr	r1, [pc, #124]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	f023 0220 	bic.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c74:	491a      	ldr	r1, [pc, #104]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003c86:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd f857 	bl	8000d44 <HAL_GetTick>
 8003c96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003c9a:	f7fd f853 	bl	8000d44 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e08d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003cac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x736>
 8003cb8:	e085      	b.n	8003dc6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <HAL_RCC_OscConfig+0x77c>)
 8003cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7fd f83d 	bl	8000d44 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003cce:	f7fd f839 	bl	8000d44 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d903      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e073      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
 8003ce0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003cf0:	4b37      	ldr	r3, [pc, #220]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	4a36      	ldr	r2, [pc, #216]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003cf6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	6293      	str	r3, [r2, #40]	@ 0x28
 8003d00:	e061      	b.n	8003dc6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d02:	4b33      	ldr	r3, [pc, #204]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d08:	4b31      	ldr	r3, [pc, #196]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d031      	beq.n	8003d7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0203 	and.w	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d12a      	bne.n	8003d7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d122      	bne.n	8003d7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d11a      	bne.n	8003d7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	0a5b      	lsrs	r3, r3, #9
 8003d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d111      	bne.n	8003d7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d108      	bne.n	8003d7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	0e1b      	lsrs	r3, r3, #24
 8003d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e024      	b.n	8003dc8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	08db      	lsrs	r3, r3, #3
 8003d84:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d01a      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fc ffd2 	bl	8000d44 <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003da2:	bf00      	nop
 8003da4:	f7fc ffce 	bl	8000d44 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d0f9      	beq.n	8003da4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db4:	4a06      	ldr	r2, [pc, #24]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003dba:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <HAL_RCC_OscConfig+0x86c>)
 8003dc0:	f043 0310 	orr.w	r3, r3, #16
 8003dc4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	44020c00 	.word	0x44020c00

08003dd4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e19e      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b83      	ldr	r3, [pc, #524]	@ (8003ff8 <HAL_RCC_ClockConfig+0x224>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b80      	ldr	r3, [pc, #512]	@ (8003ff8 <HAL_RCC_ClockConfig+0x224>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	497e      	ldr	r1, [pc, #504]	@ (8003ff8 <HAL_RCC_ClockConfig+0x224>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff8 <HAL_RCC_ClockConfig+0x224>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e186      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	4b74      	ldr	r3, [pc, #464]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d909      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003e36:	4b71      	ldr	r3, [pc, #452]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	496d      	ldr	r1, [pc, #436]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d909      	bls.n	8003e7c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4961      	ldr	r1, [pc, #388]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d010      	beq.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d908      	bls.n	8003eaa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003e98:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4955      	ldr	r1, [pc, #340]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b50      	ldr	r3, [pc, #320]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d908      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 020f 	bic.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	494a      	ldr	r1, [pc, #296]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8093 	beq.w	800400c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003eee:	4b43      	ldr	r3, [pc, #268]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e113      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f06:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d115      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e107      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003f1e:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0fb      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f2e:	4b33      	ldr	r3, [pc, #204]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0f3      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	492c      	ldr	r1, [pc, #176]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fc fef8 	bl	8000d44 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d112      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fc fef0 	bl	8000d44 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0d7      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f76:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0318 	and.w	r3, r3, #24
 8003f7e:	2b18      	cmp	r3, #24
 8003f80:	d1ee      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x18c>
 8003f82:	e043      	b.n	800400c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d112      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8e:	f7fc fed9 	bl	8000d44 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0c0      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa4:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 0318 	and.w	r3, r3, #24
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d1ee      	bne.n	8003f8e <HAL_RCC_ClockConfig+0x1ba>
 8003fb0:	e02c      	b.n	800400c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d122      	bne.n	8004000 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fc fec2 	bl	8000d44 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0a9      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <HAL_RCC_ClockConfig+0x228>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0318 	and.w	r3, r3, #24
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1e8>
 8003fde:	e015      	b.n	800400c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe0:	f7fc feb0 	bl	8000d44 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d906      	bls.n	8004000 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e097      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
 8003ff6:	bf00      	nop
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004000:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f003 0318 	and.w	r3, r3, #24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e9      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4b44      	ldr	r3, [pc, #272]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f023 020f 	bic.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	493e      	ldr	r1, [pc, #248]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403a:	4b3e      	ldr	r3, [pc, #248]	@ (8004134 <HAL_RCC_ClockConfig+0x360>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d210      	bcs.n	800406a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004048:	4b3a      	ldr	r3, [pc, #232]	@ (8004134 <HAL_RCC_ClockConfig+0x360>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 020f 	bic.w	r2, r3, #15
 8004050:	4938      	ldr	r1, [pc, #224]	@ (8004134 <HAL_RCC_ClockConfig+0x360>)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004058:	4b36      	ldr	r3, [pc, #216]	@ (8004134 <HAL_RCC_ClockConfig+0x360>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e05d      	b.n	8004126 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d010      	beq.n	8004098 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004082:	429a      	cmp	r2, r3
 8004084:	d208      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004086:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4927      	ldr	r1, [pc, #156]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d209      	bcs.n	80040ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80040b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	491a      	ldr	r1, [pc, #104]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	4b15      	ldr	r3, [pc, #84]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d209      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	490e      	ldr	r1, [pc, #56]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80040fc:	f000 f822 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_ClockConfig+0x35c>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	490b      	ldr	r1, [pc, #44]	@ (8004138 <HAL_RCC_ClockConfig+0x364>)
 800410c:	5ccb      	ldrb	r3, [r1, r3]
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	4a0a      	ldr	r2, [pc, #40]	@ (800413c <HAL_RCC_ClockConfig+0x368>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <HAL_RCC_ClockConfig+0x36c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fd88 	bl	8000c30 <HAL_InitTick>
 8004120:	4603      	mov	r3, r0
 8004122:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004124:	7afb      	ldrb	r3, [r7, #11]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	44020c00 	.word	0x44020c00
 8004134:	40022000 	.word	0x40022000
 8004138:	08005a24 	.word	0x08005a24
 800413c:	20000000 	.word	0x20000000
 8004140:	20000004 	.word	0x20000004

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800414a:	4b8c      	ldr	r3, [pc, #560]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0318 	and.w	r3, r3, #24
 8004152:	2b08      	cmp	r3, #8
 8004154:	d102      	bne.n	800415c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004156:	4b8a      	ldr	r3, [pc, #552]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	e107      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800415c:	4b87      	ldr	r3, [pc, #540]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 0318 	and.w	r3, r3, #24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d112      	bne.n	800418e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004168:	4b84      	ldr	r3, [pc, #528]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004174:	4b81      	ldr	r3, [pc, #516]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	08db      	lsrs	r3, r3, #3
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	4a81      	ldr	r2, [pc, #516]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x240>)
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e0f1      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004188:	4b7e      	ldr	r3, [pc, #504]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x240>)
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e0ee      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800418e:	4b7b      	ldr	r3, [pc, #492]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 0318 	and.w	r3, r3, #24
 8004196:	2b10      	cmp	r3, #16
 8004198:	d102      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800419a:	4b7b      	ldr	r3, [pc, #492]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x244>)
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e0e5      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a0:	4b76      	ldr	r3, [pc, #472]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 0318 	and.w	r3, r3, #24
 80041a8:	2b18      	cmp	r3, #24
 80041aa:	f040 80dd 	bne.w	8004368 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041ae:	4b73      	ldr	r3, [pc, #460]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80041b8:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80041c4:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80041d0:	4b6a      	ldr	r3, [pc, #424]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80041d4:	08db      	lsrs	r3, r3, #3
 80041d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80b7 	beq.w	8004362 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0xbe>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d056      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x16a>
 8004200:	e077      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004202:	4b5e      	ldr	r3, [pc, #376]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d02d      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800420e:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	4a5a      	ldr	r2, [pc, #360]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x240>)
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004238:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004248:	ed97 6a02 	vldr	s12, [r7, #8]
 800424c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800438c <HAL_RCC_GetSysClockFreq+0x248>
 8004250:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004254:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004264:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004268:	e065      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004274:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004390 <HAL_RCC_GetSysClockFreq+0x24c>
 8004278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427c:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 800427e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	ee07 3a90 	vmov	s15, r3
 8004288:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800428c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004290:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800438c <HAL_RCC_GetSysClockFreq+0x248>
 8004294:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004298:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800429c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80042ac:	e043      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004394 <HAL_RCC_GetSysClockFreq+0x250>
 80042bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042c0:	4b2e      	ldr	r3, [pc, #184]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 80042c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800438c <HAL_RCC_GetSysClockFreq+0x248>
 80042d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80042f0:	e021      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004398 <HAL_RCC_GetSysClockFreq+0x254>
 8004300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004314:	ed97 6a02 	vldr	s12, [r7, #8]
 8004318:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800438c <HAL_RCC_GetSysClockFreq+0x248>
 800431c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004320:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004324:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004328:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004330:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004334:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004336:	4b11      	ldr	r3, [pc, #68]	@ (800437c <HAL_RCC_GetSysClockFreq+0x238>)
 8004338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433a:	0a5b      	lsrs	r3, r3, #9
 800433c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004340:	3301      	adds	r3, #1
 8004342:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800434e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435a:	ee17 3a90 	vmov	r3, s15
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e004      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e001      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x240>)
 800436a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	44020c00 	.word	0x44020c00
 8004380:	003d0900 	.word	0x003d0900
 8004384:	03d09000 	.word	0x03d09000
 8004388:	017d7840 	.word	0x017d7840
 800438c:	46000000 	.word	0x46000000
 8004390:	4c742400 	.word	0x4c742400
 8004394:	4bbebc20 	.word	0x4bbebc20
 8004398:	4a742400 	.word	0x4a742400

0800439c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043a0:	f7ff fed0 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80043aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043ae:	4907      	ldr	r1, [pc, #28]	@ (80043cc <HAL_RCC_GetHCLKFreq+0x30>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80043b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80043b6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ba:	4a05      	ldr	r2, [pc, #20]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80043bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80043c0:	681b      	ldr	r3, [r3, #0]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	44020c00 	.word	0x44020c00
 80043cc:	08005a24 	.word	0x08005a24
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b0ba      	sub	sp, #232	@ 0xe8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80043f8:	2500      	movs	r5, #0
 80043fa:	ea54 0305 	orrs.w	r3, r4, r5
 80043fe:	d00b      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004400:	4bcd      	ldr	r3, [pc, #820]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004406:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004410:	4ac9      	ldr	r2, [pc, #804]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004412:	430b      	orrs	r3, r1
 8004414:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004418:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 0801 	and.w	r8, r2, #1
 8004424:	f04f 0900 	mov.w	r9, #0
 8004428:	ea58 0309 	orrs.w	r3, r8, r9
 800442c:	d042      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800442e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	2b05      	cmp	r3, #5
 8004436:	d823      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004489 	.word	0x08004489
 8004444:	08004459 	.word	0x08004459
 8004448:	0800446d 	.word	0x0800446d
 800444c:	08004489 	.word	0x08004489
 8004450:	08004489 	.word	0x08004489
 8004454:	08004489 	.word	0x08004489
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445c:	3308      	adds	r3, #8
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f978 	bl	8005754 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800446a:	e00e      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800446c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004470:	3330      	adds	r3, #48	@ 0x30
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fa06 	bl	8005884 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800447e:	e004      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004486:	e000      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004492:	4ba9      	ldr	r3, [pc, #676]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004498:	f023 0107 	bic.w	r1, r3, #7
 800449c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	4aa5      	ldr	r2, [pc, #660]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80044a4:	430b      	orrs	r3, r1
 80044a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f002 0a02 	and.w	sl, r2, #2
 80044c0:	f04f 0b00 	mov.w	fp, #0
 80044c4:	ea5a 030b 	orrs.w	r3, sl, fp
 80044c8:	f000 8088 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80044cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	2b28      	cmp	r3, #40	@ 0x28
 80044d4:	d868      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044d6:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	080045b1 	.word	0x080045b1
 80044e0:	080045a9 	.word	0x080045a9
 80044e4:	080045a9 	.word	0x080045a9
 80044e8:	080045a9 	.word	0x080045a9
 80044ec:	080045a9 	.word	0x080045a9
 80044f0:	080045a9 	.word	0x080045a9
 80044f4:	080045a9 	.word	0x080045a9
 80044f8:	080045a9 	.word	0x080045a9
 80044fc:	08004581 	.word	0x08004581
 8004500:	080045a9 	.word	0x080045a9
 8004504:	080045a9 	.word	0x080045a9
 8004508:	080045a9 	.word	0x080045a9
 800450c:	080045a9 	.word	0x080045a9
 8004510:	080045a9 	.word	0x080045a9
 8004514:	080045a9 	.word	0x080045a9
 8004518:	080045a9 	.word	0x080045a9
 800451c:	08004595 	.word	0x08004595
 8004520:	080045a9 	.word	0x080045a9
 8004524:	080045a9 	.word	0x080045a9
 8004528:	080045a9 	.word	0x080045a9
 800452c:	080045a9 	.word	0x080045a9
 8004530:	080045a9 	.word	0x080045a9
 8004534:	080045a9 	.word	0x080045a9
 8004538:	080045a9 	.word	0x080045a9
 800453c:	080045b1 	.word	0x080045b1
 8004540:	080045a9 	.word	0x080045a9
 8004544:	080045a9 	.word	0x080045a9
 8004548:	080045a9 	.word	0x080045a9
 800454c:	080045a9 	.word	0x080045a9
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045a9 	.word	0x080045a9
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045b1 	.word	0x080045b1
 8004560:	080045a9 	.word	0x080045a9
 8004564:	080045a9 	.word	0x080045a9
 8004568:	080045a9 	.word	0x080045a9
 800456c:	080045a9 	.word	0x080045a9
 8004570:	080045a9 	.word	0x080045a9
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045b1 	.word	0x080045b1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004584:	3308      	adds	r3, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f8e4 	bl	8005754 <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004592:	e00e      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004598:	3330      	adds	r3, #48	@ 0x30
 800459a:	4618      	mov	r0, r3
 800459c:	f001 f972 	bl	8005884 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80045a6:	e004      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80045b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80045ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045c0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045cc:	430b      	orrs	r3, r1
 80045ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f002 0304 	and.w	r3, r2, #4
 80045e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d04e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80045fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004602:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004606:	d02c      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004608:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800460c:	d825      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800460e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004612:	d028      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004618:	d81f      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800461a:	2bc0      	cmp	r3, #192	@ 0xc0
 800461c:	d025      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800461e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004620:	d81b      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004622:	2b80      	cmp	r3, #128	@ 0x80
 8004624:	d00f      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004626:	2b80      	cmp	r3, #128	@ 0x80
 8004628:	d817      	bhi.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01f      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d113      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004636:	3308      	adds	r3, #8
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f88b 	bl	8005754 <RCCEx_PLL2_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004644:	e014      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800464a:	3330      	adds	r3, #48	@ 0x30
 800464c:	4618      	mov	r0, r3
 800464e:	f001 f919 	bl	8005884 <RCCEx_PLL3_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004658:	e00a      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004660:	e006      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800466e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004670:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10c      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004678:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800467a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800467e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004688:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800468a:	430b      	orrs	r3, r1
 800468c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004696:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 0308 	and.w	r3, r2, #8
 80046a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d056      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80046c4:	d031      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80046c6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80046ca:	d82a      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d0:	d02d      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d6:	d824      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80046d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046dc:	d029      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80046de:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80046e2:	d81e      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d818      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d023      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f8:	d113      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046fe:	3308      	adds	r3, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f827 	bl	8005754 <RCCEx_PLL2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 800470c:	e017      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004712:	3330      	adds	r3, #48	@ 0x30
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f8b5 	bl	8005884 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004720:	e00d      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004728:	e009      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800472a:	bf00      	nop
 800472c:	e007      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800472e:	bf00      	nop
 8004730:	e005      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004732:	bf00      	nop
 8004734:	e003      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004736:	bf00      	nop
 8004738:	44020c00 	.word	0x44020c00
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004746:	4bb9      	ldr	r3, [pc, #740]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800474c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004756:	4ab5      	ldr	r2, [pc, #724]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004758:	430b      	orrs	r3, r1
 800475a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004764:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 0310 	and.w	r3, r2, #16
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800477e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d053      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004792:	d031      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004794:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004798:	d82a      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800479a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800479e:	d02d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a4:	d824      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047aa:	d029      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80047ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b0:	d81e      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b6:	d011      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d818      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d020      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d113      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047cc:	3308      	adds	r3, #8
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ffc0 	bl	8005754 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80047da:	e014      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e0:	3330      	adds	r3, #48	@ 0x30
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f84e 	bl	8005884 <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80047ee:	e00a      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80047f6:	e006      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047f8:	bf00      	nop
 80047fa:	e004      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047fc:	bf00      	nop
 80047fe:	e002      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004806:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800480e:	4b87      	ldr	r3, [pc, #540]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004814:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800481e:	4a83      	ldr	r2, [pc, #524]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004820:	430b      	orrs	r3, r1
 8004822:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800482c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 0320 	and.w	r3, r2, #32
 800483c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004846:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d053      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800485a:	d031      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800485c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004860:	d82a      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004866:	d02d      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800486c:	d824      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800486e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004872:	d029      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004874:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004878:	d81e      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487e:	d011      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004884:	d818      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d020      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488e:	d113      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004894:	3308      	adds	r3, #8
 8004896:	4618      	mov	r0, r3
 8004898:	f000 ff5c 	bl	8005754 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80048a2:	e014      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a8:	3330      	adds	r3, #48	@ 0x30
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 ffea 	bl	8005884 <RCCEx_PLL3_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80048b6:	e00a      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048be:	e006      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80048c0:	bf00      	nop
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80048c4:	bf00      	nop
 80048c6:	e002      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80048d6:	4b55      	ldr	r3, [pc, #340]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048dc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80048e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	4a51      	ldr	r2, [pc, #324]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048f4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800490e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	d053      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800491c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004922:	d031      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004924:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004928:	d82a      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800492a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800492e:	d02d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004934:	d824      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004936:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800493a:	d029      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800493c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004940:	d81e      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004946:	d011      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800494c:	d818      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004956:	d113      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495c:	3308      	adds	r3, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fef8 	bl	8005754 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800496a:	e014      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800496c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004970:	3330      	adds	r3, #48	@ 0x30
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ff86 	bl	8005884 <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800497e:	e00a      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004986:	e006      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004988:	bf00      	nop
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004996:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800499e:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ae:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80049cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049d6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d03d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80049e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049ea:	d01b      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80049ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049f0:	d814      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x648>
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f6:	d017      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80049f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049fc:	d80e      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x648>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a0c:	3330      	adds	r3, #48	@ 0x30
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 ff38 	bl	8005884 <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a22:	e006      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004a24:	bf00      	nop
 8004a26:	e004      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e002      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004a2c:	44020c00 	.word	0x44020c00
        break;
 8004a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a3a:	4b99      	ldr	r3, [pc, #612]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a40:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a4a:	4a95      	ldr	r2, [pc, #596]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d03b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a86:	d01b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004a88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a8c:	d814      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004a8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a92:	d017      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004a94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a98:	d80e      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d014      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004a9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aa8:	3330      	adds	r3, #48	@ 0x30
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 feea 	bl	8005884 <RCCEx_PLL3_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004abe:	e004      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004ad2:	4b73      	ldr	r3, [pc, #460]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ad4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ad8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004af0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d03d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b20:	d01b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b26:	d814      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b2c:	d017      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b32:	d80e      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d014      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b42:	3330      	adds	r3, #48	@ 0x30
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fe9d 	bl	8005884 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b58:	e004      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b7e:	4a48      	ldr	r2, [pc, #288]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b80:	430b      	orrs	r3, r1
 8004b82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ba6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004baa:	460b      	mov	r3, r1
 8004bac:	4313      	orrs	r3, r2
 8004bae:	d035      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bbc:	d015      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004bbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bc2:	d80e      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	3330      	adds	r3, #48	@ 0x30
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fe55 	bl	8005884 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10d      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004bf8:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bfe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	2100      	movs	r1, #0
 8004c26:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d037      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c48:	d015      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c4e:	d80e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c58:	d109      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c5e:	3330      	adds	r3, #48	@ 0x30
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fe0f 	bl	8005884 <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004c7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004c7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	4a02      	ldr	r2, [pc, #8]	@ (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c9e:	e005      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004ca0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ca8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cbe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004cc8:	4bb8      	ldr	r3, [pc, #736]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4ab7      	ldr	r2, [pc, #732]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cd2:	61d3      	str	r3, [r2, #28]
 8004cd4:	4bb5      	ldr	r3, [pc, #724]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ce0:	4ab2      	ldr	r2, [pc, #712]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d055      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d0a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d0e:	d031      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004d10:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d14:	d82a      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d02d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d20:	d824      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d26:	d029      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d2c:	d81e      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d32:	d011      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d38:	d818      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d42:	d113      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d48:	3308      	adds	r3, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fd02 	bl	8005754 <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004d56:	e014      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5c:	3330      	adds	r3, #48	@ 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd90 	bl	8005884 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004d8a:	4b88      	ldr	r3, [pc, #544]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004d94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d9c:	4a83      	ldr	r2, [pc, #524]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004daa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d055      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004dd6:	d031      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004dd8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ddc:	d82a      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004dde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de2:	d02d      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004de4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de8:	d824      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dee:	d029      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004df0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004df4:	d81e      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e00:	d818      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d020      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0a:	d113      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e10:	3308      	adds	r3, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fc9e 	bl	8005754 <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e1e:	e014      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e24:	3330      	adds	r3, #48	@ 0x30
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd2c 	bl	8005884 <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004e32:	e00a      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e3a:	e006      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e004      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004e40:	bf00      	nop
 8004e42:	e002      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004e44:	bf00      	nop
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e52:	4b56      	ldr	r3, [pc, #344]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	4a51      	ldr	r2, [pc, #324]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e66:	430b      	orrs	r3, r1
 8004e68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004e6c:	e003      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e84:	2300      	movs	r3, #0
 8004e86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	d032      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d80f      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d211      	bcs.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d911      	bls.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eae:	3308      	adds	r3, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fc4f 	bl	8005754 <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ebc:	e006      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ec4:	e002      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ecc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ed4:	4b35      	ldr	r3, [pc, #212]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eda:	f023 0107 	bic.w	r1, r3, #7
 8004ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ee6:	4a31      	ldr	r2, [pc, #196]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004eee:	e003      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ef4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	2100      	movs	r1, #0
 8004f02:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d024      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d005      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f2a:	e002      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f40:	f023 0108 	bic.w	r1, r3, #8
 8004f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f5a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f70:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f000 80b9 	beq.w	80050ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	4a0b      	ldr	r2, [pc, #44]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f88:	f7fb fedc 	bl	8000d44 <HAL_GetTick>
 8004f8c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004f90:	e010      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fb fed7 	bl	8000d44 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d908      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004faa:	bf00      	nop
 8004fac:	44020c00 	.word	0x44020c00
 8004fb0:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004fb4:	4bba      	ldr	r3, [pc, #744]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e8      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004fc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 808e 	bne.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fca:	4bb6      	ldr	r3, [pc, #728]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d023      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01b      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ff0:	4bac      	ldr	r3, [pc, #688]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ffe:	4ba9      	ldr	r3, [pc, #676]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005004:	4aa7      	ldr	r2, [pc, #668]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800500e:	4ba5      	ldr	r3, [pc, #660]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005014:	4aa3      	ldr	r2, [pc, #652]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800501e:	4aa1      	ldr	r2, [pc, #644]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d019      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fb fe86 	bl	8000d44 <HAL_GetTick>
 8005038:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503c:	e00d      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fb fe81 	bl	8000d44 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005048:	1ad2      	subs	r2, r2, r3
 800504a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800504e:	429a      	cmp	r2, r3
 8005050:	d903      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505a:	4b92      	ldr	r3, [pc, #584]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800505c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ea      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005068:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d135      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005080:	d110      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005082:	4b88      	ldr	r3, [pc, #544]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800508a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800508e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005098:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800509c:	4a81      	ldr	r2, [pc, #516]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800509e:	430b      	orrs	r3, r1
 80050a0:	61d3      	str	r3, [r2, #28]
 80050a2:	e005      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80050a4:	4b7f      	ldr	r3, [pc, #508]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4a7e      	ldr	r2, [pc, #504]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050ae:	61d3      	str	r3, [r2, #28]
 80050b0:	4b7c      	ldr	r3, [pc, #496]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b6:	4a7b      	ldr	r2, [pc, #492]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050c0:	4b78      	ldr	r3, [pc, #480]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050c2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	4a74      	ldr	r2, [pc, #464]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050da:	e008      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050fc:	2300      	movs	r3, #0
 80050fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005100:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d035      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800510e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005112:	2b30      	cmp	r3, #48	@ 0x30
 8005114:	d014      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005116:	2b30      	cmp	r3, #48	@ 0x30
 8005118:	d80e      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d012      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800511e:	2b20      	cmp	r3, #32
 8005120:	d80a      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d010      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005126:	2b10      	cmp	r3, #16
 8005128:	d106      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512a:	4b5e      	ldr	r3, [pc, #376]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	4a5d      	ldr	r2, [pc, #372]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005134:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800513e:	e004      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005140:	bf00      	nop
 8005142:	e002      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005144:	bf00      	nop
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005152:	4b54      	ldr	r3, [pc, #336]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005158:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800515c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005164:	4a4f      	ldr	r2, [pc, #316]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005166:	430b      	orrs	r3, r1
 8005168:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005172:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005182:	643b      	str	r3, [r7, #64]	@ 0x40
 8005184:	2300      	movs	r3, #0
 8005186:	647b      	str	r3, [r7, #68]	@ 0x44
 8005188:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800518c:	460b      	mov	r3, r1
 800518e:	4313      	orrs	r3, r2
 8005190:	d033      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d007      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80051a2:	e010      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a4:	4b3f      	ldr	r3, [pc, #252]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	4a3e      	ldr	r2, [pc, #248]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80051b0:	e00d      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051b6:	3308      	adds	r3, #8
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 facb 	bl	8005754 <RCCEx_PLL2_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80051d6:	4b33      	ldr	r3, [pc, #204]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051dc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80051e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051e8:	4a2e      	ldr	r2, [pc, #184]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051f6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80051fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005208:	2300      	movs	r3, #0
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005210:	460b      	mov	r3, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	d04c      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800521e:	2b04      	cmp	r3, #4
 8005220:	d827      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800523d 	.word	0x0800523d
 800522c:	0800524b 	.word	0x0800524b
 8005230:	0800525f 	.word	0x0800525f
 8005234:	0800527b 	.word	0x0800527b
 8005238:	0800527b 	.word	0x0800527b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523c:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	4a18      	ldr	r2, [pc, #96]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005248:	e018      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800524a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800524e:	3308      	adds	r3, #8
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fa7f 	bl	8005754 <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800525c:	e00e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800525e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005262:	3330      	adds	r3, #48	@ 0x30
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fb0d 	bl	8005884 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005270:	e004      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800527a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d111      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005284:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800528a:	f023 0107 	bic.w	r1, r3, #7
 800528e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005296:	4a03      	ldr	r2, [pc, #12]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005298:	430b      	orrs	r3, r1
 800529a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800529e:	e007      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80052a0:	44020800 	.word	0x44020800
 80052a4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80052b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80052bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f000 8081 	beq.w	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80052ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d85f      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005365 	.word	0x08005365
 80052e4:	0800539b 	.word	0x0800539b
 80052e8:	0800539b 	.word	0x0800539b
 80052ec:	0800539b 	.word	0x0800539b
 80052f0:	0800539b 	.word	0x0800539b
 80052f4:	0800539b 	.word	0x0800539b
 80052f8:	0800539b 	.word	0x0800539b
 80052fc:	0800539b 	.word	0x0800539b
 8005300:	08005373 	.word	0x08005373
 8005304:	0800539b 	.word	0x0800539b
 8005308:	0800539b 	.word	0x0800539b
 800530c:	0800539b 	.word	0x0800539b
 8005310:	0800539b 	.word	0x0800539b
 8005314:	0800539b 	.word	0x0800539b
 8005318:	0800539b 	.word	0x0800539b
 800531c:	0800539b 	.word	0x0800539b
 8005320:	08005387 	.word	0x08005387
 8005324:	0800539b 	.word	0x0800539b
 8005328:	0800539b 	.word	0x0800539b
 800532c:	0800539b 	.word	0x0800539b
 8005330:	0800539b 	.word	0x0800539b
 8005334:	0800539b 	.word	0x0800539b
 8005338:	0800539b 	.word	0x0800539b
 800533c:	0800539b 	.word	0x0800539b
 8005340:	080053a3 	.word	0x080053a3
 8005344:	0800539b 	.word	0x0800539b
 8005348:	0800539b 	.word	0x0800539b
 800534c:	0800539b 	.word	0x0800539b
 8005350:	0800539b 	.word	0x0800539b
 8005354:	0800539b 	.word	0x0800539b
 8005358:	0800539b 	.word	0x0800539b
 800535c:	0800539b 	.word	0x0800539b
 8005360:	080053a3 	.word	0x080053a3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005364:	4bb9      	ldr	r3, [pc, #740]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	4ab8      	ldr	r2, [pc, #736]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005370:	e018      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005376:	3308      	adds	r3, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f9eb 	bl	8005754 <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005384:	e00e      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800538a:	3330      	adds	r3, #48	@ 0x30
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fa79 	bl	8005884 <RCCEx_PLL3_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005398:	e004      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80053a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10d      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80053ac:	4ba7      	ldr	r3, [pc, #668]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053be:	4aa3      	ldr	r2, [pc, #652]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053c6:	e003      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053de:	2300      	movs	r3, #0
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053e6:	460b      	mov	r3, r1
 80053e8:	4313      	orrs	r3, r2
 80053ea:	d04e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80053ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f8:	d02e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053fe:	d827      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005400:	2bc0      	cmp	r3, #192	@ 0xc0
 8005402:	d02b      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005404:	2bc0      	cmp	r3, #192	@ 0xc0
 8005406:	d823      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005408:	2b80      	cmp	r3, #128	@ 0x80
 800540a:	d017      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1068>
 800540c:	2b80      	cmp	r3, #128	@ 0x80
 800540e:	d81f      	bhi.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d007      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005418:	e01a      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541a:	4b8c      	ldr	r3, [pc, #560]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	4a8b      	ldr	r2, [pc, #556]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005424:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005426:	e01a      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542c:	3308      	adds	r3, #8
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f990 	bl	8005754 <RCCEx_PLL2_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800543a:	e010      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800543c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005440:	3330      	adds	r3, #48	@ 0x30
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa1e 	bl	8005884 <RCCEx_PLL3_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800544e:	e006      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005466:	4b79      	ldr	r3, [pc, #484]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005478:	4974      	ldr	r1, [pc, #464]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005486:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800548a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
 800549c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d055      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80054a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054ae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80054b2:	d031      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80054b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80054b8:	d82a      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054be:	d02d      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c4:	d824      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80054c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054ca:	d029      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80054cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054d0:	d81e      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d6:	d011      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054dc:	d818      	bhi.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80054e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e6:	d113      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ec:	3308      	adds	r3, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f930 	bl	8005754 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80054fa:	e014      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005500:	3330      	adds	r3, #48	@ 0x30
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f9be 	bl	8005884 <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800550e:	e00a      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005516:	e006      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005518:	bf00      	nop
 800551a:	e004      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800551c:	bf00      	nop
 800551e:	e002      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005526:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10d      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800552e:	4b47      	ldr	r3, [pc, #284]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005534:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005540:	4942      	ldr	r1, [pc, #264]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800554e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	2100      	movs	r1, #0
 800555c:	61b9      	str	r1, [r7, #24]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005568:	460b      	mov	r3, r1
 800556a:	4313      	orrs	r3, r2
 800556c:	d03c      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800556e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005576:	2b03      	cmp	r3, #3
 8005578:	d81b      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800557a:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055bb 	.word	0x080055bb
 8005584:	08005591 	.word	0x08005591
 8005588:	0800559f 	.word	0x0800559f
 800558c:	080055bb 	.word	0x080055bb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005590:	4b2e      	ldr	r3, [pc, #184]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	4a2d      	ldr	r2, [pc, #180]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800559c:	e00e      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a2:	3308      	adds	r3, #8
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f8d5 	bl	8005754 <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80055b0:	e004      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055b8:	e000      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80055ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80055c4:	4b21      	ldr	r3, [pc, #132]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055ca:	f023 0203 	bic.w	r2, r3, #3
 80055ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055d6:	491d      	ldr	r1, [pc, #116]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055e4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	2100      	movs	r1, #0
 80055f2:	6139      	str	r1, [r7, #16]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d03c      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005610:	d00e      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005616:	d815      	bhi.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d019      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 800561c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005620:	d110      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005622:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	4a09      	ldr	r2, [pc, #36]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800562e:	e010      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005634:	3308      	adds	r3, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f88c 	bl	8005754 <RCCEx_PLL2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 800564c:	44020c00 	.word	0x44020c00
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800565a:	4b3d      	ldr	r3, [pc, #244]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800565c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800566c:	4938      	ldr	r1, [pc, #224]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800567a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	2100      	movs	r1, #0
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005694:	460b      	mov	r3, r1
 8005696:	4313      	orrs	r3, r2
 8005698:	d038      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056a2:	2b30      	cmp	r3, #48	@ 0x30
 80056a4:	d01b      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80056a6:	2b30      	cmp	r3, #48	@ 0x30
 80056a8:	d815      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d002      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d007      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80056b2:	e010      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b4:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	4a25      	ldr	r2, [pc, #148]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80056c0:	e00e      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c6:	3330      	adds	r3, #48	@ 0x30
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 f8db 	bl	8005884 <RCCEx_PLL3_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80056de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80056e8:	4b19      	ldr	r3, [pc, #100]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056fa:	4915      	ldr	r1, [pc, #84]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005702:	e003      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005708:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800570c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	2100      	movs	r1, #0
 8005716:	6039      	str	r1, [r7, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d00c      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005728:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800572a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800572e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005736:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800573a:	4905      	ldr	r1, [pc, #20]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005742:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005746:	4618      	mov	r0, r3
 8005748:	37e8      	adds	r7, #232	@ 0xe8
 800574a:	46bd      	mov	sp, r7
 800574c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005750:	44020c00 	.word	0x44020c00

08005754 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800575c:	4b48      	ldr	r3, [pc, #288]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a47      	ldr	r2, [pc, #284]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005766:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005768:	f7fb faec 	bl	8000d44 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800576e:	e008      	b.n	8005782 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005770:	f7fb fae8 	bl	8000d44 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e07a      	b.n	8005878 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005782:	4b3f      	ldr	r3, [pc, #252]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800578e:	4b3c      	ldr	r3, [pc, #240]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005792:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005796:	f023 0303 	bic.w	r3, r3, #3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6852      	ldr	r2, [r2, #4]
 80057a2:	0212      	lsls	r2, r2, #8
 80057a4:	430a      	orrs	r2, r1
 80057a6:	4936      	ldr	r1, [pc, #216]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	025b      	lsls	r3, r3, #9
 80057be:	b29b      	uxth	r3, r3
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057dc:	4928      	ldr	r1, [pc, #160]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	f023 020c 	bic.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	4924      	ldr	r1, [pc, #144]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	f023 0220 	bic.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	491f      	ldr	r1, [pc, #124]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	491c      	ldr	r1, [pc, #112]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005814:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800581a:	f023 0310 	bic.w	r3, r3, #16
 800581e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005820:	4b17      	ldr	r3, [pc, #92]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005828:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a12      	ldr	r2, [r2, #32]
 8005830:	00d2      	lsls	r2, r2, #3
 8005832:	4913      	ldr	r1, [pc, #76]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	4a10      	ldr	r2, [pc, #64]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800583e:	f043 0310 	orr.w	r3, r3, #16
 8005842:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005844:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0d      	ldr	r2, [pc, #52]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800584a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800584e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005850:	f7fb fa78 	bl	8000d44 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005856:	e008      	b.n	800586a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005858:	f7fb fa74 	bl	8000d44 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e006      	b.n	8005878 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800586a:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <RCCEx_PLL2_Config+0x12c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0

}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	44020c00 	.word	0x44020c00

08005884 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800588c:	4b48      	ldr	r3, [pc, #288]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a47      	ldr	r2, [pc, #284]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005898:	f7fb fa54 	bl	8000d44 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800589e:	e008      	b.n	80058b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058a0:	f7fb fa50 	bl	8000d44 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e07a      	b.n	80059a8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058b2:	4b3f      	ldr	r3, [pc, #252]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80058be:	4b3c      	ldr	r3, [pc, #240]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6811      	ldr	r1, [r2, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6852      	ldr	r2, [r2, #4]
 80058d2:	0212      	lsls	r2, r2, #8
 80058d4:	430a      	orrs	r2, r1
 80058d6:	4936      	ldr	r1, [pc, #216]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	@ 0x30
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	3b01      	subs	r3, #1
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800590c:	4928      	ldr	r1, [pc, #160]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800590e:	4313      	orrs	r3, r2
 8005910:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005912:	4b27      	ldr	r3, [pc, #156]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	f023 020c 	bic.w	r2, r3, #12
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	4924      	ldr	r1, [pc, #144]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005924:	4b22      	ldr	r3, [pc, #136]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	f023 0220 	bic.w	r2, r3, #32
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	491f      	ldr	r1, [pc, #124]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005936:	4b1e      	ldr	r3, [pc, #120]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	491c      	ldr	r1, [pc, #112]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005944:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005948:	4a19      	ldr	r2, [pc, #100]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005950:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005954:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005958:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6a12      	ldr	r2, [r2, #32]
 8005960:	00d2      	lsls	r2, r2, #3
 8005962:	4913      	ldr	r1, [pc, #76]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005964:	4313      	orrs	r3, r2
 8005966:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005968:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	4a10      	ldr	r2, [pc, #64]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800596e:	f043 0310 	orr.w	r3, r3, #16
 8005972:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005974:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0d      	ldr	r2, [pc, #52]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005980:	f7fb f9e0 	bl	8000d44 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005986:	e008      	b.n	800599a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005988:	f7fb f9dc 	bl	8000d44 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e006      	b.n	80059a8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800599a:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <RCCEx_PLL3_Config+0x12c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	44020c00 	.word	0x44020c00

080059b4 <memset>:
 80059b4:	4402      	add	r2, r0
 80059b6:	4603      	mov	r3, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	@ (80059fc <__libc_init_array+0x38>)
 80059c8:	2600      	movs	r6, #0
 80059ca:	4c0d      	ldr	r4, [pc, #52]	@ (8005a00 <__libc_init_array+0x3c>)
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a04 <__libc_init_array+0x40>)
 80059d6:	2600      	movs	r6, #0
 80059d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005a08 <__libc_init_array+0x44>)
 80059da:	f000 f817 	bl	8005a0c <_init>
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	3601      	adds	r6, #1
 80059ee:	4798      	blx	r3
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	3601      	adds	r6, #1
 80059f8:	4798      	blx	r3
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08005a44 	.word	0x08005a44
 8005a00:	08005a44 	.word	0x08005a44
 8005a04:	08005a44 	.word	0x08005a44
 8005a08:	08005a48 	.word	0x08005a48

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
