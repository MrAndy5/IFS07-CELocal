
BMS_LV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800852c  0800852c  0000952c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a0  080085a0  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080085a0  080085a0  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080085a0  080085a0  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a0  080085a0  000095a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085a4  080085a4  000095a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080085a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  2000017c  08008724  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001434  08008724  0000a434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252e  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003334  00000000  00000000  0001c6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8e  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a23a  00000000  00000000  0002172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015624  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5ed  00000000  00000000  00050f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  000dc5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e09d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008514 	.word	0x08008514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008514 	.word	0x08008514

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc3a 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f84a 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93a 	bl	80003d0 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8a0 	bl	80002a0 <MX_CAN_Init>
  MX_I2C1_Init();
 8000160:	f000 f8d2 	bl	8000308 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000164:	f007 fd34 	bl	8007bd0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000168:	f000 f8fc 	bl	8000364 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	// Start precharge (PRECH = 1)
	HAL_GPIO_WritePin(CHARGE_GPIO_Port, CHARGE_Pin, GPIO_PIN_SET); // DISCHARGE on
 800016c:	2201      	movs	r2, #1
 800016e:	2104      	movs	r1, #4
 8000170:	481b      	ldr	r0, [pc, #108]	@ (80001e0 <main+0x94>)
 8000172:	f001 fa69 	bl	8001648 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PRECH_GPIO_Port, PRECH_Pin, GPIO_PIN_SET);
 8000176:	2201      	movs	r2, #1
 8000178:	2110      	movs	r1, #16
 800017a:	4819      	ldr	r0, [pc, #100]	@ (80001e0 <main+0x94>)
 800017c:	f001 fa64 	bl	8001648 <HAL_GPIO_WritePin>

	HAL_Delay(3000);  // Wait 3 seconds
 8000180:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000184:	f000 fc82 	bl	8000a8c <HAL_Delay>

	//Stop precharge and enable discharge (PRECH = 0, DISCHARGE = 1)

	HAL_GPIO_WritePin(DISCHARGE_GPIO_Port, DISCHARGE_Pin, GPIO_PIN_SET); // DISCHARGE on
 8000188:	2201      	movs	r2, #1
 800018a:	2120      	movs	r1, #32
 800018c:	4814      	ldr	r0, [pc, #80]	@ (80001e0 <main+0x94>)
 800018e:	f001 fa5b 	bl	8001648 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

        bms_state_machine();
 8000192:	f000 f9c9 	bl	8000528 <bms_state_machine>

        // For testing: toggle flags every 3 seconds
        HAL_Delay(3000);
 8000196:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800019a:	f000 fc77 	bl	8000a8c <HAL_Delay>
        chg_allowed = !chg_allowed;
 800019e:	4b11      	ldr	r3, [pc, #68]	@ (80001e4 <main+0x98>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	bf14      	ite	ne
 80001a6:	2301      	movne	r3, #1
 80001a8:	2300      	moveq	r3, #0
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	f083 0301 	eor.w	r3, r3, #1
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b0a      	ldr	r3, [pc, #40]	@ (80001e4 <main+0x98>)
 80001ba:	701a      	strb	r2, [r3, #0]
        dis_allowed = !dis_allowed;
 80001bc:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <main+0x9c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	bf14      	ite	ne
 80001c4:	2301      	movne	r3, #1
 80001c6:	2300      	moveq	r3, #0
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	f083 0301 	eor.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <main+0x9c>)
 80001d8:	701a      	strb	r2, [r3, #0]
        bms_state_machine();
 80001da:	bf00      	nop
 80001dc:	e7d9      	b.n	8000192 <main+0x46>
 80001de:	bf00      	nop
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	2000026d 	.word	0x2000026d
 80001e8:	2000026e 	.word	0x2000026e

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	@ 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f008 f95e 	bl	80084bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f003 f8bc 	bl	80033c0 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 fa2d 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800025a:	2380      	movs	r3, #128	@ 0x80
 800025c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000262:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fb28 	bl	80038c4 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 fa17 	bl	80006ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800027e:	2310      	movs	r3, #16
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fc95 	bl	8003bb8 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000294:	f000 fa0a 	bl	80006ac <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	@ 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <MX_CAN_Init+0x60>)
 80002a6:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <MX_CAN_Init+0x64>)
 80002a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002aa:	4b15      	ldr	r3, [pc, #84]	@ (8000300 <MX_CAN_Init+0x60>)
 80002ac:	2210      	movs	r2, #16
 80002ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <MX_CAN_Init+0x60>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <MX_CAN_Init+0x60>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002bc:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <MX_CAN_Init+0x60>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_CAN_Init+0x60>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <MX_CAN_Init+0x60>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_CAN_Init+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <MX_CAN_Init+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <MX_CAN_Init+0x60>)
 80002dc:	2200      	movs	r2, #0
 80002de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <MX_CAN_Init+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <MX_CAN_Init+0x60>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <MX_CAN_Init+0x60>)
 80002ee:	f000 fbf1 	bl	8000ad4 <HAL_CAN_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80002f8:	f000 f9d8 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000198 	.word	0x20000198
 8000304:	40006400 	.word	0x40006400

08000308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <MX_I2C1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	@ (800035c <MX_I2C1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_I2C1_Init+0x58>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000326:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800032a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000346:	f001 f997 	bl	8001678 <HAL_I2C_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f9ac 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200001c0 	.word	0x200001c0
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000368:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_SPI1_Init+0x64>)
 800036a:	4a18      	ldr	r2, [pc, #96]	@ (80003cc <MX_SPI1_Init+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036e:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <MX_SPI1_Init+0x64>)
 8000370:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000394:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_SPI1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_SPI1_Init+0x64>)
 80003b0:	220a      	movs	r2, #10
 80003b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <MX_SPI1_Init+0x64>)
 80003b6:	f003 fcb5 	bl	8003d24 <HAL_SPI_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003c0:	f000 f974 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000214 	.word	0x20000214
 80003cc:	40013000 	.word	0x40013000

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <MX_GPIO_Init+0xb4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a26      	ldr	r2, [pc, #152]	@ (8000484 <MX_GPIO_Init+0xb4>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <MX_GPIO_Init+0xb4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <MX_GPIO_Init+0xb4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a20      	ldr	r2, [pc, #128]	@ (8000484 <MX_GPIO_Init+0xb4>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_GPIO_Init+0xb4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_GPIO_Init+0xb4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a1a      	ldr	r2, [pc, #104]	@ (8000484 <MX_GPIO_Init+0xb4>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_GPIO_Init+0xb4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8000432:	4815      	ldr	r0, [pc, #84]	@ (8000488 <MX_GPIO_Init+0xb8>)
 8000434:	f001 f908 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_Pin|PRECH_Pin|DISCHARGE_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2134      	movs	r1, #52	@ 0x34
 800043c:	4813      	ldr	r0, [pc, #76]	@ (800048c <MX_GPIO_Init+0xbc>)
 800043e:	f001 f903 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8000442:	f44f 63a2 	mov.w	r3, #1296	@ 0x510
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2302      	movs	r3, #2
 8000452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	480b      	ldr	r0, [pc, #44]	@ (8000488 <MX_GPIO_Init+0xb8>)
 800045c:	f000 ff70 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_Pin PRECH_Pin DISCHARGE_Pin */
  GPIO_InitStruct.Pin = CHARGE_Pin|PRECH_Pin|DISCHARGE_Pin;
 8000460:	2334      	movs	r3, #52	@ 0x34
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_GPIO_Init+0xbc>)
 8000478:	f000 ff62 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	40010c00 	.word	0x40010c00

08000490 <bms_chg_switch>:

/* USER CODE BEGIN 4 */

void bms_chg_switch(bool enable) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET); // lógica invertida
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f083 0301 	eor.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(CHG_GPIO_Port, CHG_Pin,
 80004a2:	461a      	mov	r2, r3
 80004a4:	2104      	movs	r1, #4
 80004a6:	4803      	ldr	r0, [pc, #12]	@ (80004b4 <bms_chg_switch+0x24>)
 80004a8:	f001 f8ce 	bl	8001648 <HAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <bms_dis_switch>:

void bms_dis_switch(bool enable) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DIS_GPIO_Port, DIS_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET); // lógica invertida
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(DIS_GPIO_Port, DIS_Pin,
 80004ca:	461a      	mov	r2, r3
 80004cc:	2120      	movs	r1, #32
 80004ce:	4803      	ldr	r0, [pc, #12]	@ (80004dc <bms_dis_switch+0x24>)
 80004d0:	f001 f8ba 	bl	8001648 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <led_green>:

void led_green(bool on) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	461a      	mov	r2, r3
 80004ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <led_green+0x20>)
 80004f4:	f001 f8a8 	bl	8001648 <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800

08000504 <led_red>:

void led_red(bool on) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	461a      	mov	r2, r3
 8000512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000516:	4803      	ldr	r0, [pc, #12]	@ (8000524 <led_red+0x20>)
 8000518:	f001 f896 	bl	8001648 <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40010800 	.word	0x40010800

08000528 <bms_state_machine>:


void bms_state_machine(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    switch (state) {
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <bms_state_machine+0x11c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b03      	cmp	r3, #3
 8000532:	f200 8082 	bhi.w	800063a <bms_state_machine+0x112>
 8000536:	a201      	add	r2, pc, #4	@ (adr r2, 800053c <bms_state_machine+0x14>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000585 	.word	0x08000585
 8000544:	080005bd 	.word	0x080005bd
 8000548:	080005f5 	.word	0x080005f5
        case BMS_STATE_OFF:
            if (dis_allowed) {
 800054c:	4b3e      	ldr	r3, [pc, #248]	@ (8000648 <bms_state_machine+0x120>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <bms_state_machine+0x40>
                bms_dis_switch(true);
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffaf 	bl	80004b8 <bms_dis_switch>
                bms_chg_switch(false);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ff98 	bl	8000490 <bms_chg_switch>
                state = BMS_STATE_DIS;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <bms_state_machine+0x11c>)
 8000562:	2202      	movs	r2, #2
 8000564:	701a      	strb	r2, [r3, #0]
            } else if (chg_allowed) {
                bms_chg_switch(true);
                bms_dis_switch(false);
                state = BMS_STATE_CHG;
            }
            break;
 8000566:	e061      	b.n	800062c <bms_state_machine+0x104>
            } else if (chg_allowed) {
 8000568:	4b38      	ldr	r3, [pc, #224]	@ (800064c <bms_state_machine+0x124>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d05d      	beq.n	800062c <bms_state_machine+0x104>
                bms_chg_switch(true);
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ff8d 	bl	8000490 <bms_chg_switch>
                bms_dis_switch(false);
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ff9e 	bl	80004b8 <bms_dis_switch>
                state = BMS_STATE_CHG;
 800057c:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <bms_state_machine+0x11c>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
            break;
 8000582:	e053      	b.n	800062c <bms_state_machine+0x104>

        case BMS_STATE_CHG:
            if (!chg_allowed) {
 8000584:	4b31      	ldr	r3, [pc, #196]	@ (800064c <bms_state_machine+0x124>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d009      	beq.n	80005a6 <bms_state_machine+0x7e>
                bms_chg_switch(false);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ff7c 	bl	8000490 <bms_chg_switch>
                bms_dis_switch(false);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff8d 	bl	80004b8 <bms_dis_switch>
                state = BMS_STATE_OFF;
 800059e:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <bms_state_machine+0x11c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
                } else if (pack_current < 0.1f) {
                    bms_dis_switch(false);
                }
            }
#endif
            break;
 80005a4:	e044      	b.n	8000630 <bms_state_machine+0x108>
            } else if (dis_allowed) {
 80005a6:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <bms_state_machine+0x120>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d040      	beq.n	8000630 <bms_state_machine+0x108>
                bms_dis_switch(true);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff ff82 	bl	80004b8 <bms_dis_switch>
                state = BMS_STATE_NORMAL;
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <bms_state_machine+0x11c>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	701a      	strb	r2, [r3, #0]
            break;
 80005ba:	e039      	b.n	8000630 <bms_state_machine+0x108>

        case BMS_STATE_DIS:
            if (!dis_allowed) {
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <bms_state_machine+0x120>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d009      	beq.n	80005de <bms_state_machine+0xb6>
                bms_dis_switch(false);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ff74 	bl	80004b8 <bms_dis_switch>
                bms_chg_switch(false);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff ff5d 	bl	8000490 <bms_chg_switch>
                state = BMS_STATE_OFF;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <bms_state_machine+0x11c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
                } else if (pack_current > -0.1f) {
                    bms_chg_switch(false);
                }
            }
#endif
            break;
 80005dc:	e02a      	b.n	8000634 <bms_state_machine+0x10c>
            } else if (chg_allowed) {
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <bms_state_machine+0x124>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d026      	beq.n	8000634 <bms_state_machine+0x10c>
                bms_chg_switch(true);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff52 	bl	8000490 <bms_chg_switch>
                state = BMS_STATE_NORMAL;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <bms_state_machine+0x11c>)
 80005ee:	2203      	movs	r2, #3
 80005f0:	701a      	strb	r2, [r3, #0]
            break;
 80005f2:	e01f      	b.n	8000634 <bms_state_machine+0x10c>

        case BMS_STATE_NORMAL:
            if (!dis_allowed) {
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <bms_state_machine+0x120>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d006      	beq.n	8000610 <bms_state_machine+0xe8>
                bms_dis_switch(false);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff58 	bl	80004b8 <bms_dis_switch>
                state = BMS_STATE_CHG;
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <bms_state_machine+0x11c>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
            } else if (!chg_allowed) {
                bms_chg_switch(false);
                state = BMS_STATE_DIS;
            }
            break;
 800060e:	e013      	b.n	8000638 <bms_state_machine+0x110>
            } else if (!chg_allowed) {
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <bms_state_machine+0x124>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00c      	beq.n	8000638 <bms_state_machine+0x110>
                bms_chg_switch(false);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff36 	bl	8000490 <bms_chg_switch>
                state = BMS_STATE_DIS;
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <bms_state_machine+0x11c>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
            break;
 800062a:	e005      	b.n	8000638 <bms_state_machine+0x110>
            break;
 800062c:	bf00      	nop
 800062e:	e004      	b.n	800063a <bms_state_machine+0x112>
            break;
 8000630:	bf00      	nop
 8000632:	e002      	b.n	800063a <bms_state_machine+0x112>
            break;
 8000634:	bf00      	nop
 8000636:	e000      	b.n	800063a <bms_state_machine+0x112>
            break;
 8000638:	bf00      	nop
    }

    update_leds();
 800063a:	f000 f809 	bl	8000650 <update_leds>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000026c 	.word	0x2000026c
 8000648:	2000026e 	.word	0x2000026e
 800064c:	2000026d 	.word	0x2000026d

08000650 <update_leds>:


void update_leds(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    switch (state) {
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <update_leds+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d014      	beq.n	8000686 <update_leds+0x36>
 800065c:	2b03      	cmp	r3, #3
 800065e:	dc19      	bgt.n	8000694 <update_leds+0x44>
 8000660:	2b01      	cmp	r3, #1
 8000662:	d002      	beq.n	800066a <update_leds+0x1a>
 8000664:	2b02      	cmp	r3, #2
 8000666:	d007      	beq.n	8000678 <update_leds+0x28>
 8000668:	e014      	b.n	8000694 <update_leds+0x44>
        case BMS_STATE_CHG:
            led_green(true);
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff ff38 	bl	80004e0 <led_green>
            led_red(false);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff47 	bl	8000504 <led_red>
            break;
 8000676:	e014      	b.n	80006a2 <update_leds+0x52>
        case BMS_STATE_DIS:
            led_green(false);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff31 	bl	80004e0 <led_green>
            led_red(true);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff40 	bl	8000504 <led_red>
            break;
 8000684:	e00d      	b.n	80006a2 <update_leds+0x52>
        case BMS_STATE_NORMAL:
            led_green(false);
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff2a 	bl	80004e0 <led_green>
            led_red(false);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff39 	bl	8000504 <led_red>
            break;
 8000692:	e006      	b.n	80006a2 <update_leds+0x52>
        default:
            led_green(false);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff23 	bl	80004e0 <led_green>
            led_red(false);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ff32 	bl	8000504 <led_red>
            break;
 80006a0:	bf00      	nop
    }
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000026c 	.word	0x2000026c

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <HAL_MspInit+0x60>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <HAL_MspInit+0x60>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000

0800071c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a29      	ldr	r2, [pc, #164]	@ (80007dc <HAL_CAN_MspInit+0xc0>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d14b      	bne.n	80007d4 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000746:	61d3      	str	r3, [r2, #28]
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_CAN_MspInit+0xc4>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800076c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <HAL_CAN_MspInit+0xc8>)
 8000782:	f000 fddd 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <HAL_CAN_MspInit+0xc8>)
 800079c:	f000 fdd0 	bl	8001340 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <HAL_CAN_MspInit+0xcc>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <HAL_CAN_MspInit+0xcc>)
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2014      	movs	r0, #20
 80007ca:	f000 fd82 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007ce:	2014      	movs	r0, #20
 80007d0:	f000 fd9b 	bl	800130a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40006400 	.word	0x40006400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	40010000 	.word	0x40010000

080007ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <HAL_I2C_MspInit+0x70>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d123      	bne.n	8000854 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000824:	23c0      	movs	r3, #192	@ 0xc0
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	2312      	movs	r3, #18
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <HAL_I2C_MspInit+0x78>)
 8000838:	f000 fd82 	bl	8001340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000846:	61d3      	str	r3, [r2, #28]
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_I2C_MspInit+0x74>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005400 	.word	0x40005400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010c00 	.word	0x40010c00

08000868 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <HAL_SPI_MspInit+0x88>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d12f      	bne.n	80008e8 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 800088e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <HAL_SPI_MspInit+0x8c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b8:	23a0      	movs	r3, #160	@ 0xa0
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <HAL_SPI_MspInit+0x90>)
 80008cc:	f000 fd38 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d0:	2340      	movs	r3, #64	@ 0x40
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_SPI_MspInit+0x90>)
 80008e4:	f000 fd2c 	bl	8001340 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f882 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 800095a:	f000 f9b6 	bl	8000cca <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000960:	f001 f8ea 	bl	8001b38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000198 	.word	0x20000198
 800096c:	20000f3c 	.word	0x20000f3c

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff fff8 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000998:	4c09      	ldr	r4, [pc, #36]	@ (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f007 fd91 	bl	80084cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fbcf 	bl	800014c <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80009b8:	080085a8 	.word	0x080085a8
  ldr r2, =_sbss
 80009bc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009c0:	20001434 	.word	0x20001434

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 fc6f 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe68 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fc87 	bl	8001326 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 fc4f 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000270 	.word	0x20000270

08000a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000270 	.word	0x20000270

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0ed      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fe12 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b08:	f7ff ffb6 	bl	8000a78 <HAL_GetTick>
 8000b0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b0e:	e012      	b.n	8000b36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b10:	f7ff ffb2 	bl	8000a78 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d90b      	bls.n	8000b36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2205      	movs	r2, #5
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0c5      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0e5      	beq.n	8000b10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0202 	bic.w	r2, r2, #2
 8000b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b54:	f7ff ff90 	bl	8000a78 <HAL_GetTick>
 8000b58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b5a:	e012      	b.n	8000b82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b5c:	f7ff ff8c 	bl	8000a78 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b0a      	cmp	r3, #10
 8000b68:	d90b      	bls.n	8000b82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e09f      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1e5      	bne.n	8000b5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7e1b      	ldrb	r3, [r3, #24]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7e5b      	ldrb	r3, [r3, #25]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d108      	bne.n	8000bd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e007      	b.n	8000be4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7e9b      	ldrb	r3, [r3, #26]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d108      	bne.n	8000bfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0220 	orr.w	r2, r2, #32
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e007      	b.n	8000c0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0220 	bic.w	r2, r2, #32
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7edb      	ldrb	r3, [r3, #27]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0210 	bic.w	r2, r2, #16
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e007      	b.n	8000c38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0210 	orr.w	r2, r2, #16
 8000c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7f1b      	ldrb	r3, [r3, #28]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0208 	orr.w	r2, r2, #8
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0208 	bic.w	r2, r2, #8
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f5b      	ldrb	r3, [r3, #29]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0204 	orr.w	r2, r2, #4
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0204 	bic.w	r2, r2, #4
 8000c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	ea42 0103 	orr.w	r1, r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b08a      	sub	sp, #40	@ 0x28
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d07c      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d023      	beq.n	8000d62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f983 	bl	8001038 <HAL_CAN_TxMailbox0CompleteCallback>
 8000d32:	e016      	b.n	8000d62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d46:	e00c      	b.n	8000d62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d5a:	e002      	b.n	8000d62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f986 	bl	800106e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d024      	beq.n	8000db6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f962 	bl	800104a <HAL_CAN_TxMailbox1CompleteCallback>
 8000d86:	e016      	b.n	8000db6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d9a:	e00c      	b.n	8000db6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dae:	e002      	b.n	8000db6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f965 	bl	8001080 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d024      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f941 	bl	800105c <HAL_CAN_TxMailbox2CompleteCallback>
 8000dda:	e016      	b.n	8000e0a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dee:	e00c      	b.n	8000e0a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e02:	e002      	b.n	8000e0a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f944 	bl	8001092 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2208      	movs	r2, #8
 8000e48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f933 	bl	80010b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f91b 	bl	80010a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2210      	movs	r2, #16
 8000e90:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2208      	movs	r2, #8
 8000eac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f913 	bl	80010da <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f8fb 	bl	80010c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2210      	movs	r2, #16
 8000eec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f8fc 	bl	80010ec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f8f4 	bl	80010fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d07b      	beq.n	8001018 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d072      	beq.n	8001010 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d043      	beq.n	8001010 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d03e      	beq.n	8001010 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000f98:	2b60      	cmp	r3, #96	@ 0x60
 8000f9a:	d02b      	beq.n	8000ff4 <HAL_CAN_IRQHandler+0x32a>
 8000f9c:	2b60      	cmp	r3, #96	@ 0x60
 8000f9e:	d82e      	bhi.n	8000ffe <HAL_CAN_IRQHandler+0x334>
 8000fa0:	2b50      	cmp	r3, #80	@ 0x50
 8000fa2:	d022      	beq.n	8000fea <HAL_CAN_IRQHandler+0x320>
 8000fa4:	2b50      	cmp	r3, #80	@ 0x50
 8000fa6:	d82a      	bhi.n	8000ffe <HAL_CAN_IRQHandler+0x334>
 8000fa8:	2b40      	cmp	r3, #64	@ 0x40
 8000faa:	d019      	beq.n	8000fe0 <HAL_CAN_IRQHandler+0x316>
 8000fac:	2b40      	cmp	r3, #64	@ 0x40
 8000fae:	d826      	bhi.n	8000ffe <HAL_CAN_IRQHandler+0x334>
 8000fb0:	2b30      	cmp	r3, #48	@ 0x30
 8000fb2:	d010      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0x30c>
 8000fb4:	2b30      	cmp	r3, #48	@ 0x30
 8000fb6:	d822      	bhi.n	8000ffe <HAL_CAN_IRQHandler+0x334>
 8000fb8:	2b10      	cmp	r3, #16
 8000fba:	d002      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x2f8>
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	d005      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000fc0:	e01d      	b.n	8000ffe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fca:	e019      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fd4:	e014      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fde:	e00f      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fe8:	e00a      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000ff2:	e005      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000ffc:	e000      	b.n	8001000 <HAL_CAN_IRQHandler+0x336>
            break;
 8000ffe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800100e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f870 	bl	8001110 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	@ 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4906      	ldr	r1, [pc, #24]	@ (80011bc <__NVIC_EnableIRQ+0x34>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff90 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff2d 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff42 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff35 	bl	8001188 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b08b      	sub	sp, #44	@ 0x2c
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e169      	b.n	8001628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001354:	2201      	movs	r2, #1
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 8158 	bne.w	8001622 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a9a      	ldr	r2, [pc, #616]	@ (80015e0 <HAL_GPIO_Init+0x2a0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d05e      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 800137c:	4a98      	ldr	r2, [pc, #608]	@ (80015e0 <HAL_GPIO_Init+0x2a0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d875      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 8001382:	4a98      	ldr	r2, [pc, #608]	@ (80015e4 <HAL_GPIO_Init+0x2a4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d058      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 8001388:	4a96      	ldr	r2, [pc, #600]	@ (80015e4 <HAL_GPIO_Init+0x2a4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d86f      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 800138e:	4a96      	ldr	r2, [pc, #600]	@ (80015e8 <HAL_GPIO_Init+0x2a8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d052      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 8001394:	4a94      	ldr	r2, [pc, #592]	@ (80015e8 <HAL_GPIO_Init+0x2a8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d869      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 800139a:	4a94      	ldr	r2, [pc, #592]	@ (80015ec <HAL_GPIO_Init+0x2ac>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d04c      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 80013a0:	4a92      	ldr	r2, [pc, #584]	@ (80015ec <HAL_GPIO_Init+0x2ac>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d863      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013a6:	4a92      	ldr	r2, [pc, #584]	@ (80015f0 <HAL_GPIO_Init+0x2b0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d046      	beq.n	800143a <HAL_GPIO_Init+0xfa>
 80013ac:	4a90      	ldr	r2, [pc, #576]	@ (80015f0 <HAL_GPIO_Init+0x2b0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d85d      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d82a      	bhi.n	800140c <HAL_GPIO_Init+0xcc>
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d859      	bhi.n	800146e <HAL_GPIO_Init+0x12e>
 80013ba:	a201      	add	r2, pc, #4	@ (adr r2, 80013c0 <HAL_GPIO_Init+0x80>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	0800143b 	.word	0x0800143b
 80013c4:	08001415 	.word	0x08001415
 80013c8:	08001427 	.word	0x08001427
 80013cc:	08001469 	.word	0x08001469
 80013d0:	0800146f 	.word	0x0800146f
 80013d4:	0800146f 	.word	0x0800146f
 80013d8:	0800146f 	.word	0x0800146f
 80013dc:	0800146f 	.word	0x0800146f
 80013e0:	0800146f 	.word	0x0800146f
 80013e4:	0800146f 	.word	0x0800146f
 80013e8:	0800146f 	.word	0x0800146f
 80013ec:	0800146f 	.word	0x0800146f
 80013f0:	0800146f 	.word	0x0800146f
 80013f4:	0800146f 	.word	0x0800146f
 80013f8:	0800146f 	.word	0x0800146f
 80013fc:	0800146f 	.word	0x0800146f
 8001400:	0800146f 	.word	0x0800146f
 8001404:	0800141d 	.word	0x0800141d
 8001408:	08001431 	.word	0x08001431
 800140c:	4a79      	ldr	r2, [pc, #484]	@ (80015f4 <HAL_GPIO_Init+0x2b4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001412:	e02c      	b.n	800146e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e029      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	3304      	adds	r3, #4
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e024      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	3308      	adds	r3, #8
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e01f      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	330c      	adds	r3, #12
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e01a      	b.n	8001470 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001442:	2304      	movs	r3, #4
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e013      	b.n	8001470 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	611a      	str	r2, [r3, #16]
          break;
 800145a:	e009      	b.n	8001470 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	615a      	str	r2, [r3, #20]
          break;
 8001466:	e003      	b.n	8001470 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x130>
          break;
 800146e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	@ 0xff
 8001474:	d801      	bhi.n	800147a <HAL_GPIO_Init+0x13a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e001      	b.n	800147e <HAL_GPIO_Init+0x13e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	@ 0xff
 8001484:	d802      	bhi.n	800148c <HAL_GPIO_Init+0x14c>
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x152>
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	3b08      	subs	r3, #8
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	210f      	movs	r1, #15
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	6a39      	ldr	r1, [r7, #32]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80b1 	beq.w	8001622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c0:	4b4d      	ldr	r3, [pc, #308]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b4a      	ldr	r3, [pc, #296]	@ (80015f8 <HAL_GPIO_Init+0x2b8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d8:	4a48      	ldr	r2, [pc, #288]	@ (80015fc <HAL_GPIO_Init+0x2bc>)
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a40      	ldr	r2, [pc, #256]	@ (8001600 <HAL_GPIO_Init+0x2c0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x1ec>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3f      	ldr	r2, [pc, #252]	@ (8001604 <HAL_GPIO_Init+0x2c4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1e8>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3e      	ldr	r2, [pc, #248]	@ (8001608 <HAL_GPIO_Init+0x2c8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1e4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3d      	ldr	r2, [pc, #244]	@ (800160c <HAL_GPIO_Init+0x2cc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1e0>
 800151c:	2303      	movs	r3, #3
 800151e:	e006      	b.n	800152e <HAL_GPIO_Init+0x1ee>
 8001520:	2304      	movs	r3, #4
 8001522:	e004      	b.n	800152e <HAL_GPIO_Init+0x1ee>
 8001524:	2302      	movs	r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x1ee>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_GPIO_Init+0x1ee>
 800152c:	2300      	movs	r3, #0
 800152e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	4093      	lsls	r3, r2
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800153e:	492f      	ldr	r1, [pc, #188]	@ (80015fc <HAL_GPIO_Init+0x2bc>)
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001558:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	492c      	ldr	r1, [pc, #176]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	4928      	ldr	r1, [pc, #160]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001580:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	4922      	ldr	r1, [pc, #136]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	491e      	ldr	r1, [pc, #120]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 8001598:	4013      	ands	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4918      	ldr	r1, [pc, #96]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	4914      	ldr	r1, [pc, #80]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d021      	beq.n	8001614 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	490e      	ldr	r1, [pc, #56]	@ (8001610 <HAL_GPIO_Init+0x2d0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e021      	b.n	8001622 <HAL_GPIO_Init+0x2e2>
 80015de:	bf00      	nop
 80015e0:	10320000 	.word	0x10320000
 80015e4:	10310000 	.word	0x10310000
 80015e8:	10220000 	.word	0x10220000
 80015ec:	10210000 	.word	0x10210000
 80015f0:	10120000 	.word	0x10120000
 80015f4:	10110000 	.word	0x10110000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000
 8001600:	40010800 	.word	0x40010800
 8001604:	40010c00 	.word	0x40010c00
 8001608:	40011000 	.word	0x40011000
 800160c:	40011400 	.word	0x40011400
 8001610:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_GPIO_Init+0x304>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4909      	ldr	r1, [pc, #36]	@ (8001644 <HAL_GPIO_Init+0x304>)
 800161e:	4013      	ands	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	3301      	adds	r3, #1
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	fa22 f303 	lsr.w	r3, r2, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	f47f ae8e 	bne.w	8001354 <HAL_GPIO_Init+0x14>
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	372c      	adds	r7, #44	@ 0x2c
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	611a      	str	r2, [r3, #16]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e12b      	b.n	80018e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff f8a4 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2224      	movs	r2, #36	@ 0x24
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016dc:	f002 fa3a 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a81      	ldr	r2, [pc, #516]	@ (80018ec <HAL_I2C_Init+0x274>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d807      	bhi.n	80016fc <HAL_I2C_Init+0x84>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a80      	ldr	r2, [pc, #512]	@ (80018f0 <HAL_I2C_Init+0x278>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e006      	b.n	800170a <HAL_I2C_Init+0x92>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a7d      	ldr	r2, [pc, #500]	@ (80018f4 <HAL_I2C_Init+0x27c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0e7      	b.n	80018e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a78      	ldr	r2, [pc, #480]	@ (80018f8 <HAL_I2C_Init+0x280>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0c9b      	lsrs	r3, r3, #18
 800171c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_I2C_Init+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d802      	bhi.n	800174c <HAL_I2C_Init+0xd4>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3301      	adds	r3, #1
 800174a:	e009      	b.n	8001760 <HAL_I2C_Init+0xe8>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4a69      	ldr	r2, [pc, #420]	@ (80018fc <HAL_I2C_Init+0x284>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	3301      	adds	r3, #1
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	430b      	orrs	r3, r1
 8001766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001772:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	495c      	ldr	r1, [pc, #368]	@ (80018ec <HAL_I2C_Init+0x274>)
 800177c:	428b      	cmp	r3, r1
 800177e:	d819      	bhi.n	80017b4 <HAL_I2C_Init+0x13c>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1e59      	subs	r1, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fbb1 f3f3 	udiv	r3, r1, r3
 800178e:	1c59      	adds	r1, r3, #1
 8001790:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001794:	400b      	ands	r3, r1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <HAL_I2C_Init+0x138>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e59      	subs	r1, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ae:	e051      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e04f      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <HAL_I2C_Init+0x168>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e012      	b.n	8001806 <HAL_I2C_Init+0x18e>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	0099      	lsls	r1, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Init+0x196>
 800180a:	2301      	movs	r3, #1
 800180c:	e022      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10e      	bne.n	8001834 <HAL_I2C_Init+0x1bc>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e58      	subs	r0, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	fbb0 f3f3 	udiv	r3, r0, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001832:	e00f      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	0099      	lsls	r1, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6809      	ldr	r1, [r1, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001882:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6911      	ldr	r1, [r2, #16]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68d2      	ldr	r2, [r2, #12]
 800188e:	4311      	orrs	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	000186a0 	.word	0x000186a0
 80018f0:	001e847f 	.word	0x001e847f
 80018f4:	003d08ff 	.word	0x003d08ff
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	10624dd3 	.word	0x10624dd3

08001900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0e8      	b.n	8001ae4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 fb1e 	bl	8007f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fa97 	bl	8003e72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3304      	adds	r3, #4
 800194c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194e:	f002 fa6d 	bl	8003e2c <USB_CoreInit>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0bf      	b.n	8001ae4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fa9b 	bl	8003ea6 <USB_SetCurrentMode>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0b0      	b.n	8001ae4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e03e      	b.n	8001a06 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3311      	adds	r3, #17
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3310      	adds	r3, #16
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3313      	adds	r3, #19
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	3320      	adds	r3, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	3324      	adds	r3, #36	@ 0x24
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	3301      	adds	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d3bb      	bcc.n	8001988 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e044      	b.n	8001aa0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3b5      	bcc.n	8001a16 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab4:	f002 fa03 	bl	8003ebe <USB_DevInit>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00c      	b.n	8001ae4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fc82 	bl	80063e6 <USB_DevDisconnect>

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_PCD_Start+0x16>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e016      	b.n	8001b30 <HAL_PCD_Start+0x44>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f999 	bl	8003e46 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b14:	2101      	movs	r1, #1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f006 fc99 	bl	800844e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fc56 	bl	80063d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fc58 	bl	80063fa <USB_ReadInterrupts>
 8001b4a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fb1a 	bl	8002190 <PCD_EP_ISR_Handler>

    return;
 8001b5c:	e119      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f006 fa6c 	bl	800805e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b86:	2100      	movs	r1, #0
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f905 	bl	8001d98 <HAL_PCD_SetAddress>

    return;
 8001b8e:	e100      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00c      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001bac:	b292      	uxth	r2, r2
 8001bae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bb2:	e0ee      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001bd6:	e0dc      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d027      	beq.n	8001c32 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0204 	bic.w	r2, r2, #4
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f006 fa5c 	bl	80080d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c30:	e0af      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8083 	beq.w	8001d44 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	77fb      	strb	r3, [r7, #31]
 8001c42:	e010      	b.n	8001c66 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	441a      	add	r2, r3
 8001c50:	7ffb      	ldrb	r3, [r7, #31]
 8001c52:	8812      	ldrh	r2, [r2, #0]
 8001c54:	b292      	uxth	r2, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	3320      	adds	r3, #32
 8001c5a:	443b      	add	r3, r7
 8001c5c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	3301      	adds	r3, #1
 8001c64:	77fb      	strb	r3, [r7, #31]
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	2b07      	cmp	r3, #7
 8001c6a:	d9eb      	bls.n	8001c44 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	b292      	uxth	r2, r2
 8001c98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c9c:	bf00      	nop
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f6      	beq.n	8001c9e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	77fb      	strb	r3, [r7, #31]
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	7ffa      	ldrb	r2, [r7, #31]
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	440a      	add	r2, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3320      	adds	r3, #32
 8001ce0:	443b      	add	r3, r7
 8001ce2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ce6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
 8001cea:	3301      	adds	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	d9ec      	bls.n	8001cce <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0208 	orr.w	r2, r2, #8
 8001d06:	b292      	uxth	r2, r2
 8001d08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0204 	orr.w	r2, r2, #4
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f006 f9ad 	bl	800809c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d42:	e026      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f006 f96b 	bl	8008042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d6c:	e011      	b.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00c      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001d90:	bf00      	nop
  }
}
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_PCD_SetAddress+0x1a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e012      	b.n	8001dd8 <HAL_PCD_SetAddress+0x40>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 faef 	bl	80063ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	70fb      	strb	r3, [r7, #3]
 8001df2:	460b      	mov	r3, r1
 8001df4:	803b      	strh	r3, [r7, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da0e      	bge.n	8001e24 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 0207 	and.w	r2, r3, #7
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	3310      	adds	r3, #16
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	705a      	strb	r2, [r3, #1]
 8001e22:	e00e      	b.n	8001e42 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 0207 	and.w	r2, r3, #7
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4e:	883a      	ldrh	r2, [r7, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	78ba      	ldrb	r2, [r7, #2]
 8001e58:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e5a:	78bb      	ldrb	r3, [r7, #2]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_PCD_EP_Open+0x94>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e00e      	b.n	8001e92 <HAL_PCD_EP_Open+0xb2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 f838 	bl	8003ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001e90:	7afb      	ldrb	r3, [r7, #11]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da0e      	bge.n	8001ecc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 0207 	and.w	r2, r3, #7
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	705a      	strb	r2, [r3, #1]
 8001eca:	e00e      	b.n	8001eea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 0207 	and.w	r2, r3, #7
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_PCD_EP_Close+0x6a>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e00e      	b.n	8001f22 <HAL_PCD_EP_Close+0x88>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fbb0 	bl	8004678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	460b      	mov	r3, r1
 8001f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 0207 	and.w	r2, r3, #7
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fd67 	bl	8004a50 <USB_EPStartXfer>

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 0207 	and.w	r2, r3, #7
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	f003 0207 	and.w	r2, r3, #7
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3310      	adds	r3, #16
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2201      	movs	r2, #1
 8002004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	b2da      	uxtb	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6979      	ldr	r1, [r7, #20]
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fd19 	bl	8004a50 <USB_EPStartXfer>

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	7912      	ldrb	r2, [r2, #4]
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e04c      	b.n	80020e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	da0e      	bge.n	800206c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0207 	and.w	r2, r3, #7
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	3310      	adds	r3, #16
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e00c      	b.n	8002086 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_EP_SetStall+0x7e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e01c      	b.n	80020e0 <HAL_PCD_EP_SetStall+0xb8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 f87c 	bl	80061b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f004 f9a1 	bl	8006418 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	7912      	ldrb	r2, [r2, #4]
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e040      	b.n	8002188 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210a:	2b00      	cmp	r3, #0
 800210c:	da0e      	bge.n	800212c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	3310      	adds	r3, #16
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	705a      	strb	r2, [r3, #1]
 800212a:	e00e      	b.n	800214a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0207 	and.w	r2, r3, #7
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_PCD_EP_ClrStall+0x82>
 8002166:	2302      	movs	r3, #2
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_ClrStall+0xa0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68f9      	ldr	r1, [r7, #12]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f86a 	bl	8006252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b096      	sub	sp, #88	@ 0x58
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002198:	e3bb      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80021b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8175 	bne.w	80024a8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d14e      	bne.n	8002268 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80021d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021da:	81fb      	strh	r3, [r7, #14]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	3302      	adds	r3, #2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800221c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	441a      	add	r2, r3
 800222a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f005 feec 	bl	800800e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7b5b      	ldrb	r3, [r3, #13]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8368 	beq.w	8002912 <PCD_EP_ISR_Handler+0x782>
 8002242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8363 	bne.w	8002912 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7b5b      	ldrb	r3, [r3, #13]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002256:	b2da      	uxtb	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	735a      	strb	r2, [r3, #13]
 8002266:	e354      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800226e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800227a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800227e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002282:	2b00      	cmp	r3, #0
 8002284:	d034      	beq.n	80022f0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3306      	adds	r3, #6
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80022bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f004 f8f8 	bl	80064ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022d6:	4013      	ands	r3, r2
 80022d8:	823b      	strh	r3, [r7, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	8a3a      	ldrh	r2, [r7, #16]
 80022e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022e4:	b292      	uxth	r2, r2
 80022e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f005 fe63 	bl	8007fb4 <HAL_PCD_SetupStageCallback>
 80022ee:	e310      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f280 830c 	bge.w	8002912 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29a      	uxth	r2, r3
 8002302:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002306:	4013      	ands	r3, r2
 8002308:	83fb      	strh	r3, [r7, #30]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	8bfa      	ldrh	r2, [r7, #30]
 8002310:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002314:	b292      	uxth	r2, r2
 8002316:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	3306      	adds	r3, #6
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002342:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d019      	beq.n	8002380 <PCD_EP_ISR_Handler+0x1f0>
 800234c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235a:	6959      	ldr	r1, [r3, #20]
 800235c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002362:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002364:	b29b      	uxth	r3, r3
 8002366:	f004 f8a8 	bl	80064ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800236a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	441a      	add	r2, r3
 8002374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002376:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002378:	2100      	movs	r1, #0
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f005 fe2c 	bl	8007fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800238a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 82bd 	bne.w	8002912 <PCD_EP_ISR_Handler+0x782>
 8002398:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800239c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80023a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023a4:	f000 82b5 	beq.w	8002912 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4413      	add	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80023de:	d91d      	bls.n	800241c <PCD_EP_ISR_Handler+0x28c>
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <PCD_EP_ISR_Handler+0x26a>
 80023f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f6:	3b01      	subs	r3, #1
 80023f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002402:	b29b      	uxth	r3, r3
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	b29b      	uxth	r3, r3
 8002408:	4313      	orrs	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e026      	b.n	800246a <PCD_EP_ISR_Handler+0x2da>
 800241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <PCD_EP_ISR_Handler+0x2aa>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002432:	b29a      	uxth	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e017      	b.n	800246a <PCD_EP_ISR_Handler+0x2da>
 800243a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	647b      	str	r3, [r7, #68]	@ 0x44
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <PCD_EP_ISR_Handler+0x2c4>
 800244e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002450:	3301      	adds	r3, #1
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29a      	uxth	r2, r3
 800245a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245c:	b29b      	uxth	r3, r3
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	b29b      	uxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247a:	827b      	strh	r3, [r7, #18]
 800247c:	8a7b      	ldrh	r3, [r7, #18]
 800247e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002482:	827b      	strh	r3, [r7, #18]
 8002484:	8a7b      	ldrh	r3, [r7, #18]
 8002486:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800248a:	827b      	strh	r3, [r7, #18]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	8a7b      	ldrh	r3, [r7, #18]
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]
 80024a6:	e234      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f280 80fc 	bge.w	80026be <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80024dc:	4013      	ands	r3, r2
 80024de:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80024f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024f8:	b292      	uxth	r2, r2
 80024fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024fc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002514:	7b1b      	ldrb	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d125      	bne.n	8002566 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	3306      	adds	r3, #6
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002542:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002546:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8092 	beq.w	8002674 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002556:	6959      	ldr	r1, [r3, #20]
 8002558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255a:	88da      	ldrh	r2, [r3, #6]
 800255c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002560:	f003 ffab 	bl	80064ba <USB_ReadPMA>
 8002564:	e086      	b.n	8002674 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d10a      	bne.n	8002584 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800256e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002572:	461a      	mov	r2, r3
 8002574:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9d9 	bl	800292e <HAL_PCD_EP_DB_Receive>
 800257c:	4603      	mov	r3, r0
 800257e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002582:	e077      	b.n	8002674 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d024      	beq.n	800262c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	3302      	adds	r3, #2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800260e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002612:	2b00      	cmp	r3, #0
 8002614:	d02e      	beq.n	8002674 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002620:	891a      	ldrh	r2, [r3, #8]
 8002622:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002626:	f003 ff48 	bl	80064ba <USB_ReadPMA>
 800262a:	e023      	b.n	8002674 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	3306      	adds	r3, #6
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002654:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002666:	6959      	ldr	r1, [r3, #20]
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	895a      	ldrh	r2, [r3, #10]
 800266c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002670:	f003 ff23 	bl	80064ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800267c:	441a      	add	r2, r3
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800268a:	441a      	add	r2, r3
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <PCD_EP_ISR_Handler+0x514>
 8002698:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800269c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d206      	bcs.n	80026b2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f005 fc94 	bl	8007fd8 <HAL_PCD_DataOutStageCallback>
 80026b0:	e005      	b.n	80026be <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 f9c9 	bl	8004a50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8123 	beq.w	8002912 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80026cc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3310      	adds	r3, #16
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80026f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	441a      	add	r2, r3
 800270c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002718:	b29b      	uxth	r3, r3
 800271a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 80a2 	bne.w	800286a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	7b1b      	ldrb	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8093 	beq.w	800285c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002736:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d046      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d126      	bne.n	8002798 <PCD_EP_ISR_Handler+0x608>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	4413      	add	r3, r2
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
 8002762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	011a      	lsls	r2, r3, #4
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	4413      	add	r3, r2
 800276c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	b29a      	uxth	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29a      	uxth	r2, r3
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e061      	b.n	800285c <PCD_EP_ISR_Handler+0x6cc>
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d15d      	bne.n	800285c <PCD_EP_ISR_Handler+0x6cc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	4413      	add	r3, r2
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	011a      	lsls	r2, r3, #4
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e045      	b.n	800285c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d8:	785b      	ldrb	r3, [r3, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d126      	bne.n	800282c <PCD_EP_ISR_Handler+0x69c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	4413      	add	r3, r2
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	011a      	lsls	r2, r3, #4
 80027fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fe:	4413      	add	r3, r2
 8002800:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002810:	b29a      	uxth	r2, r3
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002824:	b29a      	uxth	r2, r3
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e017      	b.n	800285c <PCD_EP_ISR_Handler+0x6cc>
 800282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d113      	bne.n	800285c <PCD_EP_ISR_Handler+0x6cc>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002842:	4413      	add	r3, r2
 8002844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	011a      	lsls	r2, r3, #4
 800284c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284e:	4413      	add	r3, r2
 8002850:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	2200      	movs	r2, #0
 800285a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800285c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 fbd3 	bl	800800e <HAL_PCD_DataInStageCallback>
 8002868:	e053      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800286a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d146      	bne.n	8002904 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	3302      	adds	r3, #2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80028a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d907      	bls.n	80028be <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80028ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e002      	b.n	80028c4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80028be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80028c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f005 fb9b 	bl	800800e <HAL_PCD_DataInStageCallback>
 80028d8:	e01b      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028e2:	441a      	add	r2, r3
 80028e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028f0:	441a      	add	r2, r3
 80028f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f8a7 	bl	8004a50 <USB_EPStartXfer>
 8002902:	e006      	b.n	8002912 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002904:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002908:	461a      	mov	r2, r3
 800290a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f91b 	bl	8002b48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800291a:	b29b      	uxth	r3, r3
 800291c:	b21b      	sxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f6ff ac3b 	blt.w	800219a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3758      	adds	r7, #88	@ 0x58
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b088      	sub	sp, #32
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	4613      	mov	r3, r2
 800293a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07e      	beq.n	8002a44 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	3302      	adds	r3, #2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	8b7b      	ldrh	r3, [r7, #26]
 8002976:	429a      	cmp	r2, r3
 8002978:	d306      	bcc.n	8002988 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	8b7b      	ldrh	r3, [r7, #26]
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	e002      	b.n	800298e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d123      	bne.n	80029de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b0:	833b      	strh	r3, [r7, #24]
 80029b2:	8b3b      	ldrh	r3, [r7, #24]
 80029b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80029b8:	833b      	strh	r3, [r7, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	441a      	add	r2, r3
 80029c8:	8b3b      	ldrh	r3, [r7, #24]
 80029ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029da:	b29b      	uxth	r3, r3
 80029dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01f      	beq.n	8002a28 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a02:	82fb      	strh	r3, [r7, #22]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a28:	8b7b      	ldrh	r3, [r7, #26]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	6959      	ldr	r1, [r3, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	891a      	ldrh	r2, [r3, #8]
 8002a3c:	8b7b      	ldrh	r3, [r7, #26]
 8002a3e:	f003 fd3c 	bl	80064ba <USB_ReadPMA>
 8002a42:	e07c      	b.n	8002b3e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	3306      	adds	r3, #6
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	8b7b      	ldrh	r3, [r7, #26]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d306      	bcc.n	8002a86 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	8b7b      	ldrh	r3, [r7, #26]
 8002a7e:	1ad2      	subs	r2, r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	e002      	b.n	8002a8c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d123      	bne.n	8002adc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aae:	83fb      	strh	r3, [r7, #30]
 8002ab0:	8bfb      	ldrh	r3, [r7, #30]
 8002ab2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ab6:	83fb      	strh	r3, [r7, #30]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	8bfb      	ldrh	r3, [r7, #30]
 8002ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b00:	83bb      	strh	r3, [r7, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8bbb      	ldrh	r3, [r7, #28]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b26:	8b7b      	ldrh	r3, [r7, #26]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	895a      	ldrh	r2, [r3, #10]
 8002b38:	8b7b      	ldrh	r3, [r7, #26]
 8002b3a:	f003 fcbe 	bl	80064ba <USB_ReadPMA>
    }
  }

  return count;
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0a4      	sub	sp, #144	@ 0x90
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 81dd 	beq.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	3302      	adds	r3, #2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b8a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d907      	bls.n	8002baa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ba2:	1ad2      	subs	r2, r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	619a      	str	r2, [r3, #24]
 8002ba8:	e002      	b.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 80b9 	bne.w	8002d2c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d126      	bne.n	8002c10 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	011a      	lsls	r2, r3, #4
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	4413      	add	r3, r2
 8002be4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	e01a      	b.n	8002c46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d116      	bne.n	8002c46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	4413      	add	r3, r2
 8002c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	011a      	lsls	r2, r3, #4
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	4413      	add	r3, r2
 8002c3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d126      	bne.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	801a      	strh	r2, [r3, #0]
 8002ca0:	e017      	b.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d113      	bne.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	4413      	add	r3, r2
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	011a      	lsls	r2, r3, #4
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f005 f998 	bl	800800e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 82fc 	beq.w	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d04:	82fb      	strh	r3, [r7, #22]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	8afb      	ldrh	r3, [r7, #22]
 8002d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	8013      	strh	r3, [r2, #0]
 8002d2a:	e2da      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d021      	beq.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	f040 82ae 	bne.w	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d8e:	441a      	add	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	69da      	ldr	r2, [r3, #28]
 8002d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d30b      	bcc.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	621a      	str	r2, [r3, #32]
 8002dc4:	e017      	b.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d108      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002dce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002dde:	e00a      	b.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d165      	bne.n	8002eca <HAL_PCD_EP_DB_Transmit+0x382>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e12:	4413      	add	r3, r2
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	011a      	lsls	r2, r3, #4
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e3c:	d91d      	bls.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x332>
 8002e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x310>
 8002e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e54:	3b01      	subs	r3, #1
 8002e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	e044      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_PCD_EP_DB_Transmit+0x350>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e035      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eae:	3301      	adds	r3, #1
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	e01c      	b.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d118      	bne.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee6:	4413      	add	r3, r2
 8002ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	011a      	lsls	r2, r3, #4
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6959      	ldr	r1, [r3, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	891a      	ldrh	r2, [r3, #8]
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f003 fa8a 	bl	800642e <USB_WritePMA>
 8002f1a:	e1e2      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3306      	adds	r3, #6
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f44:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d307      	bcc.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f5c:	1ad2      	subs	r2, r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	619a      	str	r2, [r3, #24]
 8002f62:	e002      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80c0 	bne.w	80030f4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d126      	bne.n	8002fca <HAL_PCD_EP_DB_Transmit+0x482>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f90:	4413      	add	r3, r2
 8002f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	011a      	lsls	r2, r3, #4
 8002f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e01a      	b.n	8003000 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d116      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe6:	4413      	add	r3, r2
 8002fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	011a      	lsls	r2, r3, #4
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ffa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	677b      	str	r3, [r7, #116]	@ 0x74
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d12b      	bne.n	8003066 <HAL_PCD_EP_DB_Transmit+0x51e>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003022:	4413      	add	r3, r2
 8003024:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	011a      	lsls	r2, r3, #4
 800302c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302e:	4413      	add	r3, r2
 8003030:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003038:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003044:	b29a      	uxth	r2, r3
 8003046:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305c:	b29a      	uxth	r2, r3
 800305e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	e017      	b.n	8003096 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d113      	bne.n	8003096 <HAL_PCD_EP_DB_Transmit+0x54e>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307c:	4413      	add	r3, r2
 800307e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	011a      	lsls	r2, r3, #4
 8003086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003088:	4413      	add	r3, r2
 800308a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800308e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003092:	2200      	movs	r2, #0
 8003094:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f004 ffb6 	bl	800800e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 811a 	bne.w	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]
 80030f2:	e0f6      	b.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d121      	bne.n	8003142 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003118:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800312e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800313a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003148:	2b01      	cmp	r3, #1
 800314a:	f040 80ca 	bne.w	80032e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003156:	441a      	add	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003164:	441a      	add	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	429a      	cmp	r2, r3
 8003174:	d30b      	bcc.n	800318e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6a1a      	ldr	r2, [r3, #32]
 8003182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	621a      	str	r2, [r3, #32]
 800318c:	e017      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d108      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003196:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800319a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031a6:	e00a      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d165      	bne.n	8003298 <HAL_PCD_EP_DB_Transmit+0x750>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031e0:	4413      	add	r3, r2
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	011a      	lsls	r2, r3, #4
 80031ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ec:	4413      	add	r3, r2
 80031ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fe:	b29a      	uxth	r2, r3
 8003200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003202:	801a      	strh	r2, [r3, #0]
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003208:	2b3e      	cmp	r3, #62	@ 0x3e
 800320a:	d91d      	bls.n	8003248 <HAL_PCD_EP_DB_Transmit+0x700>
 800320c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003222:	3b01      	subs	r3, #1
 8003224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29a      	uxth	r2, r3
 800322c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800322e:	b29b      	uxth	r3, r3
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	b29b      	uxth	r3, r3
 8003234:	4313      	orrs	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003240:	b29a      	uxth	r2, r3
 8003242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	e041      	b.n	80032cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325e:	b29a      	uxth	r2, r3
 8003260:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003262:	801a      	strh	r2, [r3, #0]
 8003264:	e032      	b.n	80032cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_PCD_EP_DB_Transmit+0x738>
 800327a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327c:	3301      	adds	r3, #1
 800327e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29a      	uxth	r2, r3
 8003286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003288:	b29b      	uxth	r3, r3
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	b29b      	uxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b29a      	uxth	r2, r3
 8003292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	e019      	b.n	80032cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d115      	bne.n	80032cc <HAL_PCD_EP_DB_Transmit+0x784>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	4413      	add	r3, r2
 80032b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	011a      	lsls	r2, r3, #4
 80032b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ba:	4413      	add	r3, r2
 80032bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6959      	ldr	r1, [r3, #20]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	895a      	ldrh	r2, [r3, #10]
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f003 f8a6 	bl	800642e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fc:	82bb      	strh	r3, [r7, #20]
 80032fe:	8abb      	ldrh	r3, [r7, #20]
 8003300:	f083 0310 	eor.w	r3, r3, #16
 8003304:	82bb      	strh	r3, [r7, #20]
 8003306:	8abb      	ldrh	r3, [r7, #20]
 8003308:	f083 0320 	eor.w	r3, r3, #32
 800330c:	82bb      	strh	r3, [r7, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	8abb      	ldrh	r3, [r7, #20]
 800331e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800332a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3790      	adds	r7, #144	@ 0x90
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	4613      	mov	r3, r2
 800334c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	f003 0207 	and.w	r2, r3, #7
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	3310      	adds	r3, #16
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e009      	b.n	8003386 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003372:	897a      	ldrh	r2, [r7, #10]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003386:	893b      	ldrh	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	b29a      	uxth	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	80da      	strh	r2, [r3, #6]
 800339a:	e00b      	b.n	80033b4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2201      	movs	r2, #1
 80033a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e272      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8087 	beq.w	80034ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e0:	4b92      	ldr	r3, [pc, #584]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d00c      	beq.n	8003406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033ec:	4b8f      	ldr	r3, [pc, #572]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d112      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
 80033f8:	4b8c      	ldr	r3, [pc, #560]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003404:	d10b      	bne.n	800341e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	4b89      	ldr	r3, [pc, #548]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06c      	beq.n	80034ec <HAL_RCC_OscConfig+0x12c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d168      	bne.n	80034ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e24c      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x76>
 8003428:	4b80      	ldr	r3, [pc, #512]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7f      	ldr	r2, [pc, #508]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e02e      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x98>
 800343e:	4b7b      	ldr	r3, [pc, #492]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7a      	ldr	r2, [pc, #488]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b78      	ldr	r3, [pc, #480]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a77      	ldr	r2, [pc, #476]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0xbc>
 8003462:	4b72      	ldr	r3, [pc, #456]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a71      	ldr	r2, [pc, #452]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6f      	ldr	r3, [pc, #444]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6e      	ldr	r2, [pc, #440]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xd4>
 800347c:	4b6b      	ldr	r3, [pc, #428]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6a      	ldr	r2, [pc, #424]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b68      	ldr	r3, [pc, #416]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a67      	ldr	r2, [pc, #412]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd faec 	bl	8000a78 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd fae8 	bl	8000a78 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	@ 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e200      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b5d      	ldr	r3, [pc, #372]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe4>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fd fad8 	bl	8000a78 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd fad4 	bl	8000a78 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	@ 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1ec      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b53      	ldr	r3, [pc, #332]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x10c>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fa:	4b4c      	ldr	r3, [pc, #304]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003506:	4b49      	ldr	r3, [pc, #292]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x18c>
 8003512:	4b46      	ldr	r3, [pc, #280]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b43      	ldr	r3, [pc, #268]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x176>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c0      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b3d      	ldr	r3, [pc, #244]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4939      	ldr	r1, [pc, #228]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCC_OscConfig+0x270>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd fa8d 	bl	8000a78 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fa89 	bl	8000a78 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a1      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b2a      	ldr	r3, [pc, #168]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4927      	ldr	r1, [pc, #156]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <HAL_RCC_OscConfig+0x270>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fa6c 	bl	8000a78 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd fa68 	bl	8000a78 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e180      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03a      	beq.n	8003644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d019      	beq.n	800360a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <HAL_RCC_OscConfig+0x274>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035dc:	f7fd fa4c 	bl	8000a78 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd fa48 	bl	8000a78 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e160      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <HAL_RCC_OscConfig+0x26c>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003602:	2001      	movs	r0, #1
 8003604:	f000 faba 	bl	8003b7c <RCC_Delay>
 8003608:	e01c      	b.n	8003644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_RCC_OscConfig+0x274>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003610:	f7fd fa32 	bl	8000a78 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003616:	e00f      	b.n	8003638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003618:	f7fd fa2e 	bl	8000a78 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d908      	bls.n	8003638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e146      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	42420000 	.word	0x42420000
 8003634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b92      	ldr	r3, [pc, #584]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e9      	bne.n	8003618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a6 	beq.w	800379e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003656:	4b8b      	ldr	r3, [pc, #556]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	4b88      	ldr	r3, [pc, #544]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4a87      	ldr	r2, [pc, #540]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366c:	61d3      	str	r3, [r2, #28]
 800366e:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b82      	ldr	r3, [pc, #520]	@ (8003888 <HAL_RCC_OscConfig+0x4c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b7f      	ldr	r3, [pc, #508]	@ (8003888 <HAL_RCC_OscConfig+0x4c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7e      	ldr	r2, [pc, #504]	@ (8003888 <HAL_RCC_OscConfig+0x4c8>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fd f9ef 	bl	8000a78 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fd f9eb 	bl	8000a78 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e103      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b75      	ldr	r3, [pc, #468]	@ (8003888 <HAL_RCC_OscConfig+0x4c8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x312>
 80036c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6213      	str	r3, [r2, #32]
 80036d0:	e02d      	b.n	800372e <HAL_RCC_OscConfig+0x36e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x334>
 80036da:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a69      	ldr	r2, [pc, #420]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	4b67      	ldr	r3, [pc, #412]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4a66      	ldr	r2, [pc, #408]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6213      	str	r3, [r2, #32]
 80036f2:	e01c      	b.n	800372e <HAL_RCC_OscConfig+0x36e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d10c      	bne.n	8003716 <HAL_RCC_OscConfig+0x356>
 80036fc:	4b61      	ldr	r3, [pc, #388]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4a60      	ldr	r2, [pc, #384]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	6213      	str	r3, [r2, #32]
 8003708:	4b5e      	ldr	r3, [pc, #376]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4a5d      	ldr	r2, [pc, #372]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6213      	str	r3, [r2, #32]
 8003714:	e00b      	b.n	800372e <HAL_RCC_OscConfig+0x36e>
 8003716:	4b5b      	ldr	r3, [pc, #364]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a5a      	ldr	r2, [pc, #360]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	4b58      	ldr	r3, [pc, #352]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7fd f99f 	bl	8000a78 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd f99b 	bl	8000a78 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0b1      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	4b4b      	ldr	r3, [pc, #300]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RCC_OscConfig+0x37e>
 8003760:	e014      	b.n	800378c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003762:	f7fd f989 	bl	8000a78 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd f985 	bl	8000a78 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e09b      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003780:	4b40      	ldr	r3, [pc, #256]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ee      	bne.n	800376a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003792:	4b3c      	ldr	r3, [pc, #240]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4a3b      	ldr	r2, [pc, #236]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800379c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8087 	beq.w	80038b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a8:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d061      	beq.n	8003878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d146      	bne.n	800384a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037bc:	4b33      	ldr	r3, [pc, #204]	@ (800388c <HAL_RCC_OscConfig+0x4cc>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd f959 	bl	8000a78 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd f955 	bl	8000a78 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e06d      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	4b29      	ldr	r3, [pc, #164]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f0:	d108      	bne.n	8003804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4921      	ldr	r1, [pc, #132]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a19      	ldr	r1, [r3, #32]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	430b      	orrs	r3, r1
 8003816:	491b      	ldr	r1, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <HAL_RCC_OscConfig+0x4cc>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fd f929 	bl	8000a78 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382a:	f7fd f925 	bl	8000a78 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e03d      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x46a>
 8003848:	e035      	b.n	80038b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_RCC_OscConfig+0x4cc>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fd f912 	bl	8000a78 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd f90e 	bl	8000a78 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e026      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x498>
 8003876:	e01e      	b.n	80038b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e019      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
 8003884:	40021000 	.word	0x40021000
 8003888:	40007000 	.word	0x40007000
 800388c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCC_OscConfig+0x500>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000

080038c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0d0      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b67      	ldr	r3, [pc, #412]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	4965      	ldr	r1, [pc, #404]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b63      	ldr	r3, [pc, #396]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0b8      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003920:	4b59      	ldr	r3, [pc, #356]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a58      	ldr	r2, [pc, #352]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800392a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003938:	4b53      	ldr	r3, [pc, #332]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a52      	ldr	r2, [pc, #328]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b50      	ldr	r3, [pc, #320]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	494d      	ldr	r1, [pc, #308]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d040      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d115      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e07f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b41      	ldr	r3, [pc, #260]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e073      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06b      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4936      	ldr	r1, [pc, #216]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fd f860 	bl	8000a78 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fd f85c 	bl	8000a78 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e053      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d210      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 0207 	bic.w	r2, r3, #7
 80039fa:	4922      	ldr	r1, [pc, #136]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b20      	ldr	r3, [pc, #128]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e032      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a3e:	4b12      	ldr	r3, [pc, #72]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	490e      	ldr	r1, [pc, #56]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a52:	f000 f821 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	490a      	ldr	r1, [pc, #40]	@ (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <HAL_RCC_ClockConfig+0x1cc>)
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_ClockConfig+0x1d0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc ffbe 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08008574 	.word	0x08008574
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000004 	.word	0x20000004

08003a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x36>
 8003ac6:	e027      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aca:	613b      	str	r3, [r7, #16]
      break;
 8003acc:	e027      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	0c9b      	lsrs	r3, r3, #18
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ae6:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	0c5b      	lsrs	r3, r3, #17
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	4a11      	ldr	r2, [pc, #68]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	fb03 f202 	mul.w	r2, r3, r2
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e004      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	613b      	str	r3, [r7, #16]
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b1a:	613b      	str	r3, [r7, #16]
      break;
 8003b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1e:	693b      	ldr	r3, [r7, #16]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	007a1200 	.word	0x007a1200
 8003b34:	0800858c 	.word	0x0800858c
 8003b38:	0800859c 	.word	0x0800859c
 8003b3c:	003d0900 	.word	0x003d0900

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	20000000 	.word	0x20000000

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b58:	f7ff fff2 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	@ (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	08008584 	.word	0x08008584

08003b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <RCC_Delay+0x34>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <RCC_Delay+0x38>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0a5b      	lsrs	r3, r3, #9
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b98:	bf00      	nop
  }
  while (Delay --);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	60fa      	str	r2, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <RCC_Delay+0x1c>
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d07d      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	61d3      	str	r3, [r2, #28]
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	4b46      	ldr	r3, [pc, #280]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d118      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0c:	4b43      	ldr	r3, [pc, #268]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a42      	ldr	r2, [pc, #264]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c18:	f7fc ff2e 	bl	8000a78 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1e:	e008      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fc ff2a 	bl	8000a78 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e06d      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b3a      	ldr	r3, [pc, #232]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d027      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c66:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c72:	4a29      	ldr	r2, [pc, #164]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d014      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fc fef9 	bl	8000a78 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fc fef5 	bl	8000a78 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e036      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ee      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cac:	4b1a      	ldr	r3, [pc, #104]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4917      	ldr	r1, [pc, #92]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	490b      	ldr	r1, [pc, #44]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42420440 	.word	0x42420440

08003d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e076      	b.n	8003e24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d108      	bne.n	8003d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d46:	d009      	beq.n	8003d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	61da      	str	r2, [r3, #28]
 8003d4e:	e005      	b.n	8003d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc fd76 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de0:	ea42 0103 	orr.w	r1, r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	0c1a      	lsrs	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f002 0204 	and.w	r2, r2, #4
 8003e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	4638      	mov	r0, r7
 8003e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e56:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003e5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e7a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003e7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b09d      	sub	sp, #116	@ 0x74
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d81f      	bhi.n	8003f6a <USB_ActivateEndpoint+0x72>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <USB_ActivateEndpoint+0x38>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f73 	.word	0x08003f73
 8003f3c:	08003f4f 	.word	0x08003f4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f4c:	e012      	b.n	8003f74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f52:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003f56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f5a:	e00b      	b.n	8003f74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003f68:	e004      	b.n	8003f74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003f70:	e000      	b.n	8003f74 <USB_ActivateEndpoint+0x7c>
      break;
 8003f72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7b1b      	ldrb	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8178 	bne.w	80042d4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8084 	beq.w	80040f6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	4413      	add	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	011a      	lsls	r2, r3, #4
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	88db      	ldrh	r3, [r3, #6]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	827b      	strh	r3, [r7, #18]
 8004030:	8a7b      	ldrh	r3, [r7, #18]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01b      	beq.n	8004072 <USB_ActivateEndpoint+0x17a>
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004050:	823b      	strh	r3, [r7, #16]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	441a      	add	r2, r3
 800405c:	8a3b      	ldrh	r3, [r7, #16]
 800405e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	78db      	ldrb	r3, [r3, #3]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d020      	beq.n	80040bc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800408c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004090:	81bb      	strh	r3, [r7, #12]
 8004092:	89bb      	ldrh	r3, [r7, #12]
 8004094:	f083 0320 	eor.w	r3, r3, #32
 8004098:	81bb      	strh	r3, [r7, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	89bb      	ldrh	r3, [r7, #12]
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
 80040ba:	e2d5      	b.n	8004668 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d2:	81fb      	strh	r3, [r7, #14]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]
 80040f4:	e2b8      	b.n	8004668 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004100:	b29b      	uxth	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	4413      	add	r3, r2
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	011a      	lsls	r2, r3, #4
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	4413      	add	r3, r2
 8004114:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	88db      	ldrh	r3, [r3, #6]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004128:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	4413      	add	r3, r2
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	011a      	lsls	r2, r3, #4
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	4413      	add	r3, r2
 8004148:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004158:	b29a      	uxth	r2, r3
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b3e      	cmp	r3, #62	@ 0x3e
 8004164:	d91d      	bls.n	80041a2 <USB_ActivateEndpoint+0x2aa>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <USB_ActivateEndpoint+0x288>
 800417a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800417c:	3b01      	subs	r3, #1
 800417e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29a      	uxth	r2, r3
 8004186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004188:	b29b      	uxth	r3, r3
 800418a:	029b      	lsls	r3, r3, #10
 800418c:	b29b      	uxth	r3, r3
 800418e:	4313      	orrs	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419a:	b29a      	uxth	r2, r3
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	e026      	b.n	80041f0 <USB_ActivateEndpoint+0x2f8>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <USB_ActivateEndpoint+0x2c8>
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e017      	b.n	80041f0 <USB_ActivateEndpoint+0x2f8>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <USB_ActivateEndpoint+0x2e2>
 80041d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041d6:	3301      	adds	r3, #1
 80041d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80041fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01b      	beq.n	8004240 <USB_ActivateEndpoint+0x348>
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421e:	843b      	strh	r3, [r7, #32]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	8c3b      	ldrh	r3, [r7, #32]
 800422c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423c:	b29b      	uxth	r3, r3
 800423e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d124      	bne.n	8004292 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800425a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425e:	83bb      	strh	r3, [r7, #28]
 8004260:	8bbb      	ldrh	r3, [r7, #28]
 8004262:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004266:	83bb      	strh	r3, [r7, #28]
 8004268:	8bbb      	ldrh	r3, [r7, #28]
 800426a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800426e:	83bb      	strh	r3, [r7, #28]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	8bbb      	ldrh	r3, [r7, #28]
 800427c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]
 8004290:	e1ea      	b.n	8004668 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a8:	83fb      	strh	r3, [r7, #30]
 80042aa:	8bfb      	ldrh	r3, [r7, #30]
 80042ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042b0:	83fb      	strh	r3, [r7, #30]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	441a      	add	r2, r3
 80042bc:	8bfb      	ldrh	r3, [r7, #30]
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
 80042d2:	e1c9      	b.n	8004668 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11e      	bne.n	800431a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	441a      	add	r2, r3
 8004300:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
 8004318:	e01d      	b.n	8004356 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800432c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004330:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800434e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004352:	b29b      	uxth	r3, r3
 8004354:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004366:	4413      	add	r3, r2
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004372:	4413      	add	r3, r2
 8004374:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	891b      	ldrh	r3, [r3, #8]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	657b      	str	r3, [r7, #84]	@ 0x54
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004394:	b29b      	uxth	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439a:	4413      	add	r3, r2
 800439c:	657b      	str	r3, [r7, #84]	@ 0x54
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	011a      	lsls	r2, r3, #4
 80043a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80043ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	895b      	ldrh	r3, [r3, #10]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 8093 	bne.w	80044ee <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80043d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <USB_ActivateEndpoint+0x524>
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800442a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <USB_ActivateEndpoint+0x574>
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800445c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004464:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004468:	b29b      	uxth	r3, r3
 800446a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004484:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004486:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800448a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800448c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800448e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004492:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80044a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]
 80044ec:	e0bc      	b.n	8004668 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80044fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01d      	beq.n	8004546 <USB_ActivateEndpoint+0x64e>
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004520:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800453a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800453e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004556:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01d      	beq.n	800459e <USB_ActivateEndpoint+0x6a6>
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004578:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004596:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	78db      	ldrb	r3, [r3, #3]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d024      	beq.n	80045f0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80045c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80045c4:	f083 0320 	eor.w	r3, r3, #32
 80045c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]
 80045ee:	e01d      	b.n	800462c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004606:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800461c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004628:	b29b      	uxth	r3, r3
 800462a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800463e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004642:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800465c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004668:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800466c:	4618      	mov	r0, r3
 800466e:	3774      	adds	r7, #116	@ 0x74
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b08d      	sub	sp, #52	@ 0x34
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	7b1b      	ldrb	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 808e 	bne.w	80047a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d044      	beq.n	800471e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	81bb      	strh	r3, [r7, #12]
 80046a2:	89bb      	ldrh	r3, [r7, #12]
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <USB_DeactivateEndpoint+0x6c>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	817b      	strh	r3, [r7, #10]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	897b      	ldrh	r3, [r7, #10]
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fa:	813b      	strh	r3, [r7, #8]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004718:	b29b      	uxth	r3, r3
 800471a:	8013      	strh	r3, [r2, #0]
 800471c:	e192      	b.n	8004a44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	827b      	strh	r3, [r7, #18]
 800472c:	8a7b      	ldrh	r3, [r7, #18]
 800472e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01b      	beq.n	800476e <USB_DeactivateEndpoint+0xf6>
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474c:	823b      	strh	r3, [r7, #16]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	8a3b      	ldrh	r3, [r7, #16]
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004784:	81fb      	strh	r3, [r7, #14]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800479e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
 80047a6:	e14d      	b.n	8004a44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 80a5 	bne.w	80048fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	843b      	strh	r3, [r7, #32]
 80047c0:	8c3b      	ldrh	r3, [r7, #32]
 80047c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01b      	beq.n	8004802 <USB_DeactivateEndpoint+0x18a>
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e0:	83fb      	strh	r3, [r7, #30]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	441a      	add	r2, r3
 80047ec:	8bfb      	ldrh	r3, [r7, #30]
 80047ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	83bb      	strh	r3, [r7, #28]
 8004810:	8bbb      	ldrh	r3, [r7, #28]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01b      	beq.n	8004852 <USB_DeactivateEndpoint+0x1da>
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004830:	837b      	strh	r3, [r7, #26]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	8b7b      	ldrh	r3, [r7, #26]
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004868:	833b      	strh	r3, [r7, #24]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	8b3b      	ldrh	r3, [r7, #24]
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004882:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800489c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a0:	82fb      	strh	r3, [r7, #22]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	8afb      	ldrh	r3, [r7, #22]
 80048ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048be:	b29b      	uxth	r3, r3
 80048c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d8:	82bb      	strh	r3, [r7, #20]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	8abb      	ldrh	r3, [r7, #20]
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
 80048fa:	e0a3      	b.n	8004a44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800490a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800490c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <USB_DeactivateEndpoint+0x2d4>
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800493c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004948:	b29b      	uxth	r3, r3
 800494a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800495a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <USB_DeactivateEndpoint+0x324>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800498c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004994:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004998:	b29b      	uxth	r3, r3
 800499a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3734      	adds	r7, #52	@ 0x34
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b0c2      	sub	sp, #264	@ 0x108
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a5e:	6018      	str	r0, [r3, #0]
 8004a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 86b7 	bne.w	80057ea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004aa8:	e007      	b.n	8004aba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	7b1b      	ldrb	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d13a      	bne.n	8004b40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6959      	ldr	r1, [r3, #20]
 8004ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	88da      	ldrh	r2, [r3, #6]
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004aec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004af0:	6800      	ldr	r0, [r0, #0]
 8004af2:	f001 fc9c 	bl	800642e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	011a      	lsls	r2, r3, #4
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	f000 be1f 	b.w	800577e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	f040 8462 	bne.w	8005416 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	f240 83df 	bls.w	800532e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b96:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bc0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a1a      	ldr	r2, [r3, #32]
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bdc:	1ad2      	subs	r2, r2, r3
 8004bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 81c7 	beq.w	8004fa0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d177      	bne.n	8004d1e <USB_EPStartXfer+0x2ce>
 8004c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	4413      	add	r3, r2
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	011a      	lsls	r2, r3, #4
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	4413      	add	r3, r2
 8004c64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c80:	d921      	bls.n	8004cc6 <USB_EPStartXfer+0x276>
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <USB_EPStartXfer+0x252>
 8004c98:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e050      	b.n	8004d68 <USB_EPStartXfer+0x318>
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <USB_EPStartXfer+0x294>
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e041      	b.n	8004d68 <USB_EPStartXfer+0x318>
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <USB_EPStartXfer+0x2b4>
 8004cfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	e024      	b.n	8004d68 <USB_EPStartXfer+0x318>
 8004d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d11c      	bne.n	8004d68 <USB_EPStartXfer+0x318>
 8004d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	4413      	add	r3, r2
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	011a      	lsls	r2, r3, #4
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	4413      	add	r3, r2
 8004d58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	895b      	ldrh	r3, [r3, #10]
 8004d74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6959      	ldr	r1, [r3, #20]
 8004d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004d8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	f001 fb49 	bl	800642e <USB_WritePMA>
            ep->xfer_buff += len;
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dac:	441a      	add	r2, r3
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d90f      	bls.n	8004df6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	621a      	str	r2, [r3, #32]
 8004df4:	e00e      	b.n	8004e14 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d177      	bne.n	8004f14 <USB_EPStartXfer+0x4c4>
 8004e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	011a      	lsls	r2, r3, #4
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e76:	d921      	bls.n	8004ebc <USB_EPStartXfer+0x46c>
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <USB_EPStartXfer+0x448>
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	3b01      	subs	r3, #1
 8004e94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	e056      	b.n	8004f6a <USB_EPStartXfer+0x51a>
 8004ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <USB_EPStartXfer+0x48a>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e047      	b.n	8004f6a <USB_EPStartXfer+0x51a>
 8004eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <USB_EPStartXfer+0x4aa>
 8004ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e02a      	b.n	8004f6a <USB_EPStartXfer+0x51a>
 8004f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d122      	bne.n	8004f6a <USB_EPStartXfer+0x51a>
 8004f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	623b      	str	r3, [r7, #32]
 8004f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	4413      	add	r3, r2
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	011a      	lsls	r2, r3, #4
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	891b      	ldrh	r3, [r3, #8]
 8004f76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6959      	ldr	r1, [r3, #20]
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f98:	6800      	ldr	r0, [r0, #0]
 8004f9a:	f001 fa48 	bl	800642e <USB_WritePMA>
 8004f9e:	e3ee      	b.n	800577e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d177      	bne.n	80050a0 <USB_EPStartXfer+0x650>
 8004fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd0:	4413      	add	r3, r2
 8004fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	011a      	lsls	r2, r3, #4
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005000:	2b3e      	cmp	r3, #62	@ 0x3e
 8005002:	d921      	bls.n	8005048 <USB_EPStartXfer+0x5f8>
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <USB_EPStartXfer+0x5d4>
 800501a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800501e:	3b01      	subs	r3, #1
 8005020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29a      	uxth	r2, r3
 800502a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800502e:	b29b      	uxth	r3, r3
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	b29b      	uxth	r3, r3
 8005034:	4313      	orrs	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005040:	b29a      	uxth	r2, r3
 8005042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e056      	b.n	80050f6 <USB_EPStartXfer+0x6a6>
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <USB_EPStartXfer+0x616>
 8005050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505e:	b29a      	uxth	r2, r3
 8005060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e047      	b.n	80050f6 <USB_EPStartXfer+0x6a6>
 8005066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <USB_EPStartXfer+0x636>
 800507c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005080:	3301      	adds	r3, #1
 8005082:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29a      	uxth	r2, r3
 800508c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005090:	b29b      	uxth	r3, r3
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	b29b      	uxth	r3, r3
 8005096:	4313      	orrs	r3, r2
 8005098:	b29a      	uxth	r2, r3
 800509a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	e02a      	b.n	80050f6 <USB_EPStartXfer+0x6a6>
 80050a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d122      	bne.n	80050f6 <USB_EPStartXfer+0x6a6>
 80050b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80050bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d0:	4413      	add	r3, r2
 80050d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e4:	4413      	add	r3, r2
 80050e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	891b      	ldrh	r3, [r3, #8]
 8005102:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005116:	b29b      	uxth	r3, r3
 8005118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800511c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005120:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005124:	6800      	ldr	r0, [r0, #0]
 8005126:	f001 f982 	bl	800642e <USB_WritePMA>
            ep->xfer_buff += len;
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513a:	441a      	add	r2, r3
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d90f      	bls.n	8005184 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005174:	1ad2      	subs	r2, r2, r3
 8005176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800517a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	621a      	str	r2, [r3, #32]
 8005182:	e00e      	b.n	80051a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d177      	bne.n	80052ae <USB_EPStartXfer+0x85e>
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	4413      	add	r3, r2
 80051e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	011a      	lsls	r2, r3, #4
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005204:	b29a      	uxth	r2, r3
 8005206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005210:	d921      	bls.n	8005256 <USB_EPStartXfer+0x806>
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <USB_EPStartXfer+0x7e2>
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	3b01      	subs	r3, #1
 800522e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29a      	uxth	r2, r3
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523c:	b29b      	uxth	r3, r3
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	b29b      	uxth	r3, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	e050      	b.n	80052f8 <USB_EPStartXfer+0x8a8>
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <USB_EPStartXfer+0x824>
 800525e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526c:	b29a      	uxth	r2, r3
 800526e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e041      	b.n	80052f8 <USB_EPStartXfer+0x8a8>
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800527e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <USB_EPStartXfer+0x844>
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	3301      	adds	r3, #1
 8005290:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29a      	uxth	r2, r3
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529e:	b29b      	uxth	r3, r3
 80052a0:	029b      	lsls	r3, r3, #10
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e024      	b.n	80052f8 <USB_EPStartXfer+0x8a8>
 80052ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d11c      	bne.n	80052f8 <USB_EPStartXfer+0x8a8>
 80052be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d2:	4413      	add	r3, r2
 80052d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	011a      	lsls	r2, r3, #4
 80052e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e6:	4413      	add	r3, r2
 80052e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	895b      	ldrh	r3, [r3, #10]
 8005304:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6959      	ldr	r1, [r3, #20]
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	b29b      	uxth	r3, r3
 800531a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800531e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005322:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	f001 f881 	bl	800642e <USB_WritePMA>
 800532c:	e227      	b.n	800577e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800533e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005364:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ba:	4413      	add	r3, r2
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011a      	lsls	r2, r3, #4
 80053cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ce:	4413      	add	r3, r2
 80053d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	891b      	ldrh	r3, [r3, #8]
 80053ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6959      	ldr	r1, [r3, #20]
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005400:	b29b      	uxth	r3, r3
 8005402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005406:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800540a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	f001 f80d 	bl	800642e <USB_WritePMA>
 8005414:	e1b3      	b.n	800577e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80c6 	beq.w	80055e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	673b      	str	r3, [r7, #112]	@ 0x70
 8005468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d177      	bne.n	8005568 <USB_EPStartXfer+0xb18>
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005498:	4413      	add	r3, r2
 800549a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80054b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ca:	d921      	bls.n	8005510 <USB_EPStartXfer+0xac0>
 80054cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <USB_EPStartXfer+0xa9c>
 80054e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054e6:	3b01      	subs	r3, #1
 80054e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e050      	b.n	80055b2 <USB_EPStartXfer+0xb62>
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <USB_EPStartXfer+0xade>
 8005518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005526:	b29a      	uxth	r2, r3
 8005528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e041      	b.n	80055b2 <USB_EPStartXfer+0xb62>
 800552e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <USB_EPStartXfer+0xafe>
 8005544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005548:	3301      	adds	r3, #1
 800554a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800554e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005558:	b29b      	uxth	r3, r3
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	b29b      	uxth	r3, r3
 800555e:	4313      	orrs	r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e024      	b.n	80055b2 <USB_EPStartXfer+0xb62>
 8005568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11c      	bne.n	80055b2 <USB_EPStartXfer+0xb62>
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800558c:	4413      	add	r3, r2
 800558e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	011a      	lsls	r2, r3, #4
 800559e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	895b      	ldrh	r3, [r3, #10]
 80055be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055e0:	6800      	ldr	r0, [r0, #0]
 80055e2:	f000 ff24 	bl	800642e <USB_WritePMA>
 80055e6:	e0ca      	b.n	800577e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d177      	bne.n	80056e8 <USB_EPStartXfer+0xc98>
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005618:	4413      	add	r3, r2
 800561a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800562c:	4413      	add	r3, r2
 800562e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005632:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	b29a      	uxth	r2, r3
 8005640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	2b3e      	cmp	r3, #62	@ 0x3e
 800564a:	d921      	bls.n	8005690 <USB_EPStartXfer+0xc40>
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <USB_EPStartXfer+0xc1c>
 8005662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005666:	3b01      	subs	r3, #1
 8005668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800566c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29b      	uxth	r3, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005688:	b29a      	uxth	r2, r3
 800568a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e05c      	b.n	800574a <USB_EPStartXfer+0xcfa>
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_EPStartXfer+0xc5e>
 8005698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e04d      	b.n	800574a <USB_EPStartXfer+0xcfa>
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <USB_EPStartXfer+0xc7e>
 80056c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80056d8:	b29b      	uxth	r3, r3
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e030      	b.n	800574a <USB_EPStartXfer+0xcfa>
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d128      	bne.n	800574a <USB_EPStartXfer+0xcfa>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005714:	b29b      	uxth	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800571c:	4413      	add	r3, r2
 800571e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	011a      	lsls	r2, r3, #4
 8005730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005734:	4413      	add	r3, r2
 8005736:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800573a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800573e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005742:	b29a      	uxth	r2, r3
 8005744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005748:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800574a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	891b      	ldrh	r3, [r3, #8]
 8005756:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800575a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6959      	ldr	r1, [r3, #20]
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	b29b      	uxth	r3, r3
 800576c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005770:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005774:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005778:	6800      	ldr	r0, [r0, #0]
 800577a:	f000 fe58 	bl	800642e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a4:	817b      	strh	r3, [r7, #10]
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	f083 0310 	eor.w	r3, r3, #16
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	f083 0320 	eor.w	r3, r3, #32
 80057b4:	817b      	strh	r3, [r7, #10]
 80057b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	897b      	ldrh	r3, [r7, #10]
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]
 80057e6:	f000 bcde 	b.w	80061a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	7b1b      	ldrb	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 80bb 	bne.w	8005972 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d917      	bls.n	8005848 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	619a      	str	r2, [r3, #24]
 8005846:	e00e      	b.n	8005866 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800588a:	4413      	add	r3, r2
 800588c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058a2:	4413      	add	r3, r2
 80058a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058c6:	d924      	bls.n	8005912 <USB_EPStartXfer+0xec2>
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <USB_EPStartXfer+0xe98>
 80058de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80058e2:	3b01      	subs	r3, #1
 80058e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	029b      	lsls	r3, r3, #10
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	f000 bc10 	b.w	8006132 <USB_EPStartXfer+0x16e2>
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10c      	bne.n	8005934 <USB_EPStartXfer+0xee4>
 800591a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592a:	b29a      	uxth	r2, r3
 800592c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e3fe      	b.n	8006132 <USB_EPStartXfer+0x16e2>
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <USB_EPStartXfer+0xf04>
 800594a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29a      	uxth	r2, r3
 800595c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005960:	b29b      	uxth	r3, r3
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	b29b      	uxth	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e3df      	b.n	8006132 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	78db      	ldrb	r3, [r3, #3]
 800597e:	2b02      	cmp	r3, #2
 8005980:	f040 8218 	bne.w	8005db4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f040 809d 	bne.w	8005ad0 <USB_EPStartXfer+0x1080>
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ba:	4413      	add	r3, r2
 80059bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80059fe:	d92b      	bls.n	8005a58 <USB_EPStartXfer+0x1008>
 8005a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <USB_EPStartXfer+0xfe0>
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e070      	b.n	8005b3a <USB_EPStartXfer+0x10ea>
 8005a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10c      	bne.n	8005a82 <USB_EPStartXfer+0x1032>
 8005a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e05b      	b.n	8005b3a <USB_EPStartXfer+0x10ea>
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <USB_EPStartXfer+0x1062>
 8005aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aac:	3301      	adds	r3, #1
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e034      	b.n	8005b3a <USB_EPStartXfer+0x10ea>
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d12c      	bne.n	8005b3a <USB_EPStartXfer+0x10ea>
 8005ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 809d 	bne.w	8005c94 <USB_EPStartXfer+0x1244>
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	4413      	add	r3, r2
 8005b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bc2:	d92b      	bls.n	8005c1c <USB_EPStartXfer+0x11cc>
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <USB_EPStartXfer+0x11a4>
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	e069      	b.n	8005cf0 <USB_EPStartXfer+0x12a0>
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <USB_EPStartXfer+0x11f6>
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e054      	b.n	8005cf0 <USB_EPStartXfer+0x12a0>
 8005c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <USB_EPStartXfer+0x1226>
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c70:	3301      	adds	r3, #1
 8005c72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e02d      	b.n	8005cf0 <USB_EPStartXfer+0x12a0>
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d125      	bne.n	8005cf0 <USB_EPStartXfer+0x12a0>
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cba:	4413      	add	r3, r2
 8005cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	011a      	lsls	r2, r3, #4
 8005cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8218 	beq.w	8006132 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USB_EPStartXfer+0x12ea>
 8005d2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 81f5 	bne.w	8006132 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 81ee 	bne.w	8006132 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005daa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
 8005db2:	e1be      	b.n	8006132 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	78db      	ldrb	r3, [r3, #3]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 81b4 	bne.w	800612e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d917      	bls.n	8005e12 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	619a      	str	r2, [r3, #24]
 8005e10:	e00e      	b.n	8005e30 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8085 	bne.w	8005f4c <USB_EPStartXfer+0x14fc>
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e66:	4413      	add	r3, r2
 8005e68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	011a      	lsls	r2, r3, #4
 8005e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e7e:	4413      	add	r3, r2
 8005e80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea2:	d923      	bls.n	8005eec <USB_EPStartXfer+0x149c>
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <USB_EPStartXfer+0x1474>
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e060      	b.n	8005fae <USB_EPStartXfer+0x155e>
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <USB_EPStartXfer+0x14be>
 8005ef4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	e04f      	b.n	8005fae <USB_EPStartXfer+0x155e>
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <USB_EPStartXfer+0x14de>
 8005f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	4313      	orrs	r3, r2
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e030      	b.n	8005fae <USB_EPStartXfer+0x155e>
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d128      	bne.n	8005fae <USB_EPStartXfer+0x155e>
 8005f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f80:	4413      	add	r3, r2
 8005f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	011a      	lsls	r2, r3, #4
 8005f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 8085 	bne.w	80060d8 <USB_EPStartXfer+0x1688>
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	011a      	lsls	r2, r3, #4
 8006006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800600a:	4413      	add	r3, r2
 800600c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	2b3e      	cmp	r3, #62	@ 0x3e
 800602e:	d923      	bls.n	8006078 <USB_EPStartXfer+0x1628>
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <USB_EPStartXfer+0x1600>
 8006046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800604a:	3b01      	subs	r3, #1
 800604c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800605c:	b29b      	uxth	r3, r3
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	b29b      	uxth	r3, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e05c      	b.n	8006132 <USB_EPStartXfer+0x16e2>
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <USB_EPStartXfer+0x164a>
 8006080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e04b      	b.n	8006132 <USB_EPStartXfer+0x16e2>
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <USB_EPStartXfer+0x166a>
 80060b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060b4:	3301      	adds	r3, #1
 80060b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	029b      	lsls	r3, r3, #10
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4313      	orrs	r3, r2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e02c      	b.n	8006132 <USB_EPStartXfer+0x16e2>
 80060d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d124      	bne.n	8006132 <USB_EPStartXfer+0x16e2>
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060fe:	4413      	add	r3, r2
 8006100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	011a      	lsls	r2, r3, #4
 8006112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006116:	4413      	add	r3, r2
 8006118:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800611c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	b29a      	uxth	r2, r3
 8006126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e001      	b.n	8006132 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e03a      	b.n	80061a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006158:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800615c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006160:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006164:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006168:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800616c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006170:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800619e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d020      	beq.n	8006206 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061da:	81bb      	strh	r3, [r7, #12]
 80061dc:	89bb      	ldrh	r3, [r7, #12]
 80061de:	f083 0310 	eor.w	r3, r3, #16
 80061e2:	81bb      	strh	r3, [r7, #12]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	89bb      	ldrh	r3, [r7, #12]
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
 8006204:	e01f      	b.n	8006246 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621c:	81fb      	strh	r3, [r7, #14]
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006224:	81fb      	strh	r3, [r7, #14]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	89fb      	ldrh	r3, [r7, #14]
 8006232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800623a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800623e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006242:	b29b      	uxth	r3, r3
 8006244:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006252:	b480      	push	{r7}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	7b1b      	ldrb	r3, [r3, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 809d 	bne.w	80063a0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04c      	beq.n	8006308 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	823b      	strh	r3, [r7, #16]
 800627c:	8a3b      	ldrh	r3, [r7, #16]
 800627e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01b      	beq.n	80062be <USB_EPClearStall+0x6c>
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629c:	81fb      	strh	r3, [r7, #14]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	89fb      	ldrh	r3, [r7, #14]
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	78db      	ldrb	r3, [r3, #3]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d06c      	beq.n	80063a0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062dc:	81bb      	strh	r3, [r7, #12]
 80062de:	89bb      	ldrh	r3, [r7, #12]
 80062e0:	f083 0320 	eor.w	r3, r3, #32
 80062e4:	81bb      	strh	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	441a      	add	r2, r3
 80062f0:	89bb      	ldrh	r3, [r7, #12]
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]
 8006306:	e04b      	b.n	80063a0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	82fb      	strh	r3, [r7, #22]
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01b      	beq.n	8006358 <USB_EPClearStall+0x106>
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	82bb      	strh	r3, [r7, #20]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	8abb      	ldrh	r3, [r7, #20]
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636e:	827b      	strh	r3, [r7, #18]
 8006370:	8a7b      	ldrh	r3, [r7, #18]
 8006372:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006376:	827b      	strh	r3, [r7, #18]
 8006378:	8a7b      	ldrh	r3, [r7, #18]
 800637a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800637e:	827b      	strh	r3, [r7, #18]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8a7b      	ldrh	r3, [r7, #18]
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2280      	movs	r2, #128	@ 0x80
 80063c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006408:	b29b      	uxth	r3, r3
 800640a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800642e:	b480      	push	{r7}
 8006430:	b08b      	sub	sp, #44	@ 0x2c
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	4611      	mov	r1, r2
 800643a:	461a      	mov	r2, r3
 800643c:	460b      	mov	r3, r1
 800643e:	80fb      	strh	r3, [r7, #6]
 8006440:	4613      	mov	r3, r2
 8006442:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006444:	88bb      	ldrh	r3, [r7, #4]
 8006446:	3301      	adds	r3, #1
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	005a      	lsls	r2, r3, #1
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006460:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
 8006466:	e01f      	b.n	80064a8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3301      	adds	r3, #1
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b21b      	sxth	r3, r3
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	b21a      	sxth	r2, r3
 800647a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800647e:	4313      	orrs	r3, r2
 8006480:	b21b      	sxth	r3, r3
 8006482:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	8a7a      	ldrh	r2, [r7, #18]
 8006488:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	3302      	adds	r3, #2
 800648e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	3302      	adds	r3, #2
 8006494:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	3301      	adds	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	3b01      	subs	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1dc      	bne.n	8006468 <USB_WritePMA+0x3a>
  }
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	372c      	adds	r7, #44	@ 0x2c
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b08b      	sub	sp, #44	@ 0x2c
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	4611      	mov	r1, r2
 80064c6:	461a      	mov	r2, r3
 80064c8:	460b      	mov	r3, r1
 80064ca:	80fb      	strh	r3, [r7, #6]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064d0:	88bb      	ldrh	r3, [r7, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	005a      	lsls	r2, r3, #1
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f2:	e01b      	b.n	800652c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	3302      	adds	r3, #2
 8006500:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	b2da      	uxtb	r2, r3
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3301      	adds	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	3302      	adds	r3, #2
 8006524:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	3b01      	subs	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e0      	bne.n	80064f4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006532:	88bb      	ldrh	r3, [r7, #4]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	701a      	strb	r2, [r3, #0]
  }
}
 800654e:	bf00      	nop
 8006550:	372c      	adds	r7, #44	@ 0x2c
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7c1b      	ldrb	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006574:	2202      	movs	r2, #2
 8006576:	2181      	movs	r1, #129	@ 0x81
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe2c 	bl	80081d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006588:	2202      	movs	r2, #2
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fe22 	bl	80081d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800659a:	e012      	b.n	80065c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800659c:	2340      	movs	r3, #64	@ 0x40
 800659e:	2202      	movs	r2, #2
 80065a0:	2181      	movs	r1, #129	@ 0x81
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fe17 	bl	80081d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065ae:	2340      	movs	r3, #64	@ 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fe0e 	bl	80081d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c2:	2308      	movs	r3, #8
 80065c4:	2203      	movs	r2, #3
 80065c6:	2182      	movs	r1, #130	@ 0x82
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fe04 	bl	80081d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065d8:	f001 ff24 	bl	8008424 <USBD_static_malloc>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
 80065f2:	e026      	b.n	8006642 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7c1b      	ldrb	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006628:	2101      	movs	r1, #1
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fec3 	bl	80083b6 <USBD_LL_PrepareReceive>
 8006630:	e007      	b.n	8006642 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	2101      	movs	r1, #1
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 feba 	bl	80083b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800665c:	2181      	movs	r1, #129	@ 0x81
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fddf 	bl	8008222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fdd8 	bl	8008222 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800667a:	2182      	movs	r1, #130	@ 0x82
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fdd0 	bl	8008222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 feca 	bl	800843c <USBD_static_free>
    pdev->pClassData = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066ca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d039      	beq.n	8006758 <USBD_CDC_Setup+0x9e>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d17f      	bne.n	80067e8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	88db      	ldrh	r3, [r3, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d029      	beq.n	8006744 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da11      	bge.n	800671e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006706:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	88d2      	ldrh	r2, [r2, #6]
 800670c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	88db      	ldrh	r3, [r3, #6]
 8006714:	461a      	mov	r2, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f9d6 	bl	8007ac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800671c:	e06b      	b.n	80067f6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	785a      	ldrb	r2, [r3, #1]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006734:	6939      	ldr	r1, [r7, #16]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 f9f1 	bl	8007b24 <USBD_CtlPrepareRx>
      break;
 8006742:	e058      	b.n	80067f6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	7850      	ldrb	r0, [r2, #1]
 8006750:	2200      	movs	r2, #0
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	4798      	blx	r3
      break;
 8006756:	e04e      	b.n	80067f6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b0b      	cmp	r3, #11
 800675e:	d02e      	beq.n	80067be <USBD_CDC_Setup+0x104>
 8006760:	2b0b      	cmp	r3, #11
 8006762:	dc38      	bgt.n	80067d6 <USBD_CDC_Setup+0x11c>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <USBD_CDC_Setup+0xb4>
 8006768:	2b0a      	cmp	r3, #10
 800676a:	d014      	beq.n	8006796 <USBD_CDC_Setup+0xdc>
 800676c:	e033      	b.n	80067d6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006774:	2b03      	cmp	r3, #3
 8006776:	d107      	bne.n	8006788 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	2202      	movs	r2, #2
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f9a1 	bl	8007ac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006786:	e02e      	b.n	80067e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 f932 	bl	80079f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006790:	2302      	movs	r3, #2
 8006792:	75fb      	strb	r3, [r7, #23]
          break;
 8006794:	e027      	b.n	80067e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800679c:	2b03      	cmp	r3, #3
 800679e:	d107      	bne.n	80067b0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80067a0:	f107 030f 	add.w	r3, r7, #15
 80067a4:	2201      	movs	r2, #1
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 f98d 	bl	8007ac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ae:	e01a      	b.n	80067e6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f91e 	bl	80079f4 <USBD_CtlError>
            ret = USBD_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	75fb      	strb	r3, [r7, #23]
          break;
 80067bc:	e013      	b.n	80067e6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d00d      	beq.n	80067e4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f912 	bl	80079f4 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d0:	2302      	movs	r3, #2
 80067d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067d4:	e006      	b.n	80067e4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f90b 	bl	80079f4 <USBD_CtlError>
          ret = USBD_FAIL;
 80067de:	2302      	movs	r3, #2
 80067e0:	75fb      	strb	r3, [r7, #23]
          break;
 80067e2:	e000      	b.n	80067e6 <USBD_CDC_Setup+0x12c>
          break;
 80067e4:	bf00      	nop
      }
      break;
 80067e6:	e006      	b.n	80067f6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f902 	bl	80079f4 <USBD_CtlError>
      ret = USBD_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	75fb      	strb	r3, [r7, #23]
      break;
 80067f4:	bf00      	nop
  }

  return ret;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006812:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800681a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d03a      	beq.n	800689c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	331c      	adds	r3, #28
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d029      	beq.n	8006890 <USBD_CDC_DataIn+0x90>
 800683c:	78fa      	ldrb	r2, [r7, #3]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	331c      	adds	r3, #28
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	78f9      	ldrb	r1, [r7, #3]
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	460b      	mov	r3, r1
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4403      	add	r3, r0
 800685c:	3320      	adds	r3, #32
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	fbb2 f1f3 	udiv	r1, r2, r3
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d110      	bne.n	8006890 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	331c      	adds	r3, #28
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006882:	78f9      	ldrb	r1, [r7, #3]
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 fd71 	bl	8008370 <USBD_LL_Transmit>
 800688e:	e003      	b.n	8006898 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fd9c 	bl	80083fc <USBD_LL_GetRxDataSize>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80068ea:	4611      	mov	r1, r2
 80068ec:	4798      	blx	r3

    return USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800690a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006912:	2b00      	cmp	r3, #0
 8006914:	d014      	beq.n	8006940 <USBD_CDC_EP0_RxReady+0x44>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800691c:	2bff      	cmp	r3, #255	@ 0xff
 800691e:	d00f      	beq.n	8006940 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800692e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	22ff      	movs	r2, #255	@ 0xff
 800693c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2243      	movs	r2, #67	@ 0x43
 8006958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800695a:	4b03      	ldr	r3, [pc, #12]	@ (8006968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000094 	.word	0x20000094

0800696c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2243      	movs	r2, #67	@ 0x43
 8006978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800697a:	4b03      	ldr	r3, [pc, #12]	@ (8006988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	20000050 	.word	0x20000050

0800698c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2243      	movs	r2, #67	@ 0x43
 8006998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800699a:	4b03      	ldr	r3, [pc, #12]	@ (80069a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	200000d8 	.word	0x200000d8

080069ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	220a      	movs	r2, #10
 80069b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069ba:	4b03      	ldr	r3, [pc, #12]	@ (80069c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	2000000c 	.word	0x2000000c

080069cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069d6:	2302      	movs	r3, #2
 80069d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7c1b      	ldrb	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fc99 	bl	80083b6 <USBD_LL_PrepareReceive>
 8006a84:	e007      	b.n	8006a96 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a8c:	2340      	movs	r3, #64	@ 0x40
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fc90 	bl	80083b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e000      	b.n	8006a9c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e01a      	b.n	8006af2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	79fa      	ldrb	r2, [r7, #7]
 8006ae8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f001 fafe 	bl	80080ec <USBD_LL_Init>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d006      	beq.n	8006b1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	e001      	b.n	8006b20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fb33 	bl	80081a0 <USBD_LL_Start>

  return USBD_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b64:	2302      	movs	r3, #2
 8006b66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	4611      	mov	r1, r2
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fed7 	bl	8007982 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d016      	beq.n	8006c26 <USBD_LL_SetupStage+0x6a>
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d81c      	bhi.n	8006c36 <USBD_LL_SetupStage+0x7a>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <USBD_LL_SetupStage+0x4a>
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d008      	beq.n	8006c16 <USBD_LL_SetupStage+0x5a>
 8006c04:	e017      	b.n	8006c36 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9ca 	bl	8006fa8 <USBD_StdDevReq>
      break;
 8006c14:	e01a      	b.n	8006c4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa2c 	bl	800707c <USBD_StdItfReq>
      break;
 8006c24:	e012      	b.n	8006c4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa6c 	bl	800710c <USBD_StdEPReq>
      break;
 8006c34:	e00a      	b.n	8006c4c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006c3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fb0b 	bl	8008260 <USBD_LL_StallEP>
      break;
 8006c4a:	bf00      	nop
  }

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d14b      	bne.n	8006d02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006c70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d134      	bne.n	8006ce6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d919      	bls.n	8006cbc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	1ad2      	subs	r2, r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d203      	bcs.n	8006caa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	e002      	b.n	8006cb0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 ff53 	bl	8007b60 <USBD_CtlContinueRx>
 8006cba:	e038      	b.n	8006d2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d105      	bne.n	8006cde <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 ff50 	bl	8007b84 <USBD_CtlSendStatus>
 8006ce4:	e023      	b.n	8006d2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cec:	2b05      	cmp	r3, #5
 8006cee:	d11e      	bne.n	8006d2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 fab0 	bl	8008260 <USBD_LL_StallEP>
 8006d00:	e015      	b.n	8006d2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00d      	beq.n	8006d2a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d108      	bne.n	8006d2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	7afa      	ldrb	r2, [r7, #11]
 8006d22:	4611      	mov	r1, r2
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	4798      	blx	r3
 8006d28:	e001      	b.n	8006d2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e000      	b.n	8006d30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	460b      	mov	r3, r1
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d17f      	bne.n	8006e4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d15c      	bne.n	8006e16 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d915      	bls.n	8006d94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 febd 	bl	8007b00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f001 fb12 	bl	80083b6 <USBD_LL_PrepareReceive>
 8006d92:	e04e      	b.n	8006e32 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	6912      	ldr	r2, [r2, #16]
 8006d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006da0:	fb01 f202 	mul.w	r2, r1, r2
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11c      	bne.n	8006de4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d316      	bcc.n	8006de4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d20f      	bcs.n	8006de4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fe99 	bl	8007b00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f001 faea 	bl	80083b6 <USBD_LL_PrepareReceive>
 8006de2:	e026      	b.n	8006e32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d105      	bne.n	8006e06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	@ 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fa29 	bl	8008260 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fecb 	bl	8007baa <USBD_CtlReceiveStatus>
 8006e14:	e00d      	b.n	8006e32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d004      	beq.n	8006e2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e2a:	2180      	movs	r1, #128	@ 0x80
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f001 fa17 	bl	8008260 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d11d      	bne.n	8006e78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fe81 	bl	8006b44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006e4a:	e015      	b.n	8006e78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00d      	beq.n	8006e74 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d108      	bne.n	8006e74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	7afa      	ldrb	r2, [r7, #11]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3
 8006e72:	e001      	b.n	8006e78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e74:	2302      	movs	r3, #2
 8006e76:	e000      	b.n	8006e7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e8a:	2340      	movs	r3, #64	@ 0x40
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f9a0 	bl	80081d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	@ 0x40
 8006ea2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ea6:	2340      	movs	r3, #64	@ 0x40
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2180      	movs	r1, #128	@ 0x80
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f992 	bl	80081d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2240      	movs	r2, #64	@ 0x40
 8006ebc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
  }

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr

08006f4a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d105      	bne.n	8006f68 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d10b      	bne.n	8006f9e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d005      	beq.n	8006f9e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fbe:	2b40      	cmp	r3, #64	@ 0x40
 8006fc0:	d005      	beq.n	8006fce <USBD_StdDevReq+0x26>
 8006fc2:	2b40      	cmp	r3, #64	@ 0x40
 8006fc4:	d84f      	bhi.n	8007066 <USBD_StdDevReq+0xbe>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <USBD_StdDevReq+0x36>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d14b      	bne.n	8007066 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
      break;
 8006fdc:	e048      	b.n	8007070 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d839      	bhi.n	800705a <USBD_StdDevReq+0xb2>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <USBD_StdDevReq+0x44>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	0800703d 	.word	0x0800703d
 8006ff0:	08007051 	.word	0x08007051
 8006ff4:	0800705b 	.word	0x0800705b
 8006ff8:	08007047 	.word	0x08007047
 8006ffc:	0800705b 	.word	0x0800705b
 8007000:	0800701f 	.word	0x0800701f
 8007004:	08007015 	.word	0x08007015
 8007008:	0800705b 	.word	0x0800705b
 800700c:	08007033 	.word	0x08007033
 8007010:	08007029 	.word	0x08007029
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f9dc 	bl	80073d4 <USBD_GetDescriptor>
          break;
 800701c:	e022      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fb3f 	bl	80076a4 <USBD_SetAddress>
          break;
 8007026:	e01d      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb7e 	bl	800772c <USBD_SetConfig>
          break;
 8007030:	e018      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc07 	bl	8007848 <USBD_GetConfig>
          break;
 800703a:	e013      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fc37 	bl	80078b2 <USBD_GetStatus>
          break;
 8007044:	e00e      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fc65 	bl	8007918 <USBD_SetFeature>
          break;
 800704e:	e009      	b.n	8007064 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fc74 	bl	8007940 <USBD_ClrFeature>
          break;
 8007058:	e004      	b.n	8007064 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fcc9 	bl	80079f4 <USBD_CtlError>
          break;
 8007062:	bf00      	nop
      }
      break;
 8007064:	e004      	b.n	8007070 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fcc3 	bl	80079f4 <USBD_CtlError>
      break;
 800706e:	bf00      	nop
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d005      	beq.n	80070a2 <USBD_StdItfReq+0x26>
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d82e      	bhi.n	80070f8 <USBD_StdItfReq+0x7c>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <USBD_StdItfReq+0x26>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d12a      	bne.n	80070f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d81d      	bhi.n	80070ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	889b      	ldrh	r3, [r3, #4]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d813      	bhi.n	80070e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d110      	bne.n	80070f4 <USBD_StdItfReq+0x78>
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10d      	bne.n	80070f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fd53 	bl	8007b84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070de:	e009      	b.n	80070f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fc86 	bl	80079f4 <USBD_CtlError>
          break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fc81 	bl	80079f4 <USBD_CtlError>
          break;
 80070f2:	e000      	b.n	80070f6 <USBD_StdItfReq+0x7a>
          break;
 80070f4:	bf00      	nop
      }
      break;
 80070f6:	e004      	b.n	8007102 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fc7a 	bl	80079f4 <USBD_CtlError>
      break;
 8007100:	bf00      	nop
  }

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	889b      	ldrh	r3, [r3, #4]
 800711e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007128:	2b40      	cmp	r3, #64	@ 0x40
 800712a:	d007      	beq.n	800713c <USBD_StdEPReq+0x30>
 800712c:	2b40      	cmp	r3, #64	@ 0x40
 800712e:	f200 8146 	bhi.w	80073be <USBD_StdEPReq+0x2b2>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <USBD_StdEPReq+0x40>
 8007136:	2b20      	cmp	r3, #32
 8007138:	f040 8141 	bne.w	80073be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
      break;
 800714a:	e13d      	b.n	80073c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007154:	2b20      	cmp	r3, #32
 8007156:	d10a      	bne.n	800716e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]

        return ret;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	e12d      	b.n	80073ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d007      	beq.n	8007186 <USBD_StdEPReq+0x7a>
 8007176:	2b03      	cmp	r3, #3
 8007178:	f300 811b 	bgt.w	80073b2 <USBD_StdEPReq+0x2a6>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d072      	beq.n	8007266 <USBD_StdEPReq+0x15a>
 8007180:	2b01      	cmp	r3, #1
 8007182:	d03a      	beq.n	80071fa <USBD_StdEPReq+0xee>
 8007184:	e115      	b.n	80073b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800718c:	2b02      	cmp	r3, #2
 800718e:	d002      	beq.n	8007196 <USBD_StdEPReq+0x8a>
 8007190:	2b03      	cmp	r3, #3
 8007192:	d015      	beq.n	80071c0 <USBD_StdEPReq+0xb4>
 8007194:	e02b      	b.n	80071ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <USBD_StdEPReq+0xaa>
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b80      	cmp	r3, #128	@ 0x80
 80071a0:	d009      	beq.n	80071b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f85a 	bl	8008260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071ac:	2180      	movs	r1, #128	@ 0x80
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f856 	bl	8008260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071b4:	e020      	b.n	80071f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fc1b 	bl	80079f4 <USBD_CtlError>
              break;
 80071be:	e01b      	b.n	80071f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	885b      	ldrh	r3, [r3, #2]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10e      	bne.n	80071e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <USBD_StdEPReq+0xda>
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b80      	cmp	r3, #128	@ 0x80
 80071d2:	d008      	beq.n	80071e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f83d 	bl	8008260 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fccc 	bl	8007b84 <USBD_CtlSendStatus>

              break;
 80071ec:	e004      	b.n	80071f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fbff 	bl	80079f4 <USBD_CtlError>
              break;
 80071f6:	bf00      	nop
          }
          break;
 80071f8:	e0e0      	b.n	80073bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007200:	2b02      	cmp	r3, #2
 8007202:	d002      	beq.n	800720a <USBD_StdEPReq+0xfe>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d015      	beq.n	8007234 <USBD_StdEPReq+0x128>
 8007208:	e026      	b.n	8007258 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00c      	beq.n	800722a <USBD_StdEPReq+0x11e>
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b80      	cmp	r3, #128	@ 0x80
 8007214:	d009      	beq.n	800722a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 f820 	bl	8008260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007220:	2180      	movs	r1, #128	@ 0x80
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 f81c 	bl	8008260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007228:	e01c      	b.n	8007264 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fbe1 	bl	80079f4 <USBD_CtlError>
              break;
 8007232:	e017      	b.n	8007264 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	885b      	ldrh	r3, [r3, #2]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d112      	bne.n	8007262 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 f827 	bl	800829e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc97 	bl	8007b84 <USBD_CtlSendStatus>
              }
              break;
 8007256:	e004      	b.n	8007262 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fbca 	bl	80079f4 <USBD_CtlError>
              break;
 8007260:	e000      	b.n	8007264 <USBD_StdEPReq+0x158>
              break;
 8007262:	bf00      	nop
          }
          break;
 8007264:	e0aa      	b.n	80073bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_StdEPReq+0x16a>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d032      	beq.n	80072da <USBD_StdEPReq+0x1ce>
 8007274:	e097      	b.n	80073a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <USBD_StdEPReq+0x180>
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b80      	cmp	r3, #128	@ 0x80
 8007280:	d004      	beq.n	800728c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fbb5 	bl	80079f4 <USBD_CtlError>
                break;
 800728a:	e091      	b.n	80073b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800728c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	da0b      	bge.n	80072ac <USBD_StdEPReq+0x1a0>
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	3310      	adds	r3, #16
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	3304      	adds	r3, #4
 80072aa:	e00b      	b.n	80072c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	3304      	adds	r3, #4
 80072c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2202      	movs	r2, #2
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fbf8 	bl	8007ac8 <USBD_CtlSendData>
              break;
 80072d8:	e06a      	b.n	80073b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da11      	bge.n	8007306 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3318      	adds	r3, #24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d117      	bne.n	800732c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fb78 	bl	80079f4 <USBD_CtlError>
                  break;
 8007304:	e054      	b.n	80073b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	f003 020f 	and.w	r2, r3, #15
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb65 	bl	80079f4 <USBD_CtlError>
                  break;
 800732a:	e041      	b.n	80073b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007330:	2b00      	cmp	r3, #0
 8007332:	da0b      	bge.n	800734c <USBD_StdEPReq+0x240>
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	3310      	adds	r3, #16
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	3304      	adds	r3, #4
 800734a:	e00b      	b.n	8007364 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	3304      	adds	r3, #4
 8007364:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <USBD_StdEPReq+0x266>
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d103      	bne.n	800737a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e00e      	b.n	8007398 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 ffac 	bl	80082dc <USBD_LL_IsStallEP>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2201      	movs	r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e002      	b.n	8007398 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2202      	movs	r2, #2
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fb92 	bl	8007ac8 <USBD_CtlSendData>
              break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb23 	bl	80079f4 <USBD_CtlError>
              break;
 80073ae:	bf00      	nop
          }
          break;
 80073b0:	e004      	b.n	80073bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb1d 	bl	80079f4 <USBD_CtlError>
          break;
 80073ba:	bf00      	nop
      }
      break;
 80073bc:	e004      	b.n	80073c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fb17 	bl	80079f4 <USBD_CtlError>
      break;
 80073c6:	bf00      	nop
  }

  return ret;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	f200 8128 	bhi.w	800764a <USBD_GetDescriptor+0x276>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <USBD_GetDescriptor+0x2c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	0800741d 	.word	0x0800741d
 8007404:	08007435 	.word	0x08007435
 8007408:	08007475 	.word	0x08007475
 800740c:	0800764b 	.word	0x0800764b
 8007410:	0800764b 	.word	0x0800764b
 8007414:	080075eb 	.word	0x080075eb
 8007418:	08007617 	.word	0x08007617
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
      break;
 8007432:	e112      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10d      	bne.n	8007458 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	f107 0208 	add.w	r2, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	2202      	movs	r2, #2
 8007454:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007456:	e100      	b.n	800765a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	f107 0208 	add.w	r2, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e0f2      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	885b      	ldrh	r3, [r3, #2]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b05      	cmp	r3, #5
 800747c:	f200 80ac 	bhi.w	80075d8 <USBD_GetDescriptor+0x204>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <USBD_GetDescriptor+0xb4>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074d5 	.word	0x080074d5
 8007490:	08007509 	.word	0x08007509
 8007494:	0800753d 	.word	0x0800753d
 8007498:	08007571 	.word	0x08007571
 800749c:	080075a5 	.word	0x080075a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c2:	e091      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa94 	bl	80079f4 <USBD_CtlError>
            err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
          break;
 80074d2:	e089      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f6:	e077      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa7a 	bl	80079f4 <USBD_CtlError>
            err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
          break;
 8007506:	e06f      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752a:	e05d      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa60 	bl	80079f4 <USBD_CtlError>
            err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
          break;
 800753a:	e055      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	7c12      	ldrb	r2, [r2, #16]
 8007554:	f107 0108 	add.w	r1, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755e:	e043      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa46 	bl	80079f4 <USBD_CtlError>
            err++;
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	3301      	adds	r3, #1
 800756c:	72fb      	strb	r3, [r7, #11]
          break;
 800756e:	e03b      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	7c12      	ldrb	r2, [r2, #16]
 8007588:	f107 0108 	add.w	r1, r7, #8
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007592:	e029      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa2c 	bl	80079f4 <USBD_CtlError>
            err++;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	3301      	adds	r3, #1
 80075a0:	72fb      	strb	r3, [r7, #11]
          break;
 80075a2:	e021      	b.n	80075e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c6:	e00f      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa12 	bl	80079f4 <USBD_CtlError>
            err++;
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	3301      	adds	r3, #1
 80075d4:	72fb      	strb	r3, [r7, #11]
          break;
 80075d6:	e007      	b.n	80075e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa0a 	bl	80079f4 <USBD_CtlError>
          err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80075e6:	e038      	b.n	800765a <USBD_GetDescriptor+0x286>
 80075e8:	e037      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7c1b      	ldrb	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	f107 0208 	add.w	r2, r7, #8
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
 8007602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007604:	e029      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f9f3 	bl	80079f4 <USBD_CtlError>
        err++;
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	3301      	adds	r3, #1
 8007612:	72fb      	strb	r3, [r7, #11]
      break;
 8007614:	e021      	b.n	800765a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	4610      	mov	r0, r2
 800762c:	4798      	blx	r3
 800762e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3301      	adds	r3, #1
 8007634:	2207      	movs	r2, #7
 8007636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007638:	e00f      	b.n	800765a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9d9 	bl	80079f4 <USBD_CtlError>
        err++;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3301      	adds	r3, #1
 8007646:	72fb      	strb	r3, [r7, #11]
      break;
 8007648:	e007      	b.n	800765a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9d1 	bl	80079f4 <USBD_CtlError>
      err++;
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	3301      	adds	r3, #1
 8007656:	72fb      	strb	r3, [r7, #11]
      break;
 8007658:	bf00      	nop
  }

  if (err != 0U)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11c      	bne.n	800769a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007660:	893b      	ldrh	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <USBD_GetDescriptor+0x2b6>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	88db      	ldrh	r3, [r3, #6]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00d      	beq.n	800768a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88da      	ldrh	r2, [r3, #6]
 8007672:	893b      	ldrh	r3, [r7, #8]
 8007674:	4293      	cmp	r3, r2
 8007676:	bf28      	it	cs
 8007678:	4613      	movcs	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	461a      	mov	r2, r3
 8007682:	68f9      	ldr	r1, [r7, #12]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa1f 	bl	8007ac8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	88db      	ldrh	r3, [r3, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d104      	bne.n	800769c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa76 	bl	8007b84 <USBD_CtlSendStatus>
 8007698:	e000      	b.n	800769c <USBD_GetDescriptor+0x2c8>
    return;
 800769a:	bf00      	nop
    }
  }
}
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop

080076a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	889b      	ldrh	r3, [r3, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d130      	bne.n	8007718 <USBD_SetAddress+0x74>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	88db      	ldrh	r3, [r3, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d12c      	bne.n	8007718 <USBD_SetAddress+0x74>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	885b      	ldrh	r3, [r3, #2]
 80076c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80076c4:	d828      	bhi.n	8007718 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d104      	bne.n	80076e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f988 	bl	80079f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e4:	e01d      	b.n	8007722 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7bfa      	ldrb	r2, [r7, #15]
 80076ea:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fe1d 	bl	8008332 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa43 	bl	8007b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770c:	e009      	b.n	8007722 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	e004      	b.n	8007722 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f96a 	bl	80079f4 <USBD_CtlError>
  }
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	4b41      	ldr	r3, [pc, #260]	@ (8007844 <USBD_SetConfig+0x118>)
 800773e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007740:	4b40      	ldr	r3, [pc, #256]	@ (8007844 <USBD_SetConfig+0x118>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d904      	bls.n	8007752 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f952 	bl	80079f4 <USBD_CtlError>
 8007750:	e075      	b.n	800783e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007758:	2b02      	cmp	r3, #2
 800775a:	d002      	beq.n	8007762 <USBD_SetConfig+0x36>
 800775c:	2b03      	cmp	r3, #3
 800775e:	d023      	beq.n	80077a8 <USBD_SetConfig+0x7c>
 8007760:	e062      	b.n	8007828 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007762:	4b38      	ldr	r3, [pc, #224]	@ (8007844 <USBD_SetConfig+0x118>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01a      	beq.n	80077a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800776a:	4b36      	ldr	r3, [pc, #216]	@ (8007844 <USBD_SetConfig+0x118>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2203      	movs	r2, #3
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800777c:	4b31      	ldr	r3, [pc, #196]	@ (8007844 <USBD_SetConfig+0x118>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff f9e8 	bl	8006b58 <USBD_SetClassConfig>
 8007788:	4603      	mov	r3, r0
 800778a:	2b02      	cmp	r3, #2
 800778c:	d104      	bne.n	8007798 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f92f 	bl	80079f4 <USBD_CtlError>
            return;
 8007796:	e052      	b.n	800783e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9f3 	bl	8007b84 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800779e:	e04e      	b.n	800783e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f9ef 	bl	8007b84 <USBD_CtlSendStatus>
        break;
 80077a6:	e04a      	b.n	800783e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077a8:	4b26      	ldr	r3, [pc, #152]	@ (8007844 <USBD_SetConfig+0x118>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d112      	bne.n	80077d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80077b8:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <USBD_SetConfig+0x118>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80077c2:	4b20      	ldr	r3, [pc, #128]	@ (8007844 <USBD_SetConfig+0x118>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff f9e4 	bl	8006b96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9d8 	bl	8007b84 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077d4:	e033      	b.n	800783e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80077d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007844 <USBD_SetConfig+0x118>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d01d      	beq.n	8007820 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff f9d2 	bl	8006b96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <USBD_SetConfig+0x118>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077fc:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <USBD_SetConfig+0x118>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f9a8 	bl	8006b58 <USBD_SetClassConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	2b02      	cmp	r3, #2
 800780c:	d104      	bne.n	8007818 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f8ef 	bl	80079f4 <USBD_CtlError>
            return;
 8007816:	e012      	b.n	800783e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9b3 	bl	8007b84 <USBD_CtlSendStatus>
        break;
 800781e:	e00e      	b.n	800783e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9af 	bl	8007b84 <USBD_CtlSendStatus>
        break;
 8007826:	e00a      	b.n	800783e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f8e2 	bl	80079f4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007830:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <USBD_SetConfig+0x118>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff f9ad 	bl	8006b96 <USBD_ClrClassConfig>
        break;
 800783c:	bf00      	nop
    }
  }
}
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000274 	.word	0x20000274

08007848 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88db      	ldrh	r3, [r3, #6]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d004      	beq.n	8007864 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8c9 	bl	80079f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007862:	e022      	b.n	80078aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800786a:	2b02      	cmp	r3, #2
 800786c:	dc02      	bgt.n	8007874 <USBD_GetConfig+0x2c>
 800786e:	2b00      	cmp	r3, #0
 8007870:	dc03      	bgt.n	800787a <USBD_GetConfig+0x32>
 8007872:	e015      	b.n	80078a0 <USBD_GetConfig+0x58>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d00b      	beq.n	8007890 <USBD_GetConfig+0x48>
 8007878:	e012      	b.n	80078a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3308      	adds	r3, #8
 8007884:	2201      	movs	r2, #1
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f91d 	bl	8007ac8 <USBD_CtlSendData>
        break;
 800788e:	e00c      	b.n	80078aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	2201      	movs	r2, #1
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f915 	bl	8007ac8 <USBD_CtlSendData>
        break;
 800789e:	e004      	b.n	80078aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8a6 	bl	80079f4 <USBD_CtlError>
        break;
 80078a8:	bf00      	nop
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d81e      	bhi.n	8007906 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d004      	beq.n	80078da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f88e 	bl	80079f4 <USBD_CtlError>
        break;
 80078d8:	e01a      	b.n	8007910 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	330c      	adds	r3, #12
 80078fa:	2202      	movs	r2, #2
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8e2 	bl	8007ac8 <USBD_CtlSendData>
      break;
 8007904:	e004      	b.n	8007910 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f873 	bl	80079f4 <USBD_CtlError>
      break;
 800790e:	bf00      	nop
  }
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d106      	bne.n	8007938 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f926 	bl	8007b84 <USBD_CtlSendStatus>
  }
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007950:	3b01      	subs	r3, #1
 8007952:	2b02      	cmp	r3, #2
 8007954:	d80b      	bhi.n	800796e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	885b      	ldrh	r3, [r3, #2]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10c      	bne.n	8007978 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f90c 	bl	8007b84 <USBD_CtlSendStatus>
      }
      break;
 800796c:	e004      	b.n	8007978 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f83f 	bl	80079f4 <USBD_CtlError>
      break;
 8007976:	e000      	b.n	800797a <USBD_ClrFeature+0x3a>
      break;
 8007978:	bf00      	nop
  }
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785a      	ldrb	r2, [r3, #1]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	3302      	adds	r3, #2
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	3303      	adds	r3, #3
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	4413      	add	r3, r2
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3304      	adds	r3, #4
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	3305      	adds	r3, #5
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4413      	add	r3, r2
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	3306      	adds	r3, #6
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	3307      	adds	r3, #7
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	80da      	strh	r2, [r3, #6]

}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc2d 	bl	8008260 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc29 	bl	8008260 <USBD_LL_StallEP>
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b086      	sub	sp, #24
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d032      	beq.n	8007a92 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f834 	bl	8007a9a <USBD_GetLen>
 8007a32:	4603      	mov	r3, r0
 8007a34:	3301      	adds	r3, #1
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	75fa      	strb	r2, [r7, #23]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	75fa      	strb	r2, [r7, #23]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2203      	movs	r2, #3
 8007a60:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a62:	e012      	b.n	8007a8a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	60fa      	str	r2, [r7, #12]
 8007a6a:	7dfa      	ldrb	r2, [r7, #23]
 8007a6c:	1c51      	adds	r1, r2, #1
 8007a6e:	75f9      	strb	r1, [r7, #23]
 8007a70:	4611      	mov	r1, r2
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	440a      	add	r2, r1
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	75fa      	strb	r2, [r7, #23]
 8007a80:	461a      	mov	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e8      	bne.n	8007a64 <USBD_GetString+0x4e>
    }
  }
}
 8007a92:	bf00      	nop
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007aa6:	e005      	b.n	8007ab4 <USBD_GetLen+0x1a>
  {
    len++;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f5      	bne.n	8007aa8 <USBD_GetLen+0xe>
  }

  return len;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	2100      	movs	r1, #0
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fc3d 	bl	8008370 <USBD_LL_Transmit>

  return USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	2100      	movs	r1, #0
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fc2b 	bl	8008370 <USBD_LL_Transmit>

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2203      	movs	r2, #3
 8007b36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007b3a:	88fa      	ldrh	r2, [r7, #6]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	2100      	movs	r1, #0
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fc30 	bl	80083b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fc1e 	bl	80083b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b94:	2300      	movs	r3, #0
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fbe8 	bl	8008370 <USBD_LL_Transmit>

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fbf8 	bl	80083b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4912      	ldr	r1, [pc, #72]	@ (8007c20 <MX_USB_DEVICE_Init+0x50>)
 8007bd8:	4812      	ldr	r0, [pc, #72]	@ (8007c24 <MX_USB_DEVICE_Init+0x54>)
 8007bda:	f7fe ff63 	bl	8006aa4 <USBD_Init>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007be4:	f7f8 fd62 	bl	80006ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007be8:	490f      	ldr	r1, [pc, #60]	@ (8007c28 <MX_USB_DEVICE_Init+0x58>)
 8007bea:	480e      	ldr	r0, [pc, #56]	@ (8007c24 <MX_USB_DEVICE_Init+0x54>)
 8007bec:	f7fe ff85 	bl	8006afa <USBD_RegisterClass>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bf6:	f7f8 fd59 	bl	80006ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bfa:	490c      	ldr	r1, [pc, #48]	@ (8007c2c <MX_USB_DEVICE_Init+0x5c>)
 8007bfc:	4809      	ldr	r0, [pc, #36]	@ (8007c24 <MX_USB_DEVICE_Init+0x54>)
 8007bfe:	f7fe fee5 	bl	80069cc <USBD_CDC_RegisterInterface>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c08:	f7f8 fd50 	bl	80006ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c0c:	4805      	ldr	r0, [pc, #20]	@ (8007c24 <MX_USB_DEVICE_Init+0x54>)
 8007c0e:	f7fe ff8d 	bl	8006b2c <USBD_Start>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c18:	f7f8 fd48 	bl	80006ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c1c:	bf00      	nop
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	2000012c 	.word	0x2000012c
 8007c24:	20000278 	.word	0x20000278
 8007c28:	20000018 	.word	0x20000018
 8007c2c:	2000011c 	.word	0x2000011c

08007c30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c34:	2200      	movs	r2, #0
 8007c36:	4905      	ldr	r1, [pc, #20]	@ (8007c4c <CDC_Init_FS+0x1c>)
 8007c38:	4805      	ldr	r0, [pc, #20]	@ (8007c50 <CDC_Init_FS+0x20>)
 8007c3a:	f7fe fedd 	bl	80069f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c3e:	4905      	ldr	r1, [pc, #20]	@ (8007c54 <CDC_Init_FS+0x24>)
 8007c40:	4803      	ldr	r0, [pc, #12]	@ (8007c50 <CDC_Init_FS+0x20>)
 8007c42:	f7fe fef2 	bl	8006a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	2000093c 	.word	0x2000093c
 8007c50:	20000278 	.word	0x20000278
 8007c54:	2000053c 	.word	0x2000053c

08007c58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
	...

08007c68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
 8007c74:	4613      	mov	r3, r2
 8007c76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b23      	cmp	r3, #35	@ 0x23
 8007c7c:	d84a      	bhi.n	8007d14 <CDC_Control_FS+0xac>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <CDC_Control_FS+0x1c>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007d15 	.word	0x08007d15
 8007c90:	08007d15 	.word	0x08007d15
 8007c94:	08007d15 	.word	0x08007d15
 8007c98:	08007d15 	.word	0x08007d15
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007d15 	.word	0x08007d15
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007d15 	.word	0x08007d15
 8007cb0:	08007d15 	.word	0x08007d15
 8007cb4:	08007d15 	.word	0x08007d15
 8007cb8:	08007d15 	.word	0x08007d15
 8007cbc:	08007d15 	.word	0x08007d15
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007d15 	.word	0x08007d15
 8007cc8:	08007d15 	.word	0x08007d15
 8007ccc:	08007d15 	.word	0x08007d15
 8007cd0:	08007d15 	.word	0x08007d15
 8007cd4:	08007d15 	.word	0x08007d15
 8007cd8:	08007d15 	.word	0x08007d15
 8007cdc:	08007d15 	.word	0x08007d15
 8007ce0:	08007d15 	.word	0x08007d15
 8007ce4:	08007d15 	.word	0x08007d15
 8007ce8:	08007d15 	.word	0x08007d15
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d15 	.word	0x08007d15
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	08007d15 	.word	0x08007d15
 8007d00:	08007d15 	.word	0x08007d15
 8007d04:	08007d15 	.word	0x08007d15
 8007d08:	08007d15 	.word	0x08007d15
 8007d0c:	08007d15 	.word	0x08007d15
 8007d10:	08007d15 	.word	0x08007d15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d14:	bf00      	nop
  }

  return (USBD_OK);
 8007d16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop

08007d24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4805      	ldr	r0, [pc, #20]	@ (8007d48 <CDC_Receive_FS+0x24>)
 8007d32:	f7fe fe7a 	bl	8006a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d36:	4804      	ldr	r0, [pc, #16]	@ (8007d48 <CDC_Receive_FS+0x24>)
 8007d38:	f7fe fe8a 	bl	8006a50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000278 	.word	0x20000278

08007d4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	6039      	str	r1, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2212      	movs	r2, #18
 8007d5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d5e:	4b03      	ldr	r3, [pc, #12]	@ (8007d6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20000148 	.word	0x20000148

08007d70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d82:	4b03      	ldr	r3, [pc, #12]	@ (8007d90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	2000015c 	.word	0x2000015c

08007d94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4907      	ldr	r1, [pc, #28]	@ (8007dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007daa:	4808      	ldr	r0, [pc, #32]	@ (8007dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8007dac:	f7ff fe33 	bl	8007a16 <USBD_GetString>
 8007db0:	e004      	b.n	8007dbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4904      	ldr	r1, [pc, #16]	@ (8007dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007db6:	4805      	ldr	r0, [pc, #20]	@ (8007dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8007db8:	f7ff fe2d 	bl	8007a16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dbc:	4b02      	ldr	r3, [pc, #8]	@ (8007dc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20000d3c 	.word	0x20000d3c
 8007dcc:	0800852c 	.word	0x0800852c

08007dd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	4904      	ldr	r1, [pc, #16]	@ (8007df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007de0:	4804      	ldr	r0, [pc, #16]	@ (8007df4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007de2:	f7ff fe18 	bl	8007a16 <USBD_GetString>
  return USBD_StrDesc;
 8007de6:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000d3c 	.word	0x20000d3c
 8007df4:	08008544 	.word	0x08008544

08007df8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	221a      	movs	r2, #26
 8007e08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e0a:	f000 f843 	bl	8007e94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e0e:	4b02      	ldr	r3, [pc, #8]	@ (8007e18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20000160 	.word	0x20000160

08007e1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4907      	ldr	r1, [pc, #28]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e32:	4808      	ldr	r0, [pc, #32]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e34:	f7ff fdef 	bl	8007a16 <USBD_GetString>
 8007e38:	e004      	b.n	8007e44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4904      	ldr	r1, [pc, #16]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e3e:	4805      	ldr	r0, [pc, #20]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e40:	f7ff fde9 	bl	8007a16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e44:	4b02      	ldr	r3, [pc, #8]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000d3c 	.word	0x20000d3c
 8007e54:	08008558 	.word	0x08008558

08007e58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d105      	bne.n	8007e76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4907      	ldr	r1, [pc, #28]	@ (8007e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e6e:	4808      	ldr	r0, [pc, #32]	@ (8007e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e70:	f7ff fdd1 	bl	8007a16 <USBD_GetString>
 8007e74:	e004      	b.n	8007e80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4904      	ldr	r1, [pc, #16]	@ (8007e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e7a:	4805      	ldr	r0, [pc, #20]	@ (8007e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e7c:	f7ff fdcb 	bl	8007a16 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e80:	4b02      	ldr	r3, [pc, #8]	@ (8007e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000d3c 	.word	0x20000d3c
 8007e90:	08008564 	.word	0x08008564

08007e94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <Get_SerialNum+0x44>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8007edc <Get_SerialNum+0x48>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <Get_SerialNum+0x4c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4909      	ldr	r1, [pc, #36]	@ (8007ee4 <Get_SerialNum+0x50>)
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f814 	bl	8007eec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	4908      	ldr	r1, [pc, #32]	@ (8007ee8 <Get_SerialNum+0x54>)
 8007ec8:	68b8      	ldr	r0, [r7, #8]
 8007eca:	f000 f80f 	bl	8007eec <IntToUnicode>
  }
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	1ffff7e8 	.word	0x1ffff7e8
 8007edc:	1ffff7ec 	.word	0x1ffff7ec
 8007ee0:	1ffff7f0 	.word	0x1ffff7f0
 8007ee4:	20000162 	.word	0x20000162
 8007ee8:	20000172 	.word	0x20000172

08007eec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
 8007f02:	e027      	b.n	8007f54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d80b      	bhi.n	8007f24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	0f1b      	lsrs	r3, r3, #28
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	4619      	mov	r1, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3230      	adds	r2, #48	@ 0x30
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	e00a      	b.n	8007f3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	0f1b      	lsrs	r3, r3, #28
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	4619      	mov	r1, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	440b      	add	r3, r1
 8007f34:	3237      	adds	r2, #55	@ 0x37
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	3301      	adds	r3, #1
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	4413      	add	r3, r2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	3301      	adds	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
 8007f54:	7dfa      	ldrb	r2, [r7, #23]
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d3d3      	bcc.n	8007f04 <IntToUnicode+0x18>
  }
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a0d      	ldr	r2, [pc, #52]	@ (8007fac <HAL_PCD_MspInit+0x44>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d113      	bne.n	8007fa2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <HAL_PCD_MspInit+0x48>)
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb0 <HAL_PCD_MspInit+0x48>)
 8007f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f84:	61d3      	str	r3, [r2, #28]
 8007f86:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <HAL_PCD_MspInit+0x48>)
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	2014      	movs	r0, #20
 8007f98:	f7f9 f99b 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f9c:	2014      	movs	r0, #20
 8007f9e:	f7f9 f9b4 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40005c00 	.word	0x40005c00
 8007fb0:	40021000 	.word	0x40021000

08007fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f7fe fdf6 	bl	8006bbc <USBD_LL_SetupStage>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	440b      	add	r3, r1
 8007ff8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	4619      	mov	r1, r3
 8008002:	f7fe fe28 	bl	8006c56 <USBD_LL_DataOutStage>
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	440b      	add	r3, r1
 800802e:	3324      	adds	r3, #36	@ 0x24
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	4619      	mov	r1, r3
 8008036:	f7fe fe7f 	bl	8006d38 <USBD_LL_DataInStage>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe ff8f 	bl	8006f74 <USBD_LL_SOF>
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008066:	2301      	movs	r3, #1
 8008068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	799b      	ldrb	r3, [r3, #6]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d001      	beq.n	8008076 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008072:	f7f8 fb1b 	bl	80006ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800807c:	7bfa      	ldrb	r2, [r7, #15]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe ff3f 	bl	8006f04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fef8 	bl	8006e82 <USBD_LL_Reset>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe ff39 	bl	8006f22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7a9b      	ldrb	r3, [r3, #10]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080b8:	4b04      	ldr	r3, [pc, #16]	@ (80080cc <HAL_PCD_SuspendCallback+0x30>)
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	4a03      	ldr	r2, [pc, #12]	@ (80080cc <HAL_PCD_SuspendCallback+0x30>)
 80080be:	f043 0306 	orr.w	r3, r3, #6
 80080c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	e000ed00 	.word	0xe000ed00

080080d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe ff33 	bl	8006f4a <USBD_LL_Resume>
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80080f4:	4a28      	ldr	r2, [pc, #160]	@ (8008198 <USBD_LL_Init+0xac>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a26      	ldr	r2, [pc, #152]	@ (8008198 <USBD_LL_Init+0xac>)
 8008100:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008104:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <USBD_LL_Init+0xac>)
 8008106:	4a25      	ldr	r2, [pc, #148]	@ (800819c <USBD_LL_Init+0xb0>)
 8008108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800810a:	4b23      	ldr	r3, [pc, #140]	@ (8008198 <USBD_LL_Init+0xac>)
 800810c:	2208      	movs	r2, #8
 800810e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008110:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <USBD_LL_Init+0xac>)
 8008112:	2202      	movs	r2, #2
 8008114:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008116:	4b20      	ldr	r3, [pc, #128]	@ (8008198 <USBD_LL_Init+0xac>)
 8008118:	2200      	movs	r2, #0
 800811a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800811c:	4b1e      	ldr	r3, [pc, #120]	@ (8008198 <USBD_LL_Init+0xac>)
 800811e:	2200      	movs	r2, #0
 8008120:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008122:	4b1d      	ldr	r3, [pc, #116]	@ (8008198 <USBD_LL_Init+0xac>)
 8008124:	2200      	movs	r2, #0
 8008126:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008128:	481b      	ldr	r0, [pc, #108]	@ (8008198 <USBD_LL_Init+0xac>)
 800812a:	f7f9 fbe9 	bl	8001900 <HAL_PCD_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008134:	f7f8 faba 	bl	80006ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800813e:	2318      	movs	r3, #24
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	f7fb f8fa 	bl	800333c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800814e:	2358      	movs	r3, #88	@ 0x58
 8008150:	2200      	movs	r2, #0
 8008152:	2180      	movs	r1, #128	@ 0x80
 8008154:	f7fb f8f2 	bl	800333c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800815e:	23c0      	movs	r3, #192	@ 0xc0
 8008160:	2200      	movs	r2, #0
 8008162:	2181      	movs	r1, #129	@ 0x81
 8008164:	f7fb f8ea 	bl	800333c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800816e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008172:	2200      	movs	r2, #0
 8008174:	2101      	movs	r1, #1
 8008176:	f7fb f8e1 	bl	800333c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008184:	2200      	movs	r2, #0
 8008186:	2182      	movs	r1, #130	@ 0x82
 8008188:	f7fb f8d8 	bl	800333c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000f3c 	.word	0x20000f3c
 800819c:	40005c00 	.word	0x40005c00

080081a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f9 fc98 	bl	8001aec <HAL_PCD_Start>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f94e 	bl	8008464 <USBD_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	461a      	mov	r2, r3
 80081e4:	4603      	mov	r3, r0
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70bb      	strb	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80081fe:	78bb      	ldrb	r3, [r7, #2]
 8008200:	883a      	ldrh	r2, [r7, #0]
 8008202:	78f9      	ldrb	r1, [r7, #3]
 8008204:	f7f9 fdec 	bl	8001de0 <HAL_PCD_EP_Open>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f928 	bl	8008464 <USBD_Get_USB_Status>
 8008214:	4603      	mov	r3, r0
 8008216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008218:	7bbb      	ldrb	r3, [r7, #14]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7f9 fe2a 	bl	8001e9a <HAL_PCD_EP_Close>
 8008246:	4603      	mov	r3, r0
 8008248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f909 	bl	8008464 <USBD_Get_USB_Status>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008256:	7bbb      	ldrb	r3, [r7, #14]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fed2 	bl	8002028 <HAL_PCD_EP_SetStall>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f8ea 	bl	8008464 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008294:	7bbb      	ldrb	r3, [r7, #14]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	4611      	mov	r1, r2
 80082bc:	4618      	mov	r0, r3
 80082be:	f7f9 ff13 	bl	80020e8 <HAL_PCD_EP_ClrStall>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f8cb 	bl	8008464 <USBD_Get_USB_Status>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da0b      	bge.n	8008310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	440b      	add	r3, r1
 800830a:	3312      	adds	r3, #18
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	e00b      	b.n	8008328 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	440b      	add	r3, r1
 8008322:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f7f9 fd21 	bl	8001d98 <HAL_PCD_SetAddress>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f881 	bl	8008464 <USBD_Get_USB_Status>
 8008362:	4603      	mov	r3, r0
 8008364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008366:	7bbb      	ldrb	r3, [r7, #14]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	461a      	mov	r2, r3
 800837c:	460b      	mov	r3, r1
 800837e:	72fb      	strb	r3, [r7, #11]
 8008380:	4613      	mov	r3, r2
 8008382:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008392:	893b      	ldrh	r3, [r7, #8]
 8008394:	7af9      	ldrb	r1, [r7, #11]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	f7f9 fe0f 	bl	8001fba <HAL_PCD_EP_Transmit>
 800839c:	4603      	mov	r3, r0
 800839e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f85e 	bl	8008464 <USBD_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	461a      	mov	r2, r3
 80083c2:	460b      	mov	r3, r1
 80083c4:	72fb      	strb	r3, [r7, #11]
 80083c6:	4613      	mov	r3, r2
 80083c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083d8:	893b      	ldrh	r3, [r7, #8]
 80083da:	7af9      	ldrb	r1, [r7, #11]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	f7f9 fda4 	bl	8001f2a <HAL_PCD_EP_Receive>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f83b 	bl	8008464 <USBD_Get_USB_Status>
 80083ee:	4603      	mov	r3, r0
 80083f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7f9 fdba 	bl	8001f8c <HAL_PCD_EP_GetRxCount>
 8008418:	4603      	mov	r3, r0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800842c:	4b02      	ldr	r3, [pc, #8]	@ (8008438 <USBD_static_malloc+0x14>)
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr
 8008438:	20001214 	.word	0x20001214

0800843c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d817      	bhi.n	80084a8 <USBD_Get_USB_Status+0x44>
 8008478:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <USBD_Get_USB_Status+0x1c>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008491 	.word	0x08008491
 8008484:	08008497 	.word	0x08008497
 8008488:	0800849d 	.word	0x0800849d
 800848c:	080084a3 	.word	0x080084a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
    break;
 8008494:	e00b      	b.n	80084ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008496:	2302      	movs	r3, #2
 8008498:	73fb      	strb	r3, [r7, #15]
    break;
 800849a:	e008      	b.n	80084ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    break;
 80084a0:	e005      	b.n	80084ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084a2:	2302      	movs	r3, #2
 80084a4:	73fb      	strb	r3, [r7, #15]
    break;
 80084a6:	e002      	b.n	80084ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	73fb      	strb	r3, [r7, #15]
    break;
 80084ac:	bf00      	nop
  }
  return usb_status;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <memset>:
 80084bc:	4603      	mov	r3, r0
 80084be:	4402      	add	r2, r0
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d100      	bne.n	80084c6 <memset+0xa>
 80084c4:	4770      	bx	lr
 80084c6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ca:	e7f9      	b.n	80084c0 <memset+0x4>

080084cc <__libc_init_array>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	2600      	movs	r6, #0
 80084d0:	4d0c      	ldr	r5, [pc, #48]	@ (8008504 <__libc_init_array+0x38>)
 80084d2:	4c0d      	ldr	r4, [pc, #52]	@ (8008508 <__libc_init_array+0x3c>)
 80084d4:	1b64      	subs	r4, r4, r5
 80084d6:	10a4      	asrs	r4, r4, #2
 80084d8:	42a6      	cmp	r6, r4
 80084da:	d109      	bne.n	80084f0 <__libc_init_array+0x24>
 80084dc:	f000 f81a 	bl	8008514 <_init>
 80084e0:	2600      	movs	r6, #0
 80084e2:	4d0a      	ldr	r5, [pc, #40]	@ (800850c <__libc_init_array+0x40>)
 80084e4:	4c0a      	ldr	r4, [pc, #40]	@ (8008510 <__libc_init_array+0x44>)
 80084e6:	1b64      	subs	r4, r4, r5
 80084e8:	10a4      	asrs	r4, r4, #2
 80084ea:	42a6      	cmp	r6, r4
 80084ec:	d105      	bne.n	80084fa <__libc_init_array+0x2e>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f4:	4798      	blx	r3
 80084f6:	3601      	adds	r6, #1
 80084f8:	e7ee      	b.n	80084d8 <__libc_init_array+0xc>
 80084fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fe:	4798      	blx	r3
 8008500:	3601      	adds	r6, #1
 8008502:	e7f2      	b.n	80084ea <__libc_init_array+0x1e>
 8008504:	080085a0 	.word	0x080085a0
 8008508:	080085a0 	.word	0x080085a0
 800850c:	080085a0 	.word	0x080085a0
 8008510:	080085a4 	.word	0x080085a4

08008514 <_init>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	bf00      	nop
 8008518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851a:	bc08      	pop	{r3}
 800851c:	469e      	mov	lr, r3
 800851e:	4770      	bx	lr

08008520 <_fini>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	bf00      	nop
 8008524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008526:	bc08      	pop	{r3}
 8008528:	469e      	mov	lr, r3
 800852a:	4770      	bx	lr
