
CAN FD TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f98  08003f98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa0  08003fa0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000005c  08004004  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08004004  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e15b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d40  00000000  00000000  0002e22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e8  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8b1  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db40  00000000  00000000  0004eca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbb39  00000000  00000000  0005c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003510  00000000  00000000  00118324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011b834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003eb8 	.word	0x08003eb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003eb8 	.word	0x08003eb8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fb3f 	bl	8000c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f846 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f922 	bl	8000820 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005dc:	f000 f8d6 	bl	800078c <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 80005e0:	f000 f88c 	bl	80006fc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  print("starting");
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0x78>)
 80005e6:	f000 f981 	bl	80008ec <print>

  TxHeader.Identifier = 0x10;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <main+0x7c>)
 80005ec:	2210      	movs	r2, #16
 80005ee:	601a      	str	r2, [r3, #0]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <main+0x7c>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	60da      	str	r2, [r3, #12]
  TxData[0] = 0x15;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x80>)
 80005f8:	2215      	movs	r2, #21
 80005fa:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x20;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0x80>)
 80005fe:	2220      	movs	r2, #32
 8000600:	705a      	strb	r2, [r3, #1]

  if(HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 8000602:	4813      	ldr	r0, [pc, #76]	; (8000650 <main+0x84>)
 8000604:	f000 fdf6 	bl	80011f4 <HAL_FDCAN_Start>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d102      	bne.n	8000614 <main+0x48>
	  print("CAN inicializado");
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <main+0x88>)
 8000610:	f000 f96c 	bl	80008ec <print>
	  /*if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
		{
			print("enviado");
		}
	  HAL_Delay(500);*/
	  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <main+0x8c>)
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <main+0x90>)
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <main+0x84>)
 800061c:	f000 fe12 	bl	8001244 <HAL_FDCAN_GetRxMessage>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <main+0x62>
		  print("Mensaje recibido");
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0x94>)
 8000628:	f000 f960 	bl	80008ec <print>
 800062c:	e004      	b.n	8000638 <main+0x6c>
	  }
	  else{
		  printValue(hfdcan1.ErrorCode);
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <main+0x84>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f978 	bl	8000928 <printValue>
	  }
	  HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f000 fb7a 	bl	8000d34 <HAL_Delay>
	  if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000640:	e7e8      	b.n	8000614 <main+0x48>
 8000642:	bf00      	nop
 8000644:	08003ed0 	.word	0x08003ed0
 8000648:	20000078 	.word	0x20000078
 800064c:	200000c4 	.word	0x200000c4
 8000650:	200000d4 	.word	0x200000d4
 8000654:	08003edc 	.word	0x08003edc
 8000658:	200000cc 	.word	0x200000cc
 800065c:	2000009c 	.word	0x2000009c
 8000660:	08003ef0 	.word	0x08003ef0

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2238      	movs	r2, #56	; 0x38
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 ff9c 	bl	80035b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f8d4 	bl	8001834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006a6:	2355      	movs	r3, #85	; 0x55
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f96e 	bl	800199c <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006c6:	f000 f94d 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2104      	movs	r1, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fc6c 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ee:	f000 f939 	bl	8000964 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000702:	4a21      	ldr	r2, [pc, #132]	; (8000788 <MX_FDCAN1_Init+0x8c>)
 8000704:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800070e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000712:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800072e:	2214      	movs	r2, #20
 8000730:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000734:	2202      	movs	r2, #2
 8000736:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800073a:	220e      	movs	r2, #14
 800073c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000740:	2202      	movs	r2, #2
 8000742:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000746:	2201      	movs	r2, #1
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800074c:	2201      	movs	r2, #1
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000752:	2201      	movs	r2, #1
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000758:	2201      	movs	r2, #1
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000764:	2200      	movs	r2, #0
 8000766:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_FDCAN1_Init+0x88>)
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_FDCAN1_Init+0x88>)
 8000770:	f000 fbe6 	bl	8000f40 <HAL_FDCAN_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800077a:	f000 f8f3 	bl	8000964 <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END FDCAN1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000d4 	.word	0x200000d4
 8000788:	40006400 	.word	0x40006400

0800078c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <MX_LPUART1_UART_Init+0x90>)
 8000794:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f002 f802 	bl	80027d8 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8c3 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	f002 fdfb 	bl	80033dc <HAL_UARTEx_SetTxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007ec:	f000 f8ba 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	f002 fe30 	bl	8003458 <HAL_UARTEx_SetRxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007fe:	f000 f8b1 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_LPUART1_UART_Init+0x8c>)
 8000804:	f002 fdb1 	bl	800336a <HAL_UARTEx_DisableFifoMode>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800080e:	f000 f8a9 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000138 	.word	0x20000138
 800081c:	40008000 	.word	0x40008000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 ffb1 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0xc8>)
 80008ba:	f000 fe21 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fe12 	bl	8001500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800

080008ec <print>:

/* USER CODE BEGIN 4 */

void print(char uart_buffer[]){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4909      	ldr	r1, [pc, #36]	; (800091c <print+0x30>)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <print+0x34>)
 80008fa:	f002 fe39 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <print+0x34>)
 8000900:	f7ff fc8e 	bl	8000220 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <print+0x34>)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <print+0x38>)
 8000910:	f001 ffb2 	bl	8002878 <HAL_UART_Transmit>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08003f04 	.word	0x08003f04
 8000920:	200001cc 	.word	0x200001cc
 8000924:	20000138 	.word	0x20000138

08000928 <printValue>:

void printValue(int value){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4909      	ldr	r1, [pc, #36]	; (8000958 <printValue+0x30>)
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <printValue+0x34>)
 8000936:	f002 fe1b 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <printValue+0x34>)
 800093c:	f7ff fc70 	bl	8000220 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	4904      	ldr	r1, [pc, #16]	; (800095c <printValue+0x34>)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <printValue+0x38>)
 800094c:	f001 ff94 	bl	8002878 <HAL_UART_Transmit>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08003f0c 	.word	0x08003f0c
 800095c:	200001cc 	.word	0x200001cc
 8000960:	20000138 	.word	0x20000138

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009a6:	f000 ffe9 	bl	800197c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09a      	sub	sp, #104	; 0x68
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2244      	movs	r2, #68	; 0x44
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fde9 	bl	80035b0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <HAL_FDCAN_MspInit+0xac>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d139      	bne.n	8000a5c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fcfd 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a04:	f7ff ffae 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_FDCAN_MspInit+0xb0>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a4a:	2309      	movs	r3, #9
 8000a4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fd52 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3768      	adds	r7, #104	; 0x68
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40006400 	.word	0x40006400
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	; 0x68
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2244      	movs	r2, #68	; 0x44
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fd8f 	bl	80035b0 <memset>
  if(huart->Instance==LPUART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_UART_MspInit+0xa8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d136      	bne.n	8000b0a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fca5 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff56 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0xac>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000af8:	230c      	movs	r3, #12
 8000afa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fcfb 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3768      	adds	r7, #104	; 0x68
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40008000 	.word	0x40008000
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f8c6 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f002 fd0e 	bl	80035c0 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20008000 	.word	0x20008000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000230 	.word	0x20000230
 8000bd8:	20000380 	.word	0x20000380

08000bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 fccd 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fccb 	bl	80005cc <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c44:	08003fa8 	.word	0x08003fa8
  ldr r2, =_sbss
 8000c48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c4c:	20000380 	.word	0x20000380

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>

08000c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f93d 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f80e 	bl	8000c84 <HAL_InitTick>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	e001      	b.n	8000c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c74:	f7ff fe7c 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c78:	79fb      	ldrb	r3, [r7, #7]

}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_InitTick+0x68>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d022      	beq.n	8000cde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f93a 	bl	8000f26 <HAL_SYSTICK_Config>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10f      	bne.n	8000cd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d809      	bhi.n	8000cd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc6:	f000 f914 	bl	8000ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0x70>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e007      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e004      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e001      	b.n	8000ce2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <HAL_IncTick+0x1c>)
 8000d08:	6013      	str	r3, [r2, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000234 	.word	0x20000234
 8000d18:	20000008 	.word	0x20000008

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000234 	.word	0x20000234

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d004      	beq.n	8000d58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_Delay+0x40>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d58:	bf00      	nop
 8000d5a:	f7ff ffdf 	bl	8000d1c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8f7      	bhi.n	8000d5a <HAL_Delay+0x26>
  {
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff47 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff90 	bl	8000e30 <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5f 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb2 	bl	8000e98 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e147      	b.n	80011e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d106      	bne.n	8000f6c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fd26 	bl	80009b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0210 	bic.w	r2, r2, #16
 8000f7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f7c:	f7ff fece 	bl	8000d1c <HAL_GetTick>
 8000f80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f82:	e012      	b.n	8000faa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f84:	f7ff feca 	bl	8000d1c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d90b      	bls.n	8000faa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e11b      	b.n	80011e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d0e5      	beq.n	8000f84 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0201 	orr.w	r2, r2, #1
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc8:	f7ff fea8 	bl	8000d1c <HAL_GetTick>
 8000fcc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fce:	e012      	b.n	8000ff6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fd0:	f7ff fea4 	bl	8000d1c <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d90b      	bls.n	8000ff6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0f5      	b.n	80011e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0e5      	beq.n	8000fd0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a74      	ldr	r2, [pc, #464]	; (80011ec <HAL_FDCAN_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d103      	bne.n	8001026 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800101e:	4a74      	ldr	r2, [pc, #464]	; (80011f0 <HAL_FDCAN_Init+0x2b0>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7c1b      	ldrb	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	e007      	b.n	8001050 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800104e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	e007      	b.n	800107a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001078:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7c9b      	ldrb	r3, [r3, #18]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d108      	bne.n	8001094 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699a      	ldr	r2, [r3, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001090:	619a      	str	r2, [r3, #24]
 8001092:	e007      	b.n	80010a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80010c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0210 	bic.w	r2, r2, #16
 80010d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0204 	orr.w	r2, r2, #4
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	e02c      	b.n	800114e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d028      	beq.n	800114e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d01c      	beq.n	800113e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001112:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0210 	orr.w	r2, r2, #16
 8001122:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d110      	bne.n	800114e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e007      	b.n	800114e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	3b01      	subs	r3, #1
 8001154:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	3b01      	subs	r3, #1
 800115c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800115e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001166:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	3b01      	subs	r3, #1
 8001170:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001176:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001178:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001182:	d115      	bne.n	80011b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	3b01      	subs	r3, #1
 8001190:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001192:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	3b01      	subs	r3, #1
 800119a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800119c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	3b01      	subs	r3, #1
 80011a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f944 	bl	8001454 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40006400 	.word	0x40006400
 80011f0:	40006500 	.word	0x40006500

080011f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d110      	bne.n	800122a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e006      	b.n	8001238 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	f043 0204 	orr.w	r2, r3, #4
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800125c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800125e:	7efb      	ldrb	r3, [r7, #27]
 8001260:	2b02      	cmp	r3, #2
 8001262:	f040 80e8 	bne.w	8001436 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b40      	cmp	r3, #64	; 0x40
 800126a:	d137      	bne.n	80012dc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0db      	b.n	8001444 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001294:	0e1b      	lsrs	r3, r3, #24
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10a      	bne.n	80012b4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012a6:	0a5b      	lsrs	r3, r3, #9
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	4413      	add	r3, r2
 80012c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	440b      	add	r3, r1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	e036      	b.n	800134a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d107      	bne.n	80012fc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0a3      	b.n	8001444 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001304:	0e1b      	lsrs	r3, r3, #24
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10a      	bne.n	8001324 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e005      	b.n	800137a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3304      	adds	r3, #4
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0e1b      	lsrs	r3, r3, #24
 80013ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0fda      	lsrs	r2, r3, #31
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	3304      	adds	r3, #4
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	e00a      	b.n	8001406 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	441a      	add	r2, r3
 80013f6:	6839      	ldr	r1, [r7, #0]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	440b      	add	r3, r1
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3301      	adds	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_FDCAN_GetRxMessage+0x20c>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	461a      	mov	r2, r3
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	4293      	cmp	r3, r2
 8001414:	d3ec      	bcc.n	80013f0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b40      	cmp	r3, #64	; 0x40
 800141a:	d105      	bne.n	8001428 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001426:	e004      	b.n	8001432 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e006      	b.n	8001444 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	f043 0208 	orr.w	r2, r3, #8
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
  }
}
 8001444:	4618      	mov	r0, r3
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	08003f2c 	.word	0x08003f2c

08001454 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800145e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001494:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	061a      	lsls	r2, r3, #24
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e005      	b.n	80014e2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3304      	adds	r3, #4
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3f3      	bcc.n	80014d6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	4000a400 	.word	0x4000a400

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800150e:	e15a      	b.n	80017c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 814c 	beq.w	80017c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d005      	beq.n	8001540 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800153c:	2b02      	cmp	r3, #2
 800153e:	d130      	bne.n	80015a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001576:	2201      	movs	r2, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 0201 	and.w	r2, r3, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d017      	beq.n	80015de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d123      	bne.n	8001632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	6939      	ldr	r1, [r7, #16]
 800162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0203 	and.w	r2, r3, #3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a6 	beq.w	80017c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_GPIO_Init+0x2e4>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_GPIO_Init+0x2e4>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6613      	str	r3, [r2, #96]	; 0x60
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_GPIO_Init+0x2e4>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b6:	d01f      	beq.n	80016f8 <HAL_GPIO_Init+0x1f8>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d019      	beq.n	80016f4 <HAL_GPIO_Init+0x1f4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x2f0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_GPIO_Init+0x1f0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x2f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1ec>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_GPIO_Init+0x2f8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1e8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1e4>
 80016e0:	2305      	movs	r3, #5
 80016e2:	e00a      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016e4:	2306      	movs	r3, #6
 80016e6:	e008      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016ec:	2303      	movs	r3, #3
 80016ee:	e004      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016f8:	2300      	movs	r3, #0
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	f002 0203 	and.w	r2, r2, #3
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4093      	lsls	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170a:	4937      	ldr	r1, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_GPIO_Init+0x300>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173c:	4a30      	ldr	r2, [pc, #192]	; (8001800 <HAL_GPIO_Init+0x300>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001766:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x300>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x300>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_GPIO_Init+0x300>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f47f ae9d 	bne.w	8001510 <HAL_GPIO_Init+0x10>
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	48001000 	.word	0x48001000
 80017fc:	48001400 	.word	0x48001400
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001820:	e002      	b.n	8001828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d141      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001842:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184e:	d131      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001856:	4a46      	ldr	r2, [pc, #280]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800185c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001868:	4a41      	ldr	r2, [pc, #260]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001870:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2232      	movs	r2, #50	; 0x32
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	4a3f      	ldr	r2, [pc, #252]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	e002      	b.n	800188e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3b01      	subs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d102      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d158      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e057      	b.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b4:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018c4:	e04d      	b.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018cc:	d141      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d131      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f4:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2232      	movs	r2, #50	; 0x32
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001912:	e002      	b.n	800191a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3b01      	subs	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d102      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f2      	bne.n	8001914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d112      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e011      	b.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001950:	e007      	b.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40007000 	.word	0x40007000
 8001974:	20000000 	.word	0x20000000
 8001978:	431bde83 	.word	0x431bde83

0800197c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	6093      	str	r3, [r2, #8]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40007000 	.word	0x40007000

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e2fe      	b.n	8001fac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d075      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4b97      	ldr	r3, [pc, #604]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c4:	4b94      	ldr	r3, [pc, #592]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0x3e>
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_OscConfig+0x44>
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d10b      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d05b      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x108>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d157      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e2d9      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d106      	bne.n	8001a10 <HAL_RCC_OscConfig+0x74>
 8001a02:	4b85      	ldr	r3, [pc, #532]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e01d      	b.n	8001a4c <HAL_RCC_OscConfig+0xb0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x98>
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7b      	ldr	r2, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0xb0>
 8001a34:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a74      	ldr	r2, [pc, #464]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f962 	bl	8000d1c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f95e 	bl	8000d1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e29e      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xc0>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f94e 	bl	8000d1c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f94a 	bl	8000d1c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e28a      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0xe8>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d075      	beq.n	8001b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x136>
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x13c>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x154>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e25d      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	4946      	ldr	r1, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <HAL_RCC_OscConfig+0x280>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8bb 	bl	8000c84 <HAL_InitTick>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d043      	beq.n	8001b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e249      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d023      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8f6 	bl	8000d1c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff f8f2 	bl	8000d1c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e232      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	492d      	ldr	r1, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
 8001b66:	e01a      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f8d2 	bl	8000d1c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f8ce 	bl	8000d1c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e20e      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1e0>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d041      	beq.n	8001c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d01c      	beq.n	8001bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f8ab 	bl	8000d1c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f8a7 	bl	8000d1c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1e7      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ef      	beq.n	8001bca <HAL_RCC_OscConfig+0x22e>
 8001bea:	e020      	b.n	8001c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f88e 	bl	8000d1c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c02:	e00d      	b.n	8001c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff f88a 	bl	8000d1c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d906      	bls.n	8001c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1ca      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ea      	bne.n	8001c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80a6 	beq.w	8001d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c40:	4b84      	ldr	r3, [pc, #528]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2b4>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x2b6>
 8001c50:	2300      	movs	r3, #0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0x4bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4bc>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f847 	bl	8000d1c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f843 	bl	8000d1c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e183      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4bc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_RCC_OscConfig+0x32e>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc8:	e024      	b.n	8001d14 <HAL_RCC_OscConfig+0x378>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d110      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x358>
 8001cd2:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce2:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	4a5a      	ldr	r2, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf2:	e00f      	b.n	8001d14 <HAL_RCC_OscConfig+0x378>
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d016      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7fe fffe 	bl	8000d1c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe fffa 	bl	8000d1c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e138      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ed      	beq.n	8001d24 <HAL_RCC_OscConfig+0x388>
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7fe ffe7 	bl	8000d1c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe ffe3 	bl	8000d1c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e121      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ed      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da2:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7fe ffb6 	bl	8000d1c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db4:	f7fe ffb2 	bl	8000d1c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0f2      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ef      	beq.n	8001db4 <HAL_RCC_OscConfig+0x418>
 8001dd4:	e01b      	b.n	8001e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff99 	bl	8000d1c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dee:	f7fe ff95 	bl	8000d1c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0d5      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ef      	bne.n	8001dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80c9 	beq.w	8001faa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	f000 8083 	beq.w	8001f2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d15e      	bne.n	8001eec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x4b8>)
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff6f 	bl	8000d1c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	e00c      	b.n	8001e5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe ff6b 	bl	8000d1c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d905      	bls.n	8001e5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0ab      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ec      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e68:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x61c>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6a11      	ldr	r1, [r2, #32]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e8a:	0852      	lsrs	r2, r2, #1
 8001e8c:	3a01      	subs	r2, #1
 8001e8e:	0552      	lsls	r2, r2, #21
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e96:	0852      	lsrs	r2, r2, #1
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	0652      	lsls	r2, r2, #25
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ea2:	06d2      	lsls	r2, r2, #27
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4943      	ldr	r1, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe ff2a 	bl	8000d1c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe ff26 	bl	8000d1c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e066      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x530>
 8001eea:	e05e      	b.n	8001faa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff10 	bl	8000d1c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe ff0c 	bl	8000d1c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04c      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4924      	ldr	r1, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
 8001f2a:	e03e      	b.n	8001faa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e039      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_OscConfig+0x618>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d12c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	3b01      	subs	r3, #1
 8001f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d123      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d113      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	019f800c 	.word	0x019f800c
 8001fbc:	feeefffc 	.word	0xfeeefffc

08001fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e11e      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b91      	ldr	r3, [pc, #580]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 020f 	bic.w	r2, r3, #15
 8001fee:	498c      	ldr	r1, [pc, #560]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b8a      	ldr	r3, [pc, #552]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e106      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d073      	beq.n	80020fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d129      	bne.n	8002070 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201c:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0f4      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800202c:	f000 f99e 	bl	800236c <RCC_GetSysClockFreqFromPLLSource>
 8002030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <HAL_RCC_ClockConfig+0x268>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d93f      	bls.n	80020ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800203a:	4b7a      	ldr	r3, [pc, #488]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800204e:	2b00      	cmp	r3, #0
 8002050:	d033      	beq.n	80020ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	d12f      	bne.n	80020ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002062:	4a70      	ldr	r2, [pc, #448]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e024      	b.n	80020ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0c6      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0be      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002098:	f000 f8ce 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 800209c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4a61      	ldr	r2, [pc, #388]	; (8002228 <HAL_RCC_ClockConfig+0x268>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d909      	bls.n	80020ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ae:	4a5d      	ldr	r2, [pc, #372]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4957      	ldr	r1, [pc, #348]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7fe fe26 	bl	8000d1c <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe fe22 	bl	8000d1c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e095      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d023      	beq.n	8002150 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4a42      	ldr	r2, [pc, #264]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002134:	4a3b      	ldr	r2, [pc, #236]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 8002136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
 800214e:	e008      	b.n	8002162 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	d105      	bne.n	8002162 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a32      	ldr	r2, [pc, #200]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 800215c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002160:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d21d      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 020f 	bic.w	r2, r3, #15
 8002178:	4929      	ldr	r1, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002180:	f7fe fdcc 	bl	8000d1c <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fdc8 	bl	8000d1c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e03b      	b.n	8002216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ed      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4917      	ldr	r1, [pc, #92]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490f      	ldr	r1, [pc, #60]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ea:	f000 f825 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_RCC_ClockConfig+0x264>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490c      	ldr	r1, [pc, #48]	; (800222c <HAL_RCC_ClockConfig+0x26c>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x270>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd38 	bl	8000c84 <HAL_InitTick>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	04c4b400 	.word	0x04c4b400
 800222c:	08003f14 	.word	0x08003f14
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d102      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e047      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d102      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e03e      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d136      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3301      	adds	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228c:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002296:	68d2      	ldr	r2, [r2, #12]
 8002298:	0a12      	lsrs	r2, r2, #8
 800229a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
      break;
 80022a4:	e00c      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	0a12      	lsrs	r2, r2, #8
 80022b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
      break;
 80022be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e001      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022e0:	693b      	ldr	r3, [r7, #16]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	016e3600 	.word	0x016e3600

080022fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08003f24 	.word	0x08003f24

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002344:	f7ff ffda 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0adb      	lsrs	r3, r3, #11
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4904      	ldr	r1, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08003f24 	.word	0x08003f24

0800236c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10c      	bne.n	80023aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002390:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800239a:	68d2      	ldr	r2, [r2, #12]
 800239c:	0a12      	lsrs	r2, r2, #8
 800239e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
    break;
 80023a8:	e00c      	b.n	80023c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	0a12      	lsrs	r2, r2, #8
 80023b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
    break;
 80023c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0e5b      	lsrs	r3, r3, #25
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40021000 	.word	0x40021000
 80023f0:	016e3600 	.word	0x016e3600
 80023f4:	00f42400 	.word	0x00f42400

080023f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002400:	2300      	movs	r3, #0
 8002402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002404:	2300      	movs	r3, #0
 8002406:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8098 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6593      	str	r3, [r2, #88]	; 0x58
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002442:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a39      	ldr	r2, [pc, #228]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800244e:	f7fe fc65 	bl	8000d1c <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002454:	e009      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fc61 	bl	8000d1c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d902      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	74fb      	strb	r3, [r7, #19]
        break;
 8002468:	e005      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ef      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d159      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01e      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	d019      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fc21 	bl	8000d1c <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024dc:	e00b      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fc1d 	bl	8000d1c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	74fb      	strb	r3, [r7, #19]
            break;
 80024f4:	e006      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ec      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10b      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002520:	e008      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	74bb      	strb	r3, [r7, #18]
 8002526:	e005      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002534:	7c7b      	ldrb	r3, [r7, #17]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4ba6      	ldr	r3, [pc, #664]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4aa5      	ldr	r2, [pc, #660]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002552:	4ba0      	ldr	r3, [pc, #640]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0203 	bic.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	499c      	ldr	r1, [pc, #624]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002574:	4b97      	ldr	r3, [pc, #604]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 020c 	bic.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4994      	ldr	r1, [pc, #592]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002596:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	498b      	ldr	r1, [pc, #556]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	4983      	ldr	r1, [pc, #524]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025da:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	497a      	ldr	r1, [pc, #488]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	4972      	ldr	r1, [pc, #456]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800261e:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4969      	ldr	r1, [pc, #420]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4961      	ldr	r1, [pc, #388]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	4958      	ldr	r1, [pc, #352]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	4950      	ldr	r1, [pc, #320]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	4942      	ldr	r1, [pc, #264]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4934      	ldr	r1, [pc, #208]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273a:	4926      	ldr	r1, [pc, #152]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	4918      	ldr	r1, [pc, #96]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ba:	d105      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000

080027d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e042      	b.n	8002870 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe f935 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2224      	movs	r2, #36	; 0x24
 8002806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fb82 	bl	8002f2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8b3 	bl	8002994 <UART_SetConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e01b      	b.n	8002870 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fc01 	bl	8003070 <UART_CheckIdleState>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	2b20      	cmp	r3, #32
 8002890:	d17b      	bne.n	800298a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_UART_Transmit+0x26>
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e074      	b.n	800298c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	; 0x21
 80028ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fa33 	bl	8000d1c <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d108      	bne.n	80028e4 <HAL_UART_Transmit+0x6c>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e003      	b.n	80028ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028ec:	e030      	b.n	8002950 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fc63 	bl	80031c4 <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e03d      	b.n	800298c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3302      	adds	r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e007      	b.n	800293e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3301      	adds	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1c8      	bne.n	80028ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fc2c 	bl	80031c4 <UART_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e006      	b.n	800298c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b08c      	sub	sp, #48	; 0x30
 800299a:	af00      	add	r7, sp, #0
 800299c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4bab      	ldr	r3, [pc, #684]	; (8002c70 <UART_SetConfig+0x2dc>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4aa0      	ldr	r2, [pc, #640]	; (8002c74 <UART_SetConfig+0x2e0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	4313      	orrs	r3, r2
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f023 010f 	bic.w	r1, r3, #15
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a91      	ldr	r2, [pc, #580]	; (8002c78 <UART_SetConfig+0x2e4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d125      	bne.n	8002a84 <UART_SetConfig+0xf0>
 8002a38:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d81a      	bhi.n	8002a7c <UART_SetConfig+0xe8>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <UART_SetConfig+0xb8>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a6d 	.word	0x08002a6d
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a75 	.word	0x08002a75
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a62:	e0d6      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a6a:	e0d2      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a72:	e0ce      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002a74:	2308      	movs	r3, #8
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a7a:	e0ca      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a82:	e0c6      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <UART_SetConfig+0x2ec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d138      	bne.n	8002b00 <UART_SetConfig+0x16c>
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d82d      	bhi.n	8002af8 <UART_SetConfig+0x164>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <UART_SetConfig+0x110>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002af9 	.word	0x08002af9
 8002aac:	08002af9 	.word	0x08002af9
 8002ab0:	08002af9 	.word	0x08002af9
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002af9 	.word	0x08002af9
 8002abc:	08002af9 	.word	0x08002af9
 8002ac0:	08002af9 	.word	0x08002af9
 8002ac4:	08002ae1 	.word	0x08002ae1
 8002ac8:	08002af9 	.word	0x08002af9
 8002acc:	08002af9 	.word	0x08002af9
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	08002af1 	.word	0x08002af1
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ade:	e098      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ae6:	e094      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aee:	e090      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002af0:	2308      	movs	r3, #8
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002af6:	e08c      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002af8:	2310      	movs	r3, #16
 8002afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002afe:	e088      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <UART_SetConfig+0x2f0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d125      	bne.n	8002b56 <UART_SetConfig+0x1c2>
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b14:	2b30      	cmp	r3, #48	; 0x30
 8002b16:	d016      	beq.n	8002b46 <UART_SetConfig+0x1b2>
 8002b18:	2b30      	cmp	r3, #48	; 0x30
 8002b1a:	d818      	bhi.n	8002b4e <UART_SetConfig+0x1ba>
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d00a      	beq.n	8002b36 <UART_SetConfig+0x1a2>
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d814      	bhi.n	8002b4e <UART_SetConfig+0x1ba>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <UART_SetConfig+0x19a>
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d008      	beq.n	8002b3e <UART_SetConfig+0x1aa>
 8002b2c:	e00f      	b.n	8002b4e <UART_SetConfig+0x1ba>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b34:	e06d      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b3c:	e069      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b44:	e065      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b46:	2308      	movs	r3, #8
 8002b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b4c:	e061      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b4e:	2310      	movs	r3, #16
 8002b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b54:	e05d      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <UART_SetConfig+0x2f4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d125      	bne.n	8002bac <UART_SetConfig+0x218>
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b6c:	d016      	beq.n	8002b9c <UART_SetConfig+0x208>
 8002b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b70:	d818      	bhi.n	8002ba4 <UART_SetConfig+0x210>
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d00a      	beq.n	8002b8c <UART_SetConfig+0x1f8>
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d814      	bhi.n	8002ba4 <UART_SetConfig+0x210>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <UART_SetConfig+0x1f0>
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d008      	beq.n	8002b94 <UART_SetConfig+0x200>
 8002b82:	e00f      	b.n	8002ba4 <UART_SetConfig+0x210>
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8a:	e042      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b92:	e03e      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b94:	2304      	movs	r3, #4
 8002b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b9a:	e03a      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ba2:	e036      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002baa:	e032      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <UART_SetConfig+0x2e0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d12a      	bne.n	8002c0c <UART_SetConfig+0x278>
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bc4:	d01a      	beq.n	8002bfc <UART_SetConfig+0x268>
 8002bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bca:	d81b      	bhi.n	8002c04 <UART_SetConfig+0x270>
 8002bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd0:	d00c      	beq.n	8002bec <UART_SetConfig+0x258>
 8002bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd6:	d815      	bhi.n	8002c04 <UART_SetConfig+0x270>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <UART_SetConfig+0x250>
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d008      	beq.n	8002bf4 <UART_SetConfig+0x260>
 8002be2:	e00f      	b.n	8002c04 <UART_SetConfig+0x270>
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bea:	e012      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002bec:	2302      	movs	r3, #2
 8002bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bf2:	e00e      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bfa:	e00a      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c02:	e006      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002c04:	2310      	movs	r3, #16
 8002c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c0a:	e002      	b.n	8002c12 <UART_SetConfig+0x27e>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <UART_SetConfig+0x2e0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	f040 80a8 	bne.w	8002d6e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d834      	bhi.n	8002c90 <UART_SetConfig+0x2fc>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x298>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c91 	.word	0x08002c91
 8002c34:	08002c59 	.word	0x08002c59
 8002c38:	08002c91 	.word	0x08002c91
 8002c3c:	08002c5f 	.word	0x08002c5f
 8002c40:	08002c91 	.word	0x08002c91
 8002c44:	08002c91 	.word	0x08002c91
 8002c48:	08002c91 	.word	0x08002c91
 8002c4c:	08002c67 	.word	0x08002c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff fb60 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c56:	e021      	b.n	8002c9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <UART_SetConfig+0x2f8>)
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c5c:	e01e      	b.n	8002c9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5e:	f7ff faeb 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c64:	e01a      	b.n	8002c9c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c6c:	e016      	b.n	8002c9c <UART_SetConfig+0x308>
 8002c6e:	bf00      	nop
 8002c70:	cfff69f3 	.word	0xcfff69f3
 8002c74:	40008000 	.word	0x40008000
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40004400 	.word	0x40004400
 8002c84:	40004800 	.word	0x40004800
 8002c88:	40004c00 	.word	0x40004c00
 8002c8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002c9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 812a 	beq.w	8002ef8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	4a9e      	ldr	r2, [pc, #632]	; (8002f24 <UART_SetConfig+0x590>)
 8002caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d305      	bcc.n	8002cd4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d903      	bls.n	8002cdc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002cda:	e10d      	b.n	8002ef8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	4a8e      	ldr	r2, [pc, #568]	; (8002f24 <UART_SetConfig+0x590>)
 8002cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cfe:	f7fd fae7 	bl	80002d0 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	020b      	lsls	r3, r1, #8
 8002d14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d18:	0202      	lsls	r2, r0, #8
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	6849      	ldr	r1, [r1, #4]
 8002d1e:	0849      	lsrs	r1, r1, #1
 8002d20:	2000      	movs	r0, #0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4605      	mov	r5, r0
 8002d26:	eb12 0804 	adds.w	r8, r2, r4
 8002d2a:	eb43 0905 	adc.w	r9, r3, r5
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	469a      	mov	sl, r3
 8002d36:	4693      	mov	fp, r2
 8002d38:	4652      	mov	r2, sl
 8002d3a:	465b      	mov	r3, fp
 8002d3c:	4640      	mov	r0, r8
 8002d3e:	4649      	mov	r1, r9
 8002d40:	f7fd fac6 	bl	80002d0 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d52:	d308      	bcc.n	8002d66 <UART_SetConfig+0x3d2>
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5a:	d204      	bcs.n	8002d66 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a3a      	ldr	r2, [r7, #32]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	e0c8      	b.n	8002ef8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d6c:	e0c4      	b.n	8002ef8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	d167      	bne.n	8002e48 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d828      	bhi.n	8002dd2 <UART_SetConfig+0x43e>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <UART_SetConfig+0x3f4>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08002dd3 	.word	0x08002dd3
 8002d98:	08002dc3 	.word	0x08002dc3
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dd3 	.word	0x08002dd3
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7ff fab2 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002db2:	e014      	b.n	8002dde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7ff fac4 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <UART_SetConfig+0x594>)
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7ff fa39 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dd0:	e005      	b.n	8002dde <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8089 	beq.w	8002ef8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	4a4e      	ldr	r2, [pc, #312]	; (8002f24 <UART_SetConfig+0x590>)
 8002dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d916      	bls.n	8002e40 <UART_SetConfig+0x4ac>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d212      	bcs.n	8002e40 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f023 030f 	bic.w	r3, r3, #15
 8002e22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	8bfb      	ldrh	r3, [r7, #30]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	8bfa      	ldrh	r2, [r7, #30]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	e05b      	b.n	8002ef8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e46:	e057      	b.n	8002ef8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d828      	bhi.n	8002ea2 <UART_SetConfig+0x50e>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <UART_SetConfig+0x4c4>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002ea3 	.word	0x08002ea3
 8002e68:	08002e93 	.word	0x08002e93
 8002e6c:	08002ea3 	.word	0x08002ea3
 8002e70:	08002ea3 	.word	0x08002ea3
 8002e74:	08002ea3 	.word	0x08002ea3
 8002e78:	08002e9b 	.word	0x08002e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7ff fa4a 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e82:	e014      	b.n	8002eae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e84:	f7ff fa5c 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e8a:	e010      	b.n	8002eae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <UART_SetConfig+0x594>)
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e90:	e00d      	b.n	8002eae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e92:	f7ff f9d1 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e98:	e009      	b.n	8002eae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ea0:	e005      	b.n	8002eae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002eac:	bf00      	nop
    }

    if (pclk != 0U)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <UART_SetConfig+0x590>)
 8002eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	441a      	add	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d909      	bls.n	8002ef2 <UART_SetConfig+0x55e>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d205      	bcs.n	8002ef2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e002      	b.n	8002ef8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002f14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f22:	bf00      	nop
 8002f24:	08003f3c 	.word	0x08003f3c
 8002f28:	00f42400 	.word	0x00f42400

08002f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01a      	beq.n	8003042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800302a:	d10a      	bne.n	8003042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
  }
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b098      	sub	sp, #96	; 0x60
 8003074:	af02      	add	r7, sp, #8
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003080:	f7fd fe4c 	bl	8000d1c <HAL_GetTick>
 8003084:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d12f      	bne.n	80030f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309c:	2200      	movs	r2, #0
 800309e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f88e 	bl	80031c4 <UART_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d022      	beq.n	80030f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
 80030ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e6      	bne.n	80030ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e063      	b.n	80031bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d149      	bne.n	8003196 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003102:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	2200      	movs	r2, #0
 800310c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f857 	bl	80031c4 <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03c      	beq.n	8003196 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	623b      	str	r3, [r7, #32]
   return(result);
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
 800313c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e6      	bne.n	800311c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3308      	adds	r3, #8
 8003154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	60fb      	str	r3, [r7, #12]
   return(result);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	617b      	str	r3, [r7, #20]
   return(result);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e5      	bne.n	800314e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e012      	b.n	80031bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3758      	adds	r7, #88	; 0x58
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d4:	e04f      	b.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d04b      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031de:	f7fd fd9d 	bl	8000d1c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e04e      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d037      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d034      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d031      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d110      	bne.n	8003242 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f838 	bl	800329e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2208      	movs	r2, #8
 8003232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e029      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003250:	d111      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f81e 	bl	800329e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e00f      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	429a      	cmp	r2, r3
 8003292:	d0a0      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800329e:	b480      	push	{r7}
 80032a0:	b095      	sub	sp, #84	; 0x54
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c4:	643b      	str	r3, [r7, #64]	; 0x40
 80032c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e6      	bne.n	80032a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3308      	adds	r3, #8
 80032de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3308      	adds	r3, #8
 80032fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e3      	bne.n	80032d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d118      	bne.n	800334a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	60bb      	str	r3, [r7, #8]
   return(result);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	613b      	str	r3, [r7, #16]
   return(result);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e6      	bne.n	8003318 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800335e:	bf00      	nop
 8003360:	3754      	adds	r7, #84	; 0x54
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UARTEx_DisableFifoMode+0x16>
 800337c:	2302      	movs	r3, #2
 800337e:	e027      	b.n	80033d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80033ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e02d      	b.n	8003450 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f84f 	bl	80034d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800346c:	2302      	movs	r3, #2
 800346e:	e02d      	b.n	80034cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2224      	movs	r2, #36	; 0x24
 800347c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f811 	bl	80034d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d108      	bne.n	80034f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034f4:	e031      	b.n	800355a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034f6:	2308      	movs	r3, #8
 80034f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034fa:	2308      	movs	r3, #8
 80034fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	0e5b      	lsrs	r3, r3, #25
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	0f5b      	lsrs	r3, r3, #29
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	7b3a      	ldrb	r2, [r7, #12]
 8003522:	4911      	ldr	r1, [pc, #68]	; (8003568 <UARTEx_SetNbDataToProcess+0x94>)
 8003524:	5c8a      	ldrb	r2, [r1, r2]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800352a:	7b3a      	ldrb	r2, [r7, #12]
 800352c:	490f      	ldr	r1, [pc, #60]	; (800356c <UARTEx_SetNbDataToProcess+0x98>)
 800352e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003530:	fb93 f3f2 	sdiv	r3, r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	7b7a      	ldrb	r2, [r7, #13]
 8003540:	4909      	ldr	r1, [pc, #36]	; (8003568 <UARTEx_SetNbDataToProcess+0x94>)
 8003542:	5c8a      	ldrb	r2, [r1, r2]
 8003544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003548:	7b7a      	ldrb	r2, [r7, #13]
 800354a:	4908      	ldr	r1, [pc, #32]	; (800356c <UARTEx_SetNbDataToProcess+0x98>)
 800354c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800354e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	08003f54 	.word	0x08003f54
 800356c:	08003f5c 	.word	0x08003f5c

08003570 <siprintf>:
 8003570:	b40e      	push	{r1, r2, r3}
 8003572:	b500      	push	{lr}
 8003574:	b09c      	sub	sp, #112	; 0x70
 8003576:	ab1d      	add	r3, sp, #116	; 0x74
 8003578:	9002      	str	r0, [sp, #8]
 800357a:	9006      	str	r0, [sp, #24]
 800357c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003580:	4809      	ldr	r0, [pc, #36]	; (80035a8 <siprintf+0x38>)
 8003582:	9107      	str	r1, [sp, #28]
 8003584:	9104      	str	r1, [sp, #16]
 8003586:	4909      	ldr	r1, [pc, #36]	; (80035ac <siprintf+0x3c>)
 8003588:	f853 2b04 	ldr.w	r2, [r3], #4
 800358c:	9105      	str	r1, [sp, #20]
 800358e:	6800      	ldr	r0, [r0, #0]
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	a902      	add	r1, sp, #8
 8003594:	f000 f992 	bl	80038bc <_svfiprintf_r>
 8003598:	9b02      	ldr	r3, [sp, #8]
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	b01c      	add	sp, #112	; 0x70
 80035a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a4:	b003      	add	sp, #12
 80035a6:	4770      	bx	lr
 80035a8:	20000058 	.word	0x20000058
 80035ac:	ffff0208 	.word	0xffff0208

080035b0 <memset>:
 80035b0:	4402      	add	r2, r0
 80035b2:	4603      	mov	r3, r0
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d100      	bne.n	80035ba <memset+0xa>
 80035b8:	4770      	bx	lr
 80035ba:	f803 1b01 	strb.w	r1, [r3], #1
 80035be:	e7f9      	b.n	80035b4 <memset+0x4>

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000058 	.word	0x20000058

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	; (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	; (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	; (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 fc6a 	bl	8003eb8 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08003fa0 	.word	0x08003fa0
 8003608:	08003fa0 	.word	0x08003fa0
 800360c:	08003fa0 	.word	0x08003fa0
 8003610:	08003fa4 	.word	0x08003fa4

08003614 <__retarget_lock_acquire_recursive>:
 8003614:	4770      	bx	lr

08003616 <__retarget_lock_release_recursive>:
 8003616:	4770      	bx	lr

08003618 <_free_r>:
 8003618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800361a:	2900      	cmp	r1, #0
 800361c:	d044      	beq.n	80036a8 <_free_r+0x90>
 800361e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003622:	9001      	str	r0, [sp, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f1a1 0404 	sub.w	r4, r1, #4
 800362a:	bfb8      	it	lt
 800362c:	18e4      	addlt	r4, r4, r3
 800362e:	f000 f8df 	bl	80037f0 <__malloc_lock>
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <_free_r+0x94>)
 8003634:	9801      	ldr	r0, [sp, #4]
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	b933      	cbnz	r3, 8003648 <_free_r+0x30>
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	6014      	str	r4, [r2, #0]
 800363e:	b003      	add	sp, #12
 8003640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003644:	f000 b8da 	b.w	80037fc <__malloc_unlock>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d908      	bls.n	800365e <_free_r+0x46>
 800364c:	6825      	ldr	r5, [r4, #0]
 800364e:	1961      	adds	r1, r4, r5
 8003650:	428b      	cmp	r3, r1
 8003652:	bf01      	itttt	eq
 8003654:	6819      	ldreq	r1, [r3, #0]
 8003656:	685b      	ldreq	r3, [r3, #4]
 8003658:	1949      	addeq	r1, r1, r5
 800365a:	6021      	streq	r1, [r4, #0]
 800365c:	e7ed      	b.n	800363a <_free_r+0x22>
 800365e:	461a      	mov	r2, r3
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b10b      	cbz	r3, 8003668 <_free_r+0x50>
 8003664:	42a3      	cmp	r3, r4
 8003666:	d9fa      	bls.n	800365e <_free_r+0x46>
 8003668:	6811      	ldr	r1, [r2, #0]
 800366a:	1855      	adds	r5, r2, r1
 800366c:	42a5      	cmp	r5, r4
 800366e:	d10b      	bne.n	8003688 <_free_r+0x70>
 8003670:	6824      	ldr	r4, [r4, #0]
 8003672:	4421      	add	r1, r4
 8003674:	1854      	adds	r4, r2, r1
 8003676:	42a3      	cmp	r3, r4
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	d1e0      	bne.n	800363e <_free_r+0x26>
 800367c:	681c      	ldr	r4, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	6053      	str	r3, [r2, #4]
 8003682:	440c      	add	r4, r1
 8003684:	6014      	str	r4, [r2, #0]
 8003686:	e7da      	b.n	800363e <_free_r+0x26>
 8003688:	d902      	bls.n	8003690 <_free_r+0x78>
 800368a:	230c      	movs	r3, #12
 800368c:	6003      	str	r3, [r0, #0]
 800368e:	e7d6      	b.n	800363e <_free_r+0x26>
 8003690:	6825      	ldr	r5, [r4, #0]
 8003692:	1961      	adds	r1, r4, r5
 8003694:	428b      	cmp	r3, r1
 8003696:	bf04      	itt	eq
 8003698:	6819      	ldreq	r1, [r3, #0]
 800369a:	685b      	ldreq	r3, [r3, #4]
 800369c:	6063      	str	r3, [r4, #4]
 800369e:	bf04      	itt	eq
 80036a0:	1949      	addeq	r1, r1, r5
 80036a2:	6021      	streq	r1, [r4, #0]
 80036a4:	6054      	str	r4, [r2, #4]
 80036a6:	e7ca      	b.n	800363e <_free_r+0x26>
 80036a8:	b003      	add	sp, #12
 80036aa:	bd30      	pop	{r4, r5, pc}
 80036ac:	20000378 	.word	0x20000378

080036b0 <sbrk_aligned>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4e0e      	ldr	r6, [pc, #56]	; (80036ec <sbrk_aligned+0x3c>)
 80036b4:	460c      	mov	r4, r1
 80036b6:	6831      	ldr	r1, [r6, #0]
 80036b8:	4605      	mov	r5, r0
 80036ba:	b911      	cbnz	r1, 80036c2 <sbrk_aligned+0x12>
 80036bc:	f000 fba6 	bl	8003e0c <_sbrk_r>
 80036c0:	6030      	str	r0, [r6, #0]
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 fba1 	bl	8003e0c <_sbrk_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d00a      	beq.n	80036e4 <sbrk_aligned+0x34>
 80036ce:	1cc4      	adds	r4, r0, #3
 80036d0:	f024 0403 	bic.w	r4, r4, #3
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d007      	beq.n	80036e8 <sbrk_aligned+0x38>
 80036d8:	1a21      	subs	r1, r4, r0
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fb96 	bl	8003e0c <_sbrk_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d101      	bne.n	80036e8 <sbrk_aligned+0x38>
 80036e4:	f04f 34ff 	mov.w	r4, #4294967295
 80036e8:	4620      	mov	r0, r4
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	2000037c 	.word	0x2000037c

080036f0 <_malloc_r>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	2d00      	cmp	r5, #0
 8003704:	4607      	mov	r7, r0
 8003706:	db01      	blt.n	800370c <_malloc_r+0x1c>
 8003708:	42a9      	cmp	r1, r5
 800370a:	d905      	bls.n	8003718 <_malloc_r+0x28>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	2600      	movs	r6, #0
 8003712:	4630      	mov	r0, r6
 8003714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037ec <_malloc_r+0xfc>
 800371c:	f000 f868 	bl	80037f0 <__malloc_lock>
 8003720:	f8d8 3000 	ldr.w	r3, [r8]
 8003724:	461c      	mov	r4, r3
 8003726:	bb5c      	cbnz	r4, 8003780 <_malloc_r+0x90>
 8003728:	4629      	mov	r1, r5
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff ffc0 	bl	80036b0 <sbrk_aligned>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	4604      	mov	r4, r0
 8003734:	d155      	bne.n	80037e2 <_malloc_r+0xf2>
 8003736:	f8d8 4000 	ldr.w	r4, [r8]
 800373a:	4626      	mov	r6, r4
 800373c:	2e00      	cmp	r6, #0
 800373e:	d145      	bne.n	80037cc <_malloc_r+0xdc>
 8003740:	2c00      	cmp	r4, #0
 8003742:	d048      	beq.n	80037d6 <_malloc_r+0xe6>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	4631      	mov	r1, r6
 8003748:	4638      	mov	r0, r7
 800374a:	eb04 0903 	add.w	r9, r4, r3
 800374e:	f000 fb5d 	bl	8003e0c <_sbrk_r>
 8003752:	4581      	cmp	r9, r0
 8003754:	d13f      	bne.n	80037d6 <_malloc_r+0xe6>
 8003756:	6821      	ldr	r1, [r4, #0]
 8003758:	1a6d      	subs	r5, r5, r1
 800375a:	4629      	mov	r1, r5
 800375c:	4638      	mov	r0, r7
 800375e:	f7ff ffa7 	bl	80036b0 <sbrk_aligned>
 8003762:	3001      	adds	r0, #1
 8003764:	d037      	beq.n	80037d6 <_malloc_r+0xe6>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	442b      	add	r3, r5
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	f8d8 3000 	ldr.w	r3, [r8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d038      	beq.n	80037e6 <_malloc_r+0xf6>
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	42a2      	cmp	r2, r4
 8003778:	d12b      	bne.n	80037d2 <_malloc_r+0xe2>
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e00f      	b.n	80037a0 <_malloc_r+0xb0>
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	1b52      	subs	r2, r2, r5
 8003784:	d41f      	bmi.n	80037c6 <_malloc_r+0xd6>
 8003786:	2a0b      	cmp	r2, #11
 8003788:	d917      	bls.n	80037ba <_malloc_r+0xca>
 800378a:	1961      	adds	r1, r4, r5
 800378c:	42a3      	cmp	r3, r4
 800378e:	6025      	str	r5, [r4, #0]
 8003790:	bf18      	it	ne
 8003792:	6059      	strne	r1, [r3, #4]
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	bf08      	it	eq
 8003798:	f8c8 1000 	streq.w	r1, [r8]
 800379c:	5162      	str	r2, [r4, r5]
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	4638      	mov	r0, r7
 80037a2:	f104 060b 	add.w	r6, r4, #11
 80037a6:	f000 f829 	bl	80037fc <__malloc_unlock>
 80037aa:	f026 0607 	bic.w	r6, r6, #7
 80037ae:	1d23      	adds	r3, r4, #4
 80037b0:	1af2      	subs	r2, r6, r3
 80037b2:	d0ae      	beq.n	8003712 <_malloc_r+0x22>
 80037b4:	1b9b      	subs	r3, r3, r6
 80037b6:	50a3      	str	r3, [r4, r2]
 80037b8:	e7ab      	b.n	8003712 <_malloc_r+0x22>
 80037ba:	42a3      	cmp	r3, r4
 80037bc:	6862      	ldr	r2, [r4, #4]
 80037be:	d1dd      	bne.n	800377c <_malloc_r+0x8c>
 80037c0:	f8c8 2000 	str.w	r2, [r8]
 80037c4:	e7ec      	b.n	80037a0 <_malloc_r+0xb0>
 80037c6:	4623      	mov	r3, r4
 80037c8:	6864      	ldr	r4, [r4, #4]
 80037ca:	e7ac      	b.n	8003726 <_malloc_r+0x36>
 80037cc:	4634      	mov	r4, r6
 80037ce:	6876      	ldr	r6, [r6, #4]
 80037d0:	e7b4      	b.n	800373c <_malloc_r+0x4c>
 80037d2:	4613      	mov	r3, r2
 80037d4:	e7cc      	b.n	8003770 <_malloc_r+0x80>
 80037d6:	230c      	movs	r3, #12
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4638      	mov	r0, r7
 80037dc:	f000 f80e 	bl	80037fc <__malloc_unlock>
 80037e0:	e797      	b.n	8003712 <_malloc_r+0x22>
 80037e2:	6025      	str	r5, [r4, #0]
 80037e4:	e7dc      	b.n	80037a0 <_malloc_r+0xb0>
 80037e6:	605b      	str	r3, [r3, #4]
 80037e8:	deff      	udf	#255	; 0xff
 80037ea:	bf00      	nop
 80037ec:	20000378 	.word	0x20000378

080037f0 <__malloc_lock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__malloc_lock+0x8>)
 80037f2:	f7ff bf0f 	b.w	8003614 <__retarget_lock_acquire_recursive>
 80037f6:	bf00      	nop
 80037f8:	20000374 	.word	0x20000374

080037fc <__malloc_unlock>:
 80037fc:	4801      	ldr	r0, [pc, #4]	; (8003804 <__malloc_unlock+0x8>)
 80037fe:	f7ff bf0a 	b.w	8003616 <__retarget_lock_release_recursive>
 8003802:	bf00      	nop
 8003804:	20000374 	.word	0x20000374

08003808 <__ssputs_r>:
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	688e      	ldr	r6, [r1, #8]
 800380e:	461f      	mov	r7, r3
 8003810:	42be      	cmp	r6, r7
 8003812:	680b      	ldr	r3, [r1, #0]
 8003814:	4682      	mov	sl, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4690      	mov	r8, r2
 800381a:	d82c      	bhi.n	8003876 <__ssputs_r+0x6e>
 800381c:	898a      	ldrh	r2, [r1, #12]
 800381e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003822:	d026      	beq.n	8003872 <__ssputs_r+0x6a>
 8003824:	6965      	ldr	r5, [r4, #20]
 8003826:	6909      	ldr	r1, [r1, #16]
 8003828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800382c:	eba3 0901 	sub.w	r9, r3, r1
 8003830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003834:	1c7b      	adds	r3, r7, #1
 8003836:	444b      	add	r3, r9
 8003838:	106d      	asrs	r5, r5, #1
 800383a:	429d      	cmp	r5, r3
 800383c:	bf38      	it	cc
 800383e:	461d      	movcc	r5, r3
 8003840:	0553      	lsls	r3, r2, #21
 8003842:	d527      	bpl.n	8003894 <__ssputs_r+0x8c>
 8003844:	4629      	mov	r1, r5
 8003846:	f7ff ff53 	bl	80036f0 <_malloc_r>
 800384a:	4606      	mov	r6, r0
 800384c:	b360      	cbz	r0, 80038a8 <__ssputs_r+0xa0>
 800384e:	6921      	ldr	r1, [r4, #16]
 8003850:	464a      	mov	r2, r9
 8003852:	f000 faeb 	bl	8003e2c <memcpy>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800385c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	6126      	str	r6, [r4, #16]
 8003864:	6165      	str	r5, [r4, #20]
 8003866:	444e      	add	r6, r9
 8003868:	eba5 0509 	sub.w	r5, r5, r9
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	60a5      	str	r5, [r4, #8]
 8003870:	463e      	mov	r6, r7
 8003872:	42be      	cmp	r6, r7
 8003874:	d900      	bls.n	8003878 <__ssputs_r+0x70>
 8003876:	463e      	mov	r6, r7
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	4632      	mov	r2, r6
 800387c:	4641      	mov	r1, r8
 800387e:	f000 faab 	bl	8003dd8 <memmove>
 8003882:	68a3      	ldr	r3, [r4, #8]
 8003884:	1b9b      	subs	r3, r3, r6
 8003886:	60a3      	str	r3, [r4, #8]
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	4433      	add	r3, r6
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	2000      	movs	r0, #0
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	462a      	mov	r2, r5
 8003896:	f000 fad7 	bl	8003e48 <_realloc_r>
 800389a:	4606      	mov	r6, r0
 800389c:	2800      	cmp	r0, #0
 800389e:	d1e0      	bne.n	8003862 <__ssputs_r+0x5a>
 80038a0:	6921      	ldr	r1, [r4, #16]
 80038a2:	4650      	mov	r0, sl
 80038a4:	f7ff feb8 	bl	8003618 <_free_r>
 80038a8:	230c      	movs	r3, #12
 80038aa:	f8ca 3000 	str.w	r3, [sl]
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ba:	e7e9      	b.n	8003890 <__ssputs_r+0x88>

080038bc <_svfiprintf_r>:
 80038bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c0:	4698      	mov	r8, r3
 80038c2:	898b      	ldrh	r3, [r1, #12]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	b09d      	sub	sp, #116	; 0x74
 80038c8:	4607      	mov	r7, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	d50e      	bpl.n	80038ee <_svfiprintf_r+0x32>
 80038d0:	690b      	ldr	r3, [r1, #16]
 80038d2:	b963      	cbnz	r3, 80038ee <_svfiprintf_r+0x32>
 80038d4:	2140      	movs	r1, #64	; 0x40
 80038d6:	f7ff ff0b 	bl	80036f0 <_malloc_r>
 80038da:	6028      	str	r0, [r5, #0]
 80038dc:	6128      	str	r0, [r5, #16]
 80038de:	b920      	cbnz	r0, 80038ea <_svfiprintf_r+0x2e>
 80038e0:	230c      	movs	r3, #12
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	e0d0      	b.n	8003a8c <_svfiprintf_r+0x1d0>
 80038ea:	2340      	movs	r3, #64	; 0x40
 80038ec:	616b      	str	r3, [r5, #20]
 80038ee:	2300      	movs	r3, #0
 80038f0:	9309      	str	r3, [sp, #36]	; 0x24
 80038f2:	2320      	movs	r3, #32
 80038f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038fc:	2330      	movs	r3, #48	; 0x30
 80038fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003aa4 <_svfiprintf_r+0x1e8>
 8003902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003906:	f04f 0901 	mov.w	r9, #1
 800390a:	4623      	mov	r3, r4
 800390c:	469a      	mov	sl, r3
 800390e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003912:	b10a      	cbz	r2, 8003918 <_svfiprintf_r+0x5c>
 8003914:	2a25      	cmp	r2, #37	; 0x25
 8003916:	d1f9      	bne.n	800390c <_svfiprintf_r+0x50>
 8003918:	ebba 0b04 	subs.w	fp, sl, r4
 800391c:	d00b      	beq.n	8003936 <_svfiprintf_r+0x7a>
 800391e:	465b      	mov	r3, fp
 8003920:	4622      	mov	r2, r4
 8003922:	4629      	mov	r1, r5
 8003924:	4638      	mov	r0, r7
 8003926:	f7ff ff6f 	bl	8003808 <__ssputs_r>
 800392a:	3001      	adds	r0, #1
 800392c:	f000 80a9 	beq.w	8003a82 <_svfiprintf_r+0x1c6>
 8003930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003932:	445a      	add	r2, fp
 8003934:	9209      	str	r2, [sp, #36]	; 0x24
 8003936:	f89a 3000 	ldrb.w	r3, [sl]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a1 	beq.w	8003a82 <_svfiprintf_r+0x1c6>
 8003940:	2300      	movs	r3, #0
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394a:	f10a 0a01 	add.w	sl, sl, #1
 800394e:	9304      	str	r3, [sp, #16]
 8003950:	9307      	str	r3, [sp, #28]
 8003952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003956:	931a      	str	r3, [sp, #104]	; 0x68
 8003958:	4654      	mov	r4, sl
 800395a:	2205      	movs	r2, #5
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	4850      	ldr	r0, [pc, #320]	; (8003aa4 <_svfiprintf_r+0x1e8>)
 8003962:	f7fc fc65 	bl	8000230 <memchr>
 8003966:	9a04      	ldr	r2, [sp, #16]
 8003968:	b9d8      	cbnz	r0, 80039a2 <_svfiprintf_r+0xe6>
 800396a:	06d0      	lsls	r0, r2, #27
 800396c:	bf44      	itt	mi
 800396e:	2320      	movmi	r3, #32
 8003970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003974:	0711      	lsls	r1, r2, #28
 8003976:	bf44      	itt	mi
 8003978:	232b      	movmi	r3, #43	; 0x2b
 800397a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b2a      	cmp	r3, #42	; 0x2a
 8003984:	d015      	beq.n	80039b2 <_svfiprintf_r+0xf6>
 8003986:	9a07      	ldr	r2, [sp, #28]
 8003988:	4654      	mov	r4, sl
 800398a:	2000      	movs	r0, #0
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	4621      	mov	r1, r4
 8003992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003996:	3b30      	subs	r3, #48	; 0x30
 8003998:	2b09      	cmp	r3, #9
 800399a:	d94d      	bls.n	8003a38 <_svfiprintf_r+0x17c>
 800399c:	b1b0      	cbz	r0, 80039cc <_svfiprintf_r+0x110>
 800399e:	9207      	str	r2, [sp, #28]
 80039a0:	e014      	b.n	80039cc <_svfiprintf_r+0x110>
 80039a2:	eba0 0308 	sub.w	r3, r0, r8
 80039a6:	fa09 f303 	lsl.w	r3, r9, r3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	46a2      	mov	sl, r4
 80039b0:	e7d2      	b.n	8003958 <_svfiprintf_r+0x9c>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	1d19      	adds	r1, r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	9103      	str	r1, [sp, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfbb      	ittet	lt
 80039be:	425b      	neglt	r3, r3
 80039c0:	f042 0202 	orrlt.w	r2, r2, #2
 80039c4:	9307      	strge	r3, [sp, #28]
 80039c6:	9307      	strlt	r3, [sp, #28]
 80039c8:	bfb8      	it	lt
 80039ca:	9204      	strlt	r2, [sp, #16]
 80039cc:	7823      	ldrb	r3, [r4, #0]
 80039ce:	2b2e      	cmp	r3, #46	; 0x2e
 80039d0:	d10c      	bne.n	80039ec <_svfiprintf_r+0x130>
 80039d2:	7863      	ldrb	r3, [r4, #1]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d134      	bne.n	8003a42 <_svfiprintf_r+0x186>
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	1d1a      	adds	r2, r3, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	9203      	str	r2, [sp, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfb8      	it	lt
 80039e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039e8:	3402      	adds	r4, #2
 80039ea:	9305      	str	r3, [sp, #20]
 80039ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ab4 <_svfiprintf_r+0x1f8>
 80039f0:	7821      	ldrb	r1, [r4, #0]
 80039f2:	2203      	movs	r2, #3
 80039f4:	4650      	mov	r0, sl
 80039f6:	f7fc fc1b 	bl	8000230 <memchr>
 80039fa:	b138      	cbz	r0, 8003a0c <_svfiprintf_r+0x150>
 80039fc:	9b04      	ldr	r3, [sp, #16]
 80039fe:	eba0 000a 	sub.w	r0, r0, sl
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	4082      	lsls	r2, r0
 8003a06:	4313      	orrs	r3, r2
 8003a08:	3401      	adds	r4, #1
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a10:	4825      	ldr	r0, [pc, #148]	; (8003aa8 <_svfiprintf_r+0x1ec>)
 8003a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a16:	2206      	movs	r2, #6
 8003a18:	f7fc fc0a 	bl	8000230 <memchr>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d038      	beq.n	8003a92 <_svfiprintf_r+0x1d6>
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <_svfiprintf_r+0x1f0>)
 8003a22:	bb1b      	cbnz	r3, 8003a6c <_svfiprintf_r+0x1b0>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	3307      	adds	r3, #7
 8003a28:	f023 0307 	bic.w	r3, r3, #7
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	4433      	add	r3, r6
 8003a34:	9309      	str	r3, [sp, #36]	; 0x24
 8003a36:	e768      	b.n	800390a <_svfiprintf_r+0x4e>
 8003a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7a6      	b.n	8003990 <_svfiprintf_r+0xd4>
 8003a42:	2300      	movs	r3, #0
 8003a44:	3401      	adds	r4, #1
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a54:	3a30      	subs	r2, #48	; 0x30
 8003a56:	2a09      	cmp	r2, #9
 8003a58:	d903      	bls.n	8003a62 <_svfiprintf_r+0x1a6>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0c6      	beq.n	80039ec <_svfiprintf_r+0x130>
 8003a5e:	9105      	str	r1, [sp, #20]
 8003a60:	e7c4      	b.n	80039ec <_svfiprintf_r+0x130>
 8003a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a66:	4604      	mov	r4, r0
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e7f0      	b.n	8003a4e <_svfiprintf_r+0x192>
 8003a6c:	ab03      	add	r3, sp, #12
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	462a      	mov	r2, r5
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <_svfiprintf_r+0x1f4>)
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	4638      	mov	r0, r7
 8003a78:	f3af 8000 	nop.w
 8003a7c:	1c42      	adds	r2, r0, #1
 8003a7e:	4606      	mov	r6, r0
 8003a80:	d1d6      	bne.n	8003a30 <_svfiprintf_r+0x174>
 8003a82:	89ab      	ldrh	r3, [r5, #12]
 8003a84:	065b      	lsls	r3, r3, #25
 8003a86:	f53f af2d 	bmi.w	80038e4 <_svfiprintf_r+0x28>
 8003a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8c:	b01d      	add	sp, #116	; 0x74
 8003a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a92:	ab03      	add	r3, sp, #12
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	462a      	mov	r2, r5
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <_svfiprintf_r+0x1f4>)
 8003a9a:	a904      	add	r1, sp, #16
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f000 f879 	bl	8003b94 <_printf_i>
 8003aa2:	e7eb      	b.n	8003a7c <_svfiprintf_r+0x1c0>
 8003aa4:	08003f64 	.word	0x08003f64
 8003aa8:	08003f6e 	.word	0x08003f6e
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	08003809 	.word	0x08003809
 8003ab4:	08003f6a 	.word	0x08003f6a

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4616      	mov	r6, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b10a      	cbz	r2, 8003ade <_printf_common+0x26>
 8003ada:	3301      	adds	r3, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	0699      	lsls	r1, r3, #26
 8003ae2:	bf42      	ittt	mi
 8003ae4:	6833      	ldrmi	r3, [r6, #0]
 8003ae6:	3302      	addmi	r3, #2
 8003ae8:	6033      	strmi	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d106      	bne.n	8003b00 <_printf_common+0x48>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	6832      	ldr	r2, [r6, #0]
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dc26      	bgt.n	8003b4e <_printf_common+0x96>
 8003b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d42b      	bmi.n	8003b68 <_printf_common+0xb0>
 8003b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d01e      	beq.n	8003b5c <_printf_common+0xa4>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	6922      	ldr	r2, [r4, #16]
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf02      	ittt	eq
 8003b2a:	68e5      	ldreq	r5, [r4, #12]
 8003b2c:	6833      	ldreq	r3, [r6, #0]
 8003b2e:	1aed      	subeq	r5, r5, r3
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	2600      	movs	r6, #0
 8003b44:	341a      	adds	r4, #26
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xa8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4649      	mov	r1, r9
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xac>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c6      	b.n	8003af6 <_printf_common+0x3e>
 8003b68:	18e1      	adds	r1, r4, r3
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	2030      	movs	r0, #48	; 0x30
 8003b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b72:	4422      	add	r2, r4
 8003b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	e7c7      	b.n	8003b10 <_printf_common+0x58>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xa4>
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7d9      	b.n	8003b46 <_printf_common+0x8e>
	...

08003b94 <_printf_i>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	7e0f      	ldrb	r7, [r1, #24]
 8003b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b9c:	2f78      	cmp	r7, #120	; 0x78
 8003b9e:	4691      	mov	r9, r2
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003baa:	d807      	bhi.n	8003bbc <_printf_i+0x28>
 8003bac:	2f62      	cmp	r7, #98	; 0x62
 8003bae:	d80a      	bhi.n	8003bc6 <_printf_i+0x32>
 8003bb0:	2f00      	cmp	r7, #0
 8003bb2:	f000 80d4 	beq.w	8003d5e <_printf_i+0x1ca>
 8003bb6:	2f58      	cmp	r7, #88	; 0x58
 8003bb8:	f000 80c0 	beq.w	8003d3c <_printf_i+0x1a8>
 8003bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc4:	e03a      	b.n	8003c3c <_printf_i+0xa8>
 8003bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d8f6      	bhi.n	8003bbc <_printf_i+0x28>
 8003bce:	a101      	add	r1, pc, #4	; (adr r1, 8003bd4 <_printf_i+0x40>)
 8003bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c41 	.word	0x08003c41
 8003bdc:	08003bbd 	.word	0x08003bbd
 8003be0:	08003bbd 	.word	0x08003bbd
 8003be4:	08003bbd 	.word	0x08003bbd
 8003be8:	08003bbd 	.word	0x08003bbd
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003bbd 	.word	0x08003bbd
 8003bf4:	08003bbd 	.word	0x08003bbd
 8003bf8:	08003bbd 	.word	0x08003bbd
 8003bfc:	08003bbd 	.word	0x08003bbd
 8003c00:	08003d45 	.word	0x08003d45
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003cff 	.word	0x08003cff
 8003c0c:	08003bbd 	.word	0x08003bbd
 8003c10:	08003bbd 	.word	0x08003bbd
 8003c14:	08003d67 	.word	0x08003d67
 8003c18:	08003bbd 	.word	0x08003bbd
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003bbd 	.word	0x08003bbd
 8003c24:	08003bbd 	.word	0x08003bbd
 8003c28:	08003d07 	.word	0x08003d07
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	602a      	str	r2, [r5, #0]
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e09f      	b.n	8003d80 <_printf_i+0x1ec>
 8003c40:	6820      	ldr	r0, [r4, #0]
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	0607      	lsls	r7, r0, #24
 8003c46:	f103 0104 	add.w	r1, r3, #4
 8003c4a:	6029      	str	r1, [r5, #0]
 8003c4c:	d501      	bpl.n	8003c52 <_printf_i+0xbe>
 8003c4e:	681e      	ldr	r6, [r3, #0]
 8003c50:	e003      	b.n	8003c5a <_printf_i+0xc6>
 8003c52:	0646      	lsls	r6, r0, #25
 8003c54:	d5fb      	bpl.n	8003c4e <_printf_i+0xba>
 8003c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	da03      	bge.n	8003c66 <_printf_i+0xd2>
 8003c5e:	232d      	movs	r3, #45	; 0x2d
 8003c60:	4276      	negs	r6, r6
 8003c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c66:	485a      	ldr	r0, [pc, #360]	; (8003dd0 <_printf_i+0x23c>)
 8003c68:	230a      	movs	r3, #10
 8003c6a:	e012      	b.n	8003c92 <_printf_i+0xfe>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	1d19      	adds	r1, r3, #4
 8003c72:	6029      	str	r1, [r5, #0]
 8003c74:	0605      	lsls	r5, r0, #24
 8003c76:	d501      	bpl.n	8003c7c <_printf_i+0xe8>
 8003c78:	681e      	ldr	r6, [r3, #0]
 8003c7a:	e002      	b.n	8003c82 <_printf_i+0xee>
 8003c7c:	0641      	lsls	r1, r0, #25
 8003c7e:	d5fb      	bpl.n	8003c78 <_printf_i+0xe4>
 8003c80:	881e      	ldrh	r6, [r3, #0]
 8003c82:	4853      	ldr	r0, [pc, #332]	; (8003dd0 <_printf_i+0x23c>)
 8003c84:	2f6f      	cmp	r7, #111	; 0x6f
 8003c86:	bf0c      	ite	eq
 8003c88:	2308      	moveq	r3, #8
 8003c8a:	230a      	movne	r3, #10
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c92:	6865      	ldr	r5, [r4, #4]
 8003c94:	60a5      	str	r5, [r4, #8]
 8003c96:	2d00      	cmp	r5, #0
 8003c98:	bfa2      	ittt	ge
 8003c9a:	6821      	ldrge	r1, [r4, #0]
 8003c9c:	f021 0104 	bicge.w	r1, r1, #4
 8003ca0:	6021      	strge	r1, [r4, #0]
 8003ca2:	b90e      	cbnz	r6, 8003ca8 <_printf_i+0x114>
 8003ca4:	2d00      	cmp	r5, #0
 8003ca6:	d04b      	beq.n	8003d40 <_printf_i+0x1ac>
 8003ca8:	4615      	mov	r5, r2
 8003caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cae:	fb03 6711 	mls	r7, r3, r1, r6
 8003cb2:	5dc7      	ldrb	r7, [r0, r7]
 8003cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cb8:	4637      	mov	r7, r6
 8003cba:	42bb      	cmp	r3, r7
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	d9f4      	bls.n	8003caa <_printf_i+0x116>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d10b      	bne.n	8003cdc <_printf_i+0x148>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07de      	lsls	r6, r3, #31
 8003cc8:	d508      	bpl.n	8003cdc <_printf_i+0x148>
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	6861      	ldr	r1, [r4, #4]
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	bfde      	ittt	le
 8003cd2:	2330      	movle	r3, #48	; 0x30
 8003cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cdc:	1b52      	subs	r2, r2, r5
 8003cde:	6122      	str	r2, [r4, #16]
 8003ce0:	f8cd a000 	str.w	sl, [sp]
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	aa03      	add	r2, sp, #12
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4640      	mov	r0, r8
 8003cec:	f7ff fee4 	bl	8003ab8 <_printf_common>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d14a      	bne.n	8003d8a <_printf_i+0x1f6>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	b004      	add	sp, #16
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	f043 0320 	orr.w	r3, r3, #32
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	4833      	ldr	r0, [pc, #204]	; (8003dd4 <_printf_i+0x240>)
 8003d08:	2778      	movs	r7, #120	; 0x78
 8003d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	6829      	ldr	r1, [r5, #0]
 8003d12:	061f      	lsls	r7, r3, #24
 8003d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d18:	d402      	bmi.n	8003d20 <_printf_i+0x18c>
 8003d1a:	065f      	lsls	r7, r3, #25
 8003d1c:	bf48      	it	mi
 8003d1e:	b2b6      	uxthmi	r6, r6
 8003d20:	07df      	lsls	r7, r3, #31
 8003d22:	bf48      	it	mi
 8003d24:	f043 0320 	orrmi.w	r3, r3, #32
 8003d28:	6029      	str	r1, [r5, #0]
 8003d2a:	bf48      	it	mi
 8003d2c:	6023      	strmi	r3, [r4, #0]
 8003d2e:	b91e      	cbnz	r6, 8003d38 <_printf_i+0x1a4>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	f023 0320 	bic.w	r3, r3, #32
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	2310      	movs	r3, #16
 8003d3a:	e7a7      	b.n	8003c8c <_printf_i+0xf8>
 8003d3c:	4824      	ldr	r0, [pc, #144]	; (8003dd0 <_printf_i+0x23c>)
 8003d3e:	e7e4      	b.n	8003d0a <_printf_i+0x176>
 8003d40:	4615      	mov	r5, r2
 8003d42:	e7bd      	b.n	8003cc0 <_printf_i+0x12c>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	6826      	ldr	r6, [r4, #0]
 8003d48:	6961      	ldr	r1, [r4, #20]
 8003d4a:	1d18      	adds	r0, r3, #4
 8003d4c:	6028      	str	r0, [r5, #0]
 8003d4e:	0635      	lsls	r5, r6, #24
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	d501      	bpl.n	8003d58 <_printf_i+0x1c4>
 8003d54:	6019      	str	r1, [r3, #0]
 8003d56:	e002      	b.n	8003d5e <_printf_i+0x1ca>
 8003d58:	0670      	lsls	r0, r6, #25
 8003d5a:	d5fb      	bpl.n	8003d54 <_printf_i+0x1c0>
 8003d5c:	8019      	strh	r1, [r3, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	4615      	mov	r5, r2
 8003d64:	e7bc      	b.n	8003ce0 <_printf_i+0x14c>
 8003d66:	682b      	ldr	r3, [r5, #0]
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	602a      	str	r2, [r5, #0]
 8003d6c:	681d      	ldr	r5, [r3, #0]
 8003d6e:	6862      	ldr	r2, [r4, #4]
 8003d70:	2100      	movs	r1, #0
 8003d72:	4628      	mov	r0, r5
 8003d74:	f7fc fa5c 	bl	8000230 <memchr>
 8003d78:	b108      	cbz	r0, 8003d7e <_printf_i+0x1ea>
 8003d7a:	1b40      	subs	r0, r0, r5
 8003d7c:	6060      	str	r0, [r4, #4]
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	6123      	str	r3, [r4, #16]
 8003d82:	2300      	movs	r3, #0
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	e7aa      	b.n	8003ce0 <_printf_i+0x14c>
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	4649      	mov	r1, r9
 8003d90:	4640      	mov	r0, r8
 8003d92:	47d0      	blx	sl
 8003d94:	3001      	adds	r0, #1
 8003d96:	d0ad      	beq.n	8003cf4 <_printf_i+0x160>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	079b      	lsls	r3, r3, #30
 8003d9c:	d413      	bmi.n	8003dc6 <_printf_i+0x232>
 8003d9e:	68e0      	ldr	r0, [r4, #12]
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	4298      	cmp	r0, r3
 8003da4:	bfb8      	it	lt
 8003da6:	4618      	movlt	r0, r3
 8003da8:	e7a6      	b.n	8003cf8 <_printf_i+0x164>
 8003daa:	2301      	movs	r3, #1
 8003dac:	4632      	mov	r2, r6
 8003dae:	4649      	mov	r1, r9
 8003db0:	4640      	mov	r0, r8
 8003db2:	47d0      	blx	sl
 8003db4:	3001      	adds	r0, #1
 8003db6:	d09d      	beq.n	8003cf4 <_printf_i+0x160>
 8003db8:	3501      	adds	r5, #1
 8003dba:	68e3      	ldr	r3, [r4, #12]
 8003dbc:	9903      	ldr	r1, [sp, #12]
 8003dbe:	1a5b      	subs	r3, r3, r1
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	dcf2      	bgt.n	8003daa <_printf_i+0x216>
 8003dc4:	e7eb      	b.n	8003d9e <_printf_i+0x20a>
 8003dc6:	2500      	movs	r5, #0
 8003dc8:	f104 0619 	add.w	r6, r4, #25
 8003dcc:	e7f5      	b.n	8003dba <_printf_i+0x226>
 8003dce:	bf00      	nop
 8003dd0:	08003f75 	.word	0x08003f75
 8003dd4:	08003f86 	.word	0x08003f86

08003dd8 <memmove>:
 8003dd8:	4288      	cmp	r0, r1
 8003dda:	b510      	push	{r4, lr}
 8003ddc:	eb01 0402 	add.w	r4, r1, r2
 8003de0:	d902      	bls.n	8003de8 <memmove+0x10>
 8003de2:	4284      	cmp	r4, r0
 8003de4:	4623      	mov	r3, r4
 8003de6:	d807      	bhi.n	8003df8 <memmove+0x20>
 8003de8:	1e43      	subs	r3, r0, #1
 8003dea:	42a1      	cmp	r1, r4
 8003dec:	d008      	beq.n	8003e00 <memmove+0x28>
 8003dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003df6:	e7f8      	b.n	8003dea <memmove+0x12>
 8003df8:	4402      	add	r2, r0
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	428a      	cmp	r2, r1
 8003dfe:	d100      	bne.n	8003e02 <memmove+0x2a>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e0a:	e7f7      	b.n	8003dfc <memmove+0x24>

08003e0c <_sbrk_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4d06      	ldr	r5, [pc, #24]	; (8003e28 <_sbrk_r+0x1c>)
 8003e10:	2300      	movs	r3, #0
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	f7fc feaa 	bl	8000b70 <_sbrk>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_sbrk_r+0x1a>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_sbrk_r+0x1a>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000370 	.word	0x20000370

08003e2c <memcpy>:
 8003e2c:	440a      	add	r2, r1
 8003e2e:	4291      	cmp	r1, r2
 8003e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e34:	d100      	bne.n	8003e38 <memcpy+0xc>
 8003e36:	4770      	bx	lr
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e42:	4291      	cmp	r1, r2
 8003e44:	d1f9      	bne.n	8003e3a <memcpy+0xe>
 8003e46:	bd10      	pop	{r4, pc}

08003e48 <_realloc_r>:
 8003e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	4614      	mov	r4, r2
 8003e50:	460e      	mov	r6, r1
 8003e52:	b921      	cbnz	r1, 8003e5e <_realloc_r+0x16>
 8003e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e58:	4611      	mov	r1, r2
 8003e5a:	f7ff bc49 	b.w	80036f0 <_malloc_r>
 8003e5e:	b92a      	cbnz	r2, 8003e6c <_realloc_r+0x24>
 8003e60:	f7ff fbda 	bl	8003618 <_free_r>
 8003e64:	4625      	mov	r5, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e6c:	f000 f81b 	bl	8003ea6 <_malloc_usable_size_r>
 8003e70:	4284      	cmp	r4, r0
 8003e72:	4607      	mov	r7, r0
 8003e74:	d802      	bhi.n	8003e7c <_realloc_r+0x34>
 8003e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e7a:	d812      	bhi.n	8003ea2 <_realloc_r+0x5a>
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f7ff fc36 	bl	80036f0 <_malloc_r>
 8003e84:	4605      	mov	r5, r0
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d0ed      	beq.n	8003e66 <_realloc_r+0x1e>
 8003e8a:	42bc      	cmp	r4, r7
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4631      	mov	r1, r6
 8003e90:	bf28      	it	cs
 8003e92:	463a      	movcs	r2, r7
 8003e94:	f7ff ffca 	bl	8003e2c <memcpy>
 8003e98:	4631      	mov	r1, r6
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	f7ff fbbc 	bl	8003618 <_free_r>
 8003ea0:	e7e1      	b.n	8003e66 <_realloc_r+0x1e>
 8003ea2:	4635      	mov	r5, r6
 8003ea4:	e7df      	b.n	8003e66 <_realloc_r+0x1e>

08003ea6 <_malloc_usable_size_r>:
 8003ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eaa:	1f18      	subs	r0, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfbc      	itt	lt
 8003eb0:	580b      	ldrlt	r3, [r1, r0]
 8003eb2:	18c0      	addlt	r0, r0, r3
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
