
CAN FD TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003eb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08003f0c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08003f0c  00005350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e168  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d52  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00014f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e8  00000000  00000000  00015ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8d1  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc05  00000000  00000000  00033ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbba9  00000000  00000000  000418a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd44f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  000fd494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001009a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003dcc 	.word	0x08003dcc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003dcc 	.word	0x08003dcc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb1b 	bl	8000bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f83c 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f916 	bl	80007fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f8ca 	bl	8000768 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 80005d4:	f000 f882 	bl	80006dc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  print("starting");
 80005d8:	4814      	ldr	r0, [pc, #80]	@ (800062c <main+0x6c>)
 80005da:	f000 f975 	bl	80008c8 <print>

  TxHeader.Identifier = 0x130;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <main+0x70>)
 80005e0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 80005e4:	601a      	str	r2, [r3, #0]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <main+0x70>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	60da      	str	r2, [r3, #12]
  TxData[0] = 0x15;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <main+0x74>)
 80005ee:	2215      	movs	r2, #21
 80005f0:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x20;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <main+0x74>)
 80005f4:	2220      	movs	r2, #32
 80005f6:	705a      	strb	r2, [r3, #1]

  if(HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 80005f8:	480f      	ldr	r0, [pc, #60]	@ (8000638 <main+0x78>)
 80005fa:	f000 fdd1 	bl	80011a0 <HAL_FDCAN_Start>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <main+0x4a>
	  print("CAN inicializado");
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <main+0x7c>)
 8000606:	f000 f95f 	bl	80008c8 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <main+0x74>)
 800060c:	4908      	ldr	r1, [pc, #32]	@ (8000630 <main+0x70>)
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <main+0x78>)
 8000610:	f000 fdee 	bl	80011f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <main+0x60>
		{
			print("enviado");
 800061a:	4809      	ldr	r0, [pc, #36]	@ (8000640 <main+0x80>)
 800061c:	f000 f954 	bl	80008c8 <print>
		}
	  HAL_Delay(500);
 8000620:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000624:	f000 fb5c 	bl	8000ce0 <HAL_Delay>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 8000628:	e7ef      	b.n	800060a <main+0x4a>
 800062a:	bf00      	nop
 800062c:	08003de4 	.word	0x08003de4
 8000630:	20000078 	.word	0x20000078
 8000634:	2000009c 	.word	0x2000009c
 8000638:	200000a4 	.word	0x200000a4
 800063c:	08003df0 	.word	0x08003df0
 8000640:	08003e04 	.word	0x08003e04

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2238      	movs	r2, #56	@ 0x38
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 ff3a 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000666:	2000      	movs	r0, #0
 8000668:	f001 f872 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2340      	movs	r3, #64	@ 0x40
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000686:	2355      	movs	r3, #85	@ 0x55
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f90c 	bl	80018b8 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a6:	f000 f92d 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fc0a 	bl	8001edc <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f919 	bl	8000904 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 80006e2:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <MX_FDCAN1_Init+0x88>)
 80006e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000700:	2200      	movs	r2, #0
 8000702:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000706:	2200      	movs	r2, #0
 8000708:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 800070c:	2214      	movs	r2, #20
 800070e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000712:	2201      	movs	r2, #1
 8000714:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 6;
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000718:	2206      	movs	r2, #6
 800071a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 10;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 800071e:	220a      	movs	r2, #10
 8000720:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000724:	2201      	movs	r2, #1
 8000726:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 800072a:	2201      	movs	r2, #1
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000730:	2201      	movs	r2, #1
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000736:	2201      	movs	r2, #1
 8000738:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000742:	2200      	movs	r2, #0
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_FDCAN1_Init+0x84>)
 800074e:	f000 fbcd 	bl	8000eec <HAL_FDCAN_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000758:	f000 f8d4 	bl	8000904 <Error_Handler>
  {
    Error_Handler();
  }*/
  /* USER CODE END FDCAN1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000a4 	.word	0x200000a4
 8000764:	40006400 	.word	0x40006400

08000768 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800076e:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_LPUART1_UART_Init+0x90>)
 8000770:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000772:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007aa:	4812      	ldr	r0, [pc, #72]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f001 ffa2 	bl	80026f4 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8a5 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	f002 fd9b 	bl	80032f8 <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007c8:	f000 f89c 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	f002 fdd0 	bl	8003374 <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 f893 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	f002 fd51 	bl	8003286 <HAL_UARTEx_DisableFifoMode>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ea:	f000 f88b 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000108 	.word	0x20000108
 80007f8:	40008000 	.word	0x40008000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a2a      	ldr	r2, [pc, #168]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a24      	ldr	r2, [pc, #144]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a1e      	ldr	r2, [pc, #120]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f000 ff51 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000884:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <MX_GPIO_Init+0xc8>)
 8000896:	f000 fdc1 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 fdb2 	bl	800141c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	@ 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000800 	.word	0x48000800

080008c8 <print>:

/* USER CODE BEGIN 4 */

void print(char uart_buffer[]){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4909      	ldr	r1, [pc, #36]	@ (80008f8 <print+0x30>)
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <print+0x34>)
 80008d6:	f002 fdd9 	bl	800348c <siprintf>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80008da:	4808      	ldr	r0, [pc, #32]	@ (80008fc <print+0x34>)
 80008dc:	f7ff fca0 	bl	8000220 <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	4904      	ldr	r1, [pc, #16]	@ (80008fc <print+0x34>)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <print+0x38>)
 80008ec:	f001 ff52 	bl	8002794 <HAL_UART_Transmit>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	08003e0c 	.word	0x08003e0c
 80008fc:	2000019c 	.word	0x2000019c
 8000900:	20000108 	.word	0x20000108

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	@ 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	@ 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000946:	f000 ffa7 	bl	8001898 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09a      	sub	sp, #104	@ 0x68
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	2244      	movs	r2, #68	@ 0x44
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fda7 	bl	80034cc <memset>
  if(hfdcan->Instance==FDCAN1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <HAL_FDCAN_MspInit+0xac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d139      	bne.n	80009fc <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800098e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000992:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fcbb 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009a4:	f7ff ffae 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ac:	4a16      	ldr	r2, [pc, #88]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_FDCAN_MspInit+0xb0>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009ea:	2309      	movs	r3, #9
 80009ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 fd10 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3768      	adds	r7, #104	@ 0x68
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40006400 	.word	0x40006400
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09a      	sub	sp, #104	@ 0x68
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2244      	movs	r2, #68	@ 0x44
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fd4d 	bl	80034cc <memset>
  if(huart->Instance==LPUART1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d136      	bne.n	8000aaa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fc63 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a54:	f7ff ff56 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a5c:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a74:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f000 fcb9 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3768      	adds	r7, #104	@ 0x68
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40008000 	.word	0x40008000
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 f8c7 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f002 fcc6 	bl	80034dc <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20008000 	.word	0x20008000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000200 	.word	0x20000200
 8000b84:	20000350 	.word	0x20000350

08000b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f002 fc85 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bde:	f7ff fcef 	bl	80005c0 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bf0:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000bf4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bf8:	20000350 	.word	0x20000350

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>

08000bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f93d 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f80e 	bl	8000c30 <HAL_InitTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e001      	b.n	8000c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c20:	f7ff fe76 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c24:	79fb      	ldrb	r3, [r7, #7]

}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_InitTick+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d022      	beq.n	8000c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_InitTick+0x6c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <HAL_InitTick+0x68>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f93a 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d809      	bhi.n	8000c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c72:	f000 f914 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_InitTick+0x70>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e007      	b.n	8000c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e004      	b.n	8000c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e001      	b.n	8000c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x1c>)
 8000cb4:	6013      	str	r3, [r2, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000204 	.word	0x20000204
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000204 	.word	0x20000204

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d004      	beq.n	8000d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_Delay+0x40>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d04:	bf00      	nop
 8000d06:	f7ff ffdf 	bl	8000cc8 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8f7      	bhi.n	8000d06 <HAL_Delay+0x26>
  {
  }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff47 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff5e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffb2 	bl	8000e44 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e147      	b.n	800118e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d106      	bne.n	8000f18 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fd20 	bl	8000958 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0210 	bic.w	r2, r2, #16
 8000f26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff fece 	bl	8000cc8 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f2e:	e012      	b.n	8000f56 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f30:	f7ff feca 	bl	8000cc8 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e11b      	b.n	800118e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d0e5      	beq.n	8000f30 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f74:	f7ff fea8 	bl	8000cc8 <HAL_GetTick>
 8000f78:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f7a:	e012      	b.n	8000fa2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f7c:	f7ff fea4 	bl	8000cc8 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d90b      	bls.n	8000fa2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0f5      	b.n	800118e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0e5      	beq.n	8000f7c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0202 	orr.w	r2, r2, #2
 8000fbe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a74      	ldr	r2, [pc, #464]	@ (8001198 <HAL_FDCAN_Init+0x2ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d103      	bne.n	8000fd2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000fca:	4a74      	ldr	r2, [pc, #464]	@ (800119c <HAL_FDCAN_Init+0x2b0>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7c1b      	ldrb	r3, [r3, #16]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	699a      	ldr	r2, [r3, #24]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	e007      	b.n	8000ffc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ffa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7c5b      	ldrb	r3, [r3, #17]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d108      	bne.n	8001016 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	e007      	b.n	8001026 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001024:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7c9b      	ldrb	r3, [r3, #18]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	e007      	b.n	8001050 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800104e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001074:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0210 	bic.w	r2, r2, #16
 8001084:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d108      	bne.n	80010a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0204 	orr.w	r2, r2, #4
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	e02c      	b.n	80010fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d028      	beq.n	80010fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d01c      	beq.n	80010ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0210 	orr.w	r2, r2, #16
 80010ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d110      	bne.n	80010fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	619a      	str	r2, [r3, #24]
 80010e8:	e007      	b.n	80010fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	3b01      	subs	r3, #1
 8001100:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	3b01      	subs	r3, #1
 8001108:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800110a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001112:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	3b01      	subs	r3, #1
 800111c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001122:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001124:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800112e:	d115      	bne.n	800115c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001134:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113a:	3b01      	subs	r3, #1
 800113c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800113e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	3b01      	subs	r3, #1
 8001146:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001148:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	3b01      	subs	r3, #1
 8001152:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001158:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800115a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f880 	bl	8001278 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40006400 	.word	0x40006400
 800119c:	40006500 	.word	0x40006500

080011a0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d110      	bne.n	80011d6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e006      	b.n	80011e4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f043 0204 	orr.w	r2, r3, #4
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
  }
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d12c      	bne.n	8001262 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e023      	b.n	8001270 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f870 	bl	8001324 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001254:	2201      	movs	r2, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	409a      	lsls	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e006      	b.n	8001270 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	f043 0208 	orr.w	r2, r3, #8
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
  }
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001282:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001292:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129a:	041a      	lsls	r2, r3, #16
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c0:	061a      	lsls	r2, r3, #24
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e005      	b.n	8001306 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3304      	adds	r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3f3      	bcc.n	80012fa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	4000a400 	.word	0x4000a400

08001324 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001342:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800134a:	4313      	orrs	r3, r2
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e00a      	b.n	8001366 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001358:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800135e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001364:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001370:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001376:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800137c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3304      	adds	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3304      	adds	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e020      	b.n	80013fa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3303      	adds	r3, #3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3302      	adds	r3, #2
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	440b      	add	r3, r1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	440b      	add	r3, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80013de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	440a      	add	r2, r1
 80013e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80013e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3304      	adds	r3, #4
 80013f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3304      	adds	r3, #4
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <FDCAN_CopyMessageToRAM+0xf4>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	461a      	mov	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4293      	cmp	r3, r2
 8001408:	d3d6      	bcc.n	80013b8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3724      	adds	r7, #36	@ 0x24
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	08003e34 	.word	0x08003e34

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	e15a      	b.n	80016e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 814c 	beq.w	80016dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001458:	2b02      	cmp	r3, #2
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d017      	beq.n	80014fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0203 	and.w	r2, r3, #3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a6 	beq.w	80016dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	4a5a      	ldr	r2, [pc, #360]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6613      	str	r3, [r2, #96]	@ 0x60
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a8:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d2:	d01f      	beq.n	8001614 <HAL_GPIO_Init+0x1f8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d019      	beq.n	8001610 <HAL_GPIO_Init+0x1f4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a4b      	ldr	r2, [pc, #300]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x1f0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a49      	ldr	r2, [pc, #292]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1e8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a48      	ldr	r2, [pc, #288]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1e4>
 80015fc:	2305      	movs	r3, #5
 80015fe:	e00a      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001600:	2306      	movs	r3, #6
 8001602:	e008      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001604:	2304      	movs	r3, #4
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001608:	2303      	movs	r3, #3
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1fa>
 8001614:	2300      	movs	r3, #0
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001626:	4937      	ldr	r1, [pc, #220]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001634:	4b39      	ldr	r3, [pc, #228]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001658:	4a30      	ldr	r2, [pc, #192]	@ (800171c <HAL_GPIO_Init+0x300>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165e:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001682:	4a26      	ldr	r2, [pc, #152]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_GPIO_Init+0x300>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <HAL_GPIO_Init+0x300>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f ae9d 	bne.w	800142c <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48001000 	.word	0x48001000
 8001718:	48001400 	.word	0x48001400
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800173c:	e002      	b.n	8001744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d141      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176a:	d131      	bne.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800176c:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001772:	4a46      	ldr	r2, [pc, #280]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001778:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	4b43      	ldr	r3, [pc, #268]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001784:	4a41      	ldr	r2, [pc, #260]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800178c:	4b40      	ldr	r3, [pc, #256]	@ (8001890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2232      	movs	r2, #50	@ 0x32
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	4a3f      	ldr	r2, [pc, #252]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9b      	lsrs	r3, r3, #18
 800179e:	3301      	adds	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a2:	e002      	b.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017aa:	4b38      	ldr	r3, [pc, #224]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b6:	d102      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f2      	bne.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ca:	d158      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e057      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017d6:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017e0:	e04d      	b.n	800187e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017e8:	d141      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f6:	d131      	bne.n	800185c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017fe:	4a23      	ldr	r2, [pc, #140]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001810:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2232      	movs	r2, #50	@ 0x32
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	3301      	adds	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182e:	e002      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001842:	d102      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001856:	d112      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e011      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800186c:	e007      	b.n	800187e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001878:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40007000 	.word	0x40007000
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83

08001898 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e2fe      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b97      	ldr	r3, [pc, #604]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b94      	ldr	r3, [pc, #592]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3e>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_OscConfig+0x44>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10b      	bne.n	8001914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d05b      	beq.n	80019c0 <HAL_RCC_OscConfig+0x108>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d157      	bne.n	80019c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e2d9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x74>
 800191e:	4b85      	ldr	r3, [pc, #532]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a84      	ldr	r2, [pc, #528]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b7f      	ldr	r3, [pc, #508]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b7c      	ldr	r3, [pc, #496]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7b      	ldr	r2, [pc, #492]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xb0>
 8001950:	4b78      	ldr	r3, [pc, #480]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a77      	ldr	r2, [pc, #476]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b75      	ldr	r3, [pc, #468]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a74      	ldr	r2, [pc, #464]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff f9aa 	bl	8000cc8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff f9a6 	bl	8000cc8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	@ 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e29e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xc0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f996 	bl	8000cc8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff f992 	bl	8000cc8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	@ 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e28a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	4b60      	ldr	r3, [pc, #384]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0xe8>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d075      	beq.n	8001aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	4b59      	ldr	r3, [pc, #356]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d8:	4b56      	ldr	r3, [pc, #344]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0x136>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_OscConfig+0x13c>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d11f      	bne.n	8001a34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x154>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e25d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b49      	ldr	r3, [pc, #292]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4946      	ldr	r1, [pc, #280]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f903 	bl	8000c30 <HAL_InitTick>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d043      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e249      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d023      	beq.n	8001a84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f93e 	bl	8000cc8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f93a 	bl	8000cc8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e232      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a62:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b31      	ldr	r3, [pc, #196]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	492d      	ldr	r1, [pc, #180]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e01a      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a84:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f91a 	bl	8000cc8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f916 	bl	8000cc8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e20e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d041      	beq.n	8001b4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad4:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f8f3 	bl	8000cc8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f8ef 	bl	8000cc8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1e7      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
 8001b06:	e020      	b.n	8001b4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f8d6 	bl	8000cc8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1e:	e00d      	b.n	8001b3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff f8d2 	bl	8000cc8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d906      	bls.n	8001b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ea      	bne.n	8001b20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80a6 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b5c:	4b84      	ldr	r3, [pc, #528]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2b4>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x2b6>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b7f      	ldr	r3, [pc, #508]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	4a7e      	ldr	r2, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	4b79      	ldr	r3, [pc, #484]	@ (8001d74 <HAL_RCC_OscConfig+0x4bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b9a:	4b76      	ldr	r3, [pc, #472]	@ (8001d74 <HAL_RCC_OscConfig+0x4bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	@ (8001d74 <HAL_RCC_OscConfig+0x4bc>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f88f 	bl	8000cc8 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff f88b 	bl	8000cc8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e183      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d74 <HAL_RCC_OscConfig+0x4bc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d108      	bne.n	8001be6 <HAL_RCC_OscConfig+0x32e>
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be4:	e024      	b.n	8001c30 <HAL_RCC_OscConfig+0x378>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d110      	bne.n	8001c10 <HAL_RCC_OscConfig+0x358>
 8001bee:	4b60      	ldr	r3, [pc, #384]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c04:	4a5a      	ldr	r2, [pc, #360]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c0e:	e00f      	b.n	8001c30 <HAL_RCC_OscConfig+0x378>
 8001c10:	4b57      	ldr	r3, [pc, #348]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	4a56      	ldr	r2, [pc, #344]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c26:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f846 	bl	8000cc8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f842 	bl	8000cc8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e138      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ed      	beq.n	8001c40 <HAL_RCC_OscConfig+0x388>
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f82f 	bl	8000cc8 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff f82b 	bl	8000cc8 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e121      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ed      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	4a34      	ldr	r2, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fffe 	bl	8000cc8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd0:	f7fe fffa 	bl	8000cc8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0f2      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ef      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x418>
 8001cf0:	e01b      	b.n	8001d2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7fe ffe1 	bl	8000cc8 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d0a:	f7fe ffdd 	bl	8000cc8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0d5      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ef      	bne.n	8001d0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80c9 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	f000 8083 	beq.w	8001e48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d15e      	bne.n	8001e08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	@ (8001d70 <HAL_RCC_OscConfig+0x4b8>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7fe ffb7 	bl	8000cc8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e00c      	b.n	8001d78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe ffb3 	bl	8000cc8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d905      	bls.n	8001d78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0ab      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	4b55      	ldr	r3, [pc, #340]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ec      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d84:	4b52      	ldr	r3, [pc, #328]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b52      	ldr	r3, [pc, #328]	@ (8001ed4 <HAL_RCC_OscConfig+0x61c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6a11      	ldr	r1, [r2, #32]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d94:	3a01      	subs	r2, #1
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d9e:	0212      	lsls	r2, r2, #8
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001da6:	0852      	lsrs	r2, r2, #1
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0552      	lsls	r2, r2, #21
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001db2:	0852      	lsrs	r2, r2, #1
 8001db4:	3a01      	subs	r2, #1
 8001db6:	0652      	lsls	r2, r2, #25
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001dbe:	06d2      	lsls	r2, r2, #27
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	4943      	ldr	r1, [pc, #268]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a40      	ldr	r2, [pc, #256]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff72 	bl	8000cc8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ff6e 	bl	8000cc8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e066      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x530>
 8001e06:	e05e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a30      	ldr	r2, [pc, #192]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff58 	bl	8000cc8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe ff54 	bl	8000cc8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	4924      	ldr	r1, [pc, #144]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_RCC_OscConfig+0x620>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
 8001e46:	e03e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e039      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_RCC_OscConfig+0x618>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d12c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d123      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d113      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	019f800c 	.word	0x019f800c
 8001ed8:	feeefffc 	.word	0xfeeefffc

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e11e      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b91      	ldr	r3, [pc, #580]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d910      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b8e      	ldr	r3, [pc, #568]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	498c      	ldr	r1, [pc, #560]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b8a      	ldr	r3, [pc, #552]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e106      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d073      	beq.n	8002018 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d129      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f38:	4b81      	ldr	r3, [pc, #516]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0f4      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f48:	f000 f99e 	bl	8002288 <RCC_GetSysClockFreqFromPLLSource>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4a7c      	ldr	r2, [pc, #496]	@ (8002144 <HAL_RCC_ClockConfig+0x268>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d93f      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f56:	4b7a      	ldr	r3, [pc, #488]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d033      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12f      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f76:	4b72      	ldr	r3, [pc, #456]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f7e:	4a70      	ldr	r2, [pc, #448]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e024      	b.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f94:	4b6a      	ldr	r3, [pc, #424]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0c6      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0be      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fb4:	f000 f8ce 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4a61      	ldr	r2, [pc, #388]	@ (8002144 <HAL_RCC_ClockConfig+0x268>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d909      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fca:	4a5d      	ldr	r2, [pc, #372]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4957      	ldr	r1, [pc, #348]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fe6e 	bl	8000cc8 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fe6a 	bl	8000cc8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e095      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b43      	ldr	r3, [pc, #268]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a42      	ldr	r2, [pc, #264]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800203a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002048:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002050:	4a3b      	ldr	r2, [pc, #236]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4936      	ldr	r1, [pc, #216]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
 800206a:	e008      	b.n	800207e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	d105      	bne.n	800207e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002072:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4a32      	ldr	r2, [pc, #200]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002078:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800207c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207e:	4b2f      	ldr	r3, [pc, #188]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d21d      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208c:	4b2b      	ldr	r3, [pc, #172]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 020f 	bic.w	r2, r3, #15
 8002094:	4929      	ldr	r1, [pc, #164]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800209c:	f7fe fe14 	bl	8000cc8 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fe10 	bl	8000cc8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e03b      	b.n	8002132 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_RCC_ClockConfig+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1ed      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4917      	ldr	r1, [pc, #92]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490f      	ldr	r1, [pc, #60]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002106:	f000 f825 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_RCC_ClockConfig+0x264>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490c      	ldr	r1, [pc, #48]	@ (8002148 <HAL_RCC_ClockConfig+0x26c>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_RCC_ClockConfig+0x270>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_RCC_ClockConfig+0x274>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fd80 	bl	8000c30 <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	04c4b400 	.word	0x04c4b400
 8002148:	08003e1c 	.word	0x08003e1c
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800215a:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d102      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002166:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e047      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800216c:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002178:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <HAL_RCC_GetSysClockFreq+0xc0>)
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e03e      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800217e:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d136      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002214 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	4a16      	ldr	r2, [pc, #88]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b2:	68d2      	ldr	r2, [r2, #12]
 80021b4:	0a12      	lsrs	r2, r2, #8
 80021b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
      break;
 80021c0:	e00c      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c2:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021cc:	68d2      	ldr	r2, [r2, #12]
 80021ce:	0a12      	lsrs	r2, r2, #8
 80021d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
      break;
 80021da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0e5b      	lsrs	r3, r3, #25
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e001      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021fc:	693b      	ldr	r3, [r7, #16]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	00f42400 	.word	0x00f42400
 8002214:	016e3600 	.word	0x016e3600

08002218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08003e2c 	.word	0x08003e2c

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002260:	f7ff ffda 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0adb      	lsrs	r3, r3, #11
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4904      	ldr	r1, [pc, #16]	@ (8002284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08003e2c 	.word	0x08003e2c

08002288 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3301      	adds	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d10c      	bne.n	80022c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ac:	4a17      	ldr	r2, [pc, #92]	@ (800230c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b6:	68d2      	ldr	r2, [r2, #12]
 80022b8:	0a12      	lsrs	r2, r2, #8
 80022ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
    break;
 80022c4:	e00c      	b.n	80022e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	0a12      	lsrs	r2, r2, #8
 80022d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    break;
 80022de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0e5b      	lsrs	r3, r3, #25
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	3301      	adds	r3, #1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	016e3600 	.word	0x016e3600
 8002310:	00f42400 	.word	0x00f42400

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800231c:	2300      	movs	r3, #0
 800231e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002320:	2300      	movs	r3, #0
 8002322:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8098 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b40      	ldr	r3, [pc, #256]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	4a3f      	ldr	r2, [pc, #252]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234c:	6593      	str	r3, [r2, #88]	@ 0x58
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235e:	4b3a      	ldr	r3, [pc, #232]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a39      	ldr	r2, [pc, #228]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800236a:	f7fe fcad 	bl	8000cc8 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002370:	e009      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe fca9 	bl	8000cc8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d902      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	74fb      	strb	r3, [r7, #19]
        break;
 8002384:	e005      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002386:	4b30      	ldr	r3, [pc, #192]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ef      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d159      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01e      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d019      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023b4:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023c0:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023e0:	4a18      	ldr	r2, [pc, #96]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fc69 	bl	8000cc8 <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f8:	e00b      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fc65 	bl	8000cc8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d902      	bls.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	74fb      	strb	r3, [r7, #19]
            break;
 8002410:	e006      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ec      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	4903      	ldr	r1, [pc, #12]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800243c:	e008      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	74bb      	strb	r3, [r7, #18]
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7c7b      	ldrb	r3, [r7, #17]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4ba6      	ldr	r3, [pc, #664]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	4aa5      	ldr	r2, [pc, #660]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4ba0      	ldr	r3, [pc, #640]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	499c      	ldr	r1, [pc, #624]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002490:	4b97      	ldr	r3, [pc, #604]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002496:	f023 020c 	bic.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4994      	ldr	r1, [pc, #592]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b2:	4b8f      	ldr	r3, [pc, #572]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	498b      	ldr	r1, [pc, #556]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d4:	4b86      	ldr	r3, [pc, #536]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4983      	ldr	r1, [pc, #524]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f6:	4b7e      	ldr	r3, [pc, #504]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	497a      	ldr	r1, [pc, #488]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002518:	4b75      	ldr	r3, [pc, #468]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	4972      	ldr	r1, [pc, #456]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253a:	4b6d      	ldr	r3, [pc, #436]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4969      	ldr	r1, [pc, #420]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255c:	4b64      	ldr	r3, [pc, #400]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4961      	ldr	r1, [pc, #388]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257e:	4b5c      	ldr	r3, [pc, #368]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	4958      	ldr	r1, [pc, #352]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	4950      	ldr	r1, [pc, #320]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a4a      	ldr	r2, [pc, #296]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025d8:	4b45      	ldr	r3, [pc, #276]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e6:	4942      	ldr	r1, [pc, #264]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f6:	d105      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a3c      	ldr	r2, [pc, #240]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002610:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4934      	ldr	r1, [pc, #208]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002630:	4b2f      	ldr	r3, [pc, #188]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a2e      	ldr	r2, [pc, #184]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800263a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002648:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002656:	4926      	ldr	r1, [pc, #152]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002666:	d105      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b21      	ldr	r3, [pc, #132]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002680:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268e:	4918      	ldr	r1, [pc, #96]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	490a      	ldr	r1, [pc, #40]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026d6:	d105      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80026e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e042      	b.n	800278c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fe f977 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2224      	movs	r2, #36	@ 0x24
 8002722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fb82 	bl	8002e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f8b3 	bl	80028b0 <UART_SetConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e01b      	b.n	800278c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fc01 	bl	8002f8c <UART_CheckIdleState>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d17b      	bne.n	80028a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_UART_Transmit+0x26>
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e074      	b.n	80028a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2221      	movs	r2, #33	@ 0x21
 80027ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fa7b 	bl	8000cc8 <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ec:	d108      	bne.n	8002800 <HAL_UART_Transmit+0x6c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e003      	b.n	8002808 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002808:	e030      	b.n	800286c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	@ 0x80
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc63 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e03d      	b.n	80028a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3302      	adds	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e007      	b.n	800285a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1c8      	bne.n	800280a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	2140      	movs	r1, #64	@ 0x40
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fc2c 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e006      	b.n	80028a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b08c      	sub	sp, #48	@ 0x30
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4bab      	ldr	r3, [pc, #684]	@ (8002b8c <UART_SetConfig+0x2dc>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4aa0      	ldr	r2, [pc, #640]	@ (8002b90 <UART_SetConfig+0x2e0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002918:	4313      	orrs	r3, r2
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002926:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002930:	430b      	orrs	r3, r1
 8002932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	f023 010f 	bic.w	r1, r3, #15
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a91      	ldr	r2, [pc, #580]	@ (8002b94 <UART_SetConfig+0x2e4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d125      	bne.n	80029a0 <UART_SetConfig+0xf0>
 8002954:	4b90      	ldr	r3, [pc, #576]	@ (8002b98 <UART_SetConfig+0x2e8>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b03      	cmp	r3, #3
 8002960:	d81a      	bhi.n	8002998 <UART_SetConfig+0xe8>
 8002962:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <UART_SetConfig+0xb8>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	08002979 	.word	0x08002979
 800296c:	08002989 	.word	0x08002989
 8002970:	08002981 	.word	0x08002981
 8002974:	08002991 	.word	0x08002991
 8002978:	2301      	movs	r3, #1
 800297a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800297e:	e0d6      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002980:	2302      	movs	r3, #2
 8002982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002986:	e0d2      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002988:	2304      	movs	r3, #4
 800298a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800298e:	e0ce      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002990:	2308      	movs	r3, #8
 8002992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002996:	e0ca      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002998:	2310      	movs	r3, #16
 800299a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800299e:	e0c6      	b.n	8002b2e <UART_SetConfig+0x27e>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <UART_SetConfig+0x2ec>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d138      	bne.n	8002a1c <UART_SetConfig+0x16c>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002b98 <UART_SetConfig+0x2e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d82d      	bhi.n	8002a14 <UART_SetConfig+0x164>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <UART_SetConfig+0x110>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a15 	.word	0x08002a15
 80029cc:	08002a15 	.word	0x08002a15
 80029d0:	08002a05 	.word	0x08002a05
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a15 	.word	0x08002a15
 80029dc:	08002a15 	.word	0x08002a15
 80029e0:	080029fd 	.word	0x080029fd
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	08002a0d 	.word	0x08002a0d
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029fa:	e098      	b.n	8002b2e <UART_SetConfig+0x27e>
 80029fc:	2302      	movs	r3, #2
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a02:	e094      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a04:	2304      	movs	r3, #4
 8002a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a0a:	e090      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a12:	e08c      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a14:	2310      	movs	r3, #16
 8002a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a1a:	e088      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba0 <UART_SetConfig+0x2f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d125      	bne.n	8002a72 <UART_SetConfig+0x1c2>
 8002a26:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <UART_SetConfig+0x2e8>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a30:	2b30      	cmp	r3, #48	@ 0x30
 8002a32:	d016      	beq.n	8002a62 <UART_SetConfig+0x1b2>
 8002a34:	2b30      	cmp	r3, #48	@ 0x30
 8002a36:	d818      	bhi.n	8002a6a <UART_SetConfig+0x1ba>
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d00a      	beq.n	8002a52 <UART_SetConfig+0x1a2>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d814      	bhi.n	8002a6a <UART_SetConfig+0x1ba>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <UART_SetConfig+0x19a>
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d008      	beq.n	8002a5a <UART_SetConfig+0x1aa>
 8002a48:	e00f      	b.n	8002a6a <UART_SetConfig+0x1ba>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a50:	e06d      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a58:	e069      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a60:	e065      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a62:	2308      	movs	r3, #8
 8002a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a68:	e061      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a70:	e05d      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba4 <UART_SetConfig+0x2f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d125      	bne.n	8002ac8 <UART_SetConfig+0x218>
 8002a7c:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <UART_SetConfig+0x2e8>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a88:	d016      	beq.n	8002ab8 <UART_SetConfig+0x208>
 8002a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a8c:	d818      	bhi.n	8002ac0 <UART_SetConfig+0x210>
 8002a8e:	2b80      	cmp	r3, #128	@ 0x80
 8002a90:	d00a      	beq.n	8002aa8 <UART_SetConfig+0x1f8>
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d814      	bhi.n	8002ac0 <UART_SetConfig+0x210>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <UART_SetConfig+0x1f0>
 8002a9a:	2b40      	cmp	r3, #64	@ 0x40
 8002a9c:	d008      	beq.n	8002ab0 <UART_SetConfig+0x200>
 8002a9e:	e00f      	b.n	8002ac0 <UART_SetConfig+0x210>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aa6:	e042      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aae:	e03e      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ab6:	e03a      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002ab8:	2308      	movs	r3, #8
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002abe:	e036      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac6:	e032      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <UART_SetConfig+0x2e0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12a      	bne.n	8002b28 <UART_SetConfig+0x278>
 8002ad2:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <UART_SetConfig+0x2e8>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ae0:	d01a      	beq.n	8002b18 <UART_SetConfig+0x268>
 8002ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ae6:	d81b      	bhi.n	8002b20 <UART_SetConfig+0x270>
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aec:	d00c      	beq.n	8002b08 <UART_SetConfig+0x258>
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af2:	d815      	bhi.n	8002b20 <UART_SetConfig+0x270>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <UART_SetConfig+0x250>
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afc:	d008      	beq.n	8002b10 <UART_SetConfig+0x260>
 8002afe:	e00f      	b.n	8002b20 <UART_SetConfig+0x270>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b06:	e012      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b0e:	e00e      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002b10:	2304      	movs	r3, #4
 8002b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b16:	e00a      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002b18:	2308      	movs	r3, #8
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b1e:	e006      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002b20:	2310      	movs	r3, #16
 8002b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b26:	e002      	b.n	8002b2e <UART_SetConfig+0x27e>
 8002b28:	2310      	movs	r3, #16
 8002b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <UART_SetConfig+0x2e0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f040 80a8 	bne.w	8002c8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d834      	bhi.n	8002bac <UART_SetConfig+0x2fc>
 8002b42:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <UART_SetConfig+0x298>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002bad 	.word	0x08002bad
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002bad 	.word	0x08002bad
 8002b58:	08002b7b 	.word	0x08002b7b
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002bad 	.word	0x08002bad
 8002b64:	08002bad 	.word	0x08002bad
 8002b68:	08002b83 	.word	0x08002b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f7ff fb60 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b72:	e021      	b.n	8002bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <UART_SetConfig+0x2f8>)
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b78:	e01e      	b.n	8002bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7ff faeb 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b80:	e01a      	b.n	8002bb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b88:	e016      	b.n	8002bb8 <UART_SetConfig+0x308>
 8002b8a:	bf00      	nop
 8002b8c:	cfff69f3 	.word	0xcfff69f3
 8002b90:	40008000 	.word	0x40008000
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40004800 	.word	0x40004800
 8002ba4:	40004c00 	.word	0x40004c00
 8002ba8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 812a 	beq.w	8002e14 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	4a9e      	ldr	r2, [pc, #632]	@ (8002e40 <UART_SetConfig+0x590>)
 8002bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d305      	bcc.n	8002bf0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d903      	bls.n	8002bf8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002bf6:	e10d      	b.n	8002e14 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	60fa      	str	r2, [r7, #12]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	4a8e      	ldr	r2, [pc, #568]	@ (8002e40 <UART_SetConfig+0x590>)
 8002c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c1a:	f7fd fb59 	bl	80002d0 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	020b      	lsls	r3, r1, #8
 8002c30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002c34:	0202      	lsls	r2, r0, #8
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	6849      	ldr	r1, [r1, #4]
 8002c3a:	0849      	lsrs	r1, r1, #1
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	4605      	mov	r5, r0
 8002c42:	eb12 0804 	adds.w	r8, r2, r4
 8002c46:	eb43 0905 	adc.w	r9, r3, r5
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	469a      	mov	sl, r3
 8002c52:	4693      	mov	fp, r2
 8002c54:	4652      	mov	r2, sl
 8002c56:	465b      	mov	r3, fp
 8002c58:	4640      	mov	r0, r8
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	f7fd fb38 	bl	80002d0 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c6e:	d308      	bcc.n	8002c82 <UART_SetConfig+0x3d2>
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c76:	d204      	bcs.n	8002c82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e0c8      	b.n	8002e14 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c88:	e0c4      	b.n	8002e14 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c92:	d167      	bne.n	8002d64 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002c94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d828      	bhi.n	8002cee <UART_SetConfig+0x43e>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UART_SetConfig+0x3f4>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cc9 	.word	0x08002cc9
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	08002cd9 	.word	0x08002cd9
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002cdf 	.word	0x08002cdf
 8002cb8:	08002cef 	.word	0x08002cef
 8002cbc:	08002cef 	.word	0x08002cef
 8002cc0:	08002cef 	.word	0x08002cef
 8002cc4:	08002ce7 	.word	0x08002ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7ff fab2 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cce:	e014      	b.n	8002cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7ff fac4 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002cd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cd6:	e010      	b.n	8002cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e44 <UART_SetConfig+0x594>)
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cdc:	e00d      	b.n	8002cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7ff fa39 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002ce2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ce4:	e009      	b.n	8002cfa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cec:	e005      	b.n	8002cfa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8089 	beq.w	8002e14 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	4a4e      	ldr	r2, [pc, #312]	@ (8002e40 <UART_SetConfig+0x590>)
 8002d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d14:	005a      	lsls	r2, r3, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	441a      	add	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d916      	bls.n	8002d5c <UART_SetConfig+0x4ac>
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d212      	bcs.n	8002d5c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f023 030f 	bic.w	r3, r3, #15
 8002d3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	8bfb      	ldrh	r3, [r7, #30]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	8bfa      	ldrh	r2, [r7, #30]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e05b      	b.n	8002e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d62:	e057      	b.n	8002e14 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d828      	bhi.n	8002dbe <UART_SetConfig+0x50e>
 8002d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d74 <UART_SetConfig+0x4c4>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08002da1 	.word	0x08002da1
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002dbf 	.word	0x08002dbf
 8002d84:	08002daf 	.word	0x08002daf
 8002d88:	08002dbf 	.word	0x08002dbf
 8002d8c:	08002dbf 	.word	0x08002dbf
 8002d90:	08002dbf 	.word	0x08002dbf
 8002d94:	08002db7 	.word	0x08002db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d98:	f7ff fa4a 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d9e:	e014      	b.n	8002dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7ff fa5c 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002da6:	e010      	b.n	8002dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da8:	4b26      	ldr	r3, [pc, #152]	@ (8002e44 <UART_SetConfig+0x594>)
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dac:	e00d      	b.n	8002dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dae:	f7ff f9d1 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002db4:	e009      	b.n	8002dca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dbc:	e005      	b.n	8002dca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002dc8:	bf00      	nop
    }

    if (pclk != 0U)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <UART_SetConfig+0x590>)
 8002dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	fbb3 f2f2 	udiv	r2, r3, r2
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	441a      	add	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	d909      	bls.n	8002e0e <UART_SetConfig+0x55e>
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e00:	d205      	bcs.n	8002e0e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	e002      	b.n	8002e14 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3730      	adds	r7, #48	@ 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3e:	bf00      	nop
 8002e40:	08003e44 	.word	0x08003e44
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01a      	beq.n	8002f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f46:	d10a      	bne.n	8002f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  }
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b098      	sub	sp, #96	@ 0x60
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f9c:	f7fd fe94 	bl	8000cc8 <HAL_GetTick>
 8002fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d12f      	bne.n	8003010 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f88e 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d022      	beq.n	8003010 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e063      	b.n	80030d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d149      	bne.n	80030b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f857 	bl	80030e0 <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03c      	beq.n	80030b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	623b      	str	r3, [r7, #32]
   return(result);
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
 8003058:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800305c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e6      	bne.n	8003038 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3308      	adds	r3, #8
 8003070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	60fb      	str	r3, [r7, #12]
   return(result);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3308      	adds	r3, #8
 8003088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800308a:	61fa      	str	r2, [r7, #28]
 800308c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	617b      	str	r3, [r7, #20]
   return(result);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e5      	bne.n	800306a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e012      	b.n	80030d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3758      	adds	r7, #88	@ 0x58
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f0:	e04f      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d04b      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7fd fde5 	bl	8000cc8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <UART_WaitOnFlagUntilTimeout+0x30>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e04e      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d037      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b80      	cmp	r3, #128	@ 0x80
 8003126:	d034      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b40      	cmp	r3, #64	@ 0x40
 800312c:	d031      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b08      	cmp	r3, #8
 800313a:	d110      	bne.n	800315e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2208      	movs	r2, #8
 8003142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f838 	bl	80031ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2208      	movs	r2, #8
 800314e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e029      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800316c:	d111      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f81e 	bl	80031ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d0a0      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b095      	sub	sp, #84	@ 0x54
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e6      	bne.n	80031c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	61fb      	str	r3, [r7, #28]
   return(result);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800321e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e3      	bne.n	80031f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d118      	bne.n	8003266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	60bb      	str	r3, [r7, #8]
   return(result);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f023 0310 	bic.w	r3, r3, #16
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	613b      	str	r3, [r7, #16]
   return(result);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e6      	bne.n	8003234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800327a:	bf00      	nop
 800327c:	3754      	adds	r7, #84	@ 0x54
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_UARTEx_DisableFifoMode+0x16>
 8003298:	2302      	movs	r3, #2
 800329a:	e027      	b.n	80032ec <HAL_UARTEx_DisableFifoMode+0x66>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	@ 0x24
 80032a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80032ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800330c:	2302      	movs	r3, #2
 800330e:	e02d      	b.n	800336c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	@ 0x24
 800331c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f84f 	bl	80033f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e02d      	b.n	80033e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	@ 0x24
 8003398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f811 	bl	80033f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003410:	e031      	b.n	8003476 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003412:	2308      	movs	r3, #8
 8003414:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003416:	2308      	movs	r3, #8
 8003418:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	0e5b      	lsrs	r3, r3, #25
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0f5b      	lsrs	r3, r3, #29
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	7b3a      	ldrb	r2, [r7, #12]
 800343e:	4911      	ldr	r1, [pc, #68]	@ (8003484 <UARTEx_SetNbDataToProcess+0x94>)
 8003440:	5c8a      	ldrb	r2, [r1, r2]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003446:	7b3a      	ldrb	r2, [r7, #12]
 8003448:	490f      	ldr	r1, [pc, #60]	@ (8003488 <UARTEx_SetNbDataToProcess+0x98>)
 800344a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800344c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	7b7a      	ldrb	r2, [r7, #13]
 800345c:	4909      	ldr	r1, [pc, #36]	@ (8003484 <UARTEx_SetNbDataToProcess+0x94>)
 800345e:	5c8a      	ldrb	r2, [r1, r2]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003464:	7b7a      	ldrb	r2, [r7, #13]
 8003466:	4908      	ldr	r1, [pc, #32]	@ (8003488 <UARTEx_SetNbDataToProcess+0x98>)
 8003468:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800346a:	fb93 f3f2 	sdiv	r3, r3, r2
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	08003e5c 	.word	0x08003e5c
 8003488:	08003e64 	.word	0x08003e64

0800348c <siprintf>:
 800348c:	b40e      	push	{r1, r2, r3}
 800348e:	b500      	push	{lr}
 8003490:	b09c      	sub	sp, #112	@ 0x70
 8003492:	ab1d      	add	r3, sp, #116	@ 0x74
 8003494:	9002      	str	r0, [sp, #8]
 8003496:	9006      	str	r0, [sp, #24]
 8003498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800349c:	4809      	ldr	r0, [pc, #36]	@ (80034c4 <siprintf+0x38>)
 800349e:	9107      	str	r1, [sp, #28]
 80034a0:	9104      	str	r1, [sp, #16]
 80034a2:	4909      	ldr	r1, [pc, #36]	@ (80034c8 <siprintf+0x3c>)
 80034a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034a8:	9105      	str	r1, [sp, #20]
 80034aa:	6800      	ldr	r0, [r0, #0]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	a902      	add	r1, sp, #8
 80034b0:	f000 f994 	bl	80037dc <_svfiprintf_r>
 80034b4:	9b02      	ldr	r3, [sp, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	b01c      	add	sp, #112	@ 0x70
 80034bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c0:	b003      	add	sp, #12
 80034c2:	4770      	bx	lr
 80034c4:	2000000c 	.word	0x2000000c
 80034c8:	ffff0208 	.word	0xffff0208

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>

080034dc <__errno>:
 80034dc:	4b01      	ldr	r3, [pc, #4]	@ (80034e4 <__errno+0x8>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000000c 	.word	0x2000000c

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	@ (800352c <__libc_init_array+0x44>)
 80034fc:	f000 fc66 	bl	8003dcc <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003ea8 	.word	0x08003ea8
 8003524:	08003ea8 	.word	0x08003ea8
 8003528:	08003ea8 	.word	0x08003ea8
 800352c:	08003eac 	.word	0x08003eac

08003530 <__retarget_lock_acquire_recursive>:
 8003530:	4770      	bx	lr

08003532 <__retarget_lock_release_recursive>:
 8003532:	4770      	bx	lr

08003534 <_free_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4605      	mov	r5, r0
 8003538:	2900      	cmp	r1, #0
 800353a:	d041      	beq.n	80035c0 <_free_r+0x8c>
 800353c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003540:	1f0c      	subs	r4, r1, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bfb8      	it	lt
 8003546:	18e4      	addlt	r4, r4, r3
 8003548:	f000 f8e0 	bl	800370c <__malloc_lock>
 800354c:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <_free_r+0x90>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	b933      	cbnz	r3, 8003560 <_free_r+0x2c>
 8003552:	6063      	str	r3, [r4, #4]
 8003554:	6014      	str	r4, [r2, #0]
 8003556:	4628      	mov	r0, r5
 8003558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800355c:	f000 b8dc 	b.w	8003718 <__malloc_unlock>
 8003560:	42a3      	cmp	r3, r4
 8003562:	d908      	bls.n	8003576 <_free_r+0x42>
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	1821      	adds	r1, r4, r0
 8003568:	428b      	cmp	r3, r1
 800356a:	bf01      	itttt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	1809      	addeq	r1, r1, r0
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	e7ed      	b.n	8003552 <_free_r+0x1e>
 8003576:	461a      	mov	r2, r3
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b10b      	cbz	r3, 8003580 <_free_r+0x4c>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d9fa      	bls.n	8003576 <_free_r+0x42>
 8003580:	6811      	ldr	r1, [r2, #0]
 8003582:	1850      	adds	r0, r2, r1
 8003584:	42a0      	cmp	r0, r4
 8003586:	d10b      	bne.n	80035a0 <_free_r+0x6c>
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	4401      	add	r1, r0
 800358c:	1850      	adds	r0, r2, r1
 800358e:	4283      	cmp	r3, r0
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	d1e0      	bne.n	8003556 <_free_r+0x22>
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	4408      	add	r0, r1
 800359c:	6010      	str	r0, [r2, #0]
 800359e:	e7da      	b.n	8003556 <_free_r+0x22>
 80035a0:	d902      	bls.n	80035a8 <_free_r+0x74>
 80035a2:	230c      	movs	r3, #12
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	e7d6      	b.n	8003556 <_free_r+0x22>
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	1821      	adds	r1, r4, r0
 80035ac:	428b      	cmp	r3, r1
 80035ae:	bf04      	itt	eq
 80035b0:	6819      	ldreq	r1, [r3, #0]
 80035b2:	685b      	ldreq	r3, [r3, #4]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	bf04      	itt	eq
 80035b8:	1809      	addeq	r1, r1, r0
 80035ba:	6021      	streq	r1, [r4, #0]
 80035bc:	6054      	str	r4, [r2, #4]
 80035be:	e7ca      	b.n	8003556 <_free_r+0x22>
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
 80035c2:	bf00      	nop
 80035c4:	2000034c 	.word	0x2000034c

080035c8 <sbrk_aligned>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003608 <sbrk_aligned+0x40>)
 80035cc:	460c      	mov	r4, r1
 80035ce:	6831      	ldr	r1, [r6, #0]
 80035d0:	4605      	mov	r5, r0
 80035d2:	b911      	cbnz	r1, 80035da <sbrk_aligned+0x12>
 80035d4:	f000 fba6 	bl	8003d24 <_sbrk_r>
 80035d8:	6030      	str	r0, [r6, #0]
 80035da:	4621      	mov	r1, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 fba1 	bl	8003d24 <_sbrk_r>
 80035e2:	1c43      	adds	r3, r0, #1
 80035e4:	d103      	bne.n	80035ee <sbrk_aligned+0x26>
 80035e6:	f04f 34ff 	mov.w	r4, #4294967295
 80035ea:	4620      	mov	r0, r4
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d0f8      	beq.n	80035ea <sbrk_aligned+0x22>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 fb92 	bl	8003d24 <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d1f2      	bne.n	80035ea <sbrk_aligned+0x22>
 8003604:	e7ef      	b.n	80035e6 <sbrk_aligned+0x1e>
 8003606:	bf00      	nop
 8003608:	20000348 	.word	0x20000348

0800360c <_malloc_r>:
 800360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003610:	1ccd      	adds	r5, r1, #3
 8003612:	f025 0503 	bic.w	r5, r5, #3
 8003616:	3508      	adds	r5, #8
 8003618:	2d0c      	cmp	r5, #12
 800361a:	bf38      	it	cc
 800361c:	250c      	movcc	r5, #12
 800361e:	2d00      	cmp	r5, #0
 8003620:	4606      	mov	r6, r0
 8003622:	db01      	blt.n	8003628 <_malloc_r+0x1c>
 8003624:	42a9      	cmp	r1, r5
 8003626:	d904      	bls.n	8003632 <_malloc_r+0x26>
 8003628:	230c      	movs	r3, #12
 800362a:	6033      	str	r3, [r6, #0]
 800362c:	2000      	movs	r0, #0
 800362e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003708 <_malloc_r+0xfc>
 8003636:	f000 f869 	bl	800370c <__malloc_lock>
 800363a:	f8d8 3000 	ldr.w	r3, [r8]
 800363e:	461c      	mov	r4, r3
 8003640:	bb44      	cbnz	r4, 8003694 <_malloc_r+0x88>
 8003642:	4629      	mov	r1, r5
 8003644:	4630      	mov	r0, r6
 8003646:	f7ff ffbf 	bl	80035c8 <sbrk_aligned>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	4604      	mov	r4, r0
 800364e:	d158      	bne.n	8003702 <_malloc_r+0xf6>
 8003650:	f8d8 4000 	ldr.w	r4, [r8]
 8003654:	4627      	mov	r7, r4
 8003656:	2f00      	cmp	r7, #0
 8003658:	d143      	bne.n	80036e2 <_malloc_r+0xd6>
 800365a:	2c00      	cmp	r4, #0
 800365c:	d04b      	beq.n	80036f6 <_malloc_r+0xea>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4639      	mov	r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	eb04 0903 	add.w	r9, r4, r3
 8003668:	f000 fb5c 	bl	8003d24 <_sbrk_r>
 800366c:	4581      	cmp	r9, r0
 800366e:	d142      	bne.n	80036f6 <_malloc_r+0xea>
 8003670:	6821      	ldr	r1, [r4, #0]
 8003672:	1a6d      	subs	r5, r5, r1
 8003674:	4629      	mov	r1, r5
 8003676:	4630      	mov	r0, r6
 8003678:	f7ff ffa6 	bl	80035c8 <sbrk_aligned>
 800367c:	3001      	adds	r0, #1
 800367e:	d03a      	beq.n	80036f6 <_malloc_r+0xea>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	442b      	add	r3, r5
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	f8d8 3000 	ldr.w	r3, [r8]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	bb62      	cbnz	r2, 80036e8 <_malloc_r+0xdc>
 800368e:	f8c8 7000 	str.w	r7, [r8]
 8003692:	e00f      	b.n	80036b4 <_malloc_r+0xa8>
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	1b52      	subs	r2, r2, r5
 8003698:	d420      	bmi.n	80036dc <_malloc_r+0xd0>
 800369a:	2a0b      	cmp	r2, #11
 800369c:	d917      	bls.n	80036ce <_malloc_r+0xc2>
 800369e:	1961      	adds	r1, r4, r5
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	6025      	str	r5, [r4, #0]
 80036a4:	bf18      	it	ne
 80036a6:	6059      	strne	r1, [r3, #4]
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	bf08      	it	eq
 80036ac:	f8c8 1000 	streq.w	r1, [r8]
 80036b0:	5162      	str	r2, [r4, r5]
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f82f 	bl	8003718 <__malloc_unlock>
 80036ba:	f104 000b 	add.w	r0, r4, #11
 80036be:	1d23      	adds	r3, r4, #4
 80036c0:	f020 0007 	bic.w	r0, r0, #7
 80036c4:	1ac2      	subs	r2, r0, r3
 80036c6:	bf1c      	itt	ne
 80036c8:	1a1b      	subne	r3, r3, r0
 80036ca:	50a3      	strne	r3, [r4, r2]
 80036cc:	e7af      	b.n	800362e <_malloc_r+0x22>
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	bf0c      	ite	eq
 80036d4:	f8c8 2000 	streq.w	r2, [r8]
 80036d8:	605a      	strne	r2, [r3, #4]
 80036da:	e7eb      	b.n	80036b4 <_malloc_r+0xa8>
 80036dc:	4623      	mov	r3, r4
 80036de:	6864      	ldr	r4, [r4, #4]
 80036e0:	e7ae      	b.n	8003640 <_malloc_r+0x34>
 80036e2:	463c      	mov	r4, r7
 80036e4:	687f      	ldr	r7, [r7, #4]
 80036e6:	e7b6      	b.n	8003656 <_malloc_r+0x4a>
 80036e8:	461a      	mov	r2, r3
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d1fb      	bne.n	80036e8 <_malloc_r+0xdc>
 80036f0:	2300      	movs	r3, #0
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e7de      	b.n	80036b4 <_malloc_r+0xa8>
 80036f6:	230c      	movs	r3, #12
 80036f8:	6033      	str	r3, [r6, #0]
 80036fa:	4630      	mov	r0, r6
 80036fc:	f000 f80c 	bl	8003718 <__malloc_unlock>
 8003700:	e794      	b.n	800362c <_malloc_r+0x20>
 8003702:	6005      	str	r5, [r0, #0]
 8003704:	e7d6      	b.n	80036b4 <_malloc_r+0xa8>
 8003706:	bf00      	nop
 8003708:	2000034c 	.word	0x2000034c

0800370c <__malloc_lock>:
 800370c:	4801      	ldr	r0, [pc, #4]	@ (8003714 <__malloc_lock+0x8>)
 800370e:	f7ff bf0f 	b.w	8003530 <__retarget_lock_acquire_recursive>
 8003712:	bf00      	nop
 8003714:	20000344 	.word	0x20000344

08003718 <__malloc_unlock>:
 8003718:	4801      	ldr	r0, [pc, #4]	@ (8003720 <__malloc_unlock+0x8>)
 800371a:	f7ff bf0a 	b.w	8003532 <__retarget_lock_release_recursive>
 800371e:	bf00      	nop
 8003720:	20000344 	.word	0x20000344

08003724 <__ssputs_r>:
 8003724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003728:	688e      	ldr	r6, [r1, #8]
 800372a:	461f      	mov	r7, r3
 800372c:	42be      	cmp	r6, r7
 800372e:	680b      	ldr	r3, [r1, #0]
 8003730:	4682      	mov	sl, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4690      	mov	r8, r2
 8003736:	d82d      	bhi.n	8003794 <__ssputs_r+0x70>
 8003738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800373c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003740:	d026      	beq.n	8003790 <__ssputs_r+0x6c>
 8003742:	6965      	ldr	r5, [r4, #20]
 8003744:	6909      	ldr	r1, [r1, #16]
 8003746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800374a:	eba3 0901 	sub.w	r9, r3, r1
 800374e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003752:	1c7b      	adds	r3, r7, #1
 8003754:	444b      	add	r3, r9
 8003756:	106d      	asrs	r5, r5, #1
 8003758:	429d      	cmp	r5, r3
 800375a:	bf38      	it	cc
 800375c:	461d      	movcc	r5, r3
 800375e:	0553      	lsls	r3, r2, #21
 8003760:	d527      	bpl.n	80037b2 <__ssputs_r+0x8e>
 8003762:	4629      	mov	r1, r5
 8003764:	f7ff ff52 	bl	800360c <_malloc_r>
 8003768:	4606      	mov	r6, r0
 800376a:	b360      	cbz	r0, 80037c6 <__ssputs_r+0xa2>
 800376c:	6921      	ldr	r1, [r4, #16]
 800376e:	464a      	mov	r2, r9
 8003770:	f000 fae8 	bl	8003d44 <memcpy>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800377a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	6126      	str	r6, [r4, #16]
 8003782:	6165      	str	r5, [r4, #20]
 8003784:	444e      	add	r6, r9
 8003786:	eba5 0509 	sub.w	r5, r5, r9
 800378a:	6026      	str	r6, [r4, #0]
 800378c:	60a5      	str	r5, [r4, #8]
 800378e:	463e      	mov	r6, r7
 8003790:	42be      	cmp	r6, r7
 8003792:	d900      	bls.n	8003796 <__ssputs_r+0x72>
 8003794:	463e      	mov	r6, r7
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	4632      	mov	r2, r6
 800379a:	4641      	mov	r1, r8
 800379c:	f000 faa8 	bl	8003cf0 <memmove>
 80037a0:	68a3      	ldr	r3, [r4, #8]
 80037a2:	1b9b      	subs	r3, r3, r6
 80037a4:	60a3      	str	r3, [r4, #8]
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	4433      	add	r3, r6
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	2000      	movs	r0, #0
 80037ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b2:	462a      	mov	r2, r5
 80037b4:	f000 fad4 	bl	8003d60 <_realloc_r>
 80037b8:	4606      	mov	r6, r0
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d1e0      	bne.n	8003780 <__ssputs_r+0x5c>
 80037be:	6921      	ldr	r1, [r4, #16]
 80037c0:	4650      	mov	r0, sl
 80037c2:	f7ff feb7 	bl	8003534 <_free_r>
 80037c6:	230c      	movs	r3, #12
 80037c8:	f8ca 3000 	str.w	r3, [sl]
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	e7e9      	b.n	80037ae <__ssputs_r+0x8a>
	...

080037dc <_svfiprintf_r>:
 80037dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	4698      	mov	r8, r3
 80037e2:	898b      	ldrh	r3, [r1, #12]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	b09d      	sub	sp, #116	@ 0x74
 80037e8:	4607      	mov	r7, r0
 80037ea:	460d      	mov	r5, r1
 80037ec:	4614      	mov	r4, r2
 80037ee:	d510      	bpl.n	8003812 <_svfiprintf_r+0x36>
 80037f0:	690b      	ldr	r3, [r1, #16]
 80037f2:	b973      	cbnz	r3, 8003812 <_svfiprintf_r+0x36>
 80037f4:	2140      	movs	r1, #64	@ 0x40
 80037f6:	f7ff ff09 	bl	800360c <_malloc_r>
 80037fa:	6028      	str	r0, [r5, #0]
 80037fc:	6128      	str	r0, [r5, #16]
 80037fe:	b930      	cbnz	r0, 800380e <_svfiprintf_r+0x32>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	b01d      	add	sp, #116	@ 0x74
 800380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380e:	2340      	movs	r3, #64	@ 0x40
 8003810:	616b      	str	r3, [r5, #20]
 8003812:	2300      	movs	r3, #0
 8003814:	9309      	str	r3, [sp, #36]	@ 0x24
 8003816:	2320      	movs	r3, #32
 8003818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800381c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003820:	2330      	movs	r3, #48	@ 0x30
 8003822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80039c0 <_svfiprintf_r+0x1e4>
 8003826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800382a:	f04f 0901 	mov.w	r9, #1
 800382e:	4623      	mov	r3, r4
 8003830:	469a      	mov	sl, r3
 8003832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003836:	b10a      	cbz	r2, 800383c <_svfiprintf_r+0x60>
 8003838:	2a25      	cmp	r2, #37	@ 0x25
 800383a:	d1f9      	bne.n	8003830 <_svfiprintf_r+0x54>
 800383c:	ebba 0b04 	subs.w	fp, sl, r4
 8003840:	d00b      	beq.n	800385a <_svfiprintf_r+0x7e>
 8003842:	465b      	mov	r3, fp
 8003844:	4622      	mov	r2, r4
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7ff ff6b 	bl	8003724 <__ssputs_r>
 800384e:	3001      	adds	r0, #1
 8003850:	f000 80a7 	beq.w	80039a2 <_svfiprintf_r+0x1c6>
 8003854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003856:	445a      	add	r2, fp
 8003858:	9209      	str	r2, [sp, #36]	@ 0x24
 800385a:	f89a 3000 	ldrb.w	r3, [sl]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 809f 	beq.w	80039a2 <_svfiprintf_r+0x1c6>
 8003864:	2300      	movs	r3, #0
 8003866:	f04f 32ff 	mov.w	r2, #4294967295
 800386a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800386e:	f10a 0a01 	add.w	sl, sl, #1
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	9307      	str	r3, [sp, #28]
 8003876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800387a:	931a      	str	r3, [sp, #104]	@ 0x68
 800387c:	4654      	mov	r4, sl
 800387e:	2205      	movs	r2, #5
 8003880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003884:	484e      	ldr	r0, [pc, #312]	@ (80039c0 <_svfiprintf_r+0x1e4>)
 8003886:	f7fc fcd3 	bl	8000230 <memchr>
 800388a:	9a04      	ldr	r2, [sp, #16]
 800388c:	b9d8      	cbnz	r0, 80038c6 <_svfiprintf_r+0xea>
 800388e:	06d0      	lsls	r0, r2, #27
 8003890:	bf44      	itt	mi
 8003892:	2320      	movmi	r3, #32
 8003894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003898:	0711      	lsls	r1, r2, #28
 800389a:	bf44      	itt	mi
 800389c:	232b      	movmi	r3, #43	@ 0x2b
 800389e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038a2:	f89a 3000 	ldrb.w	r3, [sl]
 80038a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a8:	d015      	beq.n	80038d6 <_svfiprintf_r+0xfa>
 80038aa:	9a07      	ldr	r2, [sp, #28]
 80038ac:	4654      	mov	r4, sl
 80038ae:	2000      	movs	r0, #0
 80038b0:	f04f 0c0a 	mov.w	ip, #10
 80038b4:	4621      	mov	r1, r4
 80038b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ba:	3b30      	subs	r3, #48	@ 0x30
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d94b      	bls.n	8003958 <_svfiprintf_r+0x17c>
 80038c0:	b1b0      	cbz	r0, 80038f0 <_svfiprintf_r+0x114>
 80038c2:	9207      	str	r2, [sp, #28]
 80038c4:	e014      	b.n	80038f0 <_svfiprintf_r+0x114>
 80038c6:	eba0 0308 	sub.w	r3, r0, r8
 80038ca:	fa09 f303 	lsl.w	r3, r9, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	46a2      	mov	sl, r4
 80038d4:	e7d2      	b.n	800387c <_svfiprintf_r+0xa0>
 80038d6:	9b03      	ldr	r3, [sp, #12]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	9103      	str	r1, [sp, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfbb      	ittet	lt
 80038e2:	425b      	neglt	r3, r3
 80038e4:	f042 0202 	orrlt.w	r2, r2, #2
 80038e8:	9307      	strge	r3, [sp, #28]
 80038ea:	9307      	strlt	r3, [sp, #28]
 80038ec:	bfb8      	it	lt
 80038ee:	9204      	strlt	r2, [sp, #16]
 80038f0:	7823      	ldrb	r3, [r4, #0]
 80038f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80038f4:	d10a      	bne.n	800390c <_svfiprintf_r+0x130>
 80038f6:	7863      	ldrb	r3, [r4, #1]
 80038f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038fa:	d132      	bne.n	8003962 <_svfiprintf_r+0x186>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	9203      	str	r2, [sp, #12]
 8003904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003908:	3402      	adds	r4, #2
 800390a:	9305      	str	r3, [sp, #20]
 800390c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039d0 <_svfiprintf_r+0x1f4>
 8003910:	7821      	ldrb	r1, [r4, #0]
 8003912:	2203      	movs	r2, #3
 8003914:	4650      	mov	r0, sl
 8003916:	f7fc fc8b 	bl	8000230 <memchr>
 800391a:	b138      	cbz	r0, 800392c <_svfiprintf_r+0x150>
 800391c:	9b04      	ldr	r3, [sp, #16]
 800391e:	eba0 000a 	sub.w	r0, r0, sl
 8003922:	2240      	movs	r2, #64	@ 0x40
 8003924:	4082      	lsls	r2, r0
 8003926:	4313      	orrs	r3, r2
 8003928:	3401      	adds	r4, #1
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003930:	4824      	ldr	r0, [pc, #144]	@ (80039c4 <_svfiprintf_r+0x1e8>)
 8003932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003936:	2206      	movs	r2, #6
 8003938:	f7fc fc7a 	bl	8000230 <memchr>
 800393c:	2800      	cmp	r0, #0
 800393e:	d036      	beq.n	80039ae <_svfiprintf_r+0x1d2>
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <_svfiprintf_r+0x1ec>)
 8003942:	bb1b      	cbnz	r3, 800398c <_svfiprintf_r+0x1b0>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	3307      	adds	r3, #7
 8003948:	f023 0307 	bic.w	r3, r3, #7
 800394c:	3308      	adds	r3, #8
 800394e:	9303      	str	r3, [sp, #12]
 8003950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003952:	4433      	add	r3, r6
 8003954:	9309      	str	r3, [sp, #36]	@ 0x24
 8003956:	e76a      	b.n	800382e <_svfiprintf_r+0x52>
 8003958:	fb0c 3202 	mla	r2, ip, r2, r3
 800395c:	460c      	mov	r4, r1
 800395e:	2001      	movs	r0, #1
 8003960:	e7a8      	b.n	80038b4 <_svfiprintf_r+0xd8>
 8003962:	2300      	movs	r3, #0
 8003964:	3401      	adds	r4, #1
 8003966:	9305      	str	r3, [sp, #20]
 8003968:	4619      	mov	r1, r3
 800396a:	f04f 0c0a 	mov.w	ip, #10
 800396e:	4620      	mov	r0, r4
 8003970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003974:	3a30      	subs	r2, #48	@ 0x30
 8003976:	2a09      	cmp	r2, #9
 8003978:	d903      	bls.n	8003982 <_svfiprintf_r+0x1a6>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0c6      	beq.n	800390c <_svfiprintf_r+0x130>
 800397e:	9105      	str	r1, [sp, #20]
 8003980:	e7c4      	b.n	800390c <_svfiprintf_r+0x130>
 8003982:	fb0c 2101 	mla	r1, ip, r1, r2
 8003986:	4604      	mov	r4, r0
 8003988:	2301      	movs	r3, #1
 800398a:	e7f0      	b.n	800396e <_svfiprintf_r+0x192>
 800398c:	ab03      	add	r3, sp, #12
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	462a      	mov	r2, r5
 8003992:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <_svfiprintf_r+0x1f0>)
 8003994:	a904      	add	r1, sp, #16
 8003996:	4638      	mov	r0, r7
 8003998:	f3af 8000 	nop.w
 800399c:	1c42      	adds	r2, r0, #1
 800399e:	4606      	mov	r6, r0
 80039a0:	d1d6      	bne.n	8003950 <_svfiprintf_r+0x174>
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	065b      	lsls	r3, r3, #25
 80039a6:	f53f af2d 	bmi.w	8003804 <_svfiprintf_r+0x28>
 80039aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039ac:	e72c      	b.n	8003808 <_svfiprintf_r+0x2c>
 80039ae:	ab03      	add	r3, sp, #12
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	462a      	mov	r2, r5
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <_svfiprintf_r+0x1f0>)
 80039b6:	a904      	add	r1, sp, #16
 80039b8:	4638      	mov	r0, r7
 80039ba:	f000 f879 	bl	8003ab0 <_printf_i>
 80039be:	e7ed      	b.n	800399c <_svfiprintf_r+0x1c0>
 80039c0:	08003e6c 	.word	0x08003e6c
 80039c4:	08003e76 	.word	0x08003e76
 80039c8:	00000000 	.word	0x00000000
 80039cc:	08003725 	.word	0x08003725
 80039d0:	08003e72 	.word	0x08003e72

080039d4 <_printf_common>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	4616      	mov	r6, r2
 80039da:	4698      	mov	r8, r3
 80039dc:	688a      	ldr	r2, [r1, #8]
 80039de:	690b      	ldr	r3, [r1, #16]
 80039e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bfb8      	it	lt
 80039e8:	4613      	movlt	r3, r2
 80039ea:	6033      	str	r3, [r6, #0]
 80039ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039f0:	4607      	mov	r7, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	b10a      	cbz	r2, 80039fa <_printf_common+0x26>
 80039f6:	3301      	adds	r3, #1
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	0699      	lsls	r1, r3, #26
 80039fe:	bf42      	ittt	mi
 8003a00:	6833      	ldrmi	r3, [r6, #0]
 8003a02:	3302      	addmi	r3, #2
 8003a04:	6033      	strmi	r3, [r6, #0]
 8003a06:	6825      	ldr	r5, [r4, #0]
 8003a08:	f015 0506 	ands.w	r5, r5, #6
 8003a0c:	d106      	bne.n	8003a1c <_printf_common+0x48>
 8003a0e:	f104 0a19 	add.w	sl, r4, #25
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	6832      	ldr	r2, [r6, #0]
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	42ab      	cmp	r3, r5
 8003a1a:	dc26      	bgt.n	8003a6a <_printf_common+0x96>
 8003a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	3b00      	subs	r3, #0
 8003a24:	bf18      	it	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	0692      	lsls	r2, r2, #26
 8003a2a:	d42b      	bmi.n	8003a84 <_printf_common+0xb0>
 8003a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a30:	4641      	mov	r1, r8
 8003a32:	4638      	mov	r0, r7
 8003a34:	47c8      	blx	r9
 8003a36:	3001      	adds	r0, #1
 8003a38:	d01e      	beq.n	8003a78 <_printf_common+0xa4>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf02      	ittt	eq
 8003a46:	68e5      	ldreq	r5, [r4, #12]
 8003a48:	6833      	ldreq	r3, [r6, #0]
 8003a4a:	1aed      	subeq	r5, r5, r3
 8003a4c:	68a3      	ldr	r3, [r4, #8]
 8003a4e:	bf0c      	ite	eq
 8003a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a54:	2500      	movne	r5, #0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfc4      	itt	gt
 8003a5a:	1a9b      	subgt	r3, r3, r2
 8003a5c:	18ed      	addgt	r5, r5, r3
 8003a5e:	2600      	movs	r6, #0
 8003a60:	341a      	adds	r4, #26
 8003a62:	42b5      	cmp	r5, r6
 8003a64:	d11a      	bne.n	8003a9c <_printf_common+0xc8>
 8003a66:	2000      	movs	r0, #0
 8003a68:	e008      	b.n	8003a7c <_printf_common+0xa8>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	4652      	mov	r2, sl
 8003a6e:	4641      	mov	r1, r8
 8003a70:	4638      	mov	r0, r7
 8003a72:	47c8      	blx	r9
 8003a74:	3001      	adds	r0, #1
 8003a76:	d103      	bne.n	8003a80 <_printf_common+0xac>
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a80:	3501      	adds	r5, #1
 8003a82:	e7c6      	b.n	8003a12 <_printf_common+0x3e>
 8003a84:	18e1      	adds	r1, r4, r3
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	2030      	movs	r0, #48	@ 0x30
 8003a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a8e:	4422      	add	r2, r4
 8003a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a98:	3302      	adds	r3, #2
 8003a9a:	e7c7      	b.n	8003a2c <_printf_common+0x58>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	47c8      	blx	r9
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d0e6      	beq.n	8003a78 <_printf_common+0xa4>
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7d9      	b.n	8003a62 <_printf_common+0x8e>
	...

08003ab0 <_printf_i>:
 8003ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab4:	7e0f      	ldrb	r7, [r1, #24]
 8003ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ab8:	2f78      	cmp	r7, #120	@ 0x78
 8003aba:	4691      	mov	r9, r2
 8003abc:	4680      	mov	r8, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	469a      	mov	sl, r3
 8003ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ac6:	d807      	bhi.n	8003ad8 <_printf_i+0x28>
 8003ac8:	2f62      	cmp	r7, #98	@ 0x62
 8003aca:	d80a      	bhi.n	8003ae2 <_printf_i+0x32>
 8003acc:	2f00      	cmp	r7, #0
 8003ace:	f000 80d2 	beq.w	8003c76 <_printf_i+0x1c6>
 8003ad2:	2f58      	cmp	r7, #88	@ 0x58
 8003ad4:	f000 80b9 	beq.w	8003c4a <_printf_i+0x19a>
 8003ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ae0:	e03a      	b.n	8003b58 <_printf_i+0xa8>
 8003ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ae6:	2b15      	cmp	r3, #21
 8003ae8:	d8f6      	bhi.n	8003ad8 <_printf_i+0x28>
 8003aea:	a101      	add	r1, pc, #4	@ (adr r1, 8003af0 <_printf_i+0x40>)
 8003aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003af0:	08003b49 	.word	0x08003b49
 8003af4:	08003b5d 	.word	0x08003b5d
 8003af8:	08003ad9 	.word	0x08003ad9
 8003afc:	08003ad9 	.word	0x08003ad9
 8003b00:	08003ad9 	.word	0x08003ad9
 8003b04:	08003ad9 	.word	0x08003ad9
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	08003ad9 	.word	0x08003ad9
 8003b10:	08003ad9 	.word	0x08003ad9
 8003b14:	08003ad9 	.word	0x08003ad9
 8003b18:	08003ad9 	.word	0x08003ad9
 8003b1c:	08003c5d 	.word	0x08003c5d
 8003b20:	08003b87 	.word	0x08003b87
 8003b24:	08003c17 	.word	0x08003c17
 8003b28:	08003ad9 	.word	0x08003ad9
 8003b2c:	08003ad9 	.word	0x08003ad9
 8003b30:	08003c7f 	.word	0x08003c7f
 8003b34:	08003ad9 	.word	0x08003ad9
 8003b38:	08003b87 	.word	0x08003b87
 8003b3c:	08003ad9 	.word	0x08003ad9
 8003b40:	08003ad9 	.word	0x08003ad9
 8003b44:	08003c1f 	.word	0x08003c1f
 8003b48:	6833      	ldr	r3, [r6, #0]
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6032      	str	r2, [r6, #0]
 8003b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e09d      	b.n	8003c98 <_printf_i+0x1e8>
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	6031      	str	r1, [r6, #0]
 8003b64:	0606      	lsls	r6, r0, #24
 8003b66:	d501      	bpl.n	8003b6c <_printf_i+0xbc>
 8003b68:	681d      	ldr	r5, [r3, #0]
 8003b6a:	e003      	b.n	8003b74 <_printf_i+0xc4>
 8003b6c:	0645      	lsls	r5, r0, #25
 8003b6e:	d5fb      	bpl.n	8003b68 <_printf_i+0xb8>
 8003b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	da03      	bge.n	8003b80 <_printf_i+0xd0>
 8003b78:	232d      	movs	r3, #45	@ 0x2d
 8003b7a:	426d      	negs	r5, r5
 8003b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b80:	4859      	ldr	r0, [pc, #356]	@ (8003ce8 <_printf_i+0x238>)
 8003b82:	230a      	movs	r3, #10
 8003b84:	e011      	b.n	8003baa <_printf_i+0xfa>
 8003b86:	6821      	ldr	r1, [r4, #0]
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	0608      	lsls	r0, r1, #24
 8003b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b90:	d402      	bmi.n	8003b98 <_printf_i+0xe8>
 8003b92:	0649      	lsls	r1, r1, #25
 8003b94:	bf48      	it	mi
 8003b96:	b2ad      	uxthmi	r5, r5
 8003b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b9a:	4853      	ldr	r0, [pc, #332]	@ (8003ce8 <_printf_i+0x238>)
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	bf14      	ite	ne
 8003ba0:	230a      	movne	r3, #10
 8003ba2:	2308      	moveq	r3, #8
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003baa:	6866      	ldr	r6, [r4, #4]
 8003bac:	60a6      	str	r6, [r4, #8]
 8003bae:	2e00      	cmp	r6, #0
 8003bb0:	bfa2      	ittt	ge
 8003bb2:	6821      	ldrge	r1, [r4, #0]
 8003bb4:	f021 0104 	bicge.w	r1, r1, #4
 8003bb8:	6021      	strge	r1, [r4, #0]
 8003bba:	b90d      	cbnz	r5, 8003bc0 <_printf_i+0x110>
 8003bbc:	2e00      	cmp	r6, #0
 8003bbe:	d04b      	beq.n	8003c58 <_printf_i+0x1a8>
 8003bc0:	4616      	mov	r6, r2
 8003bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8003bca:	5dc7      	ldrb	r7, [r0, r7]
 8003bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bd0:	462f      	mov	r7, r5
 8003bd2:	42bb      	cmp	r3, r7
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	d9f4      	bls.n	8003bc2 <_printf_i+0x112>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d10b      	bne.n	8003bf4 <_printf_i+0x144>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	07df      	lsls	r7, r3, #31
 8003be0:	d508      	bpl.n	8003bf4 <_printf_i+0x144>
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	6861      	ldr	r1, [r4, #4]
 8003be6:	4299      	cmp	r1, r3
 8003be8:	bfde      	ittt	le
 8003bea:	2330      	movle	r3, #48	@ 0x30
 8003bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bf4:	1b92      	subs	r2, r2, r6
 8003bf6:	6122      	str	r2, [r4, #16]
 8003bf8:	f8cd a000 	str.w	sl, [sp]
 8003bfc:	464b      	mov	r3, r9
 8003bfe:	aa03      	add	r2, sp, #12
 8003c00:	4621      	mov	r1, r4
 8003c02:	4640      	mov	r0, r8
 8003c04:	f7ff fee6 	bl	80039d4 <_printf_common>
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d14a      	bne.n	8003ca2 <_printf_i+0x1f2>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	b004      	add	sp, #16
 8003c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	4833      	ldr	r0, [pc, #204]	@ (8003cec <_printf_i+0x23c>)
 8003c20:	2778      	movs	r7, #120	@ 0x78
 8003c22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	6831      	ldr	r1, [r6, #0]
 8003c2a:	061f      	lsls	r7, r3, #24
 8003c2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c30:	d402      	bmi.n	8003c38 <_printf_i+0x188>
 8003c32:	065f      	lsls	r7, r3, #25
 8003c34:	bf48      	it	mi
 8003c36:	b2ad      	uxthmi	r5, r5
 8003c38:	6031      	str	r1, [r6, #0]
 8003c3a:	07d9      	lsls	r1, r3, #31
 8003c3c:	bf44      	itt	mi
 8003c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003c42:	6023      	strmi	r3, [r4, #0]
 8003c44:	b11d      	cbz	r5, 8003c4e <_printf_i+0x19e>
 8003c46:	2310      	movs	r3, #16
 8003c48:	e7ac      	b.n	8003ba4 <_printf_i+0xf4>
 8003c4a:	4827      	ldr	r0, [pc, #156]	@ (8003ce8 <_printf_i+0x238>)
 8003c4c:	e7e9      	b.n	8003c22 <_printf_i+0x172>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	f023 0320 	bic.w	r3, r3, #32
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	e7f6      	b.n	8003c46 <_printf_i+0x196>
 8003c58:	4616      	mov	r6, r2
 8003c5a:	e7bd      	b.n	8003bd8 <_printf_i+0x128>
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	6825      	ldr	r5, [r4, #0]
 8003c60:	6961      	ldr	r1, [r4, #20]
 8003c62:	1d18      	adds	r0, r3, #4
 8003c64:	6030      	str	r0, [r6, #0]
 8003c66:	062e      	lsls	r6, r5, #24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	d501      	bpl.n	8003c70 <_printf_i+0x1c0>
 8003c6c:	6019      	str	r1, [r3, #0]
 8003c6e:	e002      	b.n	8003c76 <_printf_i+0x1c6>
 8003c70:	0668      	lsls	r0, r5, #25
 8003c72:	d5fb      	bpl.n	8003c6c <_printf_i+0x1bc>
 8003c74:	8019      	strh	r1, [r3, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	6123      	str	r3, [r4, #16]
 8003c7a:	4616      	mov	r6, r2
 8003c7c:	e7bc      	b.n	8003bf8 <_printf_i+0x148>
 8003c7e:	6833      	ldr	r3, [r6, #0]
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	6032      	str	r2, [r6, #0]
 8003c84:	681e      	ldr	r6, [r3, #0]
 8003c86:	6862      	ldr	r2, [r4, #4]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f7fc fad0 	bl	8000230 <memchr>
 8003c90:	b108      	cbz	r0, 8003c96 <_printf_i+0x1e6>
 8003c92:	1b80      	subs	r0, r0, r6
 8003c94:	6060      	str	r0, [r4, #4]
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	6123      	str	r3, [r4, #16]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca0:	e7aa      	b.n	8003bf8 <_printf_i+0x148>
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	4640      	mov	r0, r8
 8003caa:	47d0      	blx	sl
 8003cac:	3001      	adds	r0, #1
 8003cae:	d0ad      	beq.n	8003c0c <_printf_i+0x15c>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	079b      	lsls	r3, r3, #30
 8003cb4:	d413      	bmi.n	8003cde <_printf_i+0x22e>
 8003cb6:	68e0      	ldr	r0, [r4, #12]
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	4298      	cmp	r0, r3
 8003cbc:	bfb8      	it	lt
 8003cbe:	4618      	movlt	r0, r3
 8003cc0:	e7a6      	b.n	8003c10 <_printf_i+0x160>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4632      	mov	r2, r6
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	4640      	mov	r0, r8
 8003cca:	47d0      	blx	sl
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d09d      	beq.n	8003c0c <_printf_i+0x15c>
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	9903      	ldr	r1, [sp, #12]
 8003cd6:	1a5b      	subs	r3, r3, r1
 8003cd8:	42ab      	cmp	r3, r5
 8003cda:	dcf2      	bgt.n	8003cc2 <_printf_i+0x212>
 8003cdc:	e7eb      	b.n	8003cb6 <_printf_i+0x206>
 8003cde:	2500      	movs	r5, #0
 8003ce0:	f104 0619 	add.w	r6, r4, #25
 8003ce4:	e7f5      	b.n	8003cd2 <_printf_i+0x222>
 8003ce6:	bf00      	nop
 8003ce8:	08003e7d 	.word	0x08003e7d
 8003cec:	08003e8e 	.word	0x08003e8e

08003cf0 <memmove>:
 8003cf0:	4288      	cmp	r0, r1
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	eb01 0402 	add.w	r4, r1, r2
 8003cf8:	d902      	bls.n	8003d00 <memmove+0x10>
 8003cfa:	4284      	cmp	r4, r0
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	d807      	bhi.n	8003d10 <memmove+0x20>
 8003d00:	1e43      	subs	r3, r0, #1
 8003d02:	42a1      	cmp	r1, r4
 8003d04:	d008      	beq.n	8003d18 <memmove+0x28>
 8003d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d0e:	e7f8      	b.n	8003d02 <memmove+0x12>
 8003d10:	4402      	add	r2, r0
 8003d12:	4601      	mov	r1, r0
 8003d14:	428a      	cmp	r2, r1
 8003d16:	d100      	bne.n	8003d1a <memmove+0x2a>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d22:	e7f7      	b.n	8003d14 <memmove+0x24>

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d06      	ldr	r5, [pc, #24]	@ (8003d40 <_sbrk_r+0x1c>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fc fef4 	bl	8000b1c <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000340 	.word	0x20000340

08003d44 <memcpy>:
 8003d44:	440a      	add	r2, r1
 8003d46:	4291      	cmp	r1, r2
 8003d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d4c:	d100      	bne.n	8003d50 <memcpy+0xc>
 8003d4e:	4770      	bx	lr
 8003d50:	b510      	push	{r4, lr}
 8003d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d5a:	4291      	cmp	r1, r2
 8003d5c:	d1f9      	bne.n	8003d52 <memcpy+0xe>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <_realloc_r>:
 8003d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d64:	4680      	mov	r8, r0
 8003d66:	4615      	mov	r5, r2
 8003d68:	460c      	mov	r4, r1
 8003d6a:	b921      	cbnz	r1, 8003d76 <_realloc_r+0x16>
 8003d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	4611      	mov	r1, r2
 8003d72:	f7ff bc4b 	b.w	800360c <_malloc_r>
 8003d76:	b92a      	cbnz	r2, 8003d84 <_realloc_r+0x24>
 8003d78:	f7ff fbdc 	bl	8003534 <_free_r>
 8003d7c:	2400      	movs	r4, #0
 8003d7e:	4620      	mov	r0, r4
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	f000 f81a 	bl	8003dbc <_malloc_usable_size_r>
 8003d88:	4285      	cmp	r5, r0
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	d802      	bhi.n	8003d94 <_realloc_r+0x34>
 8003d8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d92:	d8f4      	bhi.n	8003d7e <_realloc_r+0x1e>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4640      	mov	r0, r8
 8003d98:	f7ff fc38 	bl	800360c <_malloc_r>
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d0ec      	beq.n	8003d7c <_realloc_r+0x1c>
 8003da2:	42b5      	cmp	r5, r6
 8003da4:	462a      	mov	r2, r5
 8003da6:	4621      	mov	r1, r4
 8003da8:	bf28      	it	cs
 8003daa:	4632      	movcs	r2, r6
 8003dac:	f7ff ffca 	bl	8003d44 <memcpy>
 8003db0:	4621      	mov	r1, r4
 8003db2:	4640      	mov	r0, r8
 8003db4:	f7ff fbbe 	bl	8003534 <_free_r>
 8003db8:	463c      	mov	r4, r7
 8003dba:	e7e0      	b.n	8003d7e <_realloc_r+0x1e>

08003dbc <_malloc_usable_size_r>:
 8003dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc0:	1f18      	subs	r0, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfbc      	itt	lt
 8003dc6:	580b      	ldrlt	r3, [r1, r0]
 8003dc8:	18c0      	addlt	r0, r0, r3
 8003dca:	4770      	bx	lr

08003dcc <_init>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr

08003dd8 <_fini>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	bf00      	nop
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr
