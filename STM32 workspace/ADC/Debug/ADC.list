
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ecc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005118  08005118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005120  08005120  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00006120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00006124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005128  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  08005184  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005184  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb11  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4c  00000000  00000000  00013b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000156f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086c  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233a6  00000000  00000000  00016a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd2c  00000000  00000000  00039e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd5e  00000000  00000000  00046b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012488c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  001248d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00127b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005054 	.word	0x08005054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005054 	.word	0x08005054

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fbea 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f862 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f946 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f914 	bl	80007bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f8ae 	bl	80006f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000598:	4826      	ldr	r0, [pc, #152]	@ (8000634 <main+0xb4>)
 800059a:	f000 ffed 	bl	8001578 <HAL_ADC_Start>
  print("Inicialización");
 800059e:	4826      	ldr	r0, [pc, #152]	@ (8000638 <main+0xb8>)
 80005a0:	f000 f9a2 	bl	80008e8 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 80005a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a8:	4824      	ldr	r0, [pc, #144]	@ (800063c <main+0xbc>)
 80005aa:	f002 f915 	bl	80027d8 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d11f      	bne.n	80005f4 <main+0x74>
		  print("Canal 5");
 80005b4:	4822      	ldr	r0, [pc, #136]	@ (8000640 <main+0xc0>)
 80005b6:	f000 f997 	bl	80008e8 <print>
		  ADC_Select_CH5();
 80005ba:	f000 f9d1 	bl	8000960 <ADC_Select_CH5>
		  HAL_ADC_Start(&hadc1);
 80005be:	481d      	ldr	r0, [pc, #116]	@ (8000634 <main+0xb4>)
 80005c0:	f000 ffda 	bl	8001578 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	481a      	ldr	r0, [pc, #104]	@ (8000634 <main+0xb4>)
 80005ca:	f001 f86b 	bl	80016a4 <HAL_ADC_PollForConversion>
		  value1= HAL_ADC_GetValue(&hadc1);
 80005ce:	4819      	ldr	r0, [pc, #100]	@ (8000634 <main+0xb4>)
 80005d0:	f001 f8f7 	bl	80017c2 <HAL_ADC_GetValue>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <main+0xc4>)
 80005da:	801a      	strh	r2, [r3, #0]
		  printValue(value1);
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <main+0xc4>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f99f 	bl	8000924 <printValue>
		  HAL_ADC_Stop(&hadc1);
 80005e6:	4813      	ldr	r0, [pc, #76]	@ (8000634 <main+0xb4>)
 80005e8:	f001 f829 	bl	800163e <HAL_ADC_Stop>
		  HAL_Delay(50);
 80005ec:	2032      	movs	r0, #50	@ 0x32
 80005ee:	f000 fc31 	bl	8000e54 <HAL_Delay>
 80005f2:	e7d7      	b.n	80005a4 <main+0x24>
	  }
	  else{
		  print("Canal 1");
 80005f4:	4814      	ldr	r0, [pc, #80]	@ (8000648 <main+0xc8>)
 80005f6:	f000 f977 	bl	80008e8 <print>
		  ADC_Select_CH1();
 80005fa:	f000 f9db 	bl	80009b4 <ADC_Select_CH1>
		  HAL_ADC_Start(&hadc1);
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <main+0xb4>)
 8000600:	f000 ffba 	bl	8001578 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000604:	f04f 31ff 	mov.w	r1, #4294967295
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <main+0xb4>)
 800060a:	f001 f84b 	bl	80016a4 <HAL_ADC_PollForConversion>
		  value2= HAL_ADC_GetValue(&hadc1);
 800060e:	4809      	ldr	r0, [pc, #36]	@ (8000634 <main+0xb4>)
 8000610:	f001 f8d7 	bl	80017c2 <HAL_ADC_GetValue>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <main+0xcc>)
 800061a:	801a      	strh	r2, [r3, #0]
		  printValue(value2);
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <main+0xcc>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f97f 	bl	8000924 <printValue>
		  HAL_ADC_Stop(&hadc1);
 8000626:	4803      	ldr	r0, [pc, #12]	@ (8000634 <main+0xb4>)
 8000628:	f001 f809 	bl	800163e <HAL_ADC_Stop>
		  HAL_Delay(50);
 800062c:	2032      	movs	r0, #50	@ 0x32
 800062e:	f000 fc11 	bl	8000e54 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 8000632:	e7b7      	b.n	80005a4 <main+0x24>
 8000634:	20000078 	.word	0x20000078
 8000638:	0800506c 	.word	0x0800506c
 800063c:	48000800 	.word	0x48000800
 8000640:	0800507c 	.word	0x0800507c
 8000644:	20000168 	.word	0x20000168
 8000648:	08005084 	.word	0x08005084
 800064c:	2000016a 	.word	0x2000016a

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	@ 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 f878 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000676:	f002 f8ed 	bl	8002854 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f9c2 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069e:	230a      	movs	r3, #10
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f924 	bl	8002900 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006be:	f000 f9a3 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fd24 	bl	8003128 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f98f 	bl	8000a08 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	@ 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800070c:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <MX_ADC1_Init+0xc0>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800072a:	2204      	movs	r2, #4
 800072c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 800076c:	f000 fdbe 	bl	80012ec <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000776:	f000 f947 	bl	8000a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_ADC1_Init+0xc4>)
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077e:	2306      	movs	r3, #6
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000786:	237f      	movs	r3, #127	@ 0x7f
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078a:	2304      	movs	r3, #4
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_ADC1_Init+0xbc>)
 8000798:	f001 f820 	bl	80017dc <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 f931 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000078 	.word	0x20000078
 80007b4:	50040000 	.word	0x50040000
 80007b8:	14f00020 	.word	0x14f00020

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x58>)
 8000800:	f003 fa14 	bl	8003c2c <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8fd 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e0 	.word	0x200000e0
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f001 ffb5 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480b      	ldr	r0, [pc, #44]	@ (80008e4 <MX_GPIO_Init+0xc8>)
 80008b6:	f001 fe15 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d4:	f001 fe06 	bl	80024e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <print>:

/* USER CODE BEGIN 4 */

void print(char uart_buffer[]){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s: ", uart_buffer);
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4909      	ldr	r1, [pc, #36]	@ (8000918 <print+0x30>)
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <print+0x34>)
 80008f6:	f003 ff0d 	bl	8004714 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80008fa:	4808      	ldr	r0, [pc, #32]	@ (800091c <print+0x34>)
 80008fc:	f7ff fc70 	bl	80001e0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29a      	uxth	r2, r3
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	4904      	ldr	r1, [pc, #16]	@ (800091c <print+0x34>)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <print+0x38>)
 800090c:	f003 f9dc 	bl	8003cc8 <HAL_UART_Transmit>

}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	0800508c 	.word	0x0800508c
 800091c:	2000016c 	.word	0x2000016c
 8000920:	200000e0 	.word	0x200000e0

08000924 <printValue>:

void printValue(int value){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4909      	ldr	r1, [pc, #36]	@ (8000954 <printValue+0x30>)
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <printValue+0x34>)
 8000932:	f003 feef 	bl	8004714 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <printValue+0x34>)
 8000938:	f7ff fc52 	bl	80001e0 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	4904      	ldr	r1, [pc, #16]	@ (8000958 <printValue+0x34>)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <printValue+0x38>)
 8000948:	f003 f9be 	bl	8003cc8 <HAL_UART_Transmit>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08005094 	.word	0x08005094
 8000958:	2000016c 	.word	0x2000016c
 800095c:	200000e0 	.word	0x200000e0

08000960 <ADC_Select_CH5>:

void ADC_Select_CH5 (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <ADC_Select_CH5+0x4c>)
 8000978:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097a:	2306      	movs	r3, #6
 800097c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000982:	237f      	movs	r3, #127	@ 0x7f
 8000984:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000986:	2304      	movs	r3, #4
 8000988:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <ADC_Select_CH5+0x50>)
 8000994:	f000 ff22 	bl	80017dc <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <ADC_Select_CH5+0x42>
	  {
	    Error_Handler();
 800099e:	f000 f833 	bl	8000a08 <Error_Handler>
	  }
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	14f00020 	.word	0x14f00020
 80009b0:	20000078 	.word	0x20000078

080009b4 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <ADC_Select_CH1+0x4c>)
 80009cc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ce:	2306      	movs	r3, #6
 80009d0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d6:	237f      	movs	r3, #127	@ 0x7f
 80009d8:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009da:	2304      	movs	r3, #4
 80009dc:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <ADC_Select_CH1+0x50>)
 80009e8:	f000 fef8 	bl	80017dc <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <ADC_Select_CH1+0x42>
	  {
	    Error_Handler();
 80009f2:	f000 f809 	bl	8000a08 <Error_Handler>
	  }
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	04300002 	.word	0x04300002
 8000a04:	20000078 	.word	0x20000078

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0a4      	sub	sp, #144	@ 0x90
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2268      	movs	r2, #104	@ 0x68
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fe69 	bl	8004754 <memset>
  if(hadc->Instance==ADC1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <HAL_ADC_MspInit+0xf8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d15f      	bne.n	8000b4c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a96:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fd58 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000ac6:	f7ff ff9f 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000ad0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a16      	ldr	r2, [pc, #88]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_ADC_MspInit+0xfc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b16:	230b      	movs	r3, #11
 8000b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <HAL_ADC_MspInit+0x100>)
 8000b2a:	f001 fcdb 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b32:	230b      	movs	r3, #11
 8000b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b48:	f001 fccc 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3790      	adds	r7, #144	@ 0x90
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	50040000 	.word	0x50040000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000800 	.word	0x48000800

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0a4      	sub	sp, #144	@ 0x90
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2268      	movs	r2, #104	@ 0x68
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fde7 	bl	8004754 <memset>
  if(huart->Instance==USART2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_UART_MspInit+0xb0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d13a      	bne.n	8000c06 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fce7 	bl	8003570 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba8:	f7ff ff2e 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb0:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bdc:	230c      	movs	r3, #12
 8000bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f001 fc6f 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3790      	adds	r7, #144	@ 0x90
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6e:	f000 f8d1 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f003 fd5c 	bl	8004764 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20028000 	.word	0x20028000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200001d0 	.word	0x200001d0
 8000ce0:	20000320 	.word	0x20000320

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f003 fd1b 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fc21 	bl	8000580 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d40:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d4c:	08005128 	.word	0x08005128
  ldr r2, =_sbss
 8000d50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d54:	20000320 	.word	0x20000320

08000d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_Init+0x3c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <HAL_Init+0x3c>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f001 fb82 	bl	800247c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f80f 	bl	8000d9c <HAL_InitTick>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e001      	b.n	8000d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8a:	f7ff fe43 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fb7f 	bl	80024ca <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f001 fb57 	bl	8002492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200001d4 	.word	0x200001d4

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200001d4 	.word	0x200001d4

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3360      	adds	r3, #96	@ 0x60
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <LL_ADC_SetOffset+0x44>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	03fff000 	.word	0x03fff000

08000f4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3360      	adds	r3, #96	@ 0x60
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3360      	adds	r3, #96	@ 0x60
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	615a      	str	r2, [r3, #20]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3330      	adds	r3, #48	@ 0x30
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	211f      	movs	r1, #31
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0e9b      	lsrs	r3, r3, #26
 8001032:	f003 011f 	and.w	r1, r3, #31
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001052:	b480      	push	{r7}
 8001054:	b087      	sub	sp, #28
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3314      	adds	r3, #20
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	0e5b      	lsrs	r3, r3, #25
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0d1b      	lsrs	r3, r3, #20
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2107      	movs	r1, #7
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	0d1b      	lsrs	r3, r3, #20
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	431a      	orrs	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0318 	and.w	r3, r3, #24
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	400b      	ands	r3, r1
 80010d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0007ffff 	.word	0x0007ffff

080010f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6093      	str	r3, [r2, #8]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001128:	d101      	bne.n	800112e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800114c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001150:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001178:	d101      	bne.n	800117e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800119c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011c8:	f043 0202 	orr.w	r2, r3, #2
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <LL_ADC_IsEnabled+0x18>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <LL_ADC_IsEnabled+0x1a>
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b02      	cmp	r3, #2
 8001214:	d101      	bne.n	800121a <LL_ADC_IsDisableOngoing+0x18>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsDisableOngoing+0x1a>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001260:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001264:	f043 0210 	orr.w	r2, r3, #16
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b04      	cmp	r3, #4
 800128a:	d101      	bne.n	8001290 <LL_ADC_REG_IsConversionOngoing+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b2:	f043 0220 	orr.w	r2, r3, #32
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d101      	bne.n	80012de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e129      	b.n	800155a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fba1 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fef1 	bl	8001114 <LL_ADC_IsDeepPowerDownEnabled>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fed7 	bl	80010f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff0c 	bl	8001164 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d115      	bne.n	800137e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fef0 	bl	800113c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800135c:	4b81      	ldr	r3, [pc, #516]	@ (8001564 <HAL_ADC_Init+0x278>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	099b      	lsrs	r3, r3, #6
 8001362:	4a81      	ldr	r2, [pc, #516]	@ (8001568 <HAL_ADC_Init+0x27c>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	3301      	adds	r3, #1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001370:	e002      	b.n	8001378 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3b01      	subs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff feee 	bl	8001164 <LL_ADC_IsInternalRegulatorEnabled>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10d      	bne.n	80013aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff62 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 80013b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 80c2 	bne.w	8001548 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 80be 	bne.w	8001548 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013d4:	f043 0202 	orr.w	r2, r3, #2
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fefb 	bl	80011dc <LL_ADC_IsEnabled>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013ec:	485f      	ldr	r0, [pc, #380]	@ (800156c <HAL_ADC_Init+0x280>)
 80013ee:	f7ff fef5 	bl	80011dc <LL_ADC_IsEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4619      	mov	r1, r3
 80013fe:	485c      	ldr	r0, [pc, #368]	@ (8001570 <HAL_ADC_Init+0x284>)
 8001400:	f7ff fd4c 	bl	8000e9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e5b      	ldrb	r3, [r3, #25]
 8001408:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800140e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001414:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800141a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d106      	bne.n	8001440 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	3b01      	subs	r3, #1
 8001438:	045b      	lsls	r3, r3, #17
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d009      	beq.n	800145c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	4b44      	ldr	r3, [pc, #272]	@ (8001574 <HAL_ADC_Init+0x288>)
 8001464:	4013      	ands	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	430b      	orrs	r3, r1
 800146e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff26 	bl	80012c6 <LL_ADC_INJ_IsConversionOngoing>
 800147a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d140      	bne.n	8001504 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d13d      	bne.n	8001504 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e1b      	ldrb	r3, [r3, #24]
 8001490:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001492:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800149a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014aa:	f023 0306 	bic.w	r3, r3, #6
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d118      	bne.n	80014f4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014d8:	4311      	orrs	r1, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014de:	4311      	orrs	r1, r2
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014e4:	430a      	orrs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	e007      	b.n	8001504 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10c      	bne.n	8001526 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f023 010f 	bic.w	r1, r3, #15
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	1e5a      	subs	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30
 8001524:	e007      	b.n	8001536 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 020f 	bic.w	r2, r2, #15
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	@ 0x58
 8001546:	e007      	b.n	8001558 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	f043 0210 	orr.w	r2, r3, #16
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000
 8001568:	053e2d63 	.word	0x053e2d63
 800156c:	50040000 	.word	0x50040000
 8001570:	50040300 	.word	0x50040300
 8001574:	fff0c007 	.word	0xfff0c007

08001578 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fe77 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d14f      	bne.n	8001630 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ADC_Start+0x26>
 800159a:	2302      	movs	r3, #2
 800159c:	e04b      	b.n	8001636 <HAL_ADC_Start+0xbe>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fdd0 	bl	800214c <ADC_Enable>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d137      	bne.n	8001626 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015d6:	d106      	bne.n	80015e6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015dc:	f023 0206 	bic.w	r2, r3, #6
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015e4:	e002      	b.n	80015ec <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	221c      	movs	r2, #28
 80015f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001612:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe02 	bl	8001228 <LL_ADC_REG_StartConversion>
 8001624:	e006      	b.n	8001634 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800162e:	e001      	b.n	8001634 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001630:	2302      	movs	r3, #2
 8001632:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_ADC_Stop+0x16>
 8001650:	2302      	movs	r3, #2
 8001652:	e023      	b.n	800169c <HAL_ADC_Stop+0x5e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800165c:	2103      	movs	r1, #3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fcb8 	bl	8001fd4 <ADC_ConversionStop>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d111      	bne.n	8001692 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fdf2 	bl	8002258 <ADC_Disable>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d102      	bne.n	80016bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016b6:	2308      	movs	r3, #8
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e010      	b.n	80016de <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	f043 0220 	orr.w	r2, r3, #32
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e06f      	b.n	80017ba <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80016da:	2304      	movs	r3, #4
 80016dc:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016de:	f7ff fbad 	bl	8000e3c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016e4:	e021      	b.n	800172a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d01d      	beq.n	800172a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ee:	f7ff fba5 	bl	8000e3c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <HAL_ADC_PollForConversion+0x60>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d112      	bne.n	800172a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10b      	bne.n	800172a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f043 0204 	orr.w	r2, r3, #4
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e047      	b.n	80017ba <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0d6      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc43 	bl	8000fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01c      	beq.n	800178e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d118      	bne.n	800178e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d111      	bne.n	800178e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f043 0201 	orr.w	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d104      	bne.n	80017a6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e008      	b.n	80017b8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	220c      	movs	r2, #12
 80017b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0b6      	sub	sp, #216	@ 0xd8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x22>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e3d5      	b.n	8001faa <HAL_ADC_ConfigChannel+0x7ce>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd34 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 83ba 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d824      	bhi.n	8001872 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	3b02      	subs	r3, #2
 800182e:	2b03      	cmp	r3, #3
 8001830:	d81b      	bhi.n	800186a <HAL_ADC_ConfigChannel+0x8e>
 8001832:	a201      	add	r2, pc, #4	@ (adr r2, 8001838 <HAL_ADC_ConfigChannel+0x5c>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	08001851 	.word	0x08001851
 8001840:	08001859 	.word	0x08001859
 8001844:	08001861 	.word	0x08001861
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001848:	230c      	movs	r3, #12
 800184a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800184e:	e010      	b.n	8001872 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001850:	2312      	movs	r3, #18
 8001852:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001856:	e00c      	b.n	8001872 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001858:	2318      	movs	r3, #24
 800185a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800185e:	e008      	b.n	8001872 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001868:	e003      	b.n	8001872 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800186a:	2306      	movs	r3, #6
 800186c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001870:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001880:	f7ff fbbb 	bl	8000ffa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fcf5 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 800188e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd15 	bl	80012c6 <LL_ADC_INJ_IsConversionOngoing>
 800189c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 81bf 	bne.w	8001c28 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 81ba 	bne.w	8001c28 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018bc:	d10f      	bne.n	80018de <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff fbc2 	bl	8001052 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb69 	bl	8000fae <LL_ADC_SetSamplingTimeCommonConfig>
 80018dc:	e00e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f7ff fbb1 	bl	8001052 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb59 	bl	8000fae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d00a      	beq.n	8001934 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800192e:	f7ff fae9 	bl	8000f04 <LL_ADC_SetOffset>
 8001932:	e179      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fb06 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x184>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fafb 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 021f 	and.w	r2, r3, #31
 800195e:	e01e      	b.n	800199e <HAL_ADC_ConfigChannel+0x1c2>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff faf0 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x1da>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	e018      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x20c>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80019ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80019d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80019da:	2320      	movs	r3, #32
 80019dc:	e004      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80019de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fabf 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff faa3 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x24a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fa98 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	e01e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x288>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa8d 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e004      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x2a0>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	e018      	b.n	8001aae <HAL_ADC_ConfigChannel+0x2d2>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	e004      	b.n	8001aae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa5c 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa40 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x310>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2102      	movs	r1, #2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fa35 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 021f 	and.w	r2, r3, #31
 8001aea:	e01e      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x34e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fa2a 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x366>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	e014      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x390>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2102      	movs	r1, #2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f9fd 	bl	8000f78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2103      	movs	r1, #3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f9e1 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x3ce>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f9d6 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	e017      	b.n	8001bda <HAL_ADC_ConfigChannel+0x3fe>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2103      	movs	r1, #3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f9cb 	bl	8000f4c <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bc4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e003      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x416>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	e011      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x43a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c02:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2103      	movs	r1, #3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f9a8 	bl	8000f78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fad5 	bl	80011dc <LL_ADC_IsEnabled>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 813f 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f7ff fa2e 	bl	80010a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a8e      	ldr	r2, [pc, #568]	@ (8001e8c <HAL_ADC_ConfigChannel+0x6b0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f040 8130 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x4a4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e019      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x4d8>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	bf94      	ite	ls
 8001cae:	2301      	movls	r3, #1
 8001cb0:	2300      	movhi	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d079      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x4f8>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	069b      	lsls	r3, r3, #26
 8001cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cd2:	e015      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x524>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x544>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	e017      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x574>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d30:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e003      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	ea42 0103 	orr.w	r1, r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x59a>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	3301      	adds	r3, #1
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	051b      	lsls	r3, r3, #20
 8001d74:	e018      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x5cc>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d94:	fab3 f383 	clz	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da8:	430b      	orrs	r3, r1
 8001daa:	e080      	b.n	8001eae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x5ec>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	069b      	lsls	r3, r3, #26
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dc6:	e015      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x618>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e003      	b.n	8001dec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x638>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	3301      	adds	r3, #1
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	e017      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x668>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	61bb      	str	r3, [r7, #24]
  return result;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e003      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	ea42 0103 	orr.w	r1, r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10d      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x694>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	3b1e      	subs	r3, #30
 8001e68:	051b      	lsls	r3, r3, #20
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	e01d      	b.n	8001eac <HAL_ADC_ConfigChannel+0x6d0>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	60fb      	str	r3, [r7, #12]
  return result;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e005      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x6bc>
 8001e8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff f8cd 	bl	8001052 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d06c      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec4:	483c      	ldr	r0, [pc, #240]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ec6:	f7ff f80f 	bl	8000ee8 <LL_ADC_GetCommonPathInternalCh>
 8001eca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fbc <HAL_ADC_ConfigChannel+0x7e0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d127      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001edc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d121      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a35      	ldr	r2, [pc, #212]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d157      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482f      	ldr	r0, [pc, #188]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001efa:	f7fe ffe2 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001efe:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x7e8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	4a30      	ldr	r2, [pc, #192]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x7ec>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f26:	e03a      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_ADC_ConfigChannel+0x7f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d113      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d12a      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f50:	4619      	mov	r1, r3
 8001f52:	4819      	ldr	r0, [pc, #100]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f54:	f7fe ffb5 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f58:	e021      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x7f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d11c      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f82:	4619      	mov	r1, r3
 8001f84:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f86:	f7fe ff9c 	bl	8000ec2 <LL_ADC_SetCommonPathInternalCh>
 8001f8a:	e008      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	37d8      	adds	r7, #216	@ 0xd8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	80080000 	.word	0x80080000
 8001fb8:	50040300 	.word	0x50040300
 8001fbc:	c7520000 	.word	0xc7520000
 8001fc0:	50040000 	.word	0x50040000
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	053e2d63 	.word	0x053e2d63
 8001fcc:	cb840000 	.word	0xcb840000
 8001fd0:	80000001 	.word	0x80000001

08001fd4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f944 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f965 	bl	80012c6 <LL_ADC_INJ_IsConversionOngoing>
 8001ffc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8098 	beq.w	800213c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d02a      	beq.n	8002070 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7e5b      	ldrb	r3, [r3, #25]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d126      	bne.n	8002070 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7e1b      	ldrb	r3, [r3, #24]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d122      	bne.n	8002070 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800202e:	e014      	b.n	800205a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4a45      	ldr	r2, [pc, #276]	@ (8002148 <ADC_ConversionStop+0x174>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d90d      	bls.n	8002054 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e074      	b.n	800213e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d1e3      	bne.n	8002030 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2240      	movs	r2, #64	@ 0x40
 800206e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d014      	beq.n	80020a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f8fc 	bl	8001278 <LL_ADC_REG_IsConversionOngoing>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f8b9 	bl	8001202 <LL_ADC_IsDisableOngoing>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f8d8 	bl	8001250 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d014      	beq.n	80020d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f90b 	bl	80012c6 <LL_ADC_INJ_IsConversionOngoing>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f8a1 	bl	8001202 <LL_ADC_IsDisableOngoing>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d104      	bne.n	80020d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f8e7 	bl	800129e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d005      	beq.n	80020e2 <ADC_ConversionStop+0x10e>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d105      	bne.n	80020e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80020dc:	230c      	movs	r3, #12
 80020de:	617b      	str	r3, [r7, #20]
        break;
 80020e0:	e005      	b.n	80020ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80020e2:	2308      	movs	r3, #8
 80020e4:	617b      	str	r3, [r7, #20]
        break;
 80020e6:	e002      	b.n	80020ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80020e8:	2304      	movs	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
        break;
 80020ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80020ee:	f7fe fea5 	bl	8000e3c <HAL_GetTick>
 80020f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80020f4:	e01b      	b.n	800212e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020f6:	f7fe fea1 	bl	8000e3c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b05      	cmp	r3, #5
 8002102:	d914      	bls.n	800212e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e007      	b.n	800213e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1dc      	bne.n	80020f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	a33fffff 	.word	0xa33fffff

0800214c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f83d 	bl	80011dc <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d169      	bne.n	800223c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <ADC_Enable+0xfc>)
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e055      	b.n	800223e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fff8 	bl	800118c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800219c:	482b      	ldr	r0, [pc, #172]	@ (800224c <ADC_Enable+0x100>)
 800219e:	f7fe fea3 	bl	8000ee8 <LL_ADC_GetCommonPathInternalCh>
 80021a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ac:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <ADC_Enable+0x104>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	4a28      	ldr	r2, [pc, #160]	@ (8002254 <ADC_Enable+0x108>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021c6:	e002      	b.n	80021ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe32 	bl	8000e3c <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021da:	e028      	b.n	800222e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fffb 	bl	80011dc <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ffcb 	bl	800118c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f6:	f7fe fe21 	bl	8000e3c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d914      	bls.n	800222e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d1cf      	bne.n	80021dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	8000003f 	.word	0x8000003f
 800224c:	50040300 	.word	0x50040300
 8002250:	20000000 	.word	0x20000000
 8002254:	053e2d63 	.word	0x053e2d63

08002258 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe ffcc 	bl	8001202 <LL_ADC_IsDisableOngoing>
 800226a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe ffb3 	bl	80011dc <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d047      	beq.n	800230c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d144      	bne.n	800230c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030d 	and.w	r3, r3, #13
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10c      	bne.n	80022aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe ff8d 	bl	80011b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2203      	movs	r2, #3
 80022a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fdcb 	bl	8000e3c <HAL_GetTick>
 80022a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022a8:	e029      	b.n	80022fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f043 0210 	orr.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e023      	b.n	800230e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022c6:	f7fe fdb9 	bl	8000e3c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d914      	bls.n	80022fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1dc      	bne.n	80022c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	@ (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	@ (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	@ 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	@ 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002448:	d301      	bcc.n	800244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <SysTick_Config+0x40>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002456:	210f      	movs	r1, #15
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f7ff ff8e 	bl	800237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <SysTick_Config+0x40>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <SysTick_Config+0x40>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff47 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff5c 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff8e 	bl	80023d0 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5d 	bl	800237c <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffb0 	bl	8002438 <SysTick_Config>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e154      	b.n	800279e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8146 	beq.w	8002798 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_GPIO_Init+0x40>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0201 	and.w	r2, r3, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d017      	beq.n	80025c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d123      	bne.n	8002616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	6939      	ldr	r1, [r7, #16]
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a0 	beq.w	8002798 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002658:	4b58      	ldr	r3, [pc, #352]	@ (80027bc <HAL_GPIO_Init+0x2d8>)
 800265a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265c:	4a57      	ldr	r2, [pc, #348]	@ (80027bc <HAL_GPIO_Init+0x2d8>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6613      	str	r3, [r2, #96]	@ 0x60
 8002664:	4b55      	ldr	r3, [pc, #340]	@ (80027bc <HAL_GPIO_Init+0x2d8>)
 8002666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002670:	4a53      	ldr	r2, [pc, #332]	@ (80027c0 <HAL_GPIO_Init+0x2dc>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800269a:	d019      	beq.n	80026d0 <HAL_GPIO_Init+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a49      	ldr	r2, [pc, #292]	@ (80027c4 <HAL_GPIO_Init+0x2e0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d013      	beq.n	80026cc <HAL_GPIO_Init+0x1e8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a48      	ldr	r2, [pc, #288]	@ (80027c8 <HAL_GPIO_Init+0x2e4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00d      	beq.n	80026c8 <HAL_GPIO_Init+0x1e4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a47      	ldr	r2, [pc, #284]	@ (80027cc <HAL_GPIO_Init+0x2e8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <HAL_GPIO_Init+0x1e0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a46      	ldr	r2, [pc, #280]	@ (80027d0 <HAL_GPIO_Init+0x2ec>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_GPIO_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e008      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026c0:	2307      	movs	r3, #7
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e004      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e002      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_GPIO_Init+0x1ee>
 80026d0:	2300      	movs	r3, #0
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	f002 0203 	and.w	r2, r2, #3
 80026d8:	0092      	lsls	r2, r2, #2
 80026da:	4093      	lsls	r3, r2
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e2:	4937      	ldr	r1, [pc, #220]	@ (80027c0 <HAL_GPIO_Init+0x2dc>)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f0:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002714:	4a2f      	ldr	r2, [pc, #188]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273e:	4a25      	ldr	r2, [pc, #148]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002744:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002768:	4a1a      	ldr	r2, [pc, #104]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002792:	4a10      	ldr	r2, [pc, #64]	@ (80027d4 <HAL_GPIO_Init+0x2f0>)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f aea3 	bne.w	80024f4 <HAL_GPIO_Init+0x10>
  }
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010000 	.word	0x40010000
 80027c4:	48000400 	.word	0x48000400
 80027c8:	48000800 	.word	0x48000800
 80027cc:	48000c00 	.word	0x48000c00
 80027d0:	48001000 	.word	0x48001000
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002824:	e002      	b.n	800282c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_PWREx_GetVoltageRange+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002862:	d130      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002864:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800286c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002870:	d038      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800287a:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2232      	movs	r2, #50	@ 0x32
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	4a1b      	ldr	r2, [pc, #108]	@ (80028fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3301      	adds	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002898:	e002      	b.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ac:	d102      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f2      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c0:	d110      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e00f      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d2:	d007      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028d4:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028dc:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83

08002900 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f000 bc02 	b.w	8003118 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4b96      	ldr	r3, [pc, #600]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291e:	4b94      	ldr	r3, [pc, #592]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80e4 	beq.w	8002afe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_RCC_OscConfig+0x4c>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	f040 808b 	bne.w	8002a5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 8087 	bne.w	8002a5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800294c:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x64>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e3d9      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	4b81      	ldr	r3, [pc, #516]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_RCC_OscConfig+0x7e>
 8002974:	4b7e      	ldr	r3, [pc, #504]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800297c:	e005      	b.n	800298a <HAL_RCC_OscConfig+0x8a>
 800297e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800298a:	4293      	cmp	r3, r2
 800298c:	d223      	bcs.n	80029d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fd8c 	bl	80034b0 <RCC_SetFlashLatencyFromMSIRange>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3ba      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a2:	4b73      	ldr	r3, [pc, #460]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a72      	ldr	r2, [pc, #456]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b70      	ldr	r3, [pc, #448]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	496d      	ldr	r1, [pc, #436]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	4968      	ldr	r1, [pc, #416]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e025      	b.n	8002a22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d6:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4960      	ldr	r1, [pc, #384]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	495b      	ldr	r1, [pc, #364]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fd4c 	bl	80034b0 <RCC_SetFlashLatencyFromMSIRange>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e37a      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a22:	f000 fc81 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4950      	ldr	r1, [pc, #320]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a42:	4b4e      	ldr	r3, [pc, #312]	@ (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f9a8 	bl	8000d9c <HAL_InitTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d052      	beq.n	8002afc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	e35e      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d032      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a62:	4b43      	ldr	r3, [pc, #268]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a42      	ldr	r2, [pc, #264]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f9e5 	bl	8000e3c <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a76:	f7fe f9e1 	bl	8000e3c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e347      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a88:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a94:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b33      	ldr	r3, [pc, #204]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4930      	ldr	r1, [pc, #192]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	492b      	ldr	r1, [pc, #172]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
 8002ac6:	e01a      	b.n	8002afe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac8:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a28      	ldr	r2, [pc, #160]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe f9b2 	bl	8000e3c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002adc:	f7fe f9ae 	bl	8000e3c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e314      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1dc>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d073      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x21c>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d10e      	bne.n	8002b34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d063      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d15f      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e2f1      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x24c>
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e025      	b.n	8002b98 <HAL_RCC_OscConfig+0x298>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b54:	d114      	bne.n	8002b80 <HAL_RCC_OscConfig+0x280>
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a02      	ldr	r2, [pc, #8]	@ (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e013      	b.n	8002b98 <HAL_RCC_OscConfig+0x298>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	0800509c 	.word	0x0800509c
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	4ba0      	ldr	r3, [pc, #640]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a9f      	ldr	r2, [pc, #636]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9c      	ldr	r2, [pc, #624]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f94c 	bl	8000e3c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f948 	bl	8000e3c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e2ae      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bba:	4b92      	ldr	r3, [pc, #584]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2a8>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f938 	bl	8000e3c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe f934 	bl	8000e3c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e29a      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be2:	4b88      	ldr	r3, [pc, #544]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2d0>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d060      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x310>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d116      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c10:	4b7c      	ldr	r3, [pc, #496]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x328>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e277      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b76      	ldr	r3, [pc, #472]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	4973      	ldr	r1, [pc, #460]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3c:	e040      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c46:	4b6f      	ldr	r3, [pc, #444]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe f8f3 	bl	8000e3c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe f8ef 	bl	8000e3c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e255      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6c:	4b65      	ldr	r3, [pc, #404]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b62      	ldr	r3, [pc, #392]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	495f      	ldr	r1, [pc, #380]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5c      	ldr	r2, [pc, #368]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe f8cf 	bl	8000e3c <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe f8cb 	bl	8000e3c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e231      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb4:	4b53      	ldr	r3, [pc, #332]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	4a4a      	ldr	r2, [pc, #296]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f8aa 	bl	8000e3c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe f8a6 	bl	8000e3c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e20c      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfe:	4b41      	ldr	r3, [pc, #260]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCC_OscConfig+0x3ec>
 8002d0c:	e01b      	b.n	8002d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d14:	4a3b      	ldr	r2, [pc, #236]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f88d 	bl	8000e3c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe f889 	bl	8000e3c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1ef      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d38:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ef      	bne.n	8002d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80a6 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4a26      	ldr	r2, [pc, #152]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d70:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d118      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d98:	f7fe f850 	bl	8000e3c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe f84c 	bl	8000e3c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1b2      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4d8>
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dd6:	e029      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d115      	bne.n	8002e0c <HAL_RCC_OscConfig+0x50c>
 8002de0:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de6:	4a07      	ldr	r2, [pc, #28]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df0:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df6:	4a03      	ldr	r2, [pc, #12]	@ (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e12:	4a99      	ldr	r2, [pc, #612]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e1c:	4b96      	ldr	r3, [pc, #600]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	4a95      	ldr	r2, [pc, #596]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe f802 	bl	8000e3c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fd fffe 	bl	8000e3c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e162      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ed      	beq.n	8002e3c <HAL_RCC_OscConfig+0x53c>
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fd ffeb 	bl	8000e3c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd ffe7 	bl	8000e3c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e14b      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	4b7d      	ldr	r3, [pc, #500]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ed      	bne.n	8002e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b78      	ldr	r3, [pc, #480]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e98:	4a77      	ldr	r2, [pc, #476]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01c      	beq.n	8002eee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb4:	4b70      	ldr	r3, [pc, #448]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eba:	4a6f      	ldr	r2, [pc, #444]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fd ffba 	bl	8000e3c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7fd ffb6 	bl	8000e3c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e11c      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ede:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <HAL_RCC_OscConfig+0x5cc>
 8002eec:	e01b      	b.n	8002f26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eee:	4b62      	ldr	r3, [pc, #392]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ef4:	4a60      	ldr	r2, [pc, #384]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fd ff9d 	bl	8000e3c <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f06:	f7fd ff99 	bl	8000e3c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ff      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f18:	4b57      	ldr	r3, [pc, #348]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80f3 	beq.w	8003116 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	f040 80c9 	bne.w	80030cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d12c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d123      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d113      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d109      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d06b      	beq.n	8003080 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d062      	beq.n	8003074 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fae:	4b32      	ldr	r3, [pc, #200]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0ac      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002fc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fca:	f7fd ff37 	bl	8000e3c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fd ff33 	bl	8000e3c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e099      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe4:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b21      	ldr	r3, [pc, #132]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_RCC_OscConfig+0x77c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003000:	3a01      	subs	r2, #1
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800300a:	0212      	lsls	r2, r2, #8
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0652      	lsls	r2, r2, #25
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800302a:	06d2      	lsls	r2, r2, #27
 800302c:	430a      	orrs	r2, r1
 800302e:	4912      	ldr	r1, [pc, #72]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8003030:	4313      	orrs	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003034:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0f      	ldr	r2, [pc, #60]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a0c      	ldr	r2, [pc, #48]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800304c:	f7fd fef6 	bl	8000e3c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fd fef2 	bl	8000e3c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e058      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_RCC_OscConfig+0x778>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003072:	e050      	b.n	8003116 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04f      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
 8003078:	40021000 	.word	0x40021000
 800307c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d144      	bne.n	8003116 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a23      	ldr	r2, [pc, #140]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 8003092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a4:	f7fd feca 	bl	8000e3c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fd fec6 	bl	8000e3c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e02c      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x7ac>
 80030ca:	e024      	b.n	8003116 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d01f      	beq.n	8003112 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 80030d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fd fead 	bl	8000e3c <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fd fea9 	bl	8000e3c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e00f      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4905      	ldr	r1, [pc, #20]	@ (8003120 <HAL_RCC_OscConfig+0x820>)
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x824>)
 800310c:	4013      	ands	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
 8003110:	e001      	b.n	8003116 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	feeefffc 	.word	0xfeeefffc

08003128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0e7      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b75      	ldr	r3, [pc, #468]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d910      	bls.n	800316c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b72      	ldr	r3, [pc, #456]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 0207 	bic.w	r2, r3, #7
 8003152:	4970      	ldr	r1, [pc, #448]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b6e      	ldr	r3, [pc, #440]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cf      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003184:	429a      	cmp	r2, r3
 8003186:	d908      	bls.n	800319a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b63      	ldr	r3, [pc, #396]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4960      	ldr	r1, [pc, #384]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04c      	beq.n	8003240 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d121      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0a6      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e09a      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031de:	4b4e      	ldr	r3, [pc, #312]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e08e      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e086      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4943      	ldr	r1, [pc, #268]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fd fe14 	bl	8000e3c <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fd fe10 	bl	8000e3c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e06e      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b3a      	ldr	r3, [pc, #232]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003258:	429a      	cmp	r2, r3
 800325a:	d208      	bcs.n	800326e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	492b      	ldr	r1, [pc, #172]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326e:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d210      	bcs.n	800329e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	4923      	ldr	r1, [pc, #140]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328c:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <HAL_RCC_ClockConfig+0x1ec>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d001      	beq.n	800329e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e036      	b.n	800330c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4918      	ldr	r1, [pc, #96]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4910      	ldr	r1, [pc, #64]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032dc:	f000 f824 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	490b      	ldr	r1, [pc, #44]	@ (800331c <HAL_RCC_ClockConfig+0x1f4>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	4a09      	ldr	r2, [pc, #36]	@ (8003320 <HAL_RCC_ClockConfig+0x1f8>)
 80032fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_RCC_ClockConfig+0x1fc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fd4b 	bl	8000d9c <HAL_InitTick>
 8003306:	4603      	mov	r3, r0
 8003308:	72fb      	strb	r3, [r7, #11]

  return status;
 800330a:	7afb      	ldrb	r3, [r7, #11]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	0800509c 	.word	0x0800509c
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003336:	4b3e      	ldr	r3, [pc, #248]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003340:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x34>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d121      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d11e      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800335c:	4b34      	ldr	r3, [pc, #208]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e005      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003384:	4a2b      	ldr	r2, [pc, #172]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033a0:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e004      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ac:	4b23      	ldr	r3, [pc, #140]	@ (800343c <HAL_RCC_GetSysClockFreq+0x114>)
 80033ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d134      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0xa6>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0xac>
 80033cc:	e005      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x110>)
 80033d0:	617b      	str	r3, [r7, #20]
      break;
 80033d2:	e005      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_GetSysClockFreq+0x114>)
 80033d6:	617b      	str	r3, [r7, #20]
      break;
 80033d8:	e002      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	617b      	str	r3, [r7, #20]
      break;
 80033de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033e0:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	3301      	adds	r3, #1
 80033ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ee:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	fb03 f202 	mul.w	r2, r3, r2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003406:	4b0a      	ldr	r3, [pc, #40]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	0e5b      	lsrs	r3, r3, #25
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	3301      	adds	r3, #1
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003420:	69bb      	ldr	r3, [r7, #24]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3724      	adds	r7, #36	@ 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	080050b4 	.word	0x080050b4
 8003438:	00f42400 	.word	0x00f42400
 800343c:	007a1200 	.word	0x007a1200

08003440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_RCC_GetHCLKFreq+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000

08003458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800345c:	f7ff fff0 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4904      	ldr	r1, [pc, #16]	@ (8003480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	080050ac 	.word	0x080050ac

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003488:	f7ff ffda 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0adb      	lsrs	r3, r3, #11
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	@ (80034ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	080050ac 	.word	0x080050ac

080034b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034c8:	f7ff f9b6 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 80034cc:	6178      	str	r0, [r7, #20]
 80034ce:	e014      	b.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034e8:	f7ff f9a6 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 80034ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003500:	d10b      	bne.n	800351a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b80      	cmp	r3, #128	@ 0x80
 8003506:	d919      	bls.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2ba0      	cmp	r3, #160	@ 0xa0
 800350c:	d902      	bls.n	8003514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800350e:	2302      	movs	r3, #2
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	e013      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003514:	2301      	movs	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e010      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b80      	cmp	r3, #128	@ 0x80
 800351e:	d902      	bls.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003520:	2303      	movs	r3, #3
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e00a      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b80      	cmp	r3, #128	@ 0x80
 800352a:	d102      	bne.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800352c:	2302      	movs	r3, #2
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e004      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b70      	cmp	r3, #112	@ 0x70
 8003536:	d101      	bne.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 0207 	bic.w	r2, r3, #7
 8003544:	4909      	ldr	r1, [pc, #36]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800354c:	4b07      	ldr	r3, [pc, #28]	@ (800356c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	d001      	beq.n	800355e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	40022000 	.word	0x40022000

08003570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003578:	2300      	movs	r3, #0
 800357a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800357c:	2300      	movs	r3, #0
 800357e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003588:	2b00      	cmp	r3, #0
 800358a:	d031      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003594:	d01a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003596:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800359a:	d814      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035a4:	d10f      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80035a6:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a5c      	ldr	r2, [pc, #368]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa44 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d4:	4b51      	ldr	r3, [pc, #324]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	494e      	ldr	r1, [pc, #312]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 809e 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003602:	4b46      	ldr	r3, [pc, #280]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	4a3f      	ldr	r2, [pc, #252]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	@ 0x58
 8003624:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003630:	2301      	movs	r3, #1
 8003632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003634:	4b3a      	ldr	r3, [pc, #232]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a39      	ldr	r2, [pc, #228]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003640:	f7fd fbfc 	bl	8000e3c <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003646:	e009      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fd fbf8 	bl	8000e3c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	74fb      	strb	r3, [r7, #19]
        break;
 800365a:	e005      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d15a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800366e:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	429a      	cmp	r2, r3
 8003688:	d019      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368a:	4b24      	ldr	r3, [pc, #144]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003694:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	4a1f      	ldr	r2, [pc, #124]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a6:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b6:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d016      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fbb8 	bl	8000e3c <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	e00b      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fbb4 	bl	8000e3c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d902      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	74fb      	strb	r3, [r7, #19]
            break;
 80036e6:	e006      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e8:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ec      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fc:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370a:	4904      	ldr	r1, [pc, #16]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003712:	e009      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
 8003718:	e006      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003728:	7c7b      	ldrb	r3, [r7, #17]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b9e      	ldr	r3, [pc, #632]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	4a9d      	ldr	r2, [pc, #628]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003746:	4b98      	ldr	r3, [pc, #608]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374c:	f023 0203 	bic.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4994      	ldr	r1, [pc, #592]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003768:	4b8f      	ldr	r3, [pc, #572]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f023 020c 	bic.w	r2, r3, #12
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	498c      	ldr	r1, [pc, #560]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378a:	4b87      	ldr	r3, [pc, #540]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	4983      	ldr	r1, [pc, #524]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ac:	4b7e      	ldr	r3, [pc, #504]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	497b      	ldr	r1, [pc, #492]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	4972      	ldr	r1, [pc, #456]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f0:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	496a      	ldr	r1, [pc, #424]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003812:	4b65      	ldr	r3, [pc, #404]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003820:	4961      	ldr	r1, [pc, #388]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003834:	4b5c      	ldr	r3, [pc, #368]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003842:	4959      	ldr	r1, [pc, #356]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003856:	4b54      	ldr	r3, [pc, #336]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	4950      	ldr	r1, [pc, #320]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003878:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	4948      	ldr	r1, [pc, #288]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800389c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038a0:	f023 0203 	bic.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	493f      	ldr	r1, [pc, #252]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d028      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038bc:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ca:	4937      	ldr	r1, [pc, #220]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038da:	d106      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038dc:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e6:	60d3      	str	r3, [r2, #12]
 80038e8:	e011      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038f2:	d10c      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f8a4 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d028      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800391a:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	491f      	ldr	r1, [pc, #124]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003938:	d106      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393a:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003944:	60d3      	str	r3, [r2, #12]
 8003946:	e011      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003950:	d10c      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f875 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a02      	ldr	r2, [pc, #8]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800399e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039a2:	60d3      	str	r3, [r2, #12]
 80039a4:	e014      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f843 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c6:	7cfb      	ldrb	r3, [r7, #19]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01c      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039dc:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	4916      	ldr	r1, [pc, #88]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f820 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a22:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	4904      	ldr	r1, [pc, #16]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a38:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000

08003a48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a56:	4b74      	ldr	r3, [pc, #464]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a62:	4b71      	ldr	r3, [pc, #452]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0203 	and.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10d      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
       ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
       ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d047      	beq.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	e044      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d018      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x86>
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d825      	bhi.n	8003aec <RCCEx_PLLSAI1_Config+0xa4>
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d002      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0x62>
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d009      	beq.n	8003abc <RCCEx_PLLSAI1_Config+0x74>
 8003aa8:	e020      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11d      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aba:	e01a      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003abc:	4b5a      	ldr	r3, [pc, #360]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003acc:	e013      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ace:	4b56      	ldr	r3, [pc, #344]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ada:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aea:	e006      	b.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e004      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	430b      	orrs	r3, r1
 8003b18:	4943      	ldr	r1, [pc, #268]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d17c      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b24:	4b40      	ldr	r3, [pc, #256]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3f      	ldr	r2, [pc, #252]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd f984 	bl	8000e3c <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b36:	e009      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b38:	f7fd f980 	bl	8000e3c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	73fb      	strb	r3, [r7, #15]
        break;
 8003b4a:	e005      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4c:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ef      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d15f      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d110      	bne.n	8003b86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b64:	4b30      	ldr	r3, [pc, #192]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6892      	ldr	r2, [r2, #8]
 8003b74:	0211      	lsls	r1, r2, #8
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	06d2      	lsls	r2, r2, #27
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	492a      	ldr	r1, [pc, #168]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	610b      	str	r3, [r1, #16]
 8003b84:	e027      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d112      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b8c:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6892      	ldr	r2, [r2, #8]
 8003b9c:	0211      	lsls	r1, r2, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6912      	ldr	r2, [r2, #16]
 8003ba2:	0852      	lsrs	r2, r2, #1
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	0552      	lsls	r2, r2, #21
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	491f      	ldr	r1, [pc, #124]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]
 8003bb0:	e011      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6952      	ldr	r2, [r2, #20]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0652      	lsls	r2, r2, #25
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	4915      	ldr	r1, [pc, #84]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd6:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a13      	ldr	r2, [pc, #76]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003be0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fd f92b 	bl	8000e3c <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be8:	e009      	b.n	8003bfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bea:	f7fd f927 	bl	8000e3c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfc:	e005      	b.n	8003c0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000

08003c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e040      	b.n	8003cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fc ff86 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fb38 	bl	80042e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8af 	bl	8003ddc <UART_SetConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01b      	b.n	8003cc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fbb7 	bl	800442c <UART_CheckIdleState>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d177      	bne.n	8003dd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x24>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e070      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2221      	movs	r2, #33	@ 0x21
 8003cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd f89d 	bl	8000e3c <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02f      	b.n	8003d9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	@ 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fc19 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e03b      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3302      	adds	r3, #2
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e007      	b.n	8003d88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1c9      	bne.n	8003d3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2140      	movs	r1, #64	@ 0x40
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fbe3 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e005      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b08a      	sub	sp, #40	@ 0x28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4ba5      	ldr	r3, [pc, #660]	@ (80040a0 <UART_SetConfig+0x2c4>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a9a      	ldr	r2, [pc, #616]	@ (80040a4 <UART_SetConfig+0x2c8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	4313      	orrs	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a91      	ldr	r2, [pc, #580]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d126      	bne.n	8003eb4 <UART_SetConfig+0xd8>
 8003e66:	4b91      	ldr	r3, [pc, #580]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d81b      	bhi.n	8003eac <UART_SetConfig+0xd0>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <UART_SetConfig+0xa0>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9d 	.word	0x08003e9d
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea5 	.word	0x08003ea5
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e0d6      	b.n	8004042 <UART_SetConfig+0x266>
 8003e94:	2302      	movs	r3, #2
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	e0d2      	b.n	8004042 <UART_SetConfig+0x266>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e0ce      	b.n	8004042 <UART_SetConfig+0x266>
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e0ca      	b.n	8004042 <UART_SetConfig+0x266>
 8003eac:	2310      	movs	r3, #16
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e0c6      	b.n	8004042 <UART_SetConfig+0x266>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7d      	ldr	r2, [pc, #500]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d138      	bne.n	8003f30 <UART_SetConfig+0x154>
 8003ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d82d      	bhi.n	8003f28 <UART_SetConfig+0x14c>
 8003ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <UART_SetConfig+0xf8>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f29 	.word	0x08003f29
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e098      	b.n	8004042 <UART_SetConfig+0x266>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e094      	b.n	8004042 <UART_SetConfig+0x266>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e090      	b.n	8004042 <UART_SetConfig+0x266>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e08c      	b.n	8004042 <UART_SetConfig+0x266>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e088      	b.n	8004042 <UART_SetConfig+0x266>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a5f      	ldr	r2, [pc, #380]	@ (80040b4 <UART_SetConfig+0x2d8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d125      	bne.n	8003f86 <UART_SetConfig+0x1aa>
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f44:	2b30      	cmp	r3, #48	@ 0x30
 8003f46:	d016      	beq.n	8003f76 <UART_SetConfig+0x19a>
 8003f48:	2b30      	cmp	r3, #48	@ 0x30
 8003f4a:	d818      	bhi.n	8003f7e <UART_SetConfig+0x1a2>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d00a      	beq.n	8003f66 <UART_SetConfig+0x18a>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d814      	bhi.n	8003f7e <UART_SetConfig+0x1a2>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <UART_SetConfig+0x182>
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d008      	beq.n	8003f6e <UART_SetConfig+0x192>
 8003f5c:	e00f      	b.n	8003f7e <UART_SetConfig+0x1a2>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f64:	e06d      	b.n	8004042 <UART_SetConfig+0x266>
 8003f66:	2302      	movs	r3, #2
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6c:	e069      	b.n	8004042 <UART_SetConfig+0x266>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f74:	e065      	b.n	8004042 <UART_SetConfig+0x266>
 8003f76:	2308      	movs	r3, #8
 8003f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7c:	e061      	b.n	8004042 <UART_SetConfig+0x266>
 8003f7e:	2310      	movs	r3, #16
 8003f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f84:	e05d      	b.n	8004042 <UART_SetConfig+0x266>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4b      	ldr	r2, [pc, #300]	@ (80040b8 <UART_SetConfig+0x2dc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d125      	bne.n	8003fdc <UART_SetConfig+0x200>
 8003f90:	4b46      	ldr	r3, [pc, #280]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f9c:	d016      	beq.n	8003fcc <UART_SetConfig+0x1f0>
 8003f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003fa0:	d818      	bhi.n	8003fd4 <UART_SetConfig+0x1f8>
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d00a      	beq.n	8003fbc <UART_SetConfig+0x1e0>
 8003fa6:	2b80      	cmp	r3, #128	@ 0x80
 8003fa8:	d814      	bhi.n	8003fd4 <UART_SetConfig+0x1f8>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <UART_SetConfig+0x1d8>
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d008      	beq.n	8003fc4 <UART_SetConfig+0x1e8>
 8003fb2:	e00f      	b.n	8003fd4 <UART_SetConfig+0x1f8>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e042      	b.n	8004042 <UART_SetConfig+0x266>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e03e      	b.n	8004042 <UART_SetConfig+0x266>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e03a      	b.n	8004042 <UART_SetConfig+0x266>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e036      	b.n	8004042 <UART_SetConfig+0x266>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e032      	b.n	8004042 <UART_SetConfig+0x266>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <UART_SetConfig+0x2c8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12a      	bne.n	800403c <UART_SetConfig+0x260>
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff4:	d01a      	beq.n	800402c <UART_SetConfig+0x250>
 8003ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ffa:	d81b      	bhi.n	8004034 <UART_SetConfig+0x258>
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004000:	d00c      	beq.n	800401c <UART_SetConfig+0x240>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004006:	d815      	bhi.n	8004034 <UART_SetConfig+0x258>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x238>
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004010:	d008      	beq.n	8004024 <UART_SetConfig+0x248>
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x258>
 8004014:	2300      	movs	r3, #0
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401a:	e012      	b.n	8004042 <UART_SetConfig+0x266>
 800401c:	2302      	movs	r3, #2
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004022:	e00e      	b.n	8004042 <UART_SetConfig+0x266>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800402a:	e00a      	b.n	8004042 <UART_SetConfig+0x266>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004032:	e006      	b.n	8004042 <UART_SetConfig+0x266>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x266>
 800403c:	2310      	movs	r3, #16
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a17      	ldr	r2, [pc, #92]	@ (80040a4 <UART_SetConfig+0x2c8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	f040 808b 	bne.w	8004164 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800404e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004052:	2b08      	cmp	r3, #8
 8004054:	d834      	bhi.n	80040c0 <UART_SetConfig+0x2e4>
 8004056:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <UART_SetConfig+0x280>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004081 	.word	0x08004081
 8004060:	080040c1 	.word	0x080040c1
 8004064:	08004089 	.word	0x08004089
 8004068:	080040c1 	.word	0x080040c1
 800406c:	0800408f 	.word	0x0800408f
 8004070:	080040c1 	.word	0x080040c1
 8004074:	080040c1 	.word	0x080040c1
 8004078:	080040c1 	.word	0x080040c1
 800407c:	08004097 	.word	0x08004097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7ff f9ea 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004084:	61f8      	str	r0, [r7, #28]
        break;
 8004086:	e021      	b.n	80040cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <UART_SetConfig+0x2e0>)
 800408a:	61fb      	str	r3, [r7, #28]
        break;
 800408c:	e01e      	b.n	80040cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408e:	f7ff f94b 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8004092:	61f8      	str	r0, [r7, #28]
        break;
 8004094:	e01a      	b.n	80040cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800409a:	61fb      	str	r3, [r7, #28]
        break;
 800409c:	e016      	b.n	80040cc <UART_SetConfig+0x2f0>
 800409e:	bf00      	nop
 80040a0:	efff69f3 	.word	0xefff69f3
 80040a4:	40008000 	.word	0x40008000
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	40004800 	.word	0x40004800
 80040b8:	40004c00 	.word	0x40004c00
 80040bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80fa 	beq.w	80042c8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d305      	bcc.n	80040f0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040f6:	e0e7      	b.n	80042c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2200      	movs	r2, #0
 80040fc:	461c      	mov	r4, r3
 80040fe:	4615      	mov	r5, r2
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	022b      	lsls	r3, r5, #8
 800410a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800410e:	0222      	lsls	r2, r4, #8
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	6849      	ldr	r1, [r1, #4]
 8004114:	0849      	lsrs	r1, r1, #1
 8004116:	2000      	movs	r0, #0
 8004118:	4688      	mov	r8, r1
 800411a:	4681      	mov	r9, r0
 800411c:	eb12 0a08 	adds.w	sl, r2, r8
 8004120:	eb43 0b09 	adc.w	fp, r3, r9
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004132:	4650      	mov	r0, sl
 8004134:	4659      	mov	r1, fp
 8004136:	f7fc f8ab 	bl	8000290 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4613      	mov	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004148:	d308      	bcc.n	800415c <UART_SetConfig+0x380>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004150:	d204      	bcs.n	800415c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e0b5      	b.n	80042c8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004162:	e0b1      	b.n	80042c8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	d15d      	bne.n	800422a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800416e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004172:	2b08      	cmp	r3, #8
 8004174:	d827      	bhi.n	80041c6 <UART_SetConfig+0x3ea>
 8004176:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <UART_SetConfig+0x3a0>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041c7 	.word	0x080041c7
 800418c:	080041b7 	.word	0x080041b7
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041c7 	.word	0x080041c7
 8004198:	080041c7 	.word	0x080041c7
 800419c:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7ff f95a 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 80041a4:	61f8      	str	r0, [r7, #28]
        break;
 80041a6:	e014      	b.n	80041d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7ff f96c 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 80041ac:	61f8      	str	r0, [r7, #28]
        break;
 80041ae:	e010      	b.n	80041d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4b4c      	ldr	r3, [pc, #304]	@ (80042e4 <UART_SetConfig+0x508>)
 80041b2:	61fb      	str	r3, [r7, #28]
        break;
 80041b4:	e00d      	b.n	80041d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7ff f8b7 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80041ba:	61f8      	str	r0, [r7, #28]
        break;
 80041bc:	e009      	b.n	80041d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c2:	61fb      	str	r3, [r7, #28]
        break;
 80041c4:	e005      	b.n	80041d2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d077      	beq.n	80042c8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005a      	lsls	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d916      	bls.n	8004222 <UART_SetConfig+0x446>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fa:	d212      	bcs.n	8004222 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f023 030f 	bic.w	r3, r3, #15
 8004204:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	b29a      	uxth	r2, r3
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	4313      	orrs	r3, r2
 8004216:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	8afa      	ldrh	r2, [r7, #22]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e052      	b.n	80042c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004228:	e04e      	b.n	80042c8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800422a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800422e:	2b08      	cmp	r3, #8
 8004230:	d827      	bhi.n	8004282 <UART_SetConfig+0x4a6>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <UART_SetConfig+0x45c>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800425d 	.word	0x0800425d
 800423c:	08004265 	.word	0x08004265
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004283 	.word	0x08004283
 8004248:	08004273 	.word	0x08004273
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
 8004258:	0800427b 	.word	0x0800427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7ff f8fc 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e014      	b.n	800428e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004264:	f7ff f90e 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8004268:	61f8      	str	r0, [r7, #28]
        break;
 800426a:	e010      	b.n	800428e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800426c:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <UART_SetConfig+0x508>)
 800426e:	61fb      	str	r3, [r7, #28]
        break;
 8004270:	e00d      	b.n	800428e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004272:	f7ff f859 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8004276:	61f8      	str	r0, [r7, #28]
        break;
 8004278:	e009      	b.n	800428e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800427e:	61fb      	str	r3, [r7, #28]
        break;
 8004280:	e005      	b.n	800428e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800428c:	bf00      	nop
    }

    if (pclk != 0U)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d019      	beq.n	80042c8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	085a      	lsrs	r2, r3, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d909      	bls.n	80042c2 <UART_SetConfig+0x4e6>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d205      	bcs.n	80042c2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
 80042c0:	e002      	b.n	80042c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3728      	adds	r7, #40	@ 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	00f42400 	.word	0x00f42400

080042e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01a      	beq.n	80043fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043e6:	d10a      	bne.n	80043fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b098      	sub	sp, #96	@ 0x60
 8004430:	af02      	add	r7, sp, #8
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800443c:	f7fc fcfe 	bl	8000e3c <HAL_GetTick>
 8004440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b08      	cmp	r3, #8
 800444e:	d12e      	bne.n	80044ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004458:	2200      	movs	r2, #0
 800445a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f88c 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d021      	beq.n	80044ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800447a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800447e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
 800448a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800448e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e062      	b.n	8004574 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d149      	bne.n	8004550 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f856 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03c      	beq.n	8004550 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	623b      	str	r3, [r7, #32]
   return(result);
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60fb      	str	r3, [r7, #12]
   return(result);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004528:	61fa      	str	r2, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	69b9      	ldr	r1, [r7, #24]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	617b      	str	r3, [r7, #20]
   return(result);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e011      	b.n	8004574 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3758      	adds	r7, #88	@ 0x58
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458c:	e049      	b.n	8004622 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d045      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fc fc51 	bl	8000e3c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <UART_WaitOnFlagUntilTimeout+0x30>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e048      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d031      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d110      	bne.n	80045ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f838 	bl	800464a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2208      	movs	r2, #8
 80045de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e029      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045fc:	d111      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f81e 	bl	800464a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e00f      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	429a      	cmp	r2, r3
 800463e:	d0a6      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b095      	sub	sp, #84	@ 0x54
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004670:	643b      	str	r3, [r7, #64]	@ 0x40
 8004672:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e6      	bne.n	8004652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	61fb      	str	r3, [r7, #28]
   return(result);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d118      	bne.n	80046f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	613b      	str	r3, [r7, #16]
   return(result);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004706:	bf00      	nop
 8004708:	3754      	adds	r7, #84	@ 0x54
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <siprintf>:
 8004714:	b40e      	push	{r1, r2, r3}
 8004716:	b500      	push	{lr}
 8004718:	b09c      	sub	sp, #112	@ 0x70
 800471a:	ab1d      	add	r3, sp, #116	@ 0x74
 800471c:	9002      	str	r0, [sp, #8]
 800471e:	9006      	str	r0, [sp, #24]
 8004720:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004724:	4809      	ldr	r0, [pc, #36]	@ (800474c <siprintf+0x38>)
 8004726:	9107      	str	r1, [sp, #28]
 8004728:	9104      	str	r1, [sp, #16]
 800472a:	4909      	ldr	r1, [pc, #36]	@ (8004750 <siprintf+0x3c>)
 800472c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004730:	9105      	str	r1, [sp, #20]
 8004732:	6800      	ldr	r0, [r0, #0]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	a902      	add	r1, sp, #8
 8004738:	f000 f994 	bl	8004a64 <_svfiprintf_r>
 800473c:	9b02      	ldr	r3, [sp, #8]
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	b01c      	add	sp, #112	@ 0x70
 8004744:	f85d eb04 	ldr.w	lr, [sp], #4
 8004748:	b003      	add	sp, #12
 800474a:	4770      	bx	lr
 800474c:	2000000c 	.word	0x2000000c
 8004750:	ffff0208 	.word	0xffff0208

08004754 <memset>:
 8004754:	4402      	add	r2, r0
 8004756:	4603      	mov	r3, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <__errno>:
 8004764:	4b01      	ldr	r3, [pc, #4]	@ (800476c <__errno+0x8>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	2000000c 	.word	0x2000000c

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4d0d      	ldr	r5, [pc, #52]	@ (80047a8 <__libc_init_array+0x38>)
 8004774:	4c0d      	ldr	r4, [pc, #52]	@ (80047ac <__libc_init_array+0x3c>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	2600      	movs	r6, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	4d0b      	ldr	r5, [pc, #44]	@ (80047b0 <__libc_init_array+0x40>)
 8004782:	4c0c      	ldr	r4, [pc, #48]	@ (80047b4 <__libc_init_array+0x44>)
 8004784:	f000 fc66 	bl	8005054 <_init>
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	2600      	movs	r6, #0
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f855 3b04 	ldr.w	r3, [r5], #4
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	08005120 	.word	0x08005120
 80047ac:	08005120 	.word	0x08005120
 80047b0:	08005120 	.word	0x08005120
 80047b4:	08005124 	.word	0x08005124

080047b8 <__retarget_lock_acquire_recursive>:
 80047b8:	4770      	bx	lr

080047ba <__retarget_lock_release_recursive>:
 80047ba:	4770      	bx	lr

080047bc <_free_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4605      	mov	r5, r0
 80047c0:	2900      	cmp	r1, #0
 80047c2:	d041      	beq.n	8004848 <_free_r+0x8c>
 80047c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c8:	1f0c      	subs	r4, r1, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bfb8      	it	lt
 80047ce:	18e4      	addlt	r4, r4, r3
 80047d0:	f000 f8e0 	bl	8004994 <__malloc_lock>
 80047d4:	4a1d      	ldr	r2, [pc, #116]	@ (800484c <_free_r+0x90>)
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	b933      	cbnz	r3, 80047e8 <_free_r+0x2c>
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	6014      	str	r4, [r2, #0]
 80047de:	4628      	mov	r0, r5
 80047e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e4:	f000 b8dc 	b.w	80049a0 <__malloc_unlock>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d908      	bls.n	80047fe <_free_r+0x42>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428b      	cmp	r3, r1
 80047f2:	bf01      	itttt	eq
 80047f4:	6819      	ldreq	r1, [r3, #0]
 80047f6:	685b      	ldreq	r3, [r3, #4]
 80047f8:	1809      	addeq	r1, r1, r0
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	e7ed      	b.n	80047da <_free_r+0x1e>
 80047fe:	461a      	mov	r2, r3
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b10b      	cbz	r3, 8004808 <_free_r+0x4c>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d9fa      	bls.n	80047fe <_free_r+0x42>
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	1850      	adds	r0, r2, r1
 800480c:	42a0      	cmp	r0, r4
 800480e:	d10b      	bne.n	8004828 <_free_r+0x6c>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	4401      	add	r1, r0
 8004814:	1850      	adds	r0, r2, r1
 8004816:	4283      	cmp	r3, r0
 8004818:	6011      	str	r1, [r2, #0]
 800481a:	d1e0      	bne.n	80047de <_free_r+0x22>
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	6053      	str	r3, [r2, #4]
 8004822:	4408      	add	r0, r1
 8004824:	6010      	str	r0, [r2, #0]
 8004826:	e7da      	b.n	80047de <_free_r+0x22>
 8004828:	d902      	bls.n	8004830 <_free_r+0x74>
 800482a:	230c      	movs	r3, #12
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	e7d6      	b.n	80047de <_free_r+0x22>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	1821      	adds	r1, r4, r0
 8004834:	428b      	cmp	r3, r1
 8004836:	bf04      	itt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	6063      	str	r3, [r4, #4]
 800483e:	bf04      	itt	eq
 8004840:	1809      	addeq	r1, r1, r0
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	6054      	str	r4, [r2, #4]
 8004846:	e7ca      	b.n	80047de <_free_r+0x22>
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	2000031c 	.word	0x2000031c

08004850 <sbrk_aligned>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4e0f      	ldr	r6, [pc, #60]	@ (8004890 <sbrk_aligned+0x40>)
 8004854:	460c      	mov	r4, r1
 8004856:	6831      	ldr	r1, [r6, #0]
 8004858:	4605      	mov	r5, r0
 800485a:	b911      	cbnz	r1, 8004862 <sbrk_aligned+0x12>
 800485c:	f000 fba6 	bl	8004fac <_sbrk_r>
 8004860:	6030      	str	r0, [r6, #0]
 8004862:	4621      	mov	r1, r4
 8004864:	4628      	mov	r0, r5
 8004866:	f000 fba1 	bl	8004fac <_sbrk_r>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d103      	bne.n	8004876 <sbrk_aligned+0x26>
 800486e:	f04f 34ff 	mov.w	r4, #4294967295
 8004872:	4620      	mov	r0, r4
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	1cc4      	adds	r4, r0, #3
 8004878:	f024 0403 	bic.w	r4, r4, #3
 800487c:	42a0      	cmp	r0, r4
 800487e:	d0f8      	beq.n	8004872 <sbrk_aligned+0x22>
 8004880:	1a21      	subs	r1, r4, r0
 8004882:	4628      	mov	r0, r5
 8004884:	f000 fb92 	bl	8004fac <_sbrk_r>
 8004888:	3001      	adds	r0, #1
 800488a:	d1f2      	bne.n	8004872 <sbrk_aligned+0x22>
 800488c:	e7ef      	b.n	800486e <sbrk_aligned+0x1e>
 800488e:	bf00      	nop
 8004890:	20000318 	.word	0x20000318

08004894 <_malloc_r>:
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	1ccd      	adds	r5, r1, #3
 800489a:	f025 0503 	bic.w	r5, r5, #3
 800489e:	3508      	adds	r5, #8
 80048a0:	2d0c      	cmp	r5, #12
 80048a2:	bf38      	it	cc
 80048a4:	250c      	movcc	r5, #12
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	4606      	mov	r6, r0
 80048aa:	db01      	blt.n	80048b0 <_malloc_r+0x1c>
 80048ac:	42a9      	cmp	r1, r5
 80048ae:	d904      	bls.n	80048ba <_malloc_r+0x26>
 80048b0:	230c      	movs	r3, #12
 80048b2:	6033      	str	r3, [r6, #0]
 80048b4:	2000      	movs	r0, #0
 80048b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004990 <_malloc_r+0xfc>
 80048be:	f000 f869 	bl	8004994 <__malloc_lock>
 80048c2:	f8d8 3000 	ldr.w	r3, [r8]
 80048c6:	461c      	mov	r4, r3
 80048c8:	bb44      	cbnz	r4, 800491c <_malloc_r+0x88>
 80048ca:	4629      	mov	r1, r5
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff ffbf 	bl	8004850 <sbrk_aligned>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	4604      	mov	r4, r0
 80048d6:	d158      	bne.n	800498a <_malloc_r+0xf6>
 80048d8:	f8d8 4000 	ldr.w	r4, [r8]
 80048dc:	4627      	mov	r7, r4
 80048de:	2f00      	cmp	r7, #0
 80048e0:	d143      	bne.n	800496a <_malloc_r+0xd6>
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	d04b      	beq.n	800497e <_malloc_r+0xea>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4639      	mov	r1, r7
 80048ea:	4630      	mov	r0, r6
 80048ec:	eb04 0903 	add.w	r9, r4, r3
 80048f0:	f000 fb5c 	bl	8004fac <_sbrk_r>
 80048f4:	4581      	cmp	r9, r0
 80048f6:	d142      	bne.n	800497e <_malloc_r+0xea>
 80048f8:	6821      	ldr	r1, [r4, #0]
 80048fa:	1a6d      	subs	r5, r5, r1
 80048fc:	4629      	mov	r1, r5
 80048fe:	4630      	mov	r0, r6
 8004900:	f7ff ffa6 	bl	8004850 <sbrk_aligned>
 8004904:	3001      	adds	r0, #1
 8004906:	d03a      	beq.n	800497e <_malloc_r+0xea>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	442b      	add	r3, r5
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	f8d8 3000 	ldr.w	r3, [r8]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	bb62      	cbnz	r2, 8004970 <_malloc_r+0xdc>
 8004916:	f8c8 7000 	str.w	r7, [r8]
 800491a:	e00f      	b.n	800493c <_malloc_r+0xa8>
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	1b52      	subs	r2, r2, r5
 8004920:	d420      	bmi.n	8004964 <_malloc_r+0xd0>
 8004922:	2a0b      	cmp	r2, #11
 8004924:	d917      	bls.n	8004956 <_malloc_r+0xc2>
 8004926:	1961      	adds	r1, r4, r5
 8004928:	42a3      	cmp	r3, r4
 800492a:	6025      	str	r5, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	6059      	strne	r1, [r3, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	bf08      	it	eq
 8004934:	f8c8 1000 	streq.w	r1, [r8]
 8004938:	5162      	str	r2, [r4, r5]
 800493a:	604b      	str	r3, [r1, #4]
 800493c:	4630      	mov	r0, r6
 800493e:	f000 f82f 	bl	80049a0 <__malloc_unlock>
 8004942:	f104 000b 	add.w	r0, r4, #11
 8004946:	1d23      	adds	r3, r4, #4
 8004948:	f020 0007 	bic.w	r0, r0, #7
 800494c:	1ac2      	subs	r2, r0, r3
 800494e:	bf1c      	itt	ne
 8004950:	1a1b      	subne	r3, r3, r0
 8004952:	50a3      	strne	r3, [r4, r2]
 8004954:	e7af      	b.n	80048b6 <_malloc_r+0x22>
 8004956:	6862      	ldr	r2, [r4, #4]
 8004958:	42a3      	cmp	r3, r4
 800495a:	bf0c      	ite	eq
 800495c:	f8c8 2000 	streq.w	r2, [r8]
 8004960:	605a      	strne	r2, [r3, #4]
 8004962:	e7eb      	b.n	800493c <_malloc_r+0xa8>
 8004964:	4623      	mov	r3, r4
 8004966:	6864      	ldr	r4, [r4, #4]
 8004968:	e7ae      	b.n	80048c8 <_malloc_r+0x34>
 800496a:	463c      	mov	r4, r7
 800496c:	687f      	ldr	r7, [r7, #4]
 800496e:	e7b6      	b.n	80048de <_malloc_r+0x4a>
 8004970:	461a      	mov	r2, r3
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	42a3      	cmp	r3, r4
 8004976:	d1fb      	bne.n	8004970 <_malloc_r+0xdc>
 8004978:	2300      	movs	r3, #0
 800497a:	6053      	str	r3, [r2, #4]
 800497c:	e7de      	b.n	800493c <_malloc_r+0xa8>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	4630      	mov	r0, r6
 8004984:	f000 f80c 	bl	80049a0 <__malloc_unlock>
 8004988:	e794      	b.n	80048b4 <_malloc_r+0x20>
 800498a:	6005      	str	r5, [r0, #0]
 800498c:	e7d6      	b.n	800493c <_malloc_r+0xa8>
 800498e:	bf00      	nop
 8004990:	2000031c 	.word	0x2000031c

08004994 <__malloc_lock>:
 8004994:	4801      	ldr	r0, [pc, #4]	@ (800499c <__malloc_lock+0x8>)
 8004996:	f7ff bf0f 	b.w	80047b8 <__retarget_lock_acquire_recursive>
 800499a:	bf00      	nop
 800499c:	20000314 	.word	0x20000314

080049a0 <__malloc_unlock>:
 80049a0:	4801      	ldr	r0, [pc, #4]	@ (80049a8 <__malloc_unlock+0x8>)
 80049a2:	f7ff bf0a 	b.w	80047ba <__retarget_lock_release_recursive>
 80049a6:	bf00      	nop
 80049a8:	20000314 	.word	0x20000314

080049ac <__ssputs_r>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	688e      	ldr	r6, [r1, #8]
 80049b2:	461f      	mov	r7, r3
 80049b4:	42be      	cmp	r6, r7
 80049b6:	680b      	ldr	r3, [r1, #0]
 80049b8:	4682      	mov	sl, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	4690      	mov	r8, r2
 80049be:	d82d      	bhi.n	8004a1c <__ssputs_r+0x70>
 80049c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049c8:	d026      	beq.n	8004a18 <__ssputs_r+0x6c>
 80049ca:	6965      	ldr	r5, [r4, #20]
 80049cc:	6909      	ldr	r1, [r1, #16]
 80049ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049d2:	eba3 0901 	sub.w	r9, r3, r1
 80049d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049da:	1c7b      	adds	r3, r7, #1
 80049dc:	444b      	add	r3, r9
 80049de:	106d      	asrs	r5, r5, #1
 80049e0:	429d      	cmp	r5, r3
 80049e2:	bf38      	it	cc
 80049e4:	461d      	movcc	r5, r3
 80049e6:	0553      	lsls	r3, r2, #21
 80049e8:	d527      	bpl.n	8004a3a <__ssputs_r+0x8e>
 80049ea:	4629      	mov	r1, r5
 80049ec:	f7ff ff52 	bl	8004894 <_malloc_r>
 80049f0:	4606      	mov	r6, r0
 80049f2:	b360      	cbz	r0, 8004a4e <__ssputs_r+0xa2>
 80049f4:	6921      	ldr	r1, [r4, #16]
 80049f6:	464a      	mov	r2, r9
 80049f8:	f000 fae8 	bl	8004fcc <memcpy>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	6126      	str	r6, [r4, #16]
 8004a0a:	6165      	str	r5, [r4, #20]
 8004a0c:	444e      	add	r6, r9
 8004a0e:	eba5 0509 	sub.w	r5, r5, r9
 8004a12:	6026      	str	r6, [r4, #0]
 8004a14:	60a5      	str	r5, [r4, #8]
 8004a16:	463e      	mov	r6, r7
 8004a18:	42be      	cmp	r6, r7
 8004a1a:	d900      	bls.n	8004a1e <__ssputs_r+0x72>
 8004a1c:	463e      	mov	r6, r7
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	4632      	mov	r2, r6
 8004a22:	4641      	mov	r1, r8
 8004a24:	f000 faa8 	bl	8004f78 <memmove>
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	1b9b      	subs	r3, r3, r6
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	4433      	add	r3, r6
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	2000      	movs	r0, #0
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	f000 fad4 	bl	8004fe8 <_realloc_r>
 8004a40:	4606      	mov	r6, r0
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d1e0      	bne.n	8004a08 <__ssputs_r+0x5c>
 8004a46:	6921      	ldr	r1, [r4, #16]
 8004a48:	4650      	mov	r0, sl
 8004a4a:	f7ff feb7 	bl	80047bc <_free_r>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	f8ca 3000 	str.w	r3, [sl]
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e7e9      	b.n	8004a36 <__ssputs_r+0x8a>
	...

08004a64 <_svfiprintf_r>:
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	4698      	mov	r8, r3
 8004a6a:	898b      	ldrh	r3, [r1, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	b09d      	sub	sp, #116	@ 0x74
 8004a70:	4607      	mov	r7, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	d510      	bpl.n	8004a9a <_svfiprintf_r+0x36>
 8004a78:	690b      	ldr	r3, [r1, #16]
 8004a7a:	b973      	cbnz	r3, 8004a9a <_svfiprintf_r+0x36>
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	f7ff ff09 	bl	8004894 <_malloc_r>
 8004a82:	6028      	str	r0, [r5, #0]
 8004a84:	6128      	str	r0, [r5, #16]
 8004a86:	b930      	cbnz	r0, 8004a96 <_svfiprintf_r+0x32>
 8004a88:	230c      	movs	r3, #12
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	b01d      	add	sp, #116	@ 0x74
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	2340      	movs	r3, #64	@ 0x40
 8004a98:	616b      	str	r3, [r5, #20]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa8:	2330      	movs	r3, #48	@ 0x30
 8004aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c48 <_svfiprintf_r+0x1e4>
 8004aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ab2:	f04f 0901 	mov.w	r9, #1
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	469a      	mov	sl, r3
 8004aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004abe:	b10a      	cbz	r2, 8004ac4 <_svfiprintf_r+0x60>
 8004ac0:	2a25      	cmp	r2, #37	@ 0x25
 8004ac2:	d1f9      	bne.n	8004ab8 <_svfiprintf_r+0x54>
 8004ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac8:	d00b      	beq.n	8004ae2 <_svfiprintf_r+0x7e>
 8004aca:	465b      	mov	r3, fp
 8004acc:	4622      	mov	r2, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7ff ff6b 	bl	80049ac <__ssputs_r>
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f000 80a7 	beq.w	8004c2a <_svfiprintf_r+0x1c6>
 8004adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ade:	445a      	add	r2, fp
 8004ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 809f 	beq.w	8004c2a <_svfiprintf_r+0x1c6>
 8004aec:	2300      	movs	r3, #0
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af6:	f10a 0a01 	add.w	sl, sl, #1
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	9307      	str	r3, [sp, #28]
 8004afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b04:	4654      	mov	r4, sl
 8004b06:	2205      	movs	r2, #5
 8004b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0c:	484e      	ldr	r0, [pc, #312]	@ (8004c48 <_svfiprintf_r+0x1e4>)
 8004b0e:	f7fb fb6f 	bl	80001f0 <memchr>
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	b9d8      	cbnz	r0, 8004b4e <_svfiprintf_r+0xea>
 8004b16:	06d0      	lsls	r0, r2, #27
 8004b18:	bf44      	itt	mi
 8004b1a:	2320      	movmi	r3, #32
 8004b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b20:	0711      	lsls	r1, r2, #28
 8004b22:	bf44      	itt	mi
 8004b24:	232b      	movmi	r3, #43	@ 0x2b
 8004b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b30:	d015      	beq.n	8004b5e <_svfiprintf_r+0xfa>
 8004b32:	9a07      	ldr	r2, [sp, #28]
 8004b34:	4654      	mov	r4, sl
 8004b36:	2000      	movs	r0, #0
 8004b38:	f04f 0c0a 	mov.w	ip, #10
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b42:	3b30      	subs	r3, #48	@ 0x30
 8004b44:	2b09      	cmp	r3, #9
 8004b46:	d94b      	bls.n	8004be0 <_svfiprintf_r+0x17c>
 8004b48:	b1b0      	cbz	r0, 8004b78 <_svfiprintf_r+0x114>
 8004b4a:	9207      	str	r2, [sp, #28]
 8004b4c:	e014      	b.n	8004b78 <_svfiprintf_r+0x114>
 8004b4e:	eba0 0308 	sub.w	r3, r0, r8
 8004b52:	fa09 f303 	lsl.w	r3, r9, r3
 8004b56:	4313      	orrs	r3, r2
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	46a2      	mov	sl, r4
 8004b5c:	e7d2      	b.n	8004b04 <_svfiprintf_r+0xa0>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	1d19      	adds	r1, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	9103      	str	r1, [sp, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfbb      	ittet	lt
 8004b6a:	425b      	neglt	r3, r3
 8004b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b70:	9307      	strge	r3, [sp, #28]
 8004b72:	9307      	strlt	r3, [sp, #28]
 8004b74:	bfb8      	it	lt
 8004b76:	9204      	strlt	r2, [sp, #16]
 8004b78:	7823      	ldrb	r3, [r4, #0]
 8004b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b7c:	d10a      	bne.n	8004b94 <_svfiprintf_r+0x130>
 8004b7e:	7863      	ldrb	r3, [r4, #1]
 8004b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b82:	d132      	bne.n	8004bea <_svfiprintf_r+0x186>
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	1d1a      	adds	r2, r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	9203      	str	r2, [sp, #12]
 8004b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b90:	3402      	adds	r4, #2
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c58 <_svfiprintf_r+0x1f4>
 8004b98:	7821      	ldrb	r1, [r4, #0]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	f7fb fb27 	bl	80001f0 <memchr>
 8004ba2:	b138      	cbz	r0, 8004bb4 <_svfiprintf_r+0x150>
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	eba0 000a 	sub.w	r0, r0, sl
 8004baa:	2240      	movs	r2, #64	@ 0x40
 8004bac:	4082      	lsls	r2, r0
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	3401      	adds	r4, #1
 8004bb2:	9304      	str	r3, [sp, #16]
 8004bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb8:	4824      	ldr	r0, [pc, #144]	@ (8004c4c <_svfiprintf_r+0x1e8>)
 8004bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bbe:	2206      	movs	r2, #6
 8004bc0:	f7fb fb16 	bl	80001f0 <memchr>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d036      	beq.n	8004c36 <_svfiprintf_r+0x1d2>
 8004bc8:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <_svfiprintf_r+0x1ec>)
 8004bca:	bb1b      	cbnz	r3, 8004c14 <_svfiprintf_r+0x1b0>
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	3307      	adds	r3, #7
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	9303      	str	r3, [sp, #12]
 8004bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bda:	4433      	add	r3, r6
 8004bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bde:	e76a      	b.n	8004ab6 <_svfiprintf_r+0x52>
 8004be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be4:	460c      	mov	r4, r1
 8004be6:	2001      	movs	r0, #1
 8004be8:	e7a8      	b.n	8004b3c <_svfiprintf_r+0xd8>
 8004bea:	2300      	movs	r3, #0
 8004bec:	3401      	adds	r4, #1
 8004bee:	9305      	str	r3, [sp, #20]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f04f 0c0a 	mov.w	ip, #10
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bfc:	3a30      	subs	r2, #48	@ 0x30
 8004bfe:	2a09      	cmp	r2, #9
 8004c00:	d903      	bls.n	8004c0a <_svfiprintf_r+0x1a6>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0c6      	beq.n	8004b94 <_svfiprintf_r+0x130>
 8004c06:	9105      	str	r1, [sp, #20]
 8004c08:	e7c4      	b.n	8004b94 <_svfiprintf_r+0x130>
 8004c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c0e:	4604      	mov	r4, r0
 8004c10:	2301      	movs	r3, #1
 8004c12:	e7f0      	b.n	8004bf6 <_svfiprintf_r+0x192>
 8004c14:	ab03      	add	r3, sp, #12
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	462a      	mov	r2, r5
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <_svfiprintf_r+0x1f0>)
 8004c1c:	a904      	add	r1, sp, #16
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f3af 8000 	nop.w
 8004c24:	1c42      	adds	r2, r0, #1
 8004c26:	4606      	mov	r6, r0
 8004c28:	d1d6      	bne.n	8004bd8 <_svfiprintf_r+0x174>
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	065b      	lsls	r3, r3, #25
 8004c2e:	f53f af2d 	bmi.w	8004a8c <_svfiprintf_r+0x28>
 8004c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c34:	e72c      	b.n	8004a90 <_svfiprintf_r+0x2c>
 8004c36:	ab03      	add	r3, sp, #12
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	462a      	mov	r2, r5
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <_svfiprintf_r+0x1f0>)
 8004c3e:	a904      	add	r1, sp, #16
 8004c40:	4638      	mov	r0, r7
 8004c42:	f000 f879 	bl	8004d38 <_printf_i>
 8004c46:	e7ed      	b.n	8004c24 <_svfiprintf_r+0x1c0>
 8004c48:	080050e4 	.word	0x080050e4
 8004c4c:	080050ee 	.word	0x080050ee
 8004c50:	00000000 	.word	0x00000000
 8004c54:	080049ad 	.word	0x080049ad
 8004c58:	080050ea 	.word	0x080050ea

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4698      	mov	r8, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	3b00      	subs	r3, #0
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c8      	blx	r9
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	6922      	ldr	r2, [r4, #16]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	bf02      	ittt	eq
 8004cce:	68e5      	ldreq	r5, [r4, #12]
 8004cd0:	6833      	ldreq	r3, [r6, #0]
 8004cd2:	1aed      	subeq	r5, r5, r3
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c8      	blx	r9
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	@ 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4641      	mov	r1, r8
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c8      	blx	r9
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d40:	2f78      	cmp	r7, #120	@ 0x78
 8004d42:	4691      	mov	r9, r2
 8004d44:	4680      	mov	r8, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	@ 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d2 	beq.w	8004efe <_printf_i+0x1c6>
 8004d5a:	2f58      	cmp	r7, #88	@ 0x58
 8004d5c:	f000 80b9 	beq.w	8004ed2 <_printf_i+0x19a>
 8004d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	@ (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ee5 	.word	0x08004ee5
 8004da8:	08004e0f 	.word	0x08004e0f
 8004dac:	08004e9f 	.word	0x08004e9f
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f07 	.word	0x08004f07
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e0f 	.word	0x08004e0f
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004ea7 	.word	0x08004ea7
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6032      	str	r2, [r6, #0]
 8004dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e09d      	b.n	8004f20 <_printf_i+0x1e8>
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	6031      	str	r1, [r6, #0]
 8004dec:	0606      	lsls	r6, r0, #24
 8004dee:	d501      	bpl.n	8004df4 <_printf_i+0xbc>
 8004df0:	681d      	ldr	r5, [r3, #0]
 8004df2:	e003      	b.n	8004dfc <_printf_i+0xc4>
 8004df4:	0645      	lsls	r5, r0, #25
 8004df6:	d5fb      	bpl.n	8004df0 <_printf_i+0xb8>
 8004df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	da03      	bge.n	8004e08 <_printf_i+0xd0>
 8004e00:	232d      	movs	r3, #45	@ 0x2d
 8004e02:	426d      	negs	r5, r5
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e08:	4859      	ldr	r0, [pc, #356]	@ (8004f70 <_printf_i+0x238>)
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	e011      	b.n	8004e32 <_printf_i+0xfa>
 8004e0e:	6821      	ldr	r1, [r4, #0]
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	0608      	lsls	r0, r1, #24
 8004e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e18:	d402      	bmi.n	8004e20 <_printf_i+0xe8>
 8004e1a:	0649      	lsls	r1, r1, #25
 8004e1c:	bf48      	it	mi
 8004e1e:	b2ad      	uxthmi	r5, r5
 8004e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e22:	4853      	ldr	r0, [pc, #332]	@ (8004f70 <_printf_i+0x238>)
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	bf14      	ite	ne
 8004e28:	230a      	movne	r3, #10
 8004e2a:	2308      	moveq	r3, #8
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e32:	6866      	ldr	r6, [r4, #4]
 8004e34:	60a6      	str	r6, [r4, #8]
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	bfa2      	ittt	ge
 8004e3a:	6821      	ldrge	r1, [r4, #0]
 8004e3c:	f021 0104 	bicge.w	r1, r1, #4
 8004e40:	6021      	strge	r1, [r4, #0]
 8004e42:	b90d      	cbnz	r5, 8004e48 <_printf_i+0x110>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	d04b      	beq.n	8004ee0 <_printf_i+0x1a8>
 8004e48:	4616      	mov	r6, r2
 8004e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e52:	5dc7      	ldrb	r7, [r0, r7]
 8004e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e58:	462f      	mov	r7, r5
 8004e5a:	42bb      	cmp	r3, r7
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	d9f4      	bls.n	8004e4a <_printf_i+0x112>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10b      	bne.n	8004e7c <_printf_i+0x144>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07df      	lsls	r7, r3, #31
 8004e68:	d508      	bpl.n	8004e7c <_printf_i+0x144>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	6861      	ldr	r1, [r4, #4]
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	bfde      	ittt	le
 8004e72:	2330      	movle	r3, #48	@ 0x30
 8004e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e7c:	1b92      	subs	r2, r2, r6
 8004e7e:	6122      	str	r2, [r4, #16]
 8004e80:	f8cd a000 	str.w	sl, [sp]
 8004e84:	464b      	mov	r3, r9
 8004e86:	aa03      	add	r2, sp, #12
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7ff fee6 	bl	8004c5c <_printf_common>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d14a      	bne.n	8004f2a <_printf_i+0x1f2>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	b004      	add	sp, #16
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f043 0320 	orr.w	r3, r3, #32
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	4833      	ldr	r0, [pc, #204]	@ (8004f74 <_printf_i+0x23c>)
 8004ea8:	2778      	movs	r7, #120	@ 0x78
 8004eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6831      	ldr	r1, [r6, #0]
 8004eb2:	061f      	lsls	r7, r3, #24
 8004eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004eb8:	d402      	bmi.n	8004ec0 <_printf_i+0x188>
 8004eba:	065f      	lsls	r7, r3, #25
 8004ebc:	bf48      	it	mi
 8004ebe:	b2ad      	uxthmi	r5, r5
 8004ec0:	6031      	str	r1, [r6, #0]
 8004ec2:	07d9      	lsls	r1, r3, #31
 8004ec4:	bf44      	itt	mi
 8004ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eca:	6023      	strmi	r3, [r4, #0]
 8004ecc:	b11d      	cbz	r5, 8004ed6 <_printf_i+0x19e>
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e7ac      	b.n	8004e2c <_printf_i+0xf4>
 8004ed2:	4827      	ldr	r0, [pc, #156]	@ (8004f70 <_printf_i+0x238>)
 8004ed4:	e7e9      	b.n	8004eaa <_printf_i+0x172>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	f023 0320 	bic.w	r3, r3, #32
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	e7f6      	b.n	8004ece <_printf_i+0x196>
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	e7bd      	b.n	8004e60 <_printf_i+0x128>
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	1d18      	adds	r0, r3, #4
 8004eec:	6030      	str	r0, [r6, #0]
 8004eee:	062e      	lsls	r6, r5, #24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0x1c0>
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0x1c6>
 8004ef8:	0668      	lsls	r0, r5, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0x1bc>
 8004efc:	8019      	strh	r1, [r3, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	4616      	mov	r6, r2
 8004f04:	e7bc      	b.n	8004e80 <_printf_i+0x148>
 8004f06:	6833      	ldr	r3, [r6, #0]
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	6032      	str	r2, [r6, #0]
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7fb f96c 	bl	80001f0 <memchr>
 8004f18:	b108      	cbz	r0, 8004f1e <_printf_i+0x1e6>
 8004f1a:	1b80      	subs	r0, r0, r6
 8004f1c:	6060      	str	r0, [r4, #4]
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f28:	e7aa      	b.n	8004e80 <_printf_i+0x148>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0ad      	beq.n	8004e94 <_printf_i+0x15c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	079b      	lsls	r3, r3, #30
 8004f3c:	d413      	bmi.n	8004f66 <_printf_i+0x22e>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	4298      	cmp	r0, r3
 8004f44:	bfb8      	it	lt
 8004f46:	4618      	movlt	r0, r3
 8004f48:	e7a6      	b.n	8004e98 <_printf_i+0x160>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	47d0      	blx	sl
 8004f54:	3001      	adds	r0, #1
 8004f56:	d09d      	beq.n	8004e94 <_printf_i+0x15c>
 8004f58:	3501      	adds	r5, #1
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9903      	ldr	r1, [sp, #12]
 8004f5e:	1a5b      	subs	r3, r3, r1
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dcf2      	bgt.n	8004f4a <_printf_i+0x212>
 8004f64:	e7eb      	b.n	8004f3e <_printf_i+0x206>
 8004f66:	2500      	movs	r5, #0
 8004f68:	f104 0619 	add.w	r6, r4, #25
 8004f6c:	e7f5      	b.n	8004f5a <_printf_i+0x222>
 8004f6e:	bf00      	nop
 8004f70:	080050f5 	.word	0x080050f5
 8004f74:	08005106 	.word	0x08005106

08004f78 <memmove>:
 8004f78:	4288      	cmp	r0, r1
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	eb01 0402 	add.w	r4, r1, r2
 8004f80:	d902      	bls.n	8004f88 <memmove+0x10>
 8004f82:	4284      	cmp	r4, r0
 8004f84:	4623      	mov	r3, r4
 8004f86:	d807      	bhi.n	8004f98 <memmove+0x20>
 8004f88:	1e43      	subs	r3, r0, #1
 8004f8a:	42a1      	cmp	r1, r4
 8004f8c:	d008      	beq.n	8004fa0 <memmove+0x28>
 8004f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f96:	e7f8      	b.n	8004f8a <memmove+0x12>
 8004f98:	4402      	add	r2, r0
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	428a      	cmp	r2, r1
 8004f9e:	d100      	bne.n	8004fa2 <memmove+0x2a>
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004faa:	e7f7      	b.n	8004f9c <memmove+0x24>

08004fac <_sbrk_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d06      	ldr	r5, [pc, #24]	@ (8004fc8 <_sbrk_r+0x1c>)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	f7fb fe5e 	bl	8000c78 <_sbrk>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_sbrk_r+0x1a>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_sbrk_r+0x1a>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	20000310 	.word	0x20000310

08004fcc <memcpy>:
 8004fcc:	440a      	add	r2, r1
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd4:	d100      	bne.n	8004fd8 <memcpy+0xc>
 8004fd6:	4770      	bx	lr
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	d1f9      	bne.n	8004fda <memcpy+0xe>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <_realloc_r>:
 8004fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fec:	4680      	mov	r8, r0
 8004fee:	4615      	mov	r5, r2
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	b921      	cbnz	r1, 8004ffe <_realloc_r+0x16>
 8004ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	f7ff bc4b 	b.w	8004894 <_malloc_r>
 8004ffe:	b92a      	cbnz	r2, 800500c <_realloc_r+0x24>
 8005000:	f7ff fbdc 	bl	80047bc <_free_r>
 8005004:	2400      	movs	r4, #0
 8005006:	4620      	mov	r0, r4
 8005008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800500c:	f000 f81a 	bl	8005044 <_malloc_usable_size_r>
 8005010:	4285      	cmp	r5, r0
 8005012:	4606      	mov	r6, r0
 8005014:	d802      	bhi.n	800501c <_realloc_r+0x34>
 8005016:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800501a:	d8f4      	bhi.n	8005006 <_realloc_r+0x1e>
 800501c:	4629      	mov	r1, r5
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fc38 	bl	8004894 <_malloc_r>
 8005024:	4607      	mov	r7, r0
 8005026:	2800      	cmp	r0, #0
 8005028:	d0ec      	beq.n	8005004 <_realloc_r+0x1c>
 800502a:	42b5      	cmp	r5, r6
 800502c:	462a      	mov	r2, r5
 800502e:	4621      	mov	r1, r4
 8005030:	bf28      	it	cs
 8005032:	4632      	movcs	r2, r6
 8005034:	f7ff ffca 	bl	8004fcc <memcpy>
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f7ff fbbe 	bl	80047bc <_free_r>
 8005040:	463c      	mov	r4, r7
 8005042:	e7e0      	b.n	8005006 <_realloc_r+0x1e>

08005044 <_malloc_usable_size_r>:
 8005044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005048:	1f18      	subs	r0, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bfbc      	itt	lt
 800504e:	580b      	ldrlt	r3, [r1, r0]
 8005050:	18c0      	addlt	r0, r0, r3
 8005052:	4770      	bx	lr

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
