
LedBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d14  08002d14  00003d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d5c  08002d5c  00003d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d64  08002d64  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d64  08002d64  00003d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d68  08002d68  00003d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002d78  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002d78  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0cc  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001732  00000000  00000000  0000e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000690  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bf7  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a45a  00000000  00000000  00031357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9722  00000000  00000000  0003b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104ed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002238  00000000  00000000  00104f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00107150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cfc 	.word	0x08002cfc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002cfc 	.word	0x08002cfc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 f9fb 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f81f 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f89f 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f86d 	bl	80005b4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int value = HAL_GPIO_ReadPin(Blue_Button_GPIO_Port, Blue_Button_Pin);
 80004da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004de:	480b      	ldr	r0, [pc, #44]	@ (800050c <main+0x48>)
 80004e0:	f000 fccc 	bl	8000e7c <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	607b      	str	r3, [r7, #4]
    /* USER CODE BEGIN 3 */
	  if(value == 0){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d106      	bne.n	80004fc <main+0x38>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2120      	movs	r1, #32
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f6:	f000 fcd9 	bl	8000eac <HAL_GPIO_WritePin>
 80004fa:	e7ee      	b.n	80004da <main+0x16>
	  }
	  else{
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000504:	f000 fcd2 	bl	8000eac <HAL_GPIO_WritePin>
  {
 8000508:	e7e7      	b.n	80004da <main+0x16>
 800050a:	bf00      	nop
 800050c:	48000800 	.word	0x48000800

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	@ 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	@ 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fbbf 	bl	8002ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000536:	f000 fcdf 	bl	8000ef8 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f8ce 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800054c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2340      	movs	r3, #64	@ 0x40
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055e:	230a      	movs	r3, #10
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000562:	2307      	movs	r3, #7
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd16 	bl	8000fa4 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800057e:	f000 f8af 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f916 	bl	80017cc <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a6:	f000 f89b 	bl	80006e0 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3758      	adds	r7, #88	@ 0x58
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <MX_USART2_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f8:	f001 fe6a 	bl	80022d0 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f86d 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a2a      	ldr	r2, [pc, #168]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a1e      	ldr	r2, [pc, #120]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f000 fc0b 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000696:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_GPIO_Init+0xc8>)
 80006ac:	f000 fa6c 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80006b0:	2320      	movs	r3, #32
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f000 fa5d 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000800 	.word	0x48000800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	@ 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0a4      	sub	sp, #144	@ 0x90
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2268      	movs	r2, #104	@ 0x68
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f002 faa4 	bl	8002ca2 <memset>
  if(huart->Instance==USART2)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <HAL_UART_MspInit+0xb0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d13a      	bne.n	80007da <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fa4f 	bl	8001c14 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800077c:	f7ff ffb0 	bl	80006e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000780:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000784:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 8000786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800078a:	6593      	str	r3, [r2, #88]	@ 0x58
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079c:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_UART_MspInit+0xb4>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b0:	230c      	movs	r3, #12
 80007b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c6:	2307      	movs	r3, #7
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d6:	f000 f9d7 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3790      	adds	r7, #144	@ 0x90
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f89b 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <SystemInit+0x20>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000856:	4a05      	ldr	r2, [pc, #20]	@ (800086c <SystemInit+0x20>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000874:	f7ff ffea 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0a      	ldr	r4, [pc, #40]	@ (80008bc <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089e:	f002 fa09 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a2:	f7ff fe0f 	bl	80004c4 <main>

080008a6 <LoopForever>:

LoopForever:
    b LoopForever
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b4:	08002d6c 	.word	0x08002d6c
  ldr r2, =_sbss
 80008b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008bc:	200000b4 	.word	0x200000b4

080008c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_Init+0x3c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <HAL_Init+0x3c>)
 80008d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 f920 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f80f 	bl	8000904 <HAL_InitTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	e001      	b.n	80008f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f2:	f7ff fefb 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_InitTick+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d023      	beq.n	8000960 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_InitTick+0x70>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_InitTick+0x6c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f91d 	bl	8000b6e <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10f      	bne.n	800095a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d809      	bhi.n	8000954 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f8f5 	bl	8000b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_InitTick+0x74>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e007      	b.n	8000964 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e004      	b.n	8000964 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	e001      	b.n	8000964 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	20000000 	.word	0x20000000
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200000b0 	.word	0x200000b0

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000b0 	.word	0x200000b0

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	@ (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	@ 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e154      	b.n	8000e42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8146 	beq.w	8000e3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_GPIO_Init+0x40>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d130      	bne.n	8000c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	f003 0201 	and.w	r2, r3, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d017      	beq.n	8000c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d123      	bne.n	8000cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	220f      	movs	r2, #15
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	6939      	ldr	r1, [r7, #16]
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0203 	and.w	r2, r3, #3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 80a0 	beq.w	8000e3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <HAL_GPIO_Init+0x2d8>)
 8000cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d00:	4a57      	ldr	r2, [pc, #348]	@ (8000e60 <HAL_GPIO_Init+0x2d8>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d08:	4b55      	ldr	r3, [pc, #340]	@ (8000e60 <HAL_GPIO_Init+0x2d8>)
 8000d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d14:	4a53      	ldr	r2, [pc, #332]	@ (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d3e:	d019      	beq.n	8000d74 <HAL_GPIO_Init+0x1ec>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a49      	ldr	r2, [pc, #292]	@ (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1e8>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a48      	ldr	r2, [pc, #288]	@ (8000e6c <HAL_GPIO_Init+0x2e4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a47      	ldr	r2, [pc, #284]	@ (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1e0>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a46      	ldr	r2, [pc, #280]	@ (8000e74 <HAL_GPIO_Init+0x2ec>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1dc>
 8000d60:	2304      	movs	r3, #4
 8000d62:	e008      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d64:	2307      	movs	r3, #7
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d74:	2300      	movs	r3, #0
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d86:	4937      	ldr	r1, [pc, #220]	@ (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d94:	4b38      	ldr	r3, [pc, #224]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000de2:	4a25      	ldr	r2, [pc, #148]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f aea3 	bne.w	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	48001000 	.word	0x48001000
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e001      	b.n	8000e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f06:	d130      	bne.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f14:	d038      	beq.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2232      	movs	r2, #50	@ 0x32
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f3c:	e002      	b.n	8000f44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f50:	d102      	bne.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f2      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f64:	d110      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e00f      	b.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f76:	d007      	beq.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f80:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f000 bc02 	b.w	80017bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fb8:	4b96      	ldr	r3, [pc, #600]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fc2:	4b94      	ldr	r3, [pc, #592]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80e4 	beq.w	80011a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4c>
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	f040 808b 	bne.w	80010fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	f040 8087 	bne.w	80010fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff0:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x64>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e3d9      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4b81      	ldr	r3, [pc, #516]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <HAL_RCC_OscConfig+0x7e>
 8001018:	4b7e      	ldr	r3, [pc, #504]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001020:	e005      	b.n	800102e <HAL_RCC_OscConfig+0x8a>
 8001022:	4b7c      	ldr	r3, [pc, #496]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800102e:	4293      	cmp	r3, r2
 8001030:	d223      	bcs.n	800107a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fd8c 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e3ba      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001046:	4b73      	ldr	r3, [pc, #460]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a72      	ldr	r2, [pc, #456]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b70      	ldr	r3, [pc, #448]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	496d      	ldr	r1, [pc, #436]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001064:	4b6b      	ldr	r3, [pc, #428]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4968      	ldr	r1, [pc, #416]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e025      	b.n	80010c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800107a:	4b66      	ldr	r3, [pc, #408]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a65      	ldr	r2, [pc, #404]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b63      	ldr	r3, [pc, #396]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4960      	ldr	r1, [pc, #384]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001098:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	495b      	ldr	r1, [pc, #364]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd4c 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e37a      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010c6:	f000 fc81 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b51      	ldr	r3, [pc, #324]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	4950      	ldr	r1, [pc, #320]	@ (8001218 <HAL_RCC_OscConfig+0x274>)
 80010d8:	5ccb      	ldrb	r3, [r1, r3]
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	fa22 f303 	lsr.w	r3, r2, r3
 80010e2:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_RCC_OscConfig+0x278>)
 80010e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001220 <HAL_RCC_OscConfig+0x27c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc0a 	bl	8000904 <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d052      	beq.n	80011a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	e35e      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d032      	beq.n	800116c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001106:	4b43      	ldr	r3, [pc, #268]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a42      	ldr	r2, [pc, #264]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc47 	bl	80009a4 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111a:	f7ff fc43 	bl	80009a4 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e347      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a35      	ldr	r2, [pc, #212]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4930      	ldr	r1, [pc, #192]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001156:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	492b      	ldr	r1, [pc, #172]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
 800116a:	e01a      	b.n	80011a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc14 	bl	80009a4 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001180:	f7ff fc10 	bl	80009a4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e314      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x1dc>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d073      	beq.n	8001296 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_OscConfig+0x21c>
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d10e      	bne.n	80011d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d10b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d063      	beq.n	8001294 <HAL_RCC_OscConfig+0x2f0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d15f      	bne.n	8001294 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e2f1      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e0:	d106      	bne.n	80011f0 <HAL_RCC_OscConfig+0x24c>
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e025      	b.n	800123c <HAL_RCC_OscConfig+0x298>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011f8:	d114      	bne.n	8001224 <HAL_RCC_OscConfig+0x280>
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a02      	ldr	r2, [pc, #8]	@ (8001214 <HAL_RCC_OscConfig+0x270>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e013      	b.n	800123c <HAL_RCC_OscConfig+0x298>
 8001214:	40021000 	.word	0x40021000
 8001218:	08002d14 	.word	0x08002d14
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004
 8001224:	4ba0      	ldr	r3, [pc, #640]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a9f      	ldr	r2, [pc, #636]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b9d      	ldr	r3, [pc, #628]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a9c      	ldr	r2, [pc, #624]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fbae 	bl	80009a4 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fbaa 	bl	80009a4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e2ae      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125e:	4b92      	ldr	r3, [pc, #584]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2a8>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fb9a 	bl	80009a4 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fb96 	bl	80009a4 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	@ 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e29a      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001286:	4b88      	ldr	r3, [pc, #544]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x2d0>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d060      	beq.n	8001364 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_OscConfig+0x310>
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	2b0c      	cmp	r3, #12
 80012ac:	d119      	bne.n	80012e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d116      	bne.n	80012e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b4:	4b7c      	ldr	r3, [pc, #496]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_OscConfig+0x328>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e277      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b76      	ldr	r3, [pc, #472]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	4973      	ldr	r1, [pc, #460]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e0:	e040      	b.n	8001364 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d023      	beq.n	8001332 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ea:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fb55 	bl	80009a4 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb51 	bl	80009a4 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e255      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001310:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	495f      	ldr	r1, [pc, #380]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	e018      	b.n	8001364 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a5c      	ldr	r2, [pc, #368]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800133c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fb31 	bl	80009a4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fb2d 	bl	80009a4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e231      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001358:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d03c      	beq.n	80013ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001378:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800137e:	4a4a      	ldr	r2, [pc, #296]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fb0c 	bl	80009a4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fb08 	bl	80009a4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e20c      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a2:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80013a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ef      	beq.n	8001390 <HAL_RCC_OscConfig+0x3ec>
 80013b0:	e01b      	b.n	80013ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b2:	4b3d      	ldr	r3, [pc, #244]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b8:	4a3b      	ldr	r2, [pc, #236]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff faef 	bl	80009a4 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff faeb 	bl	80009a4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1ef      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013dc:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80013de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ef      	bne.n	80013ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80a6 	beq.w	8001544 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10d      	bne.n	8001424 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001412:	6593      	str	r3, [r2, #88]	@ 0x58
 8001414:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001420:	2301      	movs	r3, #1
 8001422:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <HAL_RCC_OscConfig+0x508>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d118      	bne.n	8001462 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <HAL_RCC_OscConfig+0x508>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <HAL_RCC_OscConfig+0x508>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143c:	f7ff fab2 	bl	80009a4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001444:	f7ff faae 	bl	80009a4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1b2      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_RCC_OscConfig+0x508>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_RCC_OscConfig+0x4d8>
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800146c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800147a:	e029      	b.n	80014d0 <HAL_RCC_OscConfig+0x52c>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d115      	bne.n	80014b0 <HAL_RCC_OscConfig+0x50c>
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800148a:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149a:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <HAL_RCC_OscConfig+0x504>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x52c>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000
 80014b0:	4b9a      	ldr	r3, [pc, #616]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014b6:	4a99      	ldr	r2, [pc, #612]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014c0:	4b96      	ldr	r3, [pc, #600]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c6:	4a95      	ldr	r2, [pc, #596]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d016      	beq.n	8001506 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fa64 	bl	80009a4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fa60 	bl	80009a4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e162      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f6:	4b89      	ldr	r3, [pc, #548]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80014f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ed      	beq.n	80014e0 <HAL_RCC_OscConfig+0x53c>
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fa4d 	bl	80009a4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fa49 	bl	80009a4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e14b      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001524:	4b7d      	ldr	r3, [pc, #500]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ed      	bne.n	800150e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b78      	ldr	r3, [pc, #480]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	4a77      	ldr	r2, [pc, #476]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001542:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03c      	beq.n	80015ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01c      	beq.n	8001592 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001558:	4b70      	ldr	r3, [pc, #448]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800155a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800155e:	4a6f      	ldr	r2, [pc, #444]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fa1c 	bl	80009a4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001570:	f7ff fa18 	bl	80009a4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e11c      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001582:	4b66      	ldr	r3, [pc, #408]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ef      	beq.n	8001570 <HAL_RCC_OscConfig+0x5cc>
 8001590:	e01b      	b.n	80015ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001592:	4b62      	ldr	r3, [pc, #392]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001598:	4a60      	ldr	r2, [pc, #384]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff f9ff 	bl	80009a4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015aa:	f7ff f9fb 	bl	80009a4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0ff      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015bc:	4b57      	ldr	r3, [pc, #348]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80015be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ef      	bne.n	80015aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80f3 	beq.w	80017ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d8:	2b02      	cmp	r3, #2
 80015da:	f040 80c9 	bne.w	8001770 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015de:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d12c      	bne.n	800164c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	3b01      	subs	r3, #1
 80015fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d123      	bne.n	800164c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d11b      	bne.n	800164c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d113      	bne.n	800164c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	3b01      	subs	r3, #1
 8001632:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d109      	bne.n	800164c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d06b      	beq.n	8001724 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d062      	beq.n	8001718 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0ac      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001662:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a2d      	ldr	r2, [pc, #180]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800166c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800166e:	f7ff f999 	bl	80009a4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff f995 	bl	80009a4 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e099      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_RCC_OscConfig+0x77c>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016a4:	3a01      	subs	r2, #1
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	4311      	orrs	r1, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016ae:	0212      	lsls	r2, r2, #8
 80016b0:	4311      	orrs	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016b6:	0852      	lsrs	r2, r2, #1
 80016b8:	3a01      	subs	r2, #1
 80016ba:	0552      	lsls	r2, r2, #21
 80016bc:	4311      	orrs	r1, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016c2:	0852      	lsrs	r2, r2, #1
 80016c4:	3a01      	subs	r2, #1
 80016c6:	0652      	lsls	r2, r2, #25
 80016c8:	4311      	orrs	r1, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016ce:	06d2      	lsls	r2, r2, #27
 80016d0:	430a      	orrs	r2, r1
 80016d2:	4912      	ldr	r1, [pc, #72]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e4:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a0c      	ldr	r2, [pc, #48]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f0:	f7ff f958 	bl	80009a4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f954 	bl	80009a4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e058      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	4b04      	ldr	r3, [pc, #16]	@ (800171c <HAL_RCC_OscConfig+0x778>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001716:	e050      	b.n	80017ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e04f      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
 800171c:	40021000 	.word	0x40021000
 8001720:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d144      	bne.n	80017ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001748:	f7ff f92c 	bl	80009a4 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f928 	bl	80009a4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e02c      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x7ac>
 800176e:	e024      	b.n	80017ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d01f      	beq.n	80017b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 800177c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff f90f 	bl	80009a4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f90b 	bl	80009a4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e00f      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4905      	ldr	r1, [pc, #20]	@ (80017c4 <HAL_RCC_OscConfig+0x820>)
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_RCC_OscConfig+0x824>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e001      	b.n	80017ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	feeefffc 	.word	0xfeeefffc

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0e7      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4970      	ldr	r1, [pc, #448]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b6e      	ldr	r3, [pc, #440]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0cf      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001828:	429a      	cmp	r2, r3
 800182a:	d908      	bls.n	800183e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b63      	ldr	r3, [pc, #396]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4960      	ldr	r1, [pc, #384]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04c      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b5a      	ldr	r3, [pc, #360]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d121      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0a6      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e09a      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001882:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e08e      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e086      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4943      	ldr	r1, [pc, #268]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018b4:	f7ff f876 	bl	80009a4 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f872 	bl	80009a4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e06e      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b3a      	ldr	r3, [pc, #232]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d208      	bcs.n	8001912 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	492b      	ldr	r1, [pc, #172]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d210      	bcs.n	8001942 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0207 	bic.w	r2, r3, #7
 8001928:	4923      	ldr	r1, [pc, #140]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e036      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4918      	ldr	r1, [pc, #96]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4910      	ldr	r1, [pc, #64]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001980:	f000 f824 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	490b      	ldr	r1, [pc, #44]	@ (80019c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_ClockConfig+0x1fc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe ffad 	bl	8000904 <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ae:	7afb      	ldrb	r3, [r7, #11]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08002d14 	.word	0x08002d14
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019da:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d121      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d11e      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	e004      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d134      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d003      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xac>
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a74:	617b      	str	r3, [r7, #20]
      break;
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a7a:	617b      	str	r3, [r7, #20]
      break;
 8001a7c:	e002      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	617b      	str	r3, [r7, #20]
      break;
 8001a82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	fb03 f202 	mul.w	r2, r3, r2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	0e5b      	lsrs	r3, r3, #25
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08002d2c 	.word	0x08002d2c
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	007a1200 	.word	0x007a1200

08001ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4904      	ldr	r1, [pc, #16]	@ (8001b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08002d24 	.word	0x08002d24

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b2c:	f7ff ffda 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0adb      	lsrs	r3, r3, #11
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4904      	ldr	r1, [pc, #16]	@ (8001b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08002d24 	.word	0x08002d24

08001b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b60:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff f9b6 	bl	8000edc <HAL_PWREx_GetVoltageRange>
 8001b70:	6178      	str	r0, [r7, #20]
 8001b72:	e014      	b.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff f9a6 	bl	8000edc <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba4:	d10b      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b80      	cmp	r3, #128	@ 0x80
 8001baa:	d919      	bls.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bb0:	d902      	bls.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e013      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e010      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	@ 0x80
 8001bc2:	d902      	bls.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e00a      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d102      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e004      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b70      	cmp	r3, #112	@ 0x70
 8001bda:	d101      	bne.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4909      	ldr	r1, [pc, #36]	@ (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c20:	2300      	movs	r3, #0
 8001c22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d031      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c38:	d01a      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001c3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c3e:	d814      	bhi.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c48:	d10f      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c56:	e00c      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fa44 	bl	80020ec <RCCEx_PLLSAI1_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c68:	e003      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001c6e:	e000      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c78:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	494e      	ldr	r1, [pc, #312]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001c8e:	e001      	b.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 809e 	beq.w	8001dde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ca6:	4b46      	ldr	r3, [pc, #280]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a39      	ldr	r2, [pc, #228]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fe5e 	bl	80009a4 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cea:	e009      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7fe fe5a 	bl	80009a4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d902      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8001cfe:	e005      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ef      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d15a      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01e      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d019      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d3a:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d40:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d50:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d5a:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d016      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fe1a 	bl	80009a4 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	e00b      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe fe16 	bl	80009a4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d902      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	74fb      	strb	r3, [r7, #19]
            break;
 8001d8a:	e006      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ec      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001d9a:	7cfb      	ldrb	r3, [r7, #19]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dae:	4904      	ldr	r1, [pc, #16]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001db6:	e009      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	74bb      	strb	r3, [r7, #18]
 8001dbc:	e006      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dcc:	7c7b      	ldrb	r3, [r7, #17]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a9d      	ldr	r2, [pc, #628]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dea:	4b98      	ldr	r3, [pc, #608]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df0:	f023 0203 	bic.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4994      	ldr	r1, [pc, #592]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e12:	f023 020c 	bic.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	498c      	ldr	r1, [pc, #560]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e2e:	4b87      	ldr	r3, [pc, #540]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	4983      	ldr	r1, [pc, #524]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	497b      	ldr	r1, [pc, #492]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	4972      	ldr	r1, [pc, #456]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e94:	4b6d      	ldr	r3, [pc, #436]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	496a      	ldr	r1, [pc, #424]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ebc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec4:	4961      	ldr	r1, [pc, #388]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee6:	4959      	ldr	r1, [pc, #356]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001efa:	4b54      	ldr	r3, [pc, #336]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	4950      	ldr	r1, [pc, #320]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2a:	4948      	ldr	r1, [pc, #288]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f3e:	4b43      	ldr	r3, [pc, #268]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f44:	f023 0203 	bic.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	493f      	ldr	r1, [pc, #252]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d028      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6e:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a31      	ldr	r2, [pc, #196]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f8a:	60d3      	str	r3, [r2, #12]
 8001f8c:	e011      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f96:	d10c      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f8a4 	bl	80020ec <RCCEx_PLLSAI1_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d028      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	491f      	ldr	r1, [pc, #124]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	60d3      	str	r3, [r2, #12]
 8001fea:	e011      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f875 	bl	80020ec <RCCEx_PLLSAI1_Config>
 8002002:	4603      	mov	r3, r0
 8002004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d02b      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	4908      	ldr	r1, [pc, #32]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800203a:	d109      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a02      	ldr	r2, [pc, #8]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002046:	60d3      	str	r3, [r2, #12]
 8002048:	e014      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002058:	d10c      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	2101      	movs	r1, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f843 	bl	80020ec <RCCEx_PLLSAI1_Config>
 8002066:	4603      	mov	r3, r0
 8002068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01c      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800209e:	d10c      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	2102      	movs	r1, #2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f820 	bl	80020ec <RCCEx_PLLSAI1_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d4:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80020dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000

080020ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020fa:	4b74      	ldr	r3, [pc, #464]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d018      	beq.n	8002138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002106:	4b71      	ldr	r3, [pc, #452]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0203 	and.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d10d      	bne.n	8002132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
       ||
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800211e:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
       ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d047      	beq.n	80021c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e044      	b.n	80021c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d018      	beq.n	8002172 <RCCEx_PLLSAI1_Config+0x86>
 8002140:	2b03      	cmp	r3, #3
 8002142:	d825      	bhi.n	8002190 <RCCEx_PLLSAI1_Config+0xa4>
 8002144:	2b01      	cmp	r3, #1
 8002146:	d002      	beq.n	800214e <RCCEx_PLLSAI1_Config+0x62>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d009      	beq.n	8002160 <RCCEx_PLLSAI1_Config+0x74>
 800214c:	e020      	b.n	8002190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800214e:	4b5f      	ldr	r3, [pc, #380]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11d      	bne.n	8002196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215e:	e01a      	b.n	8002196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002160:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002170:	e013      	b.n	800219a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002172:	4b56      	ldr	r3, [pc, #344]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10f      	bne.n	800219e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800217e:	4b53      	ldr	r3, [pc, #332]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800218e:	e006      	b.n	800219e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e004      	b.n	80021a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002196:	bf00      	nop
 8002198:	e002      	b.n	80021a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800219a:	bf00      	nop
 800219c:	e000      	b.n	80021a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800219e:	bf00      	nop
    }

    if(status == HAL_OK)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021a6:	4b49      	ldr	r3, [pc, #292]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	430b      	orrs	r3, r1
 80021bc:	4943      	ldr	r1, [pc, #268]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d17c      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021c8:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a3f      	ldr	r2, [pc, #252]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d4:	f7fe fbe6 	bl	80009a4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021da:	e009      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021dc:	f7fe fbe2 	bl	80009a4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d902      	bls.n	80021f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	73fb      	strb	r3, [r7, #15]
        break;
 80021ee:	e005      	b.n	80021fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021f0:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ef      	bne.n	80021dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d15f      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d110      	bne.n	800222a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002208:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002210:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6892      	ldr	r2, [r2, #8]
 8002218:	0211      	lsls	r1, r2, #8
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	06d2      	lsls	r2, r2, #27
 8002220:	430a      	orrs	r2, r1
 8002222:	492a      	ldr	r1, [pc, #168]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	610b      	str	r3, [r1, #16]
 8002228:	e027      	b.n	800227a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d112      	bne.n	8002256 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002230:	4b26      	ldr	r3, [pc, #152]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6892      	ldr	r2, [r2, #8]
 8002240:	0211      	lsls	r1, r2, #8
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6912      	ldr	r2, [r2, #16]
 8002246:	0852      	lsrs	r2, r2, #1
 8002248:	3a01      	subs	r2, #1
 800224a:	0552      	lsls	r2, r2, #21
 800224c:	430a      	orrs	r2, r1
 800224e:	491f      	ldr	r1, [pc, #124]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	610b      	str	r3, [r1, #16]
 8002254:	e011      	b.n	800227a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800225e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6892      	ldr	r2, [r2, #8]
 8002266:	0211      	lsls	r1, r2, #8
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6952      	ldr	r2, [r2, #20]
 800226c:	0852      	lsrs	r2, r2, #1
 800226e:	3a01      	subs	r2, #1
 8002270:	0652      	lsls	r2, r2, #25
 8002272:	430a      	orrs	r2, r1
 8002274:	4915      	ldr	r1, [pc, #84]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800227a:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002284:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe fb8d 	bl	80009a4 <HAL_GetTick>
 800228a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800228c:	e009      	b.n	80022a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800228e:	f7fe fb89 	bl	80009a4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d902      	bls.n	80022a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	73fb      	strb	r3, [r7, #15]
          break;
 80022a0:	e005      	b.n	80022ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ef      	beq.n	800228e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4903      	ldr	r1, [pc, #12]	@ (80022cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e040      	b.n	8002364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fa1e 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 faae 	bl	8002878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f825 	bl	800236c <UART_SetConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e01b      	b.n	8002364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800233a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800234a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fb2d 	bl	80029bc <UART_CheckIdleState>
 8002362:	4603      	mov	r3, r0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002370:	b08a      	sub	sp, #40	@ 0x28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4ba5      	ldr	r3, [pc, #660]	@ (8002630 <UART_SetConfig+0x2c4>)
 800239c:	4013      	ands	r3, r2
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a9a      	ldr	r2, [pc, #616]	@ (8002634 <UART_SetConfig+0x2c8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d4:	4313      	orrs	r3, r2
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a91      	ldr	r2, [pc, #580]	@ (8002638 <UART_SetConfig+0x2cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d126      	bne.n	8002444 <UART_SetConfig+0xd8>
 80023f6:	4b91      	ldr	r3, [pc, #580]	@ (800263c <UART_SetConfig+0x2d0>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d81b      	bhi.n	800243c <UART_SetConfig+0xd0>
 8002404:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <UART_SetConfig+0xa0>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	0800241d 	.word	0x0800241d
 8002410:	0800242d 	.word	0x0800242d
 8002414:	08002425 	.word	0x08002425
 8002418:	08002435 	.word	0x08002435
 800241c:	2301      	movs	r3, #1
 800241e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002422:	e0d6      	b.n	80025d2 <UART_SetConfig+0x266>
 8002424:	2302      	movs	r3, #2
 8002426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800242a:	e0d2      	b.n	80025d2 <UART_SetConfig+0x266>
 800242c:	2304      	movs	r3, #4
 800242e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002432:	e0ce      	b.n	80025d2 <UART_SetConfig+0x266>
 8002434:	2308      	movs	r3, #8
 8002436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800243a:	e0ca      	b.n	80025d2 <UART_SetConfig+0x266>
 800243c:	2310      	movs	r3, #16
 800243e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002442:	e0c6      	b.n	80025d2 <UART_SetConfig+0x266>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a7d      	ldr	r2, [pc, #500]	@ (8002640 <UART_SetConfig+0x2d4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d138      	bne.n	80024c0 <UART_SetConfig+0x154>
 800244e:	4b7b      	ldr	r3, [pc, #492]	@ (800263c <UART_SetConfig+0x2d0>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d82d      	bhi.n	80024b8 <UART_SetConfig+0x14c>
 800245c:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <UART_SetConfig+0xf8>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002499 	.word	0x08002499
 8002468:	080024b9 	.word	0x080024b9
 800246c:	080024b9 	.word	0x080024b9
 8002470:	080024b9 	.word	0x080024b9
 8002474:	080024a9 	.word	0x080024a9
 8002478:	080024b9 	.word	0x080024b9
 800247c:	080024b9 	.word	0x080024b9
 8002480:	080024b9 	.word	0x080024b9
 8002484:	080024a1 	.word	0x080024a1
 8002488:	080024b9 	.word	0x080024b9
 800248c:	080024b9 	.word	0x080024b9
 8002490:	080024b9 	.word	0x080024b9
 8002494:	080024b1 	.word	0x080024b1
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800249e:	e098      	b.n	80025d2 <UART_SetConfig+0x266>
 80024a0:	2302      	movs	r3, #2
 80024a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024a6:	e094      	b.n	80025d2 <UART_SetConfig+0x266>
 80024a8:	2304      	movs	r3, #4
 80024aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024ae:	e090      	b.n	80025d2 <UART_SetConfig+0x266>
 80024b0:	2308      	movs	r3, #8
 80024b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024b6:	e08c      	b.n	80025d2 <UART_SetConfig+0x266>
 80024b8:	2310      	movs	r3, #16
 80024ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024be:	e088      	b.n	80025d2 <UART_SetConfig+0x266>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002644 <UART_SetConfig+0x2d8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d125      	bne.n	8002516 <UART_SetConfig+0x1aa>
 80024ca:	4b5c      	ldr	r3, [pc, #368]	@ (800263c <UART_SetConfig+0x2d0>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024d4:	2b30      	cmp	r3, #48	@ 0x30
 80024d6:	d016      	beq.n	8002506 <UART_SetConfig+0x19a>
 80024d8:	2b30      	cmp	r3, #48	@ 0x30
 80024da:	d818      	bhi.n	800250e <UART_SetConfig+0x1a2>
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d00a      	beq.n	80024f6 <UART_SetConfig+0x18a>
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d814      	bhi.n	800250e <UART_SetConfig+0x1a2>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <UART_SetConfig+0x182>
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d008      	beq.n	80024fe <UART_SetConfig+0x192>
 80024ec:	e00f      	b.n	800250e <UART_SetConfig+0x1a2>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024f4:	e06d      	b.n	80025d2 <UART_SetConfig+0x266>
 80024f6:	2302      	movs	r3, #2
 80024f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024fc:	e069      	b.n	80025d2 <UART_SetConfig+0x266>
 80024fe:	2304      	movs	r3, #4
 8002500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002504:	e065      	b.n	80025d2 <UART_SetConfig+0x266>
 8002506:	2308      	movs	r3, #8
 8002508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800250c:	e061      	b.n	80025d2 <UART_SetConfig+0x266>
 800250e:	2310      	movs	r3, #16
 8002510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002514:	e05d      	b.n	80025d2 <UART_SetConfig+0x266>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4b      	ldr	r2, [pc, #300]	@ (8002648 <UART_SetConfig+0x2dc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d125      	bne.n	800256c <UART_SetConfig+0x200>
 8002520:	4b46      	ldr	r3, [pc, #280]	@ (800263c <UART_SetConfig+0x2d0>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800252a:	2bc0      	cmp	r3, #192	@ 0xc0
 800252c:	d016      	beq.n	800255c <UART_SetConfig+0x1f0>
 800252e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002530:	d818      	bhi.n	8002564 <UART_SetConfig+0x1f8>
 8002532:	2b80      	cmp	r3, #128	@ 0x80
 8002534:	d00a      	beq.n	800254c <UART_SetConfig+0x1e0>
 8002536:	2b80      	cmp	r3, #128	@ 0x80
 8002538:	d814      	bhi.n	8002564 <UART_SetConfig+0x1f8>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <UART_SetConfig+0x1d8>
 800253e:	2b40      	cmp	r3, #64	@ 0x40
 8002540:	d008      	beq.n	8002554 <UART_SetConfig+0x1e8>
 8002542:	e00f      	b.n	8002564 <UART_SetConfig+0x1f8>
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800254a:	e042      	b.n	80025d2 <UART_SetConfig+0x266>
 800254c:	2302      	movs	r3, #2
 800254e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002552:	e03e      	b.n	80025d2 <UART_SetConfig+0x266>
 8002554:	2304      	movs	r3, #4
 8002556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800255a:	e03a      	b.n	80025d2 <UART_SetConfig+0x266>
 800255c:	2308      	movs	r3, #8
 800255e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002562:	e036      	b.n	80025d2 <UART_SetConfig+0x266>
 8002564:	2310      	movs	r3, #16
 8002566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800256a:	e032      	b.n	80025d2 <UART_SetConfig+0x266>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a30      	ldr	r2, [pc, #192]	@ (8002634 <UART_SetConfig+0x2c8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d12a      	bne.n	80025cc <UART_SetConfig+0x260>
 8002576:	4b31      	ldr	r3, [pc, #196]	@ (800263c <UART_SetConfig+0x2d0>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002584:	d01a      	beq.n	80025bc <UART_SetConfig+0x250>
 8002586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800258a:	d81b      	bhi.n	80025c4 <UART_SetConfig+0x258>
 800258c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002590:	d00c      	beq.n	80025ac <UART_SetConfig+0x240>
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002596:	d815      	bhi.n	80025c4 <UART_SetConfig+0x258>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <UART_SetConfig+0x238>
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a0:	d008      	beq.n	80025b4 <UART_SetConfig+0x248>
 80025a2:	e00f      	b.n	80025c4 <UART_SetConfig+0x258>
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025aa:	e012      	b.n	80025d2 <UART_SetConfig+0x266>
 80025ac:	2302      	movs	r3, #2
 80025ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025b2:	e00e      	b.n	80025d2 <UART_SetConfig+0x266>
 80025b4:	2304      	movs	r3, #4
 80025b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025ba:	e00a      	b.n	80025d2 <UART_SetConfig+0x266>
 80025bc:	2308      	movs	r3, #8
 80025be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025c2:	e006      	b.n	80025d2 <UART_SetConfig+0x266>
 80025c4:	2310      	movs	r3, #16
 80025c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025ca:	e002      	b.n	80025d2 <UART_SetConfig+0x266>
 80025cc:	2310      	movs	r3, #16
 80025ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <UART_SetConfig+0x2c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 808b 	bne.w	80026f4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d834      	bhi.n	8002650 <UART_SetConfig+0x2e4>
 80025e6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ec <UART_SetConfig+0x280>)
 80025e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ec:	08002611 	.word	0x08002611
 80025f0:	08002651 	.word	0x08002651
 80025f4:	08002619 	.word	0x08002619
 80025f8:	08002651 	.word	0x08002651
 80025fc:	0800261f 	.word	0x0800261f
 8002600:	08002651 	.word	0x08002651
 8002604:	08002651 	.word	0x08002651
 8002608:	08002651 	.word	0x08002651
 800260c:	08002627 	.word	0x08002627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002610:	f7ff fa74 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002614:	61f8      	str	r0, [r7, #28]
        break;
 8002616:	e021      	b.n	800265c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <UART_SetConfig+0x2e0>)
 800261a:	61fb      	str	r3, [r7, #28]
        break;
 800261c:	e01e      	b.n	800265c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800261e:	f7ff f9d5 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002622:	61f8      	str	r0, [r7, #28]
        break;
 8002624:	e01a      	b.n	800265c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800262a:	61fb      	str	r3, [r7, #28]
        break;
 800262c:	e016      	b.n	800265c <UART_SetConfig+0x2f0>
 800262e:	bf00      	nop
 8002630:	efff69f3 	.word	0xefff69f3
 8002634:	40008000 	.word	0x40008000
 8002638:	40013800 	.word	0x40013800
 800263c:	40021000 	.word	0x40021000
 8002640:	40004400 	.word	0x40004400
 8002644:	40004800 	.word	0x40004800
 8002648:	40004c00 	.word	0x40004c00
 800264c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800265a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80fa 	beq.w	8002858 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	429a      	cmp	r2, r3
 8002672:	d305      	bcc.n	8002680 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	429a      	cmp	r2, r3
 800267e:	d903      	bls.n	8002688 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002686:	e0e7      	b.n	8002858 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2200      	movs	r2, #0
 800268c:	461c      	mov	r4, r3
 800268e:	4615      	mov	r5, r2
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	022b      	lsls	r3, r5, #8
 800269a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800269e:	0222      	lsls	r2, r4, #8
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	6849      	ldr	r1, [r1, #4]
 80026a4:	0849      	lsrs	r1, r1, #1
 80026a6:	2000      	movs	r0, #0
 80026a8:	4688      	mov	r8, r1
 80026aa:	4681      	mov	r9, r0
 80026ac:	eb12 0a08 	adds.w	sl, r2, r8
 80026b0:	eb43 0b09 	adc.w	fp, r3, r9
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026c2:	4650      	mov	r0, sl
 80026c4:	4659      	mov	r1, fp
 80026c6:	f7fd fd85 	bl	80001d4 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4613      	mov	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026d8:	d308      	bcc.n	80026ec <UART_SetConfig+0x380>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026e0:	d204      	bcs.n	80026ec <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	e0b5      	b.n	8002858 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80026f2:	e0b1      	b.n	8002858 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fc:	d15d      	bne.n	80027ba <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80026fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002702:	2b08      	cmp	r3, #8
 8002704:	d827      	bhi.n	8002756 <UART_SetConfig+0x3ea>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <UART_SetConfig+0x3a0>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002731 	.word	0x08002731
 8002710:	08002739 	.word	0x08002739
 8002714:	08002741 	.word	0x08002741
 8002718:	08002757 	.word	0x08002757
 800271c:	08002747 	.word	0x08002747
 8002720:	08002757 	.word	0x08002757
 8002724:	08002757 	.word	0x08002757
 8002728:	08002757 	.word	0x08002757
 800272c:	0800274f 	.word	0x0800274f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002730:	f7ff f9e4 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002734:	61f8      	str	r0, [r7, #28]
        break;
 8002736:	e014      	b.n	8002762 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff f9f6 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 800273c:	61f8      	str	r0, [r7, #28]
        break;
 800273e:	e010      	b.n	8002762 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002740:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <UART_SetConfig+0x508>)
 8002742:	61fb      	str	r3, [r7, #28]
        break;
 8002744:	e00d      	b.n	8002762 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002746:	f7ff f941 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800274a:	61f8      	str	r0, [r7, #28]
        break;
 800274c:	e009      	b.n	8002762 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800274e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002752:	61fb      	str	r3, [r7, #28]
        break;
 8002754:	e005      	b.n	8002762 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d077      	beq.n	8002858 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005a      	lsls	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	441a      	add	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d916      	bls.n	80027b2 <UART_SetConfig+0x446>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278a:	d212      	bcs.n	80027b2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f023 030f 	bic.w	r3, r3, #15
 8002794:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	8afa      	ldrh	r2, [r7, #22]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e052      	b.n	8002858 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80027b8:	e04e      	b.n	8002858 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d827      	bhi.n	8002812 <UART_SetConfig+0x4a6>
 80027c2:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <UART_SetConfig+0x45c>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	080027ed 	.word	0x080027ed
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	080027fd 	.word	0x080027fd
 80027d4:	08002813 	.word	0x08002813
 80027d8:	08002803 	.word	0x08002803
 80027dc:	08002813 	.word	0x08002813
 80027e0:	08002813 	.word	0x08002813
 80027e4:	08002813 	.word	0x08002813
 80027e8:	0800280b 	.word	0x0800280b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ec:	f7ff f986 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80027f0:	61f8      	str	r0, [r7, #28]
        break;
 80027f2:	e014      	b.n	800281e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027f4:	f7ff f998 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 80027f8:	61f8      	str	r0, [r7, #28]
        break;
 80027fa:	e010      	b.n	800281e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <UART_SetConfig+0x508>)
 80027fe:	61fb      	str	r3, [r7, #28]
        break;
 8002800:	e00d      	b.n	800281e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002802:	f7ff f8e3 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002806:	61f8      	str	r0, [r7, #28]
        break;
 8002808:	e009      	b.n	800281e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800280e:	61fb      	str	r3, [r7, #28]
        break;
 8002810:	e005      	b.n	800281e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800281c:	bf00      	nop
    }

    if (pclk != 0U)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	085a      	lsrs	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	441a      	add	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	d909      	bls.n	8002852 <UART_SetConfig+0x4e6>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002844:	d205      	bcs.n	8002852 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e002      	b.n	8002858 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002864:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	00f42400 	.word	0x00f42400

08002878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01a      	beq.n	800298e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002976:	d10a      	bne.n	800298e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
  }
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b098      	sub	sp, #96	@ 0x60
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029cc:	f7fd ffea 	bl	80009a4 <HAL_GetTick>
 80029d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d12e      	bne.n	8002a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f88c 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d021      	beq.n	8002a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e6      	bne.n	80029fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e062      	b.n	8002b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d149      	bne.n	8002ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f856 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03c      	beq.n	8002ae0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	623b      	str	r3, [r7, #32]
   return(result);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8c:	e841 2300 	strex	r3, r2, [r1]
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e6      	bne.n	8002a66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ab8:	61fa      	str	r2, [r7, #28]
 8002aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	69b9      	ldr	r1, [r7, #24]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e011      	b.n	8002b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3758      	adds	r7, #88	@ 0x58
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1c:	e049      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d045      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fd ff3d 	bl	80009a4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e048      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d031      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d110      	bne.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f838 	bl	8002bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e029      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b8c:	d111      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f81e 	bl	8002bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0a6      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b095      	sub	sp, #84	@ 0x54
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e6      	bne.n	8002be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3308      	adds	r3, #8
 8002c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e5      	bne.n	8002c14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d118      	bne.n	8002c82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f023 0310 	bic.w	r3, r3, #16
 8002c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6979      	ldr	r1, [r7, #20]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e6      	bne.n	8002c50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c96:	bf00      	nop
 8002c98:	3754      	adds	r7, #84	@ 0x54
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <memset>:
 8002ca2:	4402      	add	r2, r0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d100      	bne.n	8002cac <memset+0xa>
 8002caa:	4770      	bx	lr
 8002cac:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb0:	e7f9      	b.n	8002ca6 <memset+0x4>
	...

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8002cec <__libc_init_array+0x38>)
 8002cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8002cf0 <__libc_init_array+0x3c>)
 8002cba:	1b64      	subs	r4, r4, r5
 8002cbc:	10a4      	asrs	r4, r4, #2
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8002cf4 <__libc_init_array+0x40>)
 8002cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8002cf8 <__libc_init_array+0x44>)
 8002cc8:	f000 f818 	bl	8002cfc <_init>
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002d64 	.word	0x08002d64
 8002cf0:	08002d64 	.word	0x08002d64
 8002cf4:	08002d64 	.word	0x08002d64
 8002cf8:	08002d68 	.word	0x08002d68

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
