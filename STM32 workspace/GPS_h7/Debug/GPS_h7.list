
GPS_h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a48  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007080  08007080  00008080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800708c  0800708c  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08007090  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000035c  24000060  080070f0  00009060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  080070f0  000093bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f074  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e81  00000000  00000000  00018102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a88  00000000  00000000  00019f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000810  00000000  00000000  0001aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032401  00000000  00000000  0001b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ec53  00000000  00000000  0004d621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001438b1  00000000  00000000  0005c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019fb25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033e4  00000000  00000000  0019fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001a2f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08006d00 	.word	0x08006d00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	08006d00 	.word	0x08006d00

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <process_gps_data>:
#include <stdio.h>
#include <stdlib.h>


// Procesado del texto, identificación por líneas
void process_gps_data(char *uart_buffer, GPGGA_Data *data) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0a2      	sub	sp, #136	@ 0x88
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
    char *line;
    char *next_line = uart_buffer;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    char line_buffer[120];  // Asumiendo que ninguna línea excede los 120 caracteres

    while ((line = strtok_r(next_line, "\r\n", &next_line))) {
 80006c0:	e071      	b.n	80007a6 <process_gps_data+0xf6>
        if (strstr(line, "$GPGGA") == line) {  // Verificar si la línea contiene GPGGA
 80006c2:	4943      	ldr	r1, [pc, #268]	@ (80007d0 <process_gps_data+0x120>)
 80006c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80006c8:	f005 fa11 	bl	8005aee <strstr>
 80006cc:	4602      	mov	r2, r0
 80006ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d112      	bne.n	80006fc <process_gps_data+0x4c>
        	snprintf(line_buffer, sizeof(line_buffer), "GPGGA Data received: %s", line);
 80006d6:	f107 0008 	add.w	r0, r7, #8
 80006da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006de:	4a3d      	ldr	r2, [pc, #244]	@ (80007d4 <process_gps_data+0x124>)
 80006e0:	2178      	movs	r1, #120	@ 0x78
 80006e2:	f005 f951 	bl	8005988 <sniprintf>
        	parse_gpgga(line, data);
 80006e6:	6839      	ldr	r1, [r7, #0]
 80006e8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80006ec:	f000 f884 	bl	80007f8 <parse_gpgga>
            print(line_buffer);
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 facb 	bl	8000c90 <print>
 80006fa:	e054      	b.n	80007a6 <process_gps_data+0xf6>
        } else if (strstr(line, "$GPRMC") == line) {  // Verificar si la línea contiene GPRMC
 80006fc:	4936      	ldr	r1, [pc, #216]	@ (80007d8 <process_gps_data+0x128>)
 80006fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000702:	f005 f9f4 	bl	8005aee <strstr>
 8000706:	4602      	mov	r2, r0
 8000708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800070c:	4293      	cmp	r3, r2
 800070e:	d10d      	bne.n	800072c <process_gps_data+0x7c>
            snprintf(line_buffer, sizeof(line_buffer), "GPRMC Data received: %s", line);
 8000710:	f107 0008 	add.w	r0, r7, #8
 8000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000718:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <process_gps_data+0x12c>)
 800071a:	2178      	movs	r1, #120	@ 0x78
 800071c:	f005 f934 	bl	8005988 <sniprintf>
            print(line_buffer);
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fab3 	bl	8000c90 <print>
 800072a:	e03c      	b.n	80007a6 <process_gps_data+0xf6>
        }else if (strstr(line, "$GPGSA") == line) {  // Verificar si la línea contiene GPRMC
 800072c:	492c      	ldr	r1, [pc, #176]	@ (80007e0 <process_gps_data+0x130>)
 800072e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000732:	f005 f9dc 	bl	8005aee <strstr>
 8000736:	4602      	mov	r2, r0
 8000738:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800073c:	4293      	cmp	r3, r2
 800073e:	d10d      	bne.n	800075c <process_gps_data+0xac>
            snprintf(line_buffer, sizeof(line_buffer), "GPGSA Data received: %s", line);
 8000740:	f107 0008 	add.w	r0, r7, #8
 8000744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000748:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <process_gps_data+0x134>)
 800074a:	2178      	movs	r1, #120	@ 0x78
 800074c:	f005 f91c 	bl	8005988 <sniprintf>
            print(line_buffer);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fa9b 	bl	8000c90 <print>
 800075a:	e024      	b.n	80007a6 <process_gps_data+0xf6>
        }else if (strstr(line, "$GPGSV") == line) {  // Verificar si la línea contiene GPRMC
 800075c:	4922      	ldr	r1, [pc, #136]	@ (80007e8 <process_gps_data+0x138>)
 800075e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000762:	f005 f9c4 	bl	8005aee <strstr>
 8000766:	4602      	mov	r2, r0
 8000768:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800076c:	4293      	cmp	r3, r2
 800076e:	d10d      	bne.n	800078c <process_gps_data+0xdc>
            snprintf(line_buffer, sizeof(line_buffer), "GPGSV Data received: %s", line);
 8000770:	f107 0008 	add.w	r0, r7, #8
 8000774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000778:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <process_gps_data+0x13c>)
 800077a:	2178      	movs	r1, #120	@ 0x78
 800077c:	f005 f904 	bl	8005988 <sniprintf>
            print(line_buffer);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fa83 	bl	8000c90 <print>
 800078a:	e00c      	b.n	80007a6 <process_gps_data+0xf6>
        } else {
        	snprintf(line_buffer, sizeof(line_buffer), "Data not identified: %s", line);
 800078c:	f107 0008 	add.w	r0, r7, #8
 8000790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000794:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <process_gps_data+0x140>)
 8000796:	2178      	movs	r1, #120	@ 0x78
 8000798:	f005 f8f6 	bl	8005988 <sniprintf>
        	print(line_buffer);
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fa75 	bl	8000c90 <print>
    while ((line = strtok_r(next_line, "\r\n", &next_line))) {
 80007a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80007aa:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80007ae:	4911      	ldr	r1, [pc, #68]	@ (80007f4 <process_gps_data+0x144>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 f999 	bl	8005ae8 <strtok_r>
 80007b6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 80007ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f47f af7f 	bne.w	80006c2 <process_gps_data+0x12>
        }
    }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3788      	adds	r7, #136	@ 0x88
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08006d18 	.word	0x08006d18
 80007d4:	08006d20 	.word	0x08006d20
 80007d8:	08006d38 	.word	0x08006d38
 80007dc:	08006d40 	.word	0x08006d40
 80007e0:	08006d58 	.word	0x08006d58
 80007e4:	08006d60 	.word	0x08006d60
 80007e8:	08006d78 	.word	0x08006d78
 80007ec:	08006d80 	.word	0x08006d80
 80007f0:	08006d98 	.word	0x08006d98
 80007f4:	08006db0 	.word	0x08006db0

080007f8 <parse_gpgga>:

// Función para parsear la trama GPGGA
void parse_gpgga(char *gpgga_sentence, GPGGA_Data *data) {
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	b0af      	sub	sp, #188	@ 0xbc
 80007fc:	af0a      	add	r7, sp, #40	@ 0x28
 80007fe:	6178      	str	r0, [r7, #20]
 8000800:	6139      	str	r1, [r7, #16]
    // "$GPGGA,202530.00,5109.0262,N,11401.8407,W,5,40,0.5,1097.36,M,-17.00,M,18,TSTR*61"
    // "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f,%c"

    // Utilizamos sscanf para extraer los campos de la trama
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
           data->time, data->latitude, &data->lat_direction, data->longitude,
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	f103 0c0b 	add.w	ip, r3, #11
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	3315      	adds	r3, #21
           data->time, data->latitude, &data->lat_direction, data->longitude,
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	3216      	adds	r2, #22
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
 8000814:	6939      	ldr	r1, [r7, #16]
 8000816:	3121      	adds	r1, #33	@ 0x21
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	6938      	ldr	r0, [r7, #16]
 800081c:	3024      	adds	r0, #36	@ 0x24
 800081e:	693c      	ldr	r4, [r7, #16]
 8000820:	3428      	adds	r4, #40	@ 0x28
 8000822:	693d      	ldr	r5, [r7, #16]
 8000824:	352c      	adds	r5, #44	@ 0x2c
 8000826:	693e      	ldr	r6, [r7, #16]
 8000828:	3634      	adds	r6, #52	@ 0x34
 800082a:	6939      	ldr	r1, [r7, #16]
 800082c:	313c      	adds	r1, #60	@ 0x3c
 800082e:	6079      	str	r1, [r7, #4]
 8000830:	6939      	ldr	r1, [r7, #16]
 8000832:	313d      	adds	r1, #61	@ 0x3d
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	3145      	adds	r1, #69	@ 0x45
 800083a:	9109      	str	r1, [sp, #36]	@ 0x24
 800083c:	6839      	ldr	r1, [r7, #0]
 800083e:	9108      	str	r1, [sp, #32]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	9107      	str	r1, [sp, #28]
 8000844:	9606      	str	r6, [sp, #24]
 8000846:	9505      	str	r5, [sp, #20]
 8000848:	9404      	str	r4, [sp, #16]
 800084a:	9003      	str	r0, [sp, #12]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	9102      	str	r1, [sp, #8]
 8000850:	9201      	str	r2, [sp, #4]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4663      	mov	r3, ip
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4945      	ldr	r1, [pc, #276]	@ (8000970 <parse_gpgga+0x178>)
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f005 f8e8 	bl	8005a30 <siscanf>
           &data->hdop, &data->altitude, &data->altitude_units,
           &data->geoid_height, &data->geoid_units);

    // Se puede poner los siguiente para que lo muestre por terminal

    print(". . .Parsing . . .");
 8000860:	4844      	ldr	r0, [pc, #272]	@ (8000974 <parse_gpgga+0x17c>)
 8000862:	f000 fa15 	bl	8000c90 <print>
    char print_buffer[120];
    snprintf(print_buffer, sizeof(print_buffer), "Time: %s", data->time);
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	f107 0018 	add.w	r0, r7, #24
 800086c:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <parse_gpgga+0x180>)
 800086e:	2178      	movs	r1, #120	@ 0x78
 8000870:	f005 f88a 	bl	8005988 <sniprintf>
    print(print_buffer);
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fa09 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Latitude: %s %c", data->latitude, data->lat_direction);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	f103 020b 	add.w	r2, r3, #11
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	7d5b      	ldrb	r3, [r3, #21]
 8000888:	f107 0018 	add.w	r0, r7, #24
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4613      	mov	r3, r2
 8000890:	4a3a      	ldr	r2, [pc, #232]	@ (800097c <parse_gpgga+0x184>)
 8000892:	2178      	movs	r1, #120	@ 0x78
 8000894:	f005 f878 	bl	8005988 <sniprintf>
    print(print_buffer);
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f9f7 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Longitude: %s %c", data->longitude, data->lon_direction);
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	f103 0216 	add.w	r2, r3, #22
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80008ae:	f107 0018 	add.w	r0, r7, #24
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4613      	mov	r3, r2
 80008b6:	4a32      	ldr	r2, [pc, #200]	@ (8000980 <parse_gpgga+0x188>)
 80008b8:	2178      	movs	r1, #120	@ 0x78
 80008ba:	f005 f865 	bl	8005988 <sniprintf>
    print(print_buffer);
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f9e4 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Fix Quality: %d", data->fix_quality);
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008cc:	f107 0018 	add.w	r0, r7, #24
 80008d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000984 <parse_gpgga+0x18c>)
 80008d2:	2178      	movs	r1, #120	@ 0x78
 80008d4:	f005 f858 	bl	8005988 <sniprintf>
    print(print_buffer);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f9d7 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Satellites: %d", data->satellites);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008e6:	f107 0018 	add.w	r0, r7, #24
 80008ea:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <parse_gpgga+0x190>)
 80008ec:	2178      	movs	r1, #120	@ 0x78
 80008ee:	f005 f84b 	bl	8005988 <sniprintf>
    print(print_buffer);
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f9ca 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "HDOP: %s", data->hdop);
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	332c      	adds	r3, #44	@ 0x2c
 8000900:	f107 0018 	add.w	r0, r7, #24
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <parse_gpgga+0x194>)
 8000906:	2178      	movs	r1, #120	@ 0x78
 8000908:	f005 f83e 	bl	8005988 <sniprintf>
    print(print_buffer);
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f9bd 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Altitude: %s %c", data->altitude, data->altitude_units);
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000922:	f107 0018 	add.w	r0, r7, #24
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	4613      	mov	r3, r2
 800092a:	4a19      	ldr	r2, [pc, #100]	@ (8000990 <parse_gpgga+0x198>)
 800092c:	2178      	movs	r1, #120	@ 0x78
 800092e:	f005 f82b 	bl	8005988 <sniprintf>
    print(print_buffer);
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f9aa 	bl	8000c90 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Geoid Height: %s %c", data->geoid_height, data->geoid_units);
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	f103 023d 	add.w	r2, r3, #61	@ 0x3d
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000948:	f107 0018 	add.w	r0, r7, #24
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <parse_gpgga+0x19c>)
 8000952:	2178      	movs	r1, #120	@ 0x78
 8000954:	f005 f818 	bl	8005988 <sniprintf>
    print(print_buffer);
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f997 	bl	8000c90 <print>
    print(". . . Finish parsing . . . ");
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <parse_gpgga+0x1a0>)
 8000964:	f000 f994 	bl	8000c90 <print>

}
 8000968:	bf00      	nop
 800096a:	3794      	adds	r7, #148	@ 0x94
 800096c:	46bd      	mov	sp, r7
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	08006db4 	.word	0x08006db4
 8000974:	08006df4 	.word	0x08006df4
 8000978:	08006e08 	.word	0x08006e08
 800097c:	08006e14 	.word	0x08006e14
 8000980:	08006e24 	.word	0x08006e24
 8000984:	08006e38 	.word	0x08006e38
 8000988:	08006e48 	.word	0x08006e48
 800098c:	08006e58 	.word	0x08006e58
 8000990:	08006e64 	.word	0x08006e64
 8000994:	08006e74 	.word	0x08006e74
 8000998:	08006e88 	.word	0x08006e88

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009a2:	f000 f993 	bl	8000ccc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f000 fb9d 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f841 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 f945 	bl	8000c3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009b2:	f000 f8ab 	bl	8000b0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009b6:	f000 f8f5 	bl	8000ba4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  print(". . . . . .");
 80009ba:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <main+0x80>)
 80009bc:	f000 f968 	bl	8000c90 <print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_GPIO_Init();
 80009c0:	f000 f93c 	bl	8000c3c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80009c4:	f000 f8a2 	bl	8000b0c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80009c8:	f000 f8ec 	bl	8000ba4 <MX_USART2_UART_Init>
	memset(uart_gps, 0, sizeof(uart_gps));  // Limpiar buffer antes de recibir datos
 80009cc:	2264      	movs	r2, #100	@ 0x64
 80009ce:	2100      	movs	r1, #0
 80009d0:	4813      	ldr	r0, [pc, #76]	@ (8000a20 <main+0x84>)
 80009d2:	f005 f859 	bl	8005a88 <memset>
	HAL_StatusTypeDef result = HAL_UART_Receive(&huart1, (uint8_t*) uart_gps, sizeof(uart_gps) - 1, 1000);  // Intentar recibir datos
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	2263      	movs	r2, #99	@ 0x63
 80009dc:	4910      	ldr	r1, [pc, #64]	@ (8000a20 <main+0x84>)
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <main+0x88>)
 80009e0:	f003 fd7a 	bl	80044d8 <HAL_UART_Receive>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (result == HAL_OK) {
 80009ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10c      	bne.n	8000a0c <main+0x70>
		uart_gps[sizeof(uart_gps) - 1] = '\0';  // Asegurar terminación nula
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <main+0x84>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
		print("Data received:");
 80009fa:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <main+0x8c>)
 80009fc:	f000 f948 	bl	8000c90 <print>
		GPGGA_Data data;
		process_gps_data(uart_gps, &data);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <main+0x84>)
 8000a06:	f7ff fe53 	bl	80006b0 <process_gps_data>
 8000a0a:	e002      	b.n	8000a12 <main+0x76>
		// ahora en data tienes los datos de GPGGA, que son los importantes
		// cuando el gps devuelve el string gpgga sin apenas datos aparecen resultados sin sentido en data
		//print(uart_gps);  // Opcional: Imprimir todos los datos recibidos
	} else {
		print("No data received or error occurred");
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <main+0x90>)
 8000a0e:	f000 f93f 	bl	8000c90 <print>
	}
	HAL_Delay(2000);
 8000a12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a16:	f000 fbf7 	bl	8001208 <HAL_Delay>
  {
 8000a1a:	e7d1      	b.n	80009c0 <main+0x24>
 8000a1c:	08006ea4 	.word	0x08006ea4
 8000a20:	24000208 	.word	0x24000208
 8000a24:	2400007c 	.word	0x2400007c
 8000a28:	08006eb0 	.word	0x08006eb0
 8000a2c:	08006ec0 	.word	0x08006ec0

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	@ 0x70
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	224c      	movs	r2, #76	@ 0x4c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f822 	bl	8005a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2220      	movs	r2, #32
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 f81c 	bl	8005a88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f000 ff01 	bl	8001858 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <SystemClock_Config+0xd8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b08 <SystemClock_Config+0xd8>)
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <SystemClock_Config+0xd8>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a72:	bf00      	nop
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <SystemClock_Config+0xd8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a80:	d1f8      	bne.n	8000a74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000a98:	232c      	movs	r3, #44	@ 0x2c
 8000a9a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 ff07 	bl	80018cc <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac4:	f000 f92e 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	233f      	movs	r3, #63	@ 0x3f
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000adc:	2340      	movs	r3, #64	@ 0x40
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae6:	2340      	movs	r3, #64	@ 0x40
 8000ae8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2103      	movs	r1, #3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fac6 	bl	8002080 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000afa:	f000 f913 	bl	8000d24 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3770      	adds	r7, #112	@ 0x70
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58024800 	.word	0x58024800

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <MX_USART1_UART_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b56:	f003 fbe1 	bl	800431c <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f8e0 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b68:	f004 fe43 	bl	80057f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 f8d7 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b7a:	f004 fe78 	bl	800586e <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 f8ce 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_USART1_UART_Init+0x90>)
 8000b8a:	f004 fdf9 	bl	8005780 <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f8c6 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2400007c 	.word	0x2400007c
 8000ba0:	40011000 	.word	0x40011000

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	@ (8000c38 <MX_USART2_UART_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000bee:	f003 fb95 	bl	800431c <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f894 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000c00:	f004 fdf7 	bl	80057f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 f88b 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000c12:	f004 fe2c 	bl	800586e <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 f882 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_USART2_UART_Init+0x90>)
 8000c22:	f004 fdad 	bl	8005780 <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 f87a 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24000110 	.word	0x24000110
 8000c38:	40004400 	.word	0x40004400

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	4a09      	ldr	r2, [pc, #36]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_GPIO_Init+0x50>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400

08000c90 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s\r\n", uart_buffer);
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4909      	ldr	r1, [pc, #36]	@ (8000cc0 <print+0x30>)
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <print+0x34>)
 8000c9e:	f004 fea7 	bl	80059f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <print+0x34>)
 8000ca4:	f7ff fb34 	bl	8000310 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <print+0x34>)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <print+0x38>)
 8000cb4:	f003 fb82 	bl	80043bc <HAL_UART_Transmit>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08006ee4 	.word	0x08006ee4
 8000cc4:	240001a4 	.word	0x240001a4
 8000cc8:	24000110 	.word	0x24000110

08000ccc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cde:	f000 fb9b 	bl	8001418 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cee:	231f      	movs	r3, #31
 8000cf0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cf2:	2387      	movs	r3, #135	@ 0x87
 8000cf4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fbb9 	bl	8001488 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d16:	2004      	movs	r0, #4
 8000d18:	f000 fb96 	bl	8001448 <HAL_MPU_Enable>

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_MspInit+0x30>)
 8000d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	58024400 	.word	0x58024400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ba      	sub	sp, #232	@ 0xe8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	22b8      	movs	r2, #184	@ 0xb8
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 fe7f 	bl	8005a88 <memset>
  if(huart->Instance==USART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec4 <HAL_UART_MspInit+0x160>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d147      	bne.n	8000e24 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d94:	f04f 0201 	mov.w	r2, #1
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fcf4 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000db6:	f7ff ffb5 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dba:	4b43      	ldr	r3, [pc, #268]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dc0:	4a41      	ldr	r2, [pc, #260]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dca:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000df6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482b      	ldr	r0, [pc, #172]	@ (8000ecc <HAL_UART_MspInit+0x168>)
 8000e1e:	f000 fb73 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e22:	e04a      	b.n	8000eba <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a29      	ldr	r2, [pc, #164]	@ (8000ed0 <HAL_UART_MspInit+0x16c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d145      	bne.n	8000eba <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2e:	f04f 0202 	mov.w	r2, #2
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fca7 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000e50:	f7ff ff68 	bl	8000d24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_UART_MspInit+0x164>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <HAL_UART_MspInit+0x168>)
 8000eb6:	f000 fb27 	bl	8001508 <HAL_GPIO_Init>
}
 8000eba:	bf00      	nop
 8000ebc:	37e8      	adds	r7, #232	@ 0xe8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f94d 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f004 fdda 	bl	8005b1c <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	24050000 	.word	0x24050000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	2400026c 	.word	0x2400026c
 8000f9c:	240003c0 	.word	0x240003c0

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <SystemInit+0xd0>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a31      	ldr	r2, [pc, #196]	@ (8001070 <SystemInit+0xd0>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <SystemInit+0xd4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d807      	bhi.n	8000fd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <SystemInit+0xd4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 030f 	bic.w	r3, r3, #15
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001074 <SystemInit+0xd4>)
 8000fca:	f043 0307 	orr.w	r3, r3, #7
 8000fce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <SystemInit+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a28      	ldr	r2, [pc, #160]	@ (8001078 <SystemInit+0xd8>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <SystemInit+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <SystemInit+0xd8>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4924      	ldr	r1, [pc, #144]	@ (8001078 <SystemInit+0xd8>)
 8000fe8:	4b24      	ldr	r3, [pc, #144]	@ (800107c <SystemInit+0xdc>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fee:	4b21      	ldr	r3, [pc, #132]	@ (8001074 <SystemInit+0xd4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <SystemInit+0xd4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <SystemInit+0xd4>)
 8001004:	f043 0307 	orr.w	r3, r3, #7
 8001008:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <SystemInit+0xd8>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <SystemInit+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <SystemInit+0xd8>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800101c:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <SystemInit+0xd8>)
 800101e:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <SystemInit+0xe0>)
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <SystemInit+0xd8>)
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <SystemInit+0xe4>)
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <SystemInit+0xd8>)
 800102a:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <SystemInit+0xe8>)
 800102c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <SystemInit+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001034:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <SystemInit+0xd8>)
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <SystemInit+0xe8>)
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <SystemInit+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <SystemInit+0xd8>)
 8001042:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <SystemInit+0xe8>)
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <SystemInit+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <SystemInit+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <SystemInit+0xd8>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001056:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <SystemInit+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <SystemInit+0xec>)
 8001060:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001064:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	52002000 	.word	0x52002000
 8001078:	58024400 	.word	0x58024400
 800107c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001080:	02020200 	.word	0x02020200
 8001084:	01ff0000 	.word	0x01ff0000
 8001088:	01010280 	.word	0x01010280
 800108c:	52004000 	.word	0x52004000

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff ff84 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f004 fd33 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fc6b 	bl	800099c <main>
  bx  lr
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80010d4:	08007090 	.word	0x08007090
  ldr r2, =_sbss
 80010d8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80010dc:	240003bc 	.word	0x240003bc

080010e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC3_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f962 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f0:	f001 f97c 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80010f4:	4602      	mov	r2, r0
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_Init+0x68>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	4913      	ldr	r1, [pc, #76]	@ (8001150 <HAL_Init+0x6c>)
 8001102:	5ccb      	ldrb	r3, [r1, r3]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_Init+0x68>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_Init+0x6c>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_Init+0x70>)
 8001126:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_Init+0x74>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	200f      	movs	r0, #15
 8001130:	f000 f814 	bl	800115c <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e002      	b.n	8001144 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800113e:	f7ff fdf7 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58024400 	.word	0x58024400
 8001150:	08006ef8 	.word	0x08006ef8
 8001154:	24000004 	.word	0x24000004
 8001158:	24000000 	.word	0x24000000

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_InitTick+0x60>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e021      	b.n	80011b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_InitTick+0x64>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f939 	bl	80013fe <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f911 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <HAL_InitTick+0x68>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2400000c 	.word	0x2400000c
 80011c0:	24000000 	.word	0x24000000
 80011c4:	24000008 	.word	0x24000008

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	24000270 	.word	0x24000270

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	24000270 	.word	0x24000270

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2400000c 	.word	0x2400000c

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	@ (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff47 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb2 	bl	8001370 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800141c:	f3bf 8f5f 	dmb	sy
}
 8001420:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_MPU_Disable+0x28>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <HAL_MPU_Disable+0x28>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_MPU_Disable+0x2c>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	e000ed90 	.word	0xe000ed90

08001448 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_MPU_Enable+0x38>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_MPU_Enable+0x3c>)
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <HAL_MPU_Enable+0x3c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001464:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001466:	f3bf 8f4f 	dsb	sy
}
 800146a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146c:	f3bf 8f6f 	isb	sy
}
 8001470:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed90 	.word	0xe000ed90
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	785a      	ldrb	r2, [r3, #1]
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <HAL_MPU_ConfigRegion+0x7c>)
 8001496:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_MPU_ConfigRegion+0x7c>)
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <HAL_MPU_ConfigRegion+0x7c>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014a4:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_MPU_ConfigRegion+0x7c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7adb      	ldrb	r3, [r3, #11]
 80014b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7a9b      	ldrb	r3, [r3, #10]
 80014be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7b5b      	ldrb	r3, [r3, #13]
 80014c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7b9b      	ldrb	r3, [r3, #14]
 80014ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7bdb      	ldrb	r3, [r3, #15]
 80014d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7a5b      	ldrb	r3, [r3, #9]
 80014de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7a1b      	ldrb	r3, [r3, #8]
 80014e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f0:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	6113      	str	r3, [r2, #16]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed90 	.word	0xe000ed90

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001516:	4b86      	ldr	r3, [pc, #536]	@ (8001730 <HAL_GPIO_Init+0x228>)
 8001518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800151a:	e18c      	b.n	8001836 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 817e 	beq.w	8001830 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d005      	beq.n	800154c <HAL_GPIO_Init+0x44>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d130      	bne.n	80015ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001582:	2201      	movs	r2, #1
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 0201 	and.w	r2, r3, #1
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d017      	beq.n	80015ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d123      	bne.n	800163e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	69b9      	ldr	r1, [r7, #24]
 800163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0203 	and.w	r2, r3, #3
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80d8 	beq.w	8001830 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <HAL_GPIO_Init+0x22c>)
 8001682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001686:	4a2b      	ldr	r2, [pc, #172]	@ (8001734 <HAL_GPIO_Init+0x22c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <HAL_GPIO_Init+0x22c>)
 8001692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a26      	ldr	r2, [pc, #152]	@ (8001738 <HAL_GPIO_Init+0x230>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x234>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d04a      	beq.n	8001760 <HAL_GPIO_Init+0x258>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <HAL_GPIO_Init+0x238>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x23c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001748 <HAL_GPIO_Init+0x240>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x244>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <HAL_GPIO_Init+0x248>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_GPIO_Init+0x24c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_GPIO_Init+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x20a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a15      	ldr	r2, [pc, #84]	@ (800175c <HAL_GPIO_Init+0x254>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x206>
 800170a:	2309      	movs	r3, #9
 800170c:	e029      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 800170e:	230a      	movs	r3, #10
 8001710:	e027      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 8001712:	2307      	movs	r3, #7
 8001714:	e025      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 8001716:	2306      	movs	r3, #6
 8001718:	e023      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 800171a:	2305      	movs	r3, #5
 800171c:	e021      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 800171e:	2304      	movs	r3, #4
 8001720:	e01f      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 8001722:	2303      	movs	r3, #3
 8001724:	e01d      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 8001726:	2302      	movs	r3, #2
 8001728:	e01b      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 800172a:	2301      	movs	r3, #1
 800172c:	e019      	b.n	8001762 <HAL_GPIO_Init+0x25a>
 800172e:	bf00      	nop
 8001730:	58000080 	.word	0x58000080
 8001734:	58024400 	.word	0x58024400
 8001738:	58000400 	.word	0x58000400
 800173c:	58020000 	.word	0x58020000
 8001740:	58020400 	.word	0x58020400
 8001744:	58020800 	.word	0x58020800
 8001748:	58020c00 	.word	0x58020c00
 800174c:	58021000 	.word	0x58021000
 8001750:	58021400 	.word	0x58021400
 8001754:	58021800 	.word	0x58021800
 8001758:	58021c00 	.word	0x58021c00
 800175c:	58022400 	.word	0x58022400
 8001760:	2300      	movs	r3, #0
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001772:	4938      	ldr	r1, [pc, #224]	@ (8001854 <HAL_GPIO_Init+0x34c>)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f ae6b 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3724      	adds	r7, #36	@ 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	58000400 	.word	0x58000400

08001858 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00a      	beq.n	8001882 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_PWREx_ConfigSupply+0x70>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e01f      	b.n	80018be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e01d      	b.n	80018be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_PWREx_ConfigSupply+0x70>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	490f      	ldr	r1, [pc, #60]	@ (80018c8 <HAL_PWREx_ConfigSupply+0x70>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001892:	f7ff fcad 	bl	80011f0 <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001898:	e009      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800189a:	f7ff fca9 	bl	80011f0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018a8:	d901      	bls.n	80018ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e007      	b.n	80018be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_PWREx_ConfigSupply+0x70>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ba:	d1ee      	bne.n	800189a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024800 	.word	0x58024800

080018cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	@ 0x30
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e3c8      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f6:	4b86      	ldr	r3, [pc, #536]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d007      	beq.n	8001912 <HAL_RCC_OscConfig+0x46>
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	2b18      	cmp	r3, #24
 8001906:	d110      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
 8001908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d10b      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x12c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d168      	bne.n	80019f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e3a2      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x76>
 8001934:	4b76      	ldr	r3, [pc, #472]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a75      	ldr	r2, [pc, #468]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b71      	ldr	r3, [pc, #452]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a70      	ldr	r2, [pc, #448]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b6e      	ldr	r3, [pc, #440]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6d      	ldr	r2, [pc, #436]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xbc>
 800196e:	4b68      	ldr	r3, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a67      	ldr	r2, [pc, #412]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b65      	ldr	r3, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a64      	ldr	r2, [pc, #400]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001988:	4b61      	ldr	r3, [pc, #388]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a60      	ldr	r2, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b5e      	ldr	r3, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5d      	ldr	r2, [pc, #372]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc22 	bl	80011f0 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fc1e 	bl	80011f0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	@ 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e356      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c2:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe4>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc0e 	bl	80011f0 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fc0a 	bl	80011f0 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	@ 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e342      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ea:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x10c>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 808c 	beq.w	8001b20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a08:	4b41      	ldr	r3, [pc, #260]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a12:	4b3f      	ldr	r3, [pc, #252]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_RCC_OscConfig+0x162>
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2b18      	cmp	r3, #24
 8001a22:	d137      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1c8>
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d132      	bne.n	8001a94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x17a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e314      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a46:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0219 	bic.w	r2, r3, #25
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	492f      	ldr	r1, [pc, #188]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbca 	bl	80011f0 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbc6 	bl	80011f0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e2fe      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	4920      	ldr	r1, [pc, #128]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a92:	e045      	b.n	8001b20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d026      	beq.n	8001aea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0219 	bic.w	r2, r3, #25
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4919      	ldr	r1, [pc, #100]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fb9f 	bl	80011f0 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fb9b 	bl	80011f0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e2d3      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	490b      	ldr	r1, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e01a      	b.n	8001b20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_RCC_OscConfig+0x244>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb7b 	bl	80011f0 <HAL_GetTick>
 8001afa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb77 	bl	80011f0 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d903      	bls.n	8001b14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e2af      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
 8001b10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b14:	4b96      	ldr	r3, [pc, #600]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d06a      	beq.n	8001c02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2c:	4b90      	ldr	r3, [pc, #576]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b36:	4b8e      	ldr	r3, [pc, #568]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d007      	beq.n	8001b52 <HAL_RCC_OscConfig+0x286>
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b18      	cmp	r3, #24
 8001b46:	d11b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b52:	4b87      	ldr	r3, [pc, #540]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x29e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2b80      	cmp	r3, #128	@ 0x80
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e282      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b6a:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	497d      	ldr	r1, [pc, #500]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7e:	e040      	b.n	8001c02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b88:	4b79      	ldr	r3, [pc, #484]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a78      	ldr	r2, [pc, #480]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb2c 	bl	80011f0 <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fb28 	bl	80011f0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e260      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	4969      	ldr	r1, [pc, #420]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60cb      	str	r3, [r1, #12]
 8001bce:	e018      	b.n	8001c02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bd0:	4b67      	ldr	r3, [pc, #412]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a66      	ldr	r2, [pc, #408]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb08 	bl	80011f0 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001be4:	f7ff fb04 	bl	80011f0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e23c      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d036      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b56      	ldr	r3, [pc, #344]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1a:	4a55      	ldr	r2, [pc, #340]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff fae5 	bl	80011f0 <HAL_GetTick>
 8001c26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fae1 	bl	80011f0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e219      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x35e>
 8001c48:	e018      	b.n	8001c7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff facb 	bl	80011f0 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fac7 	bl	80011f0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1ff      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c70:	4b3f      	ldr	r3, [pc, #252]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d036      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d019      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c90:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a36      	ldr	r2, [pc, #216]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001c96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff faa8 	bl	80011f0 <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca4:	f7ff faa4 	bl	80011f0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1dc      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3d8>
 8001cc2:	e018      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a29      	ldr	r2, [pc, #164]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa8e 	bl	80011f0 <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd8:	f7ff fa8a 	bl	80011f0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1c2      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8086 	beq.w	8001e10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <HAL_RCC_OscConfig+0x4a8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_RCC_OscConfig+0x4a8>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d10:	f7ff fa6e 	bl	80011f0 <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d18:	f7ff fa6a 	bl	80011f0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	@ 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1a2      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d2a:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_RCC_OscConfig+0x4a8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x480>
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4ac>
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d64:	4a02      	ldr	r2, [pc, #8]	@ (8001d70 <HAL_RCC_OscConfig+0x4a4>)
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6c:	e021      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e6>
 8001d6e:	bf00      	nop
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58024800 	.word	0x58024800
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4ce>
 8001d80:	4b83      	ldr	r3, [pc, #524]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a82      	ldr	r2, [pc, #520]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8c:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d90:	4a7f      	ldr	r2, [pc, #508]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e6>
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	4a79      	ldr	r2, [pc, #484]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa19 	bl	80011f0 <HAL_GetTick>
 8001dbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fa15 	bl	80011f0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e14b      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4f6>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff fa03 	bl	80011f0 <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f9ff 	bl	80011f0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e135      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e04:	4b62      	ldr	r3, [pc, #392]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 812a 	beq.w	800206e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e22:	2b18      	cmp	r3, #24
 8001e24:	f000 80ba 	beq.w	8001f9c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	f040 8095 	bne.w	8001f5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b57      	ldr	r3, [pc, #348]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f9d7 	bl	80011f0 <HAL_GetTick>
 8001e42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f9d3 	bl	80011f0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e10b      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e58:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e68:	4b4a      	ldr	r3, [pc, #296]	@ (8001f94 <HAL_RCC_OscConfig+0x6c8>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	430a      	orrs	r2, r1
 8001e78:	4945      	ldr	r1, [pc, #276]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001eae:	4938      	ldr	r1, [pc, #224]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	4a35      	ldr	r2, [pc, #212]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ec0:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec4:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <HAL_RCC_OscConfig+0x6cc>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ecc:	00d2      	lsls	r2, r2, #3
 8001ece:	4930      	ldr	r1, [pc, #192]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f023 020c 	bic.w	r2, r3, #12
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	492b      	ldr	r1, [pc, #172]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	f023 0202 	bic.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4927      	ldr	r1, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ef8:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	4a24      	ldr	r2, [pc, #144]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7ff f95c 	bl	80011f0 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f958 	bl	80011f0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e090      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x670>
 8001f5a:	e088      	b.n	800206e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f942 	bl	80011f0 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f93e 	bl	80011f0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e076      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f82:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_RCC_OscConfig+0x6c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x6a4>
 8001f8e:	e06e      	b.n	800206e <HAL_RCC_OscConfig+0x7a2>
 8001f90:	58024400 	.word	0x58024400
 8001f94:	fffffc0c 	.word	0xfffffc0c
 8001f98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d031      	beq.n	8002014 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d12a      	bne.n	8002014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d122      	bne.n	8002014 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11a      	bne.n	8002014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0a5b      	lsrs	r3, r3, #9
 8001fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d111      	bne.n	8002014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e02b      	b.n	8002070 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002022:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	429a      	cmp	r2, r3
 800202c:	d01f      	beq.n	800206e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800203a:	f7ff f8d9 	bl	80011f0 <HAL_GetTick>
 800203e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002040:	bf00      	nop
 8002042:	f7ff f8d5 	bl	80011f0 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	4293      	cmp	r3, r2
 800204c:	d0f9      	beq.n	8002042 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_RCC_OscConfig+0x7b0>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205a:	00d2      	lsls	r2, r2, #3
 800205c:	4906      	ldr	r1, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <HAL_RCC_OscConfig+0x7ac>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3730      	adds	r7, #48	@ 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	ffff0007 	.word	0xffff0007

08002080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e19c      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b8a      	ldr	r3, [pc, #552]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b87      	ldr	r3, [pc, #540]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4985      	ldr	r1, [pc, #532]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b83      	ldr	r3, [pc, #524]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e184      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d010      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	4b7b      	ldr	r3, [pc, #492]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020dc:	429a      	cmp	r2, r3
 80020de:	d908      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020e0:	4b78      	ldr	r3, [pc, #480]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4975      	ldr	r1, [pc, #468]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800210a:	429a      	cmp	r2, r3
 800210c:	d908      	bls.n	8002120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800210e:	4b6d      	ldr	r3, [pc, #436]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	496a      	ldr	r1, [pc, #424]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800211c:	4313      	orrs	r3, r2
 800211e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d010      	beq.n	800214e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	4b64      	ldr	r3, [pc, #400]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002138:	429a      	cmp	r2, r3
 800213a:	d908      	bls.n	800214e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800213c:	4b61      	ldr	r3, [pc, #388]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	495e      	ldr	r1, [pc, #376]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800214a:	4313      	orrs	r3, r2
 800214c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69da      	ldr	r2, [r3, #28]
 800215e:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002166:	429a      	cmp	r2, r3
 8002168:	d908      	bls.n	800217c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800216a:	4b56      	ldr	r3, [pc, #344]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4953      	ldr	r1, [pc, #332]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002178:	4313      	orrs	r3, r2
 800217a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d010      	beq.n	80021aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4b4d      	ldr	r3, [pc, #308]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	429a      	cmp	r2, r3
 8002196:	d908      	bls.n	80021aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b4a      	ldr	r3, [pc, #296]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f023 020f 	bic.w	r2, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4947      	ldr	r1, [pc, #284]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d055      	beq.n	8002262 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021b6:	4b43      	ldr	r3, [pc, #268]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4940      	ldr	r1, [pc, #256]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d0:	4b3c      	ldr	r3, [pc, #240]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d121      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0f6      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e8:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d115      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0ea      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002200:	4b30      	ldr	r3, [pc, #192]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0de      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0d6      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002220:	4b28      	ldr	r3, [pc, #160]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f023 0207 	bic.w	r2, r3, #7
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4925      	ldr	r1, [pc, #148]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002232:	f7fe ffdd 	bl	80011f0 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002238:	e00a      	b.n	8002250 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe ffd9 	bl	80011f0 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0be      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002250:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	429a      	cmp	r2, r3
 8002260:	d1eb      	bne.n	800223a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d010      	beq.n	8002290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	429a      	cmp	r2, r3
 800227c:	d208      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	490e      	ldr	r1, [pc, #56]	@ (80022c4 <HAL_RCC_ClockConfig+0x244>)
 800228c:	4313      	orrs	r3, r2
 800228e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d214      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e086      	b.n	80023ce <HAL_RCC_ClockConfig+0x34e>
 80022c0:	52002000 	.word	0x52002000
 80022c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d208      	bcs.n	80022f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022e4:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4939      	ldr	r1, [pc, #228]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b34      	ldr	r3, [pc, #208]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800230e:	429a      	cmp	r2, r3
 8002310:	d208      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002312:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	492e      	ldr	r1, [pc, #184]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800233c:	429a      	cmp	r2, r3
 800233e:	d208      	bcs.n	8002352 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 800234e:	4313      	orrs	r3, r2
 8002350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800236a:	429a      	cmp	r2, r3
 800236c:	d208      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800236e:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4917      	ldr	r1, [pc, #92]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 800237c:	4313      	orrs	r3, r2
 800237e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002380:	f000 f834 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	4912      	ldr	r1, [pc, #72]	@ (80023dc <HAL_RCC_ClockConfig+0x35c>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_RCC_ClockConfig+0x358>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RCC_ClockConfig+0x35c>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <HAL_RCC_ClockConfig+0x360>)
 80023b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023b8:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_RCC_ClockConfig+0x364>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_RCC_ClockConfig+0x368>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe feca 	bl	800115c <HAL_InitTick>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
 80023dc:	08006ef8 	.word	0x08006ef8
 80023e0:	24000004 	.word	0x24000004
 80023e4:	24000000 	.word	0x24000000
 80023e8:	24000008 	.word	0x24000008

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f2:	4bb3      	ldr	r3, [pc, #716]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023fa:	2b18      	cmp	r3, #24
 80023fc:	f200 8155 	bhi.w	80026aa <HAL_RCC_GetSysClockFreq+0x2be>
 8002400:	a201      	add	r2, pc, #4	@ (adr r2, 8002408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002406:	bf00      	nop
 8002408:	0800246d 	.word	0x0800246d
 800240c:	080026ab 	.word	0x080026ab
 8002410:	080026ab 	.word	0x080026ab
 8002414:	080026ab 	.word	0x080026ab
 8002418:	080026ab 	.word	0x080026ab
 800241c:	080026ab 	.word	0x080026ab
 8002420:	080026ab 	.word	0x080026ab
 8002424:	080026ab 	.word	0x080026ab
 8002428:	08002493 	.word	0x08002493
 800242c:	080026ab 	.word	0x080026ab
 8002430:	080026ab 	.word	0x080026ab
 8002434:	080026ab 	.word	0x080026ab
 8002438:	080026ab 	.word	0x080026ab
 800243c:	080026ab 	.word	0x080026ab
 8002440:	080026ab 	.word	0x080026ab
 8002444:	080026ab 	.word	0x080026ab
 8002448:	08002499 	.word	0x08002499
 800244c:	080026ab 	.word	0x080026ab
 8002450:	080026ab 	.word	0x080026ab
 8002454:	080026ab 	.word	0x080026ab
 8002458:	080026ab 	.word	0x080026ab
 800245c:	080026ab 	.word	0x080026ab
 8002460:	080026ab 	.word	0x080026ab
 8002464:	080026ab 	.word	0x080026ab
 8002468:	0800249f 	.word	0x0800249f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246c:	4b94      	ldr	r3, [pc, #592]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002478:	4b91      	ldr	r3, [pc, #580]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	4a90      	ldr	r2, [pc, #576]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800248a:	e111      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800248c:	4b8d      	ldr	r3, [pc, #564]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800248e:	61bb      	str	r3, [r7, #24]
      break;
 8002490:	e10e      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002492:	4b8d      	ldr	r3, [pc, #564]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002494:	61bb      	str	r3, [r7, #24]
      break;
 8002496:	e10b      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002498:	4b8c      	ldr	r3, [pc, #560]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800249a:	61bb      	str	r3, [r7, #24]
      break;
 800249c:	e108      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024a8:	4b85      	ldr	r3, [pc, #532]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024b4:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80024be:	4b80      	ldr	r3, [pc, #512]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80e1 	beq.w	80026a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	f000 8083 	beq.w	80025f0 <HAL_RCC_GetSysClockFreq+0x204>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	f200 80a1 	bhi.w	8002634 <HAL_RCC_GetSysClockFreq+0x248>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x114>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d056      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80024fe:	e099      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002500:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02d      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800250c:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	4a6b      	ldr	r2, [pc, #428]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b62      	ldr	r3, [pc, #392]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002566:	e087      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002572:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257a:	4b51      	ldr	r3, [pc, #324]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258a:	ed97 6a02 	vldr	s12, [r7, #8]
 800258e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800259e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025aa:	e065      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025be:	4b40      	ldr	r3, [pc, #256]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025ee:	e043      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002602:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002612:	ed97 6a02 	vldr	s12, [r7, #8]
 8002616:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002632:	e021      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002656:	ed97 6a02 	vldr	s12, [r7, #8]
 800265a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002676:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	0a5b      	lsrs	r3, r3, #9
 800267e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002682:	3301      	adds	r3, #1
 8002684:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002690:	edd7 6a07 	vldr	s13, [r7, #28]
 8002694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026a2:	e005      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
      break;
 80026a8:	e002      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026ac:	61bb      	str	r3, [r7, #24]
      break;
 80026ae:	bf00      	nop
  }

  return sysclockfreq;
 80026b0:	69bb      	ldr	r3, [r7, #24]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	58024400 	.word	0x58024400
 80026c4:	03d09000 	.word	0x03d09000
 80026c8:	003d0900 	.word	0x003d0900
 80026cc:	016e3600 	.word	0x016e3600
 80026d0:	46000000 	.word	0x46000000
 80026d4:	4c742400 	.word	0x4c742400
 80026d8:	4a742400 	.word	0x4a742400
 80026dc:	4bb71b00 	.word	0x4bb71b00

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026e6:	f7ff fe81 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490f      	ldr	r1, [pc, #60]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x54>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_RCC_GetHCLKFreq+0x50>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x54>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x58>)
 800271c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800271e:	4a07      	ldr	r2, [pc, #28]	@ (800273c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x58>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	58024400 	.word	0x58024400
 8002734:	08006ef8 	.word	0x08006ef8
 8002738:	24000004 	.word	0x24000004
 800273c:	24000000 	.word	0x24000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002744:	f7ff ffcc 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	58024400 	.word	0x58024400
 8002768:	08006ef8 	.word	0x08006ef8

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002770:	f7ff ffb6 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4904      	ldr	r1, [pc, #16]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	58024400 	.word	0x58024400
 8002794:	08006ef8 	.word	0x08006ef8

08002798 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b0c6      	sub	sp, #280	@ 0x118
 800279e:	af00      	add	r7, sp, #0
 80027a0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80027bc:	2500      	movs	r5, #0
 80027be:	ea54 0305 	orrs.w	r3, r4, r5
 80027c2:	d049      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80027c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027ce:	d02f      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80027d4:	d828      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027da:	d01a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027e0:	d822      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027ea:	d007      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ec:	e01c      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ee:	4bab      	ldr	r3, [pc, #684]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	4aaa      	ldr	r2, [pc, #680]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027fa:	e01a      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002800:	3308      	adds	r3, #8
 8002802:	2102      	movs	r1, #2
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fc25 	bl	8004054 <RCCEx_PLL2_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002810:	e00f      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002816:	3328      	adds	r3, #40	@ 0x28
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fccc 	bl	80041b8 <RCCEx_PLL3_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002826:	e004      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800282e:	e000      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800283a:	4b98      	ldr	r3, [pc, #608]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800283c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002848:	4a94      	ldr	r2, [pc, #592]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800284a:	430b      	orrs	r3, r1
 800284c:	6513      	str	r3, [r2, #80]	@ 0x50
 800284e:	e003      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002864:	f04f 0900 	mov.w	r9, #0
 8002868:	ea58 0309 	orrs.w	r3, r8, r9
 800286c:	d047      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800286e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	2b04      	cmp	r3, #4
 8002876:	d82a      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002878:	a201      	add	r2, pc, #4	@ (adr r2, 8002880 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	08002895 	.word	0x08002895
 8002884:	080028a3 	.word	0x080028a3
 8002888:	080028b9 	.word	0x080028b9
 800288c:	080028d7 	.word	0x080028d7
 8002890:	080028d7 	.word	0x080028d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002894:	4b81      	ldr	r3, [pc, #516]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4a80      	ldr	r2, [pc, #512]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a0:	e01a      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028a6:	3308      	adds	r3, #8
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fbd2 	bl	8004054 <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028b6:	e00f      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028bc:	3328      	adds	r3, #40	@ 0x28
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 fc79 	bl	80041b8 <RCCEx_PLL3_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028cc:	e004      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e4:	f023 0107 	bic.w	r1, r3, #7
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	4a6b      	ldr	r2, [pc, #428]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028f4:	e003      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80028fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800290a:	f04f 0b00 	mov.w	fp, #0
 800290e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002912:	d05b      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800291c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002920:	d03b      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002922:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002926:	d834      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800292c:	d037      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800292e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002932:	d82e      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002934:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002938:	d033      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800293a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800293e:	d828      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002944:	d01a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d822      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002950:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002954:	d007      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002956:	e01c      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002958:	4b50      	ldr	r3, [pc, #320]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800295e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002964:	e01e      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800296a:	3308      	adds	r3, #8
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fb70 	bl	8004054 <RCCEx_PLL2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800297a:	e013      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800297c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002980:	3328      	adds	r3, #40	@ 0x28
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fc17 	bl	80041b8 <RCCEx_PLL3_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002990:	e008      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002998:	e004      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80029a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029ac:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80029b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80029bc:	4a37      	ldr	r2, [pc, #220]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029be:	430b      	orrs	r3, r1
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c2:	e003      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80029c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80029d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80029e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80029e6:	460b      	mov	r3, r1
 80029e8:	4313      	orrs	r3, r2
 80029ea:	d05d      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80029ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80029f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80029f8:	d03b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80029fe:	d834      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a04:	d037      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002a06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a0a:	d82e      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a10:	d033      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002a12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a16:	d828      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a1c:	d01a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a22:	d822      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d007      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a2e:	e01c      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a30:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a3c:	e01e      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a42:	3308      	adds	r3, #8
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 fb04 	bl	8004054 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a52:	e013      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a58:	3328      	adds	r3, #40	@ 0x28
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fbab 	bl	80041b8 <RCCEx_PLL3_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a68:	e008      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002a70:	e004      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a94:	4a01      	ldr	r2, [pc, #4]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a96:	430b      	orrs	r3, r1
 8002a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002abe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	d03a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	2b30      	cmp	r3, #48	@ 0x30
 8002ad0:	d01f      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002ad2:	2b30      	cmp	r3, #48	@ 0x30
 8002ad4:	d819      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d815      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d111      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae6:	4baa      	ldr	r3, [pc, #680]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	4aa9      	ldr	r2, [pc, #676]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002af2:	e011      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002af8:	3308      	adds	r3, #8
 8002afa:	2102      	movs	r1, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 faa9 	bl	8004054 <RCCEx_PLL2_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b20:	4b9b      	ldr	r3, [pc, #620]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	4a98      	ldr	r2, [pc, #608]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002b54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	d051      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b68:	d035      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b6e:	d82e      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b74:	d031      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002b76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b7a:	d828      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b80:	d01a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b86:	d822      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b90:	d007      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002b92:	e01c      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b7e      	ldr	r3, [pc, #504]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	4a7d      	ldr	r2, [pc, #500]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fa52 	bl	8004054 <RCCEx_PLL2_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bb6:	e011      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bbc:	3328      	adds	r3, #40	@ 0x28
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 faf9 	bl	80041b8 <RCCEx_PLL3_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002bd4:	e002      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002be4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	4a67      	ldr	r2, [pc, #412]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bf8:	e003      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	d053      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c2c:	d033      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002c2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c32:	d82c      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c38:	d02f      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002c3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c3e:	d826      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c44:	d02b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c4a:	d820      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c50:	d012      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c56:	d81a      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d022      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d115      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c66:	3308      	adds	r3, #8
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f9f2 	bl	8004054 <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c76:	e015      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c7c:	3328      	adds	r3, #40	@ 0x28
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fa99 	bl	80041b8 <RCCEx_PLL3_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c94:	e006      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c96:	bf00      	nop
 8002c98:	e004      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c9a:	bf00      	nop
 8002c9c:	e002      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cac:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	4a35      	ldr	r2, [pc, #212]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ce0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	d058      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf6:	d033      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cfc:	d82c      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d02:	d02f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d08:	d826      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d0e:	d02b      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002d10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d14:	d820      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d1a:	d012      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d20:	d81a      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d022      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d2a:	d115      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d30:	3308      	adds	r3, #8
 8002d32:	2101      	movs	r1, #1
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 f98d 	bl	8004054 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d40:	e015      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d46:	3328      	adds	r3, #40	@ 0x28
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fa34 	bl	80041b8 <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d56:	e00a      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d5e:	e006      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d60:	bf00      	nop
 8002d62:	e004      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d64:	bf00      	nop
 8002d66:	e002      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10e      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d86:	4a02      	ldr	r2, [pc, #8]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d8c:	e006      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d8e:	bf00      	nop
 8002d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002db2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	d037      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc6:	d00e      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dcc:	d816      	bhi.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4bc4      	ldr	r3, [pc, #784]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	4ac3      	ldr	r2, [pc, #780]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002de4:	e00f      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dea:	3308      	adds	r3, #8
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f930 	bl	8004054 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dfa:	e004      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e0e:	4bb7      	ldr	r3, [pc, #732]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1c:	4ab3      	ldr	r2, [pc, #716]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e22:	e003      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e46:	460b      	mov	r3, r1
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	d039      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d81c      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e56:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e99 	.word	0x08002e99
 8002e60:	08002e6d 	.word	0x08002e6d
 8002e64:	08002e7b 	.word	0x08002e7b
 8002e68:	08002e99 	.word	0x08002e99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e6c:	4b9f      	ldr	r3, [pc, #636]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	4a9e      	ldr	r2, [pc, #632]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e78:	e00f      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e7e:	3308      	adds	r3, #8
 8002e80:	2102      	movs	r1, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8e6 	bl	8004054 <RCCEx_PLL2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e8e:	e004      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ea2:	4b92      	ldr	r3, [pc, #584]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	f023 0103 	bic.w	r1, r3, #3
 8002eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb0:	4a8e      	ldr	r2, [pc, #568]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ed6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f000 8099 	beq.w	8003014 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee2:	4b83      	ldr	r3, [pc, #524]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a82      	ldr	r2, [pc, #520]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eee:	f7fe f97f 	bl	80011f0 <HAL_GetTick>
 8002ef2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe f97a 	bl	80011f0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	@ 0x64
 8002f06:	d903      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f0e:	e005      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f10:	4b77      	ldr	r3, [pc, #476]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ed      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d173      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f24:	4b71      	ldr	r3, [pc, #452]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f30:	4053      	eors	r3, r2
 8002f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f46:	4b69      	ldr	r3, [pc, #420]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	4a68      	ldr	r2, [pc, #416]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f52:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	4a65      	ldr	r2, [pc, #404]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f5e:	4a63      	ldr	r2, [pc, #396]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f72:	d118      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f93c 	bl	80011f0 <HAL_GetTick>
 8002f78:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f7c:	e00d      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe f937 	bl	80011f0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f88:	1ad2      	subs	r2, r2, r3
 8002f8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d903      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8002f98:	e005      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0eb      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d129      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fbe:	d10e      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fd0:	091a      	lsrs	r2, r3, #4
 8002fd2:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	4a45      	ldr	r2, [pc, #276]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6113      	str	r3, [r2, #16]
 8002fdc:	e005      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002fde:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4a42      	ldr	r2, [pc, #264]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fe8:	6113      	str	r3, [r2, #16]
 8002fea:	4b40      	ldr	r3, [pc, #256]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	e008      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003006:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800300a:	e003      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f002 0301 	and.w	r3, r2, #1
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800302a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800302e:	460b      	mov	r3, r1
 8003030:	4313      	orrs	r3, r2
 8003032:	f000 808f 	beq.w	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800303c:	2b28      	cmp	r3, #40	@ 0x28
 800303e:	d871      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003040:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800312d 	.word	0x0800312d
 800304c:	08003125 	.word	0x08003125
 8003050:	08003125 	.word	0x08003125
 8003054:	08003125 	.word	0x08003125
 8003058:	08003125 	.word	0x08003125
 800305c:	08003125 	.word	0x08003125
 8003060:	08003125 	.word	0x08003125
 8003064:	08003125 	.word	0x08003125
 8003068:	080030f9 	.word	0x080030f9
 800306c:	08003125 	.word	0x08003125
 8003070:	08003125 	.word	0x08003125
 8003074:	08003125 	.word	0x08003125
 8003078:	08003125 	.word	0x08003125
 800307c:	08003125 	.word	0x08003125
 8003080:	08003125 	.word	0x08003125
 8003084:	08003125 	.word	0x08003125
 8003088:	0800310f 	.word	0x0800310f
 800308c:	08003125 	.word	0x08003125
 8003090:	08003125 	.word	0x08003125
 8003094:	08003125 	.word	0x08003125
 8003098:	08003125 	.word	0x08003125
 800309c:	08003125 	.word	0x08003125
 80030a0:	08003125 	.word	0x08003125
 80030a4:	08003125 	.word	0x08003125
 80030a8:	0800312d 	.word	0x0800312d
 80030ac:	08003125 	.word	0x08003125
 80030b0:	08003125 	.word	0x08003125
 80030b4:	08003125 	.word	0x08003125
 80030b8:	08003125 	.word	0x08003125
 80030bc:	08003125 	.word	0x08003125
 80030c0:	08003125 	.word	0x08003125
 80030c4:	08003125 	.word	0x08003125
 80030c8:	0800312d 	.word	0x0800312d
 80030cc:	08003125 	.word	0x08003125
 80030d0:	08003125 	.word	0x08003125
 80030d4:	08003125 	.word	0x08003125
 80030d8:	08003125 	.word	0x08003125
 80030dc:	08003125 	.word	0x08003125
 80030e0:	08003125 	.word	0x08003125
 80030e4:	08003125 	.word	0x08003125
 80030e8:	0800312d 	.word	0x0800312d
 80030ec:	58024400 	.word	0x58024400
 80030f0:	58024800 	.word	0x58024800
 80030f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030fc:	3308      	adds	r3, #8
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f000 ffa7 	bl	8004054 <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800310c:	e00f      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003112:	3328      	adds	r3, #40	@ 0x28
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f84e 	bl	80041b8 <RCCEx_PLL3_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003122:	e004      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800312c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003136:	4bbf      	ldr	r3, [pc, #764]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800313e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003144:	4abb      	ldr	r2, [pc, #748]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003146:	430b      	orrs	r3, r1
 8003148:	6553      	str	r3, [r2, #84]	@ 0x54
 800314a:	e003      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f002 0302 	and.w	r3, r2, #2
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800316a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800316e:	460b      	mov	r3, r1
 8003170:	4313      	orrs	r3, r2
 8003172:	d041      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317a:	2b05      	cmp	r3, #5
 800317c:	d824      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800317e:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031d1 	.word	0x080031d1
 8003188:	0800319d 	.word	0x0800319d
 800318c:	080031b3 	.word	0x080031b3
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a0:	3308      	adds	r3, #8
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 ff55 	bl	8004054 <RCCEx_PLL2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031b0:	e00f      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031b6:	3328      	adds	r3, #40	@ 0x28
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fffc 	bl	80041b8 <RCCEx_PLL3_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031c6:	e004      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80031d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031da:	4b96      	ldr	r3, [pc, #600]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031de:	f023 0107 	bic.w	r1, r3, #7
 80031e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e8:	4a92      	ldr	r2, [pc, #584]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f002 0304 	and.w	r3, r2, #4
 8003204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800320e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003212:	460b      	mov	r3, r1
 8003214:	4313      	orrs	r3, r2
 8003216:	d044      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003220:	2b05      	cmp	r3, #5
 8003222:	d825      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003279 	.word	0x08003279
 8003230:	08003245 	.word	0x08003245
 8003234:	0800325b 	.word	0x0800325b
 8003238:	08003279 	.word	0x08003279
 800323c:	08003279 	.word	0x08003279
 8003240:	08003279 	.word	0x08003279
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003248:	3308      	adds	r3, #8
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f000 ff01 	bl	8004054 <RCCEx_PLL2_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003258:	e00f      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800325a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325e:	3328      	adds	r3, #40	@ 0x28
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ffa8 	bl	80041b8 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800326e:	e004      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003282:	4b6c      	ldr	r3, [pc, #432]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003286:	f023 0107 	bic.w	r1, r3, #7
 800328a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	4a68      	ldr	r2, [pc, #416]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003294:	430b      	orrs	r3, r1
 8003296:	6593      	str	r3, [r2, #88]	@ 0x58
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800329e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f002 0320 	and.w	r3, r2, #32
 80032ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d055      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ce:	d033      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80032d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d4:	d82c      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d02f      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d826      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032e6:	d02b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80032e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032ec:	d820      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f2:	d012      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80032f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032f8:	d81a      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d022      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80032fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003302:	d115      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003308:	3308      	adds	r3, #8
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fea1 	bl	8004054 <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003318:	e015      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331e:	3328      	adds	r3, #40	@ 0x28
 8003320:	2102      	movs	r1, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff48 	bl	80041b8 <RCCEx_PLL3_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800332e:	e00a      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003336:	e006      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003338:	bf00      	nop
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334e:	4b39      	ldr	r3, [pc, #228]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800335a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800335e:	4a35      	ldr	r2, [pc, #212]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003360:	430b      	orrs	r3, r1
 8003362:	6553      	str	r3, [r2, #84]	@ 0x54
 8003364:	e003      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800336a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800336e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800337a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003384:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003388:	460b      	mov	r3, r1
 800338a:	4313      	orrs	r3, r2
 800338c:	d058      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800338e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003396:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800339a:	d033      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800339c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033a0:	d82c      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	d02f      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d826      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80033ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b2:	d02b      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80033b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033b8:	d820      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80033ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033be:	d012      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c4:	d81a      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d022      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ce:	d115      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d4:	3308      	adds	r3, #8
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fe3b 	bl	8004054 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033e4:	e015      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ea:	3328      	adds	r3, #40	@ 0x28
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fee2 	bl	80041b8 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033fa:	e00a      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003402:	e006      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003404:	bf00      	nop
 8003406:	e004      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003408:	bf00      	nop
 800340a:	e002      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800340c:	bf00      	nop
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003426:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800342a:	4a02      	ldr	r2, [pc, #8]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003432:	bf00      	nop
 8003434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800343c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800344c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003456:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d055      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003468:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800346c:	d033      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800346e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003472:	d82c      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003478:	d02f      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347e:	d826      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003480:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003484:	d02b      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003486:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800348a:	d820      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800348c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003490:	d012      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003496:	d81a      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d022      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800349c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a0:	d115      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fdd2 	bl	8004054 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034b6:	e015      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fe79 	bl	80041b8 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034cc:	e00a      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80034fe:	430b      	orrs	r3, r1
 8003500:	6593      	str	r3, [r2, #88]	@ 0x58
 8003502:	e003      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f002 0308 	and.w	r3, r2, #8
 8003518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003522:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003526:	460b      	mov	r3, r1
 8003528:	4313      	orrs	r3, r2
 800352a:	d01e      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353e:	3328      	adds	r3, #40	@ 0x28
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fe38 	bl	80041b8 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003554:	4b86      	ldr	r3, [pc, #536]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800355c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003564:	4a82      	ldr	r2, [pc, #520]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003566:	430b      	orrs	r3, r1
 8003568:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f002 0310 	and.w	r3, r2, #16
 8003576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003580:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d01e      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800358a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003596:	d10c      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	2102      	movs	r1, #2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fe09 	bl	80041b8 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80035d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035d6:	2300      	movs	r3, #0
 80035d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d03e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f0:	d022      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f6:	d81b      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003600:	d00b      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003602:	e015      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003608:	3308      	adds	r3, #8
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fd21 	bl	8004054 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003618:	e00f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800361a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361e:	3328      	adds	r3, #40	@ 0x28
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fdc8 	bl	80041b8 <RCCEx_PLL3_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800362e:	e004      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003652:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6593      	str	r3, [r2, #88]	@ 0x58
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800365e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800366e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003670:	2300      	movs	r3, #0
 8003672:	677b      	str	r3, [r7, #116]	@ 0x74
 8003674:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d03b      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800368a:	d01f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800368c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003690:	d818      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800369c:	d007      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800369e:	e011      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a32      	ldr	r2, [pc, #200]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036ac:	e00f      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b2:	3328      	adds	r3, #40	@ 0x28
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd7e 	bl	80041b8 <RCCEx_PLL3_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80036c2:	e004      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80036cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d6:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e6:	4a22      	ldr	r2, [pc, #136]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003702:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003704:	2300      	movs	r3, #0
 8003706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003708:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d034      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003720:	d007      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	4a11      	ldr	r2, [pc, #68]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003730:	e00e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003736:	3308      	adds	r3, #8
 8003738:	2102      	movs	r1, #2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fc8a 	bl	8004054 <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003746:	e003      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	4a02      	ldr	r2, [pc, #8]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003768:	430b      	orrs	r3, r1
 800376a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800376e:	bf00      	nop
 8003770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800377c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003788:	663b      	str	r3, [r7, #96]	@ 0x60
 800378a:	2300      	movs	r3, #0
 800378c:	667b      	str	r3, [r7, #100]	@ 0x64
 800378e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d00c      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379c:	3328      	adds	r3, #40	@ 0x28
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fd09 	bl	80041b8 <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037c0:	2300      	movs	r3, #0
 80037c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037d8:	d018      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80037da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037de:	d811      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e4:	d014      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037ea:	d80b      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80037f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f4:	d106      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f6:	4bb7      	ldr	r3, [pc, #732]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	4ab6      	ldr	r2, [pc, #728]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003802:	e008      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800380a:	e004      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800380c:	bf00      	nop
 800380e:	e002      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003816:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381e:	4bad      	ldr	r3, [pc, #692]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800382c:	4aa9      	ldr	r2, [pc, #676]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6553      	str	r3, [r2, #84]	@ 0x54
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003848:	653b      	str	r3, [r7, #80]	@ 0x50
 800384a:	2300      	movs	r3, #0
 800384c:	657b      	str	r3, [r7, #84]	@ 0x54
 800384e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003858:	4b9e      	ldr	r3, [pc, #632]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a9b      	ldr	r2, [pc, #620]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800386c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800387a:	2300      	movs	r3, #0
 800387c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003896:	4a8f      	ldr	r2, [pc, #572]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038aa:	2300      	movs	r3, #0
 80038ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038b8:	4b86      	ldr	r3, [pc, #536]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	4a85      	ldr	r2, [pc, #532]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038c2:	6113      	str	r3, [r2, #16]
 80038c4:	4b83      	ldr	r3, [pc, #524]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038c6:	6919      	ldr	r1, [r3, #16]
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038d0:	4a80      	ldr	r2, [pc, #512]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80038e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038e4:	2300      	movs	r3, #0
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038f2:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	4a74      	ldr	r2, [pc, #464]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003902:	430b      	orrs	r3, r1
 8003904:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
 8003914:	2300      	movs	r3, #0
 8003916:	637b      	str	r3, [r7, #52]	@ 0x34
 8003918:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003922:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	4a68      	ldr	r2, [pc, #416]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	2100      	movs	r1, #0
 8003942:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d011      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003958:	3308      	adds	r3, #8
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fb79 	bl	8004054 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003974:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	2100      	movs	r1, #0
 8003982:	6239      	str	r1, [r7, #32]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	d011      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003998:	3308      	adds	r3, #8
 800399a:	2101      	movs	r1, #1
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fb59 	bl	8004054 <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80039a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	2100      	movs	r1, #0
 80039c2:	61b9      	str	r1, [r7, #24]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039ce:	460b      	mov	r3, r1
 80039d0:	4313      	orrs	r3, r2
 80039d2:	d011      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d8:	3308      	adds	r3, #8
 80039da:	2102      	movs	r1, #2
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb39 	bl	8004054 <RCCEx_PLL2_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80039e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	2100      	movs	r1, #0
 8003a02:	6139      	str	r1, [r7, #16]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d011      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a18:	3328      	adds	r3, #40	@ 0x28
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fbcb 	bl	80041b8 <RCCEx_PLL3_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	2100      	movs	r1, #0
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d011      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a58:	3328      	adds	r3, #40	@ 0x28
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fbab 	bl	80041b8 <RCCEx_PLL3_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	2100      	movs	r1, #0
 8003a82:	6039      	str	r1, [r7, #0]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d011      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a98:	3328      	adds	r3, #40	@ 0x28
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb8b 	bl	80041b8 <RCCEx_PLL3_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003ab8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad2:	bf00      	nop
 8003ad4:	58024400 	.word	0x58024400

08003ad8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003adc:	f7fe fe00 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	@ (8003b00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024400 	.word	0x58024400
 8003b00:	08006ef8 	.word	0x08006ef8

08003b04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	@ 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b0c:	4ba1      	ldr	r3, [pc, #644]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b16:	4b9f      	ldr	r3, [pc, #636]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	0b1b      	lsrs	r3, r3, #12
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b22:	4b9c      	ldr	r3, [pc, #624]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b2e:	4b99      	ldr	r3, [pc, #612]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8111 	beq.w	8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	f000 8083 	beq.w	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	f200 80a1 	bhi.w	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d056      	beq.n	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b6e:	e099      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b70:	4b88      	ldr	r3, [pc, #544]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02d      	beq.n	8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b7c:	4b85      	ldr	r3, [pc, #532]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	4a84      	ldr	r2, [pc, #528]	@ (8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bd6:	e087      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c1a:	e065      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b59      	ldr	r3, [pc, #356]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c5e:	e043      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b48      	ldr	r3, [pc, #288]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca2:	e021      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb6:	4b37      	ldr	r3, [pc, #220]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ce6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0e:	ee17 2a90 	vmov	r2, s15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d16:	4b1f      	ldr	r3, [pc, #124]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3c:	ee17 2a90 	vmov	r2, s15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d44:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6a:	ee17 2a90 	vmov	r2, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
 8003d98:	03d09000 	.word	0x03d09000
 8003d9c:	46000000 	.word	0x46000000
 8003da0:	4c742400 	.word	0x4c742400
 8003da4:	4a742400 	.word	0x4a742400
 8003da8:	4bb71b00 	.word	0x4bb71b00

08003dac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	@ 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003db4:	4ba1      	ldr	r3, [pc, #644]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003dbe:	4b9f      	ldr	r3, [pc, #636]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc2:	0d1b      	lsrs	r3, r3, #20
 8003dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dca:	4b9c      	ldr	r3, [pc, #624]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003dd6:	4b99      	ldr	r3, [pc, #612]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8111 	beq.w	800401c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f200 80a1 	bhi.w	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d056      	beq.n	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e16:	e099      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e18:	4b88      	ldr	r3, [pc, #544]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e24:	4b85      	ldr	r3, [pc, #532]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	08db      	lsrs	r3, r3, #3
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	4a84      	ldr	r2, [pc, #528]	@ (8004040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e7e:	e087      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e065      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800404c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b59      	ldr	r3, [pc, #356]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e043      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b48      	ldr	r3, [pc, #288]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	e021      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800404c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b37      	ldr	r3, [pc, #220]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f90:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb6:	ee17 2a90 	vmov	r2, s15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 2a90 	vmov	r2, s15
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004006:	edd7 6a07 	vldr	s13, [r7, #28]
 800400a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004012:	ee17 2a90 	vmov	r2, s15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800401a:	e008      	b.n	800402e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	@ 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	03d09000 	.word	0x03d09000
 8004044:	46000000 	.word	0x46000000
 8004048:	4c742400 	.word	0x4c742400
 800404c:	4a742400 	.word	0x4a742400
 8004050:	4bb71b00 	.word	0x4bb71b00

08004054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004062:	4b53      	ldr	r3, [pc, #332]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b03      	cmp	r3, #3
 800406c:	d101      	bne.n	8004072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e099      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004072:	4b4f      	ldr	r3, [pc, #316]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4e      	ldr	r2, [pc, #312]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004078:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800407c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407e:	f7fd f8b7 	bl	80011f0 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004084:	e008      	b.n	8004098 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004086:	f7fd f8b3 	bl	80011f0 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e086      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004098:	4b45      	ldr	r3, [pc, #276]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040a4:	4b42      	ldr	r3, [pc, #264]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	493f      	ldr	r1, [pc, #252]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	025b      	lsls	r3, r3, #9
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040e8:	4931      	ldr	r1, [pc, #196]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040ee:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	492d      	ldr	r1, [pc, #180]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	f023 0220 	bic.w	r2, r3, #32
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	4928      	ldr	r1, [pc, #160]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004112:	4b27      	ldr	r3, [pc, #156]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004118:	f023 0310 	bic.w	r3, r3, #16
 800411c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800411e:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <RCCEx_PLL2_Config+0x160>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69d2      	ldr	r2, [r2, #28]
 800412a:	00d2      	lsls	r2, r2, #3
 800412c:	4920      	ldr	r1, [pc, #128]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004132:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800414a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800414e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004150:	e00f      	b.n	8004172 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004158:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	4a14      	ldr	r2, [pc, #80]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800415e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004164:	e005      	b.n	8004172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004166:	4b12      	ldr	r3, [pc, #72]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800416c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004170:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004172:	4b0f      	ldr	r3, [pc, #60]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0e      	ldr	r2, [pc, #56]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fd f837 	bl	80011f0 <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004184:	e008      	b.n	8004198 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004186:	f7fd f833 	bl	80011f0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
 80041b4:	ffff0007 	.word	0xffff0007

080041b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041c6:	4b53      	ldr	r3, [pc, #332]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d101      	bne.n	80041d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e099      	b.n	800430a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4e      	ldr	r2, [pc, #312]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e2:	f7fd f805 	bl	80011f0 <HAL_GetTick>
 80041e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041e8:	e008      	b.n	80041fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041ea:	f7fd f801 	bl	80011f0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e086      	b.n	800430a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041fc:	4b45      	ldr	r3, [pc, #276]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004208:	4b42      	ldr	r3, [pc, #264]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	051b      	lsls	r3, r3, #20
 8004216:	493f      	ldr	r1, [pc, #252]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	628b      	str	r3, [r1, #40]	@ 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	3b01      	subs	r3, #1
 8004222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	3b01      	subs	r3, #1
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	b29b      	uxth	r3, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	3b01      	subs	r3, #1
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800424c:	4931      	ldr	r1, [pc, #196]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004252:	4b30      	ldr	r3, [pc, #192]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	492d      	ldr	r1, [pc, #180]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004264:	4b2b      	ldr	r3, [pc, #172]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4928      	ldr	r1, [pc, #160]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004276:	4b27      	ldr	r3, [pc, #156]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 800427c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004282:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <RCCEx_PLL3_Config+0x160>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	69d2      	ldr	r2, [r2, #28]
 800428e:	00d2      	lsls	r2, r2, #3
 8004290:	4920      	ldr	r1, [pc, #128]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004296:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042b4:	e00f      	b.n	80042d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d106      	bne.n	80042ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042bc:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042c8:	e005      	b.n	80042d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042ca:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a0e      	ldr	r2, [pc, #56]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fc ff85 	bl	80011f0 <HAL_GetTick>
 80042e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042e8:	e008      	b.n	80042fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042ea:	f7fc ff81 	bl	80011f0 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
 8004318:	ffff0007 	.word	0xffff0007

0800431c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fc fd0f 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	@ 0x24
 800434a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ffea 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f97b 	bl	8004668 <UART_SetConfig>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e01b      	b.n	80043b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800438a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800439a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 f869 	bl	8005484 <UART_CheckIdleState>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	@ 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d17b      	bne.n	80044ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_UART_Transmit+0x26>
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e074      	b.n	80044d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2221      	movs	r2, #33	@ 0x21
 80043f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f6:	f7fc fefb 	bl	80011f0 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004430:	e030      	b.n	8004494 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f001 f8cb 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e03d      	b.n	80044d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e007      	b.n	8004482 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1c8      	bne.n	8004432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2140      	movs	r1, #64	@ 0x40
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 f894 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e006      	b.n	80044d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	f040 80b5 	bne.w	800465e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Receive+0x28>
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0ad      	b.n	8004660 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2222      	movs	r2, #34	@ 0x22
 8004510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fc fe69 	bl	80011f0 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004538:	d10e      	bne.n	8004558 <HAL_UART_Receive+0x80>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <HAL_UART_Receive+0x76>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800454c:	e02d      	b.n	80045aa <HAL_UART_Receive+0xd2>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	22ff      	movs	r2, #255	@ 0xff
 8004552:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004556:	e028      	b.n	80045aa <HAL_UART_Receive+0xd2>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_UART_Receive+0xa4>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_UART_Receive+0x9a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	22ff      	movs	r2, #255	@ 0xff
 800456c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004570:	e01b      	b.n	80045aa <HAL_UART_Receive+0xd2>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	227f      	movs	r2, #127	@ 0x7f
 8004576:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800457a:	e016      	b.n	80045aa <HAL_UART_Receive+0xd2>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004584:	d10d      	bne.n	80045a2 <HAL_UART_Receive+0xca>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_UART_Receive+0xc0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	227f      	movs	r2, #127	@ 0x7f
 8004592:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004596:	e008      	b.n	80045aa <HAL_UART_Receive+0xd2>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045a0:	e003      	b.n	80045aa <HAL_UART_Receive+0xd2>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80045b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ba:	d108      	bne.n	80045ce <HAL_UART_Receive+0xf6>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e003      	b.n	80045d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045d6:	e036      	b.n	8004646 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	2120      	movs	r1, #32
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fff8 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e032      	b.n	8004660 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	b29a      	uxth	r2, r3
 8004608:	8a7b      	ldrh	r3, [r7, #18]
 800460a:	4013      	ands	r3, r2
 800460c:	b29a      	uxth	r2, r3
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	3302      	adds	r3, #2
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e00c      	b.n	8004634 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2da      	uxtb	r2, r3
 8004622:	8a7b      	ldrh	r3, [r7, #18]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4013      	ands	r3, r2
 8004628:	b2da      	uxtb	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1c2      	bne.n	80045d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b092      	sub	sp, #72	@ 0x48
 800466e:	af00      	add	r7, sp, #0
 8004670:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4bbe      	ldr	r3, [pc, #760]	@ (8004990 <UART_SetConfig+0x328>)
 8004698:	4013      	ands	r3, r2
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4ab3      	ldr	r2, [pc, #716]	@ (8004994 <UART_SetConfig+0x32c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d0:	4313      	orrs	r3, r2
 80046d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4baf      	ldr	r3, [pc, #700]	@ (8004998 <UART_SetConfig+0x330>)
 80046dc:	4013      	ands	r3, r2
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f023 010f 	bic.w	r1, r3, #15
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4aa6      	ldr	r2, [pc, #664]	@ (800499c <UART_SetConfig+0x334>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d177      	bne.n	80047f8 <UART_SetConfig+0x190>
 8004708:	4ba5      	ldr	r3, [pc, #660]	@ (80049a0 <UART_SetConfig+0x338>)
 800470a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004710:	2b28      	cmp	r3, #40	@ 0x28
 8004712:	d86d      	bhi.n	80047f0 <UART_SetConfig+0x188>
 8004714:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <UART_SetConfig+0xb4>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	080047c1 	.word	0x080047c1
 8004720:	080047f1 	.word	0x080047f1
 8004724:	080047f1 	.word	0x080047f1
 8004728:	080047f1 	.word	0x080047f1
 800472c:	080047f1 	.word	0x080047f1
 8004730:	080047f1 	.word	0x080047f1
 8004734:	080047f1 	.word	0x080047f1
 8004738:	080047f1 	.word	0x080047f1
 800473c:	080047c9 	.word	0x080047c9
 8004740:	080047f1 	.word	0x080047f1
 8004744:	080047f1 	.word	0x080047f1
 8004748:	080047f1 	.word	0x080047f1
 800474c:	080047f1 	.word	0x080047f1
 8004750:	080047f1 	.word	0x080047f1
 8004754:	080047f1 	.word	0x080047f1
 8004758:	080047f1 	.word	0x080047f1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047f1 	.word	0x080047f1
 8004764:	080047f1 	.word	0x080047f1
 8004768:	080047f1 	.word	0x080047f1
 800476c:	080047f1 	.word	0x080047f1
 8004770:	080047f1 	.word	0x080047f1
 8004774:	080047f1 	.word	0x080047f1
 8004778:	080047f1 	.word	0x080047f1
 800477c:	080047d9 	.word	0x080047d9
 8004780:	080047f1 	.word	0x080047f1
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080047f1 	.word	0x080047f1
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080047f1 	.word	0x080047f1
 8004794:	080047f1 	.word	0x080047f1
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047e1 	.word	0x080047e1
 80047a0:	080047f1 	.word	0x080047f1
 80047a4:	080047f1 	.word	0x080047f1
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f1 	.word	0x080047f1
 80047b4:	080047f1 	.word	0x080047f1
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c6:	e326      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e322      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e31e      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047de:	e31a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047e0:	2320      	movs	r3, #32
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e6:	e316      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047e8:	2340      	movs	r3, #64	@ 0x40
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ee:	e312      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f6:	e30e      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a69      	ldr	r2, [pc, #420]	@ (80049a4 <UART_SetConfig+0x33c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d130      	bne.n	8004864 <UART_SetConfig+0x1fc>
 8004802:	4b67      	ldr	r3, [pc, #412]	@ (80049a0 <UART_SetConfig+0x338>)
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b05      	cmp	r3, #5
 800480c:	d826      	bhi.n	800485c <UART_SetConfig+0x1f4>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <UART_SetConfig+0x1ac>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004835 	.word	0x08004835
 800481c:	0800483d 	.word	0x0800483d
 8004820:	08004845 	.word	0x08004845
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004855 	.word	0x08004855
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004832:	e2f0      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483a:	e2ec      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004842:	e2e8      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484a:	e2e4      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800484c:	2320      	movs	r3, #32
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004852:	e2e0      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004854:	2340      	movs	r3, #64	@ 0x40
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485a:	e2dc      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004862:	e2d8      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a4f      	ldr	r2, [pc, #316]	@ (80049a8 <UART_SetConfig+0x340>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d130      	bne.n	80048d0 <UART_SetConfig+0x268>
 800486e:	4b4c      	ldr	r3, [pc, #304]	@ (80049a0 <UART_SetConfig+0x338>)
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b05      	cmp	r3, #5
 8004878:	d826      	bhi.n	80048c8 <UART_SetConfig+0x260>
 800487a:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x218>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004899 	.word	0x08004899
 8004884:	080048a1 	.word	0x080048a1
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e2ba      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048a0:	2304      	movs	r3, #4
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e2b6      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048a8:	2308      	movs	r3, #8
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e2b2      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048b0:	2310      	movs	r3, #16
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b6:	e2ae      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048b8:	2320      	movs	r3, #32
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e2aa      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048c0:	2340      	movs	r3, #64	@ 0x40
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c6:	e2a6      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ce:	e2a2      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a35      	ldr	r2, [pc, #212]	@ (80049ac <UART_SetConfig+0x344>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d130      	bne.n	800493c <UART_SetConfig+0x2d4>
 80048da:	4b31      	ldr	r3, [pc, #196]	@ (80049a0 <UART_SetConfig+0x338>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d826      	bhi.n	8004934 <UART_SetConfig+0x2cc>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x284>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004905 	.word	0x08004905
 80048f0:	0800490d 	.word	0x0800490d
 80048f4:	08004915 	.word	0x08004915
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004925 	.word	0x08004925
 8004900:	0800492d 	.word	0x0800492d
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e284      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e280      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e27c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e278      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004924:	2320      	movs	r3, #32
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e274      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800492c:	2340      	movs	r3, #64	@ 0x40
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e270      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493a:	e26c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1b      	ldr	r2, [pc, #108]	@ (80049b0 <UART_SetConfig+0x348>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d142      	bne.n	80049cc <UART_SetConfig+0x364>
 8004946:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <UART_SetConfig+0x338>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b05      	cmp	r3, #5
 8004950:	d838      	bhi.n	80049c4 <UART_SetConfig+0x35c>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <UART_SetConfig+0x2f0>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004971 	.word	0x08004971
 800495c:	08004979 	.word	0x08004979
 8004960:	08004981 	.word	0x08004981
 8004964:	08004989 	.word	0x08004989
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049bd 	.word	0x080049bd
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e24e      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e24a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e246      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e242      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004990:	cfff69f3 	.word	0xcfff69f3
 8004994:	58000c00 	.word	0x58000c00
 8004998:	11fff4ff 	.word	0x11fff4ff
 800499c:	40011000 	.word	0x40011000
 80049a0:	58024400 	.word	0x58024400
 80049a4:	40004400 	.word	0x40004400
 80049a8:	40004800 	.word	0x40004800
 80049ac:	40004c00 	.word	0x40004c00
 80049b0:	40005000 	.word	0x40005000
 80049b4:	2320      	movs	r3, #32
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e22c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80049bc:	2340      	movs	r3, #64	@ 0x40
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e228      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80049c4:	2380      	movs	r3, #128	@ 0x80
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e224      	b.n	8004e16 <UART_SetConfig+0x7ae>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4ab1      	ldr	r2, [pc, #708]	@ (8004c98 <UART_SetConfig+0x630>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d176      	bne.n	8004ac4 <UART_SetConfig+0x45c>
 80049d6:	4bb1      	ldr	r3, [pc, #708]	@ (8004c9c <UART_SetConfig+0x634>)
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049de:	2b28      	cmp	r3, #40	@ 0x28
 80049e0:	d86c      	bhi.n	8004abc <UART_SetConfig+0x454>
 80049e2:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <UART_SetConfig+0x380>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a8d 	.word	0x08004a8d
 80049ec:	08004abd 	.word	0x08004abd
 80049f0:	08004abd 	.word	0x08004abd
 80049f4:	08004abd 	.word	0x08004abd
 80049f8:	08004abd 	.word	0x08004abd
 80049fc:	08004abd 	.word	0x08004abd
 8004a00:	08004abd 	.word	0x08004abd
 8004a04:	08004abd 	.word	0x08004abd
 8004a08:	08004a95 	.word	0x08004a95
 8004a0c:	08004abd 	.word	0x08004abd
 8004a10:	08004abd 	.word	0x08004abd
 8004a14:	08004abd 	.word	0x08004abd
 8004a18:	08004abd 	.word	0x08004abd
 8004a1c:	08004abd 	.word	0x08004abd
 8004a20:	08004abd 	.word	0x08004abd
 8004a24:	08004abd 	.word	0x08004abd
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004abd 	.word	0x08004abd
 8004a30:	08004abd 	.word	0x08004abd
 8004a34:	08004abd 	.word	0x08004abd
 8004a38:	08004abd 	.word	0x08004abd
 8004a3c:	08004abd 	.word	0x08004abd
 8004a40:	08004abd 	.word	0x08004abd
 8004a44:	08004abd 	.word	0x08004abd
 8004a48:	08004aa5 	.word	0x08004aa5
 8004a4c:	08004abd 	.word	0x08004abd
 8004a50:	08004abd 	.word	0x08004abd
 8004a54:	08004abd 	.word	0x08004abd
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004abd 	.word	0x08004abd
 8004a60:	08004abd 	.word	0x08004abd
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004aad 	.word	0x08004aad
 8004a6c:	08004abd 	.word	0x08004abd
 8004a70:	08004abd 	.word	0x08004abd
 8004a74:	08004abd 	.word	0x08004abd
 8004a78:	08004abd 	.word	0x08004abd
 8004a7c:	08004abd 	.word	0x08004abd
 8004a80:	08004abd 	.word	0x08004abd
 8004a84:	08004abd 	.word	0x08004abd
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e1c0      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e1bc      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e1b8      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e1b4      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004aac:	2320      	movs	r3, #32
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e1b0      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004ab4:	2340      	movs	r3, #64	@ 0x40
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e1ac      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac2:	e1a8      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a75      	ldr	r2, [pc, #468]	@ (8004ca0 <UART_SetConfig+0x638>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d130      	bne.n	8004b30 <UART_SetConfig+0x4c8>
 8004ace:	4b73      	ldr	r3, [pc, #460]	@ (8004c9c <UART_SetConfig+0x634>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d826      	bhi.n	8004b28 <UART_SetConfig+0x4c0>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x478>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e18a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e186      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e182      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e17e      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e17a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b20:	2340      	movs	r3, #64	@ 0x40
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e176      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e172      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5b      	ldr	r2, [pc, #364]	@ (8004ca4 <UART_SetConfig+0x63c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d130      	bne.n	8004b9c <UART_SetConfig+0x534>
 8004b3a:	4b58      	ldr	r3, [pc, #352]	@ (8004c9c <UART_SetConfig+0x634>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d826      	bhi.n	8004b94 <UART_SetConfig+0x52c>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <UART_SetConfig+0x4e4>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b75 	.word	0x08004b75
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e154      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e150      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e14c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e148      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b84:	2320      	movs	r3, #32
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e144      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b8c:	2340      	movs	r3, #64	@ 0x40
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b92:	e140      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9a:	e13c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a41      	ldr	r2, [pc, #260]	@ (8004ca8 <UART_SetConfig+0x640>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	f040 8082 	bne.w	8004cac <UART_SetConfig+0x644>
 8004ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8004c9c <UART_SetConfig+0x634>)
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb0:	2b28      	cmp	r3, #40	@ 0x28
 8004bb2:	d86d      	bhi.n	8004c90 <UART_SetConfig+0x628>
 8004bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <UART_SetConfig+0x554>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c91 	.word	0x08004c91
 8004bc4:	08004c91 	.word	0x08004c91
 8004bc8:	08004c91 	.word	0x08004c91
 8004bcc:	08004c91 	.word	0x08004c91
 8004bd0:	08004c91 	.word	0x08004c91
 8004bd4:	08004c91 	.word	0x08004c91
 8004bd8:	08004c91 	.word	0x08004c91
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c91 	.word	0x08004c91
 8004be4:	08004c91 	.word	0x08004c91
 8004be8:	08004c91 	.word	0x08004c91
 8004bec:	08004c91 	.word	0x08004c91
 8004bf0:	08004c91 	.word	0x08004c91
 8004bf4:	08004c91 	.word	0x08004c91
 8004bf8:	08004c91 	.word	0x08004c91
 8004bfc:	08004c71 	.word	0x08004c71
 8004c00:	08004c91 	.word	0x08004c91
 8004c04:	08004c91 	.word	0x08004c91
 8004c08:	08004c91 	.word	0x08004c91
 8004c0c:	08004c91 	.word	0x08004c91
 8004c10:	08004c91 	.word	0x08004c91
 8004c14:	08004c91 	.word	0x08004c91
 8004c18:	08004c91 	.word	0x08004c91
 8004c1c:	08004c79 	.word	0x08004c79
 8004c20:	08004c91 	.word	0x08004c91
 8004c24:	08004c91 	.word	0x08004c91
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004c91 	.word	0x08004c91
 8004c34:	08004c91 	.word	0x08004c91
 8004c38:	08004c91 	.word	0x08004c91
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c91 	.word	0x08004c91
 8004c44:	08004c91 	.word	0x08004c91
 8004c48:	08004c91 	.word	0x08004c91
 8004c4c:	08004c91 	.word	0x08004c91
 8004c50:	08004c91 	.word	0x08004c91
 8004c54:	08004c91 	.word	0x08004c91
 8004c58:	08004c91 	.word	0x08004c91
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e0d6      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e0d2      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e0ce      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e0ca      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e0c6      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c88:	2340      	movs	r3, #64	@ 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e0c2      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e0be      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004c98:	40011400 	.word	0x40011400
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	40007800 	.word	0x40007800
 8004ca4:	40007c00 	.word	0x40007c00
 8004ca8:	40011800 	.word	0x40011800
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4aad      	ldr	r2, [pc, #692]	@ (8004f68 <UART_SetConfig+0x900>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d176      	bne.n	8004da4 <UART_SetConfig+0x73c>
 8004cb6:	4bad      	ldr	r3, [pc, #692]	@ (8004f6c <UART_SetConfig+0x904>)
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cbe:	2b28      	cmp	r3, #40	@ 0x28
 8004cc0:	d86c      	bhi.n	8004d9c <UART_SetConfig+0x734>
 8004cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <UART_SetConfig+0x660>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d9d 	.word	0x08004d9d
 8004cd0:	08004d9d 	.word	0x08004d9d
 8004cd4:	08004d9d 	.word	0x08004d9d
 8004cd8:	08004d9d 	.word	0x08004d9d
 8004cdc:	08004d9d 	.word	0x08004d9d
 8004ce0:	08004d9d 	.word	0x08004d9d
 8004ce4:	08004d9d 	.word	0x08004d9d
 8004ce8:	08004d75 	.word	0x08004d75
 8004cec:	08004d9d 	.word	0x08004d9d
 8004cf0:	08004d9d 	.word	0x08004d9d
 8004cf4:	08004d9d 	.word	0x08004d9d
 8004cf8:	08004d9d 	.word	0x08004d9d
 8004cfc:	08004d9d 	.word	0x08004d9d
 8004d00:	08004d9d 	.word	0x08004d9d
 8004d04:	08004d9d 	.word	0x08004d9d
 8004d08:	08004d7d 	.word	0x08004d7d
 8004d0c:	08004d9d 	.word	0x08004d9d
 8004d10:	08004d9d 	.word	0x08004d9d
 8004d14:	08004d9d 	.word	0x08004d9d
 8004d18:	08004d9d 	.word	0x08004d9d
 8004d1c:	08004d9d 	.word	0x08004d9d
 8004d20:	08004d9d 	.word	0x08004d9d
 8004d24:	08004d9d 	.word	0x08004d9d
 8004d28:	08004d85 	.word	0x08004d85
 8004d2c:	08004d9d 	.word	0x08004d9d
 8004d30:	08004d9d 	.word	0x08004d9d
 8004d34:	08004d9d 	.word	0x08004d9d
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004d9d 	.word	0x08004d9d
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004d8d 	.word	0x08004d8d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d9d 	.word	0x08004d9d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e050      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e04c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e048      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e044      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e040      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d94:	2340      	movs	r3, #64	@ 0x40
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e03c      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da2:	e038      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a71      	ldr	r2, [pc, #452]	@ (8004f70 <UART_SetConfig+0x908>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d130      	bne.n	8004e10 <UART_SetConfig+0x7a8>
 8004dae:	4b6f      	ldr	r3, [pc, #444]	@ (8004f6c <UART_SetConfig+0x904>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d826      	bhi.n	8004e08 <UART_SetConfig+0x7a0>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x758>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004dd9 	.word	0x08004dd9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004de9 	.word	0x08004de9
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004e01 	.word	0x08004e01
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e01a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e016      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e012      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e00e      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e00a      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004e00:	2340      	movs	r3, #64	@ 0x40
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e006      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e002      	b.n	8004e16 <UART_SetConfig+0x7ae>
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a55      	ldr	r2, [pc, #340]	@ (8004f70 <UART_SetConfig+0x908>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f040 80f8 	bne.w	8005012 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	dc46      	bgt.n	8004eb8 <UART_SetConfig+0x850>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	db75      	blt.n	8004f1a <UART_SetConfig+0x8b2>
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	2b1e      	cmp	r3, #30
 8004e32:	d872      	bhi.n	8004f1a <UART_SetConfig+0x8b2>
 8004e34:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0x7d4>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004ebf 	.word	0x08004ebf
 8004e40:	08004f1b 	.word	0x08004f1b
 8004e44:	08004ec7 	.word	0x08004ec7
 8004e48:	08004f1b 	.word	0x08004f1b
 8004e4c:	08004f1b 	.word	0x08004f1b
 8004e50:	08004f1b 	.word	0x08004f1b
 8004e54:	08004ed7 	.word	0x08004ed7
 8004e58:	08004f1b 	.word	0x08004f1b
 8004e5c:	08004f1b 	.word	0x08004f1b
 8004e60:	08004f1b 	.word	0x08004f1b
 8004e64:	08004f1b 	.word	0x08004f1b
 8004e68:	08004f1b 	.word	0x08004f1b
 8004e6c:	08004f1b 	.word	0x08004f1b
 8004e70:	08004f1b 	.word	0x08004f1b
 8004e74:	08004ee7 	.word	0x08004ee7
 8004e78:	08004f1b 	.word	0x08004f1b
 8004e7c:	08004f1b 	.word	0x08004f1b
 8004e80:	08004f1b 	.word	0x08004f1b
 8004e84:	08004f1b 	.word	0x08004f1b
 8004e88:	08004f1b 	.word	0x08004f1b
 8004e8c:	08004f1b 	.word	0x08004f1b
 8004e90:	08004f1b 	.word	0x08004f1b
 8004e94:	08004f1b 	.word	0x08004f1b
 8004e98:	08004f1b 	.word	0x08004f1b
 8004e9c:	08004f1b 	.word	0x08004f1b
 8004ea0:	08004f1b 	.word	0x08004f1b
 8004ea4:	08004f1b 	.word	0x08004f1b
 8004ea8:	08004f1b 	.word	0x08004f1b
 8004eac:	08004f1b 	.word	0x08004f1b
 8004eb0:	08004f1b 	.word	0x08004f1b
 8004eb4:	08004f0d 	.word	0x08004f0d
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d02a      	beq.n	8004f12 <UART_SetConfig+0x8aa>
 8004ebc:	e02d      	b.n	8004f1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ebe:	f7fe fe0b 	bl	8003ad8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ec4:	e02f      	b.n	8004f26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fe1a 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ed4:	e027      	b.n	8004f26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ed6:	f107 0318 	add.w	r3, r7, #24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe ff66 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ee4:	e01f      	b.n	8004f26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee6:	4b21      	ldr	r3, [pc, #132]	@ (8004f6c <UART_SetConfig+0x904>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f6c <UART_SetConfig+0x904>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <UART_SetConfig+0x90c>)
 8004efe:	fa22 f303 	lsr.w	r3, r2, r3
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f04:	e00f      	b.n	8004f26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <UART_SetConfig+0x90c>)
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f0a:	e00c      	b.n	8004f26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <UART_SetConfig+0x910>)
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f10:	e009      	b.n	8004f26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f18:	e005      	b.n	8004f26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 81ee 	beq.w	800530a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <UART_SetConfig+0x914>)
 8004f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d305      	bcc.n	8004f5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d910      	bls.n	8004f80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f64:	e1d1      	b.n	800530a <UART_SetConfig+0xca2>
 8004f66:	bf00      	nop
 8004f68:	40011c00 	.word	0x40011c00
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58000c00 	.word	0x58000c00
 8004f74:	03d09000 	.word	0x03d09000
 8004f78:	003d0900 	.word	0x003d0900
 8004f7c:	08006f08 	.word	0x08006f08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	2200      	movs	r2, #0
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	60fa      	str	r2, [r7, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	4ac0      	ldr	r2, [pc, #768]	@ (8005290 <UART_SetConfig+0xc28>)
 8004f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2200      	movs	r2, #0
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa2:	f7fb fa0d 	bl	80003c0 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	020b      	lsls	r3, r1, #8
 8004fb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fbc:	0202      	lsls	r2, r0, #8
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	6849      	ldr	r1, [r1, #4]
 8004fc2:	0849      	lsrs	r1, r1, #1
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	4605      	mov	r5, r0
 8004fca:	eb12 0804 	adds.w	r8, r2, r4
 8004fce:	eb43 0905 	adc.w	r9, r3, r5
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	469a      	mov	sl, r3
 8004fda:	4693      	mov	fp, r2
 8004fdc:	4652      	mov	r2, sl
 8004fde:	465b      	mov	r3, fp
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb f9ec 	bl	80003c0 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff6:	d308      	bcc.n	800500a <UART_SetConfig+0x9a2>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffe:	d204      	bcs.n	800500a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e17f      	b.n	800530a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005010:	e17b      	b.n	800530a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501a:	f040 80bd 	bne.w	8005198 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800501e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005022:	2b20      	cmp	r3, #32
 8005024:	dc48      	bgt.n	80050b8 <UART_SetConfig+0xa50>
 8005026:	2b00      	cmp	r3, #0
 8005028:	db7b      	blt.n	8005122 <UART_SetConfig+0xaba>
 800502a:	2b20      	cmp	r3, #32
 800502c:	d879      	bhi.n	8005122 <UART_SetConfig+0xaba>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <UART_SetConfig+0x9cc>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	080050bf 	.word	0x080050bf
 8005038:	080050c7 	.word	0x080050c7
 800503c:	08005123 	.word	0x08005123
 8005040:	08005123 	.word	0x08005123
 8005044:	080050cf 	.word	0x080050cf
 8005048:	08005123 	.word	0x08005123
 800504c:	08005123 	.word	0x08005123
 8005050:	08005123 	.word	0x08005123
 8005054:	080050df 	.word	0x080050df
 8005058:	08005123 	.word	0x08005123
 800505c:	08005123 	.word	0x08005123
 8005060:	08005123 	.word	0x08005123
 8005064:	08005123 	.word	0x08005123
 8005068:	08005123 	.word	0x08005123
 800506c:	08005123 	.word	0x08005123
 8005070:	08005123 	.word	0x08005123
 8005074:	080050ef 	.word	0x080050ef
 8005078:	08005123 	.word	0x08005123
 800507c:	08005123 	.word	0x08005123
 8005080:	08005123 	.word	0x08005123
 8005084:	08005123 	.word	0x08005123
 8005088:	08005123 	.word	0x08005123
 800508c:	08005123 	.word	0x08005123
 8005090:	08005123 	.word	0x08005123
 8005094:	08005123 	.word	0x08005123
 8005098:	08005123 	.word	0x08005123
 800509c:	08005123 	.word	0x08005123
 80050a0:	08005123 	.word	0x08005123
 80050a4:	08005123 	.word	0x08005123
 80050a8:	08005123 	.word	0x08005123
 80050ac:	08005123 	.word	0x08005123
 80050b0:	08005123 	.word	0x08005123
 80050b4:	08005115 	.word	0x08005115
 80050b8:	2b40      	cmp	r3, #64	@ 0x40
 80050ba:	d02e      	beq.n	800511a <UART_SetConfig+0xab2>
 80050bc:	e031      	b.n	8005122 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7fd fb3f 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 80050c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050c4:	e033      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7fd fb51 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 80050ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050cc:	e02f      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fd16 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050dc:	e027      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050de:	f107 0318 	add.w	r3, r7, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fe62 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ec:	e01f      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ee:	4b69      	ldr	r3, [pc, #420]	@ (8005294 <UART_SetConfig+0xc2c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050fa:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <UART_SetConfig+0xc2c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	4a64      	ldr	r2, [pc, #400]	@ (8005298 <UART_SetConfig+0xc30>)
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800510c:	e00f      	b.n	800512e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800510e:	4b62      	ldr	r3, [pc, #392]	@ (8005298 <UART_SetConfig+0xc30>)
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005112:	e00c      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005114:	4b61      	ldr	r3, [pc, #388]	@ (800529c <UART_SetConfig+0xc34>)
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800512c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80ea 	beq.w	800530a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	4a55      	ldr	r2, [pc, #340]	@ (8005290 <UART_SetConfig+0xc28>)
 800513c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005140:	461a      	mov	r2, r3
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	441a      	add	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d916      	bls.n	8005190 <UART_SetConfig+0xb28>
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005168:	d212      	bcs.n	8005190 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	b29b      	uxth	r3, r3
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	b29a      	uxth	r2, r3
 8005180:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005182:	4313      	orrs	r3, r2
 8005184:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	e0bc      	b.n	800530a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005196:	e0b8      	b.n	800530a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005198:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800519c:	2b20      	cmp	r3, #32
 800519e:	dc4b      	bgt.n	8005238 <UART_SetConfig+0xbd0>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f2c0 8087 	blt.w	80052b4 <UART_SetConfig+0xc4c>
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	f200 8084 	bhi.w	80052b4 <UART_SetConfig+0xc4c>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <UART_SetConfig+0xb4c>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	0800523f 	.word	0x0800523f
 80051b8:	08005247 	.word	0x08005247
 80051bc:	080052b5 	.word	0x080052b5
 80051c0:	080052b5 	.word	0x080052b5
 80051c4:	0800524f 	.word	0x0800524f
 80051c8:	080052b5 	.word	0x080052b5
 80051cc:	080052b5 	.word	0x080052b5
 80051d0:	080052b5 	.word	0x080052b5
 80051d4:	0800525f 	.word	0x0800525f
 80051d8:	080052b5 	.word	0x080052b5
 80051dc:	080052b5 	.word	0x080052b5
 80051e0:	080052b5 	.word	0x080052b5
 80051e4:	080052b5 	.word	0x080052b5
 80051e8:	080052b5 	.word	0x080052b5
 80051ec:	080052b5 	.word	0x080052b5
 80051f0:	080052b5 	.word	0x080052b5
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	080052b5 	.word	0x080052b5
 80051fc:	080052b5 	.word	0x080052b5
 8005200:	080052b5 	.word	0x080052b5
 8005204:	080052b5 	.word	0x080052b5
 8005208:	080052b5 	.word	0x080052b5
 800520c:	080052b5 	.word	0x080052b5
 8005210:	080052b5 	.word	0x080052b5
 8005214:	080052b5 	.word	0x080052b5
 8005218:	080052b5 	.word	0x080052b5
 800521c:	080052b5 	.word	0x080052b5
 8005220:	080052b5 	.word	0x080052b5
 8005224:	080052b5 	.word	0x080052b5
 8005228:	080052b5 	.word	0x080052b5
 800522c:	080052b5 	.word	0x080052b5
 8005230:	080052b5 	.word	0x080052b5
 8005234:	080052a7 	.word	0x080052a7
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d037      	beq.n	80052ac <UART_SetConfig+0xc44>
 800523c:	e03a      	b.n	80052b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523e:	f7fd fa7f 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8005242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005244:	e03c      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005246:	f7fd fa91 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 800524a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800524c:	e038      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800524e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fc56 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800525c:	e030      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525e:	f107 0318 	add.w	r3, r7, #24
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fda2 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800526c:	e028      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800526e:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <UART_SetConfig+0xc2c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <UART_SetConfig+0xc2c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <UART_SetConfig+0xc30>)
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800528c:	e018      	b.n	80052c0 <UART_SetConfig+0xc58>
 800528e:	bf00      	nop
 8005290:	08006f08 	.word	0x08006f08
 8005294:	58024400 	.word	0x58024400
 8005298:	03d09000 	.word	0x03d09000
 800529c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b24      	ldr	r3, [pc, #144]	@ (8005334 <UART_SetConfig+0xccc>)
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a4:	e00c      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <UART_SetConfig+0xcd0>)
 80052a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052aa:	e009      	b.n	80052c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b2:	e005      	b.n	80052c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052be:	bf00      	nop
    }

    if (pclk != 0U)
 80052c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d021      	beq.n	800530a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <UART_SetConfig+0xcd4>)
 80052cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	441a      	add	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d909      	bls.n	8005304 <UART_SetConfig+0xc9c>
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f6:	d205      	bcs.n	8005304 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	e002      	b.n	800530a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2201      	movs	r2, #1
 800530e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2201      	movs	r2, #1
 8005316:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005326:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800532a:	4618      	mov	r0, r3
 800532c:	3748      	adds	r7, #72	@ 0x48
 800532e:	46bd      	mov	sp, r7
 8005330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005334:	03d09000 	.word	0x03d09000
 8005338:	003d0900 	.word	0x003d0900
 800533c:	08006f08 	.word	0x08006f08

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b098      	sub	sp, #96	@ 0x60
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fb feac 	bl	80011f0 <HAL_GetTick>
 8005498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d12f      	bne.n	8005508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f88e 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e063      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d149      	bne.n	80055aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551e:	2200      	movs	r2, #0
 8005520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f857 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03c      	beq.n	80055aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60fb      	str	r3, [r7, #12]
   return(result);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	617b      	str	r3, [r7, #20]
   return(result);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e012      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3758      	adds	r7, #88	@ 0x58
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	e04f      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d04b      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fb fdfd 	bl	80011f0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <UART_WaitOnFlagUntilTimeout+0x30>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e04e      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d037      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d034      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	d031      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d110      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f839 	bl	80056b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2208      	movs	r2, #8
 8005646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e029      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005664:	d111      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f81f 	bl	80056b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e00f      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d0a0      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b095      	sub	sp, #84	@ 0x54
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056da:	643b      	str	r3, [r7, #64]	@ 0x40
 80056dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	4b1e      	ldr	r3, [pc, #120]	@ (800577c <UART_EndRxTransfer+0xc8>)
 8005702:	4013      	ands	r3, r2
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800570e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d118      	bne.n	800575c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60bb      	str	r3, [r7, #8]
   return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005770:	bf00      	nop
 8005772:	3754      	adds	r7, #84	@ 0x54
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	effffffe 	.word	0xeffffffe

08005780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UARTEx_DisableFifoMode+0x16>
 8005792:	2302      	movs	r3, #2
 8005794:	e027      	b.n	80057e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2224      	movs	r2, #36	@ 0x24
 80057a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005806:	2302      	movs	r3, #2
 8005808:	e02d      	b.n	8005866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2224      	movs	r2, #36	@ 0x24
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f850 	bl	80058ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005882:	2302      	movs	r3, #2
 8005884:	e02d      	b.n	80058e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2224      	movs	r2, #36	@ 0x24
 8005892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f812 	bl	80058ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800590c:	e031      	b.n	8005972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800590e:	2310      	movs	r3, #16
 8005910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005912:	2310      	movs	r3, #16
 8005914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	0e5b      	lsrs	r3, r3, #25
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	0f5b      	lsrs	r3, r3, #29
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	7b3a      	ldrb	r2, [r7, #12]
 800593a:	4911      	ldr	r1, [pc, #68]	@ (8005980 <UARTEx_SetNbDataToProcess+0x94>)
 800593c:	5c8a      	ldrb	r2, [r1, r2]
 800593e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005942:	7b3a      	ldrb	r2, [r7, #12]
 8005944:	490f      	ldr	r1, [pc, #60]	@ (8005984 <UARTEx_SetNbDataToProcess+0x98>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005948:	fb93 f3f2 	sdiv	r3, r3, r2
 800594c:	b29a      	uxth	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	7b7a      	ldrb	r2, [r7, #13]
 8005958:	4909      	ldr	r1, [pc, #36]	@ (8005980 <UARTEx_SetNbDataToProcess+0x94>)
 800595a:	5c8a      	ldrb	r2, [r1, r2]
 800595c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005960:	7b7a      	ldrb	r2, [r7, #13]
 8005962:	4908      	ldr	r1, [pc, #32]	@ (8005984 <UARTEx_SetNbDataToProcess+0x98>)
 8005964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005966:	fb93 f3f2 	sdiv	r3, r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	08006f20 	.word	0x08006f20
 8005984:	08006f28 	.word	0x08006f28

08005988 <sniprintf>:
 8005988:	b40c      	push	{r2, r3}
 800598a:	b530      	push	{r4, r5, lr}
 800598c:	4b17      	ldr	r3, [pc, #92]	@ (80059ec <sniprintf+0x64>)
 800598e:	1e0c      	subs	r4, r1, #0
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	b09d      	sub	sp, #116	@ 0x74
 8005994:	da08      	bge.n	80059a8 <sniprintf+0x20>
 8005996:	238b      	movs	r3, #139	@ 0x8b
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	f04f 30ff 	mov.w	r0, #4294967295
 800599e:	b01d      	add	sp, #116	@ 0x74
 80059a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a4:	b002      	add	sp, #8
 80059a6:	4770      	bx	lr
 80059a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059b0:	bf14      	ite	ne
 80059b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059b6:	4623      	moveq	r3, r4
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9307      	str	r3, [sp, #28]
 80059bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059c0:	9002      	str	r0, [sp, #8]
 80059c2:	9006      	str	r0, [sp, #24]
 80059c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059ca:	ab21      	add	r3, sp, #132	@ 0x84
 80059cc:	a902      	add	r1, sp, #8
 80059ce:	4628      	mov	r0, r5
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	f000 fa23 	bl	8005e1c <_svfiprintf_r>
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	bfbc      	itt	lt
 80059da:	238b      	movlt	r3, #139	@ 0x8b
 80059dc:	602b      	strlt	r3, [r5, #0]
 80059de:	2c00      	cmp	r4, #0
 80059e0:	d0dd      	beq.n	800599e <sniprintf+0x16>
 80059e2:	9b02      	ldr	r3, [sp, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e7d9      	b.n	800599e <sniprintf+0x16>
 80059ea:	bf00      	nop
 80059ec:	24000010 	.word	0x24000010

080059f0 <siprintf>:
 80059f0:	b40e      	push	{r1, r2, r3}
 80059f2:	b500      	push	{lr}
 80059f4:	b09c      	sub	sp, #112	@ 0x70
 80059f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80059f8:	9002      	str	r0, [sp, #8]
 80059fa:	9006      	str	r0, [sp, #24]
 80059fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a00:	4809      	ldr	r0, [pc, #36]	@ (8005a28 <siprintf+0x38>)
 8005a02:	9107      	str	r1, [sp, #28]
 8005a04:	9104      	str	r1, [sp, #16]
 8005a06:	4909      	ldr	r1, [pc, #36]	@ (8005a2c <siprintf+0x3c>)
 8005a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0c:	9105      	str	r1, [sp, #20]
 8005a0e:	6800      	ldr	r0, [r0, #0]
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	a902      	add	r1, sp, #8
 8005a14:	f000 fa02 	bl	8005e1c <_svfiprintf_r>
 8005a18:	9b02      	ldr	r3, [sp, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	b01c      	add	sp, #112	@ 0x70
 8005a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a24:	b003      	add	sp, #12
 8005a26:	4770      	bx	lr
 8005a28:	24000010 	.word	0x24000010
 8005a2c:	ffff0208 	.word	0xffff0208

08005a30 <siscanf>:
 8005a30:	b40e      	push	{r1, r2, r3}
 8005a32:	b530      	push	{r4, r5, lr}
 8005a34:	b09c      	sub	sp, #112	@ 0x70
 8005a36:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005a38:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005a3c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	9006      	str	r0, [sp, #24]
 8005a48:	f7fa fc62 	bl	8000310 <strlen>
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <siscanf+0x4c>)
 8005a4e:	9003      	str	r0, [sp, #12]
 8005a50:	9007      	str	r0, [sp, #28]
 8005a52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a54:	480a      	ldr	r0, [pc, #40]	@ (8005a80 <siscanf+0x50>)
 8005a56:	9401      	str	r4, [sp, #4]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a5c:	9314      	str	r3, [sp, #80]	@ 0x50
 8005a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a66:	462a      	mov	r2, r5
 8005a68:	4623      	mov	r3, r4
 8005a6a:	a902      	add	r1, sp, #8
 8005a6c:	6800      	ldr	r0, [r0, #0]
 8005a6e:	f000 fb29 	bl	80060c4 <__ssvfiscanf_r>
 8005a72:	b01c      	add	sp, #112	@ 0x70
 8005a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a78:	b003      	add	sp, #12
 8005a7a:	4770      	bx	lr
 8005a7c:	08005a85 	.word	0x08005a85
 8005a80:	24000010 	.word	0x24000010

08005a84 <__seofread>:
 8005a84:	2000      	movs	r0, #0
 8005a86:	4770      	bx	lr

08005a88 <memset>:
 8005a88:	4402      	add	r2, r0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d100      	bne.n	8005a92 <memset+0xa>
 8005a90:	4770      	bx	lr
 8005a92:	f803 1b01 	strb.w	r1, [r3], #1
 8005a96:	e7f9      	b.n	8005a8c <memset+0x4>

08005a98 <__strtok_r>:
 8005a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	b908      	cbnz	r0, 8005aa2 <__strtok_r+0xa>
 8005a9e:	6814      	ldr	r4, [r2, #0]
 8005aa0:	b144      	cbz	r4, 8005ab4 <__strtok_r+0x1c>
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005aa8:	460f      	mov	r7, r1
 8005aaa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005aae:	b91e      	cbnz	r6, 8005ab8 <__strtok_r+0x20>
 8005ab0:	b965      	cbnz	r5, 8005acc <__strtok_r+0x34>
 8005ab2:	6015      	str	r5, [r2, #0]
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e005      	b.n	8005ac4 <__strtok_r+0x2c>
 8005ab8:	42b5      	cmp	r5, r6
 8005aba:	d1f6      	bne.n	8005aaa <__strtok_r+0x12>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f0      	bne.n	8005aa2 <__strtok_r+0xa>
 8005ac0:	6014      	str	r4, [r2, #0]
 8005ac2:	7003      	strb	r3, [r0, #0]
 8005ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac6:	461c      	mov	r4, r3
 8005ac8:	e00c      	b.n	8005ae4 <__strtok_r+0x4c>
 8005aca:	b915      	cbnz	r5, 8005ad2 <__strtok_r+0x3a>
 8005acc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ad0:	460e      	mov	r6, r1
 8005ad2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005ad6:	42ab      	cmp	r3, r5
 8005ad8:	d1f7      	bne.n	8005aca <__strtok_r+0x32>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f3      	beq.n	8005ac6 <__strtok_r+0x2e>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005ae4:	6014      	str	r4, [r2, #0]
 8005ae6:	e7ed      	b.n	8005ac4 <__strtok_r+0x2c>

08005ae8 <strtok_r>:
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f7ff bfd5 	b.w	8005a98 <__strtok_r>

08005aee <strstr>:
 8005aee:	780a      	ldrb	r2, [r1, #0]
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	b96a      	cbnz	r2, 8005b10 <strstr+0x22>
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d109      	bne.n	8005b0e <strstr+0x20>
 8005afa:	460c      	mov	r4, r1
 8005afc:	4605      	mov	r5, r0
 8005afe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f6      	beq.n	8005af4 <strstr+0x6>
 8005b06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b0a:	429e      	cmp	r6, r3
 8005b0c:	d0f7      	beq.n	8005afe <strstr+0x10>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	7803      	ldrb	r3, [r0, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ef      	bne.n	8005af6 <strstr+0x8>
 8005b16:	4618      	mov	r0, r3
 8005b18:	e7ec      	b.n	8005af4 <strstr+0x6>
	...

08005b1c <__errno>:
 8005b1c:	4b01      	ldr	r3, [pc, #4]	@ (8005b24 <__errno+0x8>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	24000010 	.word	0x24000010

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2600      	movs	r6, #0
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4d0b      	ldr	r5, [pc, #44]	@ (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f001 f8e0 	bl	8006d00 <_init>
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2600      	movs	r6, #0
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08007088 	.word	0x08007088
 8005b64:	08007088 	.word	0x08007088
 8005b68:	08007088 	.word	0x08007088
 8005b6c:	0800708c 	.word	0x0800708c

08005b70 <__retarget_lock_acquire_recursive>:
 8005b70:	4770      	bx	lr

08005b72 <__retarget_lock_release_recursive>:
 8005b72:	4770      	bx	lr

08005b74 <_free_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d041      	beq.n	8005c00 <_free_r+0x8c>
 8005b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b80:	1f0c      	subs	r4, r1, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfb8      	it	lt
 8005b86:	18e4      	addlt	r4, r4, r3
 8005b88:	f000 f8e0 	bl	8005d4c <__malloc_lock>
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c04 <_free_r+0x90>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x2c>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	4628      	mov	r0, r5
 8005b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9c:	f000 b8dc 	b.w	8005d58 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x42>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x1e>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x4c>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x42>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1850      	adds	r0, r2, r1
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x6c>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	4401      	add	r1, r0
 8005bcc:	1850      	adds	r0, r2, r1
 8005bce:	4283      	cmp	r3, r0
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x22>
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	4408      	add	r0, r1
 8005bdc:	6010      	str	r0, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x22>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x74>
 8005be2:	230c      	movs	r3, #12
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x22>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1809      	addeq	r1, r1, r0
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x22>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	240003b8 	.word	0x240003b8

08005c08 <sbrk_aligned>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c48 <sbrk_aligned+0x40>)
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	4605      	mov	r5, r0
 8005c12:	b911      	cbnz	r1, 8005c1a <sbrk_aligned+0x12>
 8005c14:	f000 ff34 	bl	8006a80 <_sbrk_r>
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 ff2f 	bl	8006a80 <_sbrk_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d103      	bne.n	8005c2e <sbrk_aligned+0x26>
 8005c26:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d0f8      	beq.n	8005c2a <sbrk_aligned+0x22>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 ff20 	bl	8006a80 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f2      	bne.n	8005c2a <sbrk_aligned+0x22>
 8005c44:	e7ef      	b.n	8005c26 <sbrk_aligned+0x1e>
 8005c46:	bf00      	nop
 8005c48:	240003b4 	.word	0x240003b4

08005c4c <_malloc_r>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4606      	mov	r6, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d904      	bls.n	8005c72 <_malloc_r+0x26>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d48 <_malloc_r+0xfc>
 8005c76:	f000 f869 	bl	8005d4c <__malloc_lock>
 8005c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7e:	461c      	mov	r4, r3
 8005c80:	bb44      	cbnz	r4, 8005cd4 <_malloc_r+0x88>
 8005c82:	4629      	mov	r1, r5
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ffbf 	bl	8005c08 <sbrk_aligned>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	d158      	bne.n	8005d42 <_malloc_r+0xf6>
 8005c90:	f8d8 4000 	ldr.w	r4, [r8]
 8005c94:	4627      	mov	r7, r4
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d143      	bne.n	8005d22 <_malloc_r+0xd6>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d04b      	beq.n	8005d36 <_malloc_r+0xea>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	eb04 0903 	add.w	r9, r4, r3
 8005ca8:	f000 feea 	bl	8006a80 <_sbrk_r>
 8005cac:	4581      	cmp	r9, r0
 8005cae:	d142      	bne.n	8005d36 <_malloc_r+0xea>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	1a6d      	subs	r5, r5, r1
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ffa6 	bl	8005c08 <sbrk_aligned>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d03a      	beq.n	8005d36 <_malloc_r+0xea>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	442b      	add	r3, r5
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	bb62      	cbnz	r2, 8005d28 <_malloc_r+0xdc>
 8005cce:	f8c8 7000 	str.w	r7, [r8]
 8005cd2:	e00f      	b.n	8005cf4 <_malloc_r+0xa8>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	1b52      	subs	r2, r2, r5
 8005cd8:	d420      	bmi.n	8005d1c <_malloc_r+0xd0>
 8005cda:	2a0b      	cmp	r2, #11
 8005cdc:	d917      	bls.n	8005d0e <_malloc_r+0xc2>
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	6025      	str	r5, [r4, #0]
 8005ce4:	bf18      	it	ne
 8005ce6:	6059      	strne	r1, [r3, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	bf08      	it	eq
 8005cec:	f8c8 1000 	streq.w	r1, [r8]
 8005cf0:	5162      	str	r2, [r4, r5]
 8005cf2:	604b      	str	r3, [r1, #4]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f82f 	bl	8005d58 <__malloc_unlock>
 8005cfa:	f104 000b 	add.w	r0, r4, #11
 8005cfe:	1d23      	adds	r3, r4, #4
 8005d00:	f020 0007 	bic.w	r0, r0, #7
 8005d04:	1ac2      	subs	r2, r0, r3
 8005d06:	bf1c      	itt	ne
 8005d08:	1a1b      	subne	r3, r3, r0
 8005d0a:	50a3      	strne	r3, [r4, r2]
 8005d0c:	e7af      	b.n	8005c6e <_malloc_r+0x22>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	bf0c      	ite	eq
 8005d14:	f8c8 2000 	streq.w	r2, [r8]
 8005d18:	605a      	strne	r2, [r3, #4]
 8005d1a:	e7eb      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	6864      	ldr	r4, [r4, #4]
 8005d20:	e7ae      	b.n	8005c80 <_malloc_r+0x34>
 8005d22:	463c      	mov	r4, r7
 8005d24:	687f      	ldr	r7, [r7, #4]
 8005d26:	e7b6      	b.n	8005c96 <_malloc_r+0x4a>
 8005d28:	461a      	mov	r2, r3
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d1fb      	bne.n	8005d28 <_malloc_r+0xdc>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6053      	str	r3, [r2, #4]
 8005d34:	e7de      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f80c 	bl	8005d58 <__malloc_unlock>
 8005d40:	e794      	b.n	8005c6c <_malloc_r+0x20>
 8005d42:	6005      	str	r5, [r0, #0]
 8005d44:	e7d6      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d46:	bf00      	nop
 8005d48:	240003b8 	.word	0x240003b8

08005d4c <__malloc_lock>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__malloc_lock+0x8>)
 8005d4e:	f7ff bf0f 	b.w	8005b70 <__retarget_lock_acquire_recursive>
 8005d52:	bf00      	nop
 8005d54:	240003b0 	.word	0x240003b0

08005d58 <__malloc_unlock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_unlock+0x8>)
 8005d5a:	f7ff bf0a 	b.w	8005b72 <__retarget_lock_release_recursive>
 8005d5e:	bf00      	nop
 8005d60:	240003b0 	.word	0x240003b0

08005d64 <__ssputs_r>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	688e      	ldr	r6, [r1, #8]
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	42be      	cmp	r6, r7
 8005d6e:	680b      	ldr	r3, [r1, #0]
 8005d70:	4682      	mov	sl, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4690      	mov	r8, r2
 8005d76:	d82d      	bhi.n	8005dd4 <__ssputs_r+0x70>
 8005d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d80:	d026      	beq.n	8005dd0 <__ssputs_r+0x6c>
 8005d82:	6965      	ldr	r5, [r4, #20]
 8005d84:	6909      	ldr	r1, [r1, #16]
 8005d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d8a:	eba3 0901 	sub.w	r9, r3, r1
 8005d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d92:	1c7b      	adds	r3, r7, #1
 8005d94:	444b      	add	r3, r9
 8005d96:	106d      	asrs	r5, r5, #1
 8005d98:	429d      	cmp	r5, r3
 8005d9a:	bf38      	it	cc
 8005d9c:	461d      	movcc	r5, r3
 8005d9e:	0553      	lsls	r3, r2, #21
 8005da0:	d527      	bpl.n	8005df2 <__ssputs_r+0x8e>
 8005da2:	4629      	mov	r1, r5
 8005da4:	f7ff ff52 	bl	8005c4c <_malloc_r>
 8005da8:	4606      	mov	r6, r0
 8005daa:	b360      	cbz	r0, 8005e06 <__ssputs_r+0xa2>
 8005dac:	6921      	ldr	r1, [r4, #16]
 8005dae:	464a      	mov	r2, r9
 8005db0:	f000 fe76 	bl	8006aa0 <memcpy>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dbe:	81a3      	strh	r3, [r4, #12]
 8005dc0:	6126      	str	r6, [r4, #16]
 8005dc2:	6165      	str	r5, [r4, #20]
 8005dc4:	444e      	add	r6, r9
 8005dc6:	eba5 0509 	sub.w	r5, r5, r9
 8005dca:	6026      	str	r6, [r4, #0]
 8005dcc:	60a5      	str	r5, [r4, #8]
 8005dce:	463e      	mov	r6, r7
 8005dd0:	42be      	cmp	r6, r7
 8005dd2:	d900      	bls.n	8005dd6 <__ssputs_r+0x72>
 8005dd4:	463e      	mov	r6, r7
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4641      	mov	r1, r8
 8005ddc:	f000 fe35 	bl	8006a4a <memmove>
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	1b9b      	subs	r3, r3, r6
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4433      	add	r3, r6
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	2000      	movs	r0, #0
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	462a      	mov	r2, r5
 8005df4:	f000 fe62 	bl	8006abc <_realloc_r>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d1e0      	bne.n	8005dc0 <__ssputs_r+0x5c>
 8005dfe:	6921      	ldr	r1, [r4, #16]
 8005e00:	4650      	mov	r0, sl
 8005e02:	f7ff feb7 	bl	8005b74 <_free_r>
 8005e06:	230c      	movs	r3, #12
 8005e08:	f8ca 3000 	str.w	r3, [sl]
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e7e9      	b.n	8005dee <__ssputs_r+0x8a>
	...

08005e1c <_svfiprintf_r>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	4698      	mov	r8, r3
 8005e22:	898b      	ldrh	r3, [r1, #12]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	b09d      	sub	sp, #116	@ 0x74
 8005e28:	4607      	mov	r7, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	d510      	bpl.n	8005e52 <_svfiprintf_r+0x36>
 8005e30:	690b      	ldr	r3, [r1, #16]
 8005e32:	b973      	cbnz	r3, 8005e52 <_svfiprintf_r+0x36>
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	f7ff ff09 	bl	8005c4c <_malloc_r>
 8005e3a:	6028      	str	r0, [r5, #0]
 8005e3c:	6128      	str	r0, [r5, #16]
 8005e3e:	b930      	cbnz	r0, 8005e4e <_svfiprintf_r+0x32>
 8005e40:	230c      	movs	r3, #12
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	b01d      	add	sp, #116	@ 0x74
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	2340      	movs	r3, #64	@ 0x40
 8005e50:	616b      	str	r3, [r5, #20]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e56:	2320      	movs	r3, #32
 8005e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e60:	2330      	movs	r3, #48	@ 0x30
 8005e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006000 <_svfiprintf_r+0x1e4>
 8005e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e6a:	f04f 0901 	mov.w	r9, #1
 8005e6e:	4623      	mov	r3, r4
 8005e70:	469a      	mov	sl, r3
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	b10a      	cbz	r2, 8005e7c <_svfiprintf_r+0x60>
 8005e78:	2a25      	cmp	r2, #37	@ 0x25
 8005e7a:	d1f9      	bne.n	8005e70 <_svfiprintf_r+0x54>
 8005e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e80:	d00b      	beq.n	8005e9a <_svfiprintf_r+0x7e>
 8005e82:	465b      	mov	r3, fp
 8005e84:	4622      	mov	r2, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ff6b 	bl	8005d64 <__ssputs_r>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f000 80a7 	beq.w	8005fe2 <_svfiprintf_r+0x1c6>
 8005e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e96:	445a      	add	r2, fp
 8005e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 809f 	beq.w	8005fe2 <_svfiprintf_r+0x1c6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eae:	f10a 0a01 	add.w	sl, sl, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	484e      	ldr	r0, [pc, #312]	@ (8006000 <_svfiprintf_r+0x1e4>)
 8005ec6:	f7fa fa2b 	bl	8000320 <memchr>
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	b9d8      	cbnz	r0, 8005f06 <_svfiprintf_r+0xea>
 8005ece:	06d0      	lsls	r0, r2, #27
 8005ed0:	bf44      	itt	mi
 8005ed2:	2320      	movmi	r3, #32
 8005ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ed8:	0711      	lsls	r1, r2, #28
 8005eda:	bf44      	itt	mi
 8005edc:	232b      	movmi	r3, #43	@ 0x2b
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee8:	d015      	beq.n	8005f16 <_svfiprintf_r+0xfa>
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	4654      	mov	r4, sl
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efa:	3b30      	subs	r3, #48	@ 0x30
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d94b      	bls.n	8005f98 <_svfiprintf_r+0x17c>
 8005f00:	b1b0      	cbz	r0, 8005f30 <_svfiprintf_r+0x114>
 8005f02:	9207      	str	r2, [sp, #28]
 8005f04:	e014      	b.n	8005f30 <_svfiprintf_r+0x114>
 8005f06:	eba0 0308 	sub.w	r3, r0, r8
 8005f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	46a2      	mov	sl, r4
 8005f14:	e7d2      	b.n	8005ebc <_svfiprintf_r+0xa0>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	9103      	str	r1, [sp, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfbb      	ittet	lt
 8005f22:	425b      	neglt	r3, r3
 8005f24:	f042 0202 	orrlt.w	r2, r2, #2
 8005f28:	9307      	strge	r3, [sp, #28]
 8005f2a:	9307      	strlt	r3, [sp, #28]
 8005f2c:	bfb8      	it	lt
 8005f2e:	9204      	strlt	r2, [sp, #16]
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f34:	d10a      	bne.n	8005f4c <_svfiprintf_r+0x130>
 8005f36:	7863      	ldrb	r3, [r4, #1]
 8005f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f3a:	d132      	bne.n	8005fa2 <_svfiprintf_r+0x186>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f48:	3402      	adds	r4, #2
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006010 <_svfiprintf_r+0x1f4>
 8005f50:	7821      	ldrb	r1, [r4, #0]
 8005f52:	2203      	movs	r2, #3
 8005f54:	4650      	mov	r0, sl
 8005f56:	f7fa f9e3 	bl	8000320 <memchr>
 8005f5a:	b138      	cbz	r0, 8005f6c <_svfiprintf_r+0x150>
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	eba0 000a 	sub.w	r0, r0, sl
 8005f62:	2240      	movs	r2, #64	@ 0x40
 8005f64:	4082      	lsls	r2, r0
 8005f66:	4313      	orrs	r3, r2
 8005f68:	3401      	adds	r4, #1
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f70:	4824      	ldr	r0, [pc, #144]	@ (8006004 <_svfiprintf_r+0x1e8>)
 8005f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f76:	2206      	movs	r2, #6
 8005f78:	f7fa f9d2 	bl	8000320 <memchr>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d036      	beq.n	8005fee <_svfiprintf_r+0x1d2>
 8005f80:	4b21      	ldr	r3, [pc, #132]	@ (8006008 <_svfiprintf_r+0x1ec>)
 8005f82:	bb1b      	cbnz	r3, 8005fcc <_svfiprintf_r+0x1b0>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	3307      	adds	r3, #7
 8005f88:	f023 0307 	bic.w	r3, r3, #7
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f92:	4433      	add	r3, r6
 8005f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f96:	e76a      	b.n	8005e6e <_svfiprintf_r+0x52>
 8005f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	e7a8      	b.n	8005ef4 <_svfiprintf_r+0xd8>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	3401      	adds	r4, #1
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 0c0a 	mov.w	ip, #10
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fb4:	3a30      	subs	r2, #48	@ 0x30
 8005fb6:	2a09      	cmp	r2, #9
 8005fb8:	d903      	bls.n	8005fc2 <_svfiprintf_r+0x1a6>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0c6      	beq.n	8005f4c <_svfiprintf_r+0x130>
 8005fbe:	9105      	str	r1, [sp, #20]
 8005fc0:	e7c4      	b.n	8005f4c <_svfiprintf_r+0x130>
 8005fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e7f0      	b.n	8005fae <_svfiprintf_r+0x192>
 8005fcc:	ab03      	add	r3, sp, #12
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <_svfiprintf_r+0x1f0>)
 8005fd4:	a904      	add	r1, sp, #16
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f3af 8000 	nop.w
 8005fdc:	1c42      	adds	r2, r0, #1
 8005fde:	4606      	mov	r6, r0
 8005fe0:	d1d6      	bne.n	8005f90 <_svfiprintf_r+0x174>
 8005fe2:	89ab      	ldrh	r3, [r5, #12]
 8005fe4:	065b      	lsls	r3, r3, #25
 8005fe6:	f53f af2d 	bmi.w	8005e44 <_svfiprintf_r+0x28>
 8005fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fec:	e72c      	b.n	8005e48 <_svfiprintf_r+0x2c>
 8005fee:	ab03      	add	r3, sp, #12
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <_svfiprintf_r+0x1f0>)
 8005ff6:	a904      	add	r1, sp, #16
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f000 fa45 	bl	8006488 <_printf_i>
 8005ffe:	e7ed      	b.n	8005fdc <_svfiprintf_r+0x1c0>
 8006000:	08006f30 	.word	0x08006f30
 8006004:	08006f3a 	.word	0x08006f3a
 8006008:	00000000 	.word	0x00000000
 800600c:	08005d65 	.word	0x08005d65
 8006010:	08006f36 	.word	0x08006f36

08006014 <_sungetc_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	1c4b      	adds	r3, r1, #1
 8006018:	4614      	mov	r4, r2
 800601a:	d103      	bne.n	8006024 <_sungetc_r+0x10>
 800601c:	f04f 35ff 	mov.w	r5, #4294967295
 8006020:	4628      	mov	r0, r5
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	8993      	ldrh	r3, [r2, #12]
 8006026:	f023 0320 	bic.w	r3, r3, #32
 800602a:	8193      	strh	r3, [r2, #12]
 800602c:	6853      	ldr	r3, [r2, #4]
 800602e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006030:	b2cd      	uxtb	r5, r1
 8006032:	b18a      	cbz	r2, 8006058 <_sungetc_r+0x44>
 8006034:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006036:	429a      	cmp	r2, r3
 8006038:	dd08      	ble.n	800604c <_sungetc_r+0x38>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	6022      	str	r2, [r4, #0]
 8006040:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	3301      	adds	r3, #1
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	e7e9      	b.n	8006020 <_sungetc_r+0xc>
 800604c:	4621      	mov	r1, r4
 800604e:	f000 fcc2 	bl	80069d6 <__submore>
 8006052:	2800      	cmp	r0, #0
 8006054:	d0f1      	beq.n	800603a <_sungetc_r+0x26>
 8006056:	e7e1      	b.n	800601c <_sungetc_r+0x8>
 8006058:	6921      	ldr	r1, [r4, #16]
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	b141      	cbz	r1, 8006070 <_sungetc_r+0x5c>
 800605e:	4291      	cmp	r1, r2
 8006060:	d206      	bcs.n	8006070 <_sungetc_r+0x5c>
 8006062:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006066:	42a9      	cmp	r1, r5
 8006068:	d102      	bne.n	8006070 <_sungetc_r+0x5c>
 800606a:	3a01      	subs	r2, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	e7ea      	b.n	8006046 <_sungetc_r+0x32>
 8006070:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006078:	6363      	str	r3, [r4, #52]	@ 0x34
 800607a:	2303      	movs	r3, #3
 800607c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800607e:	4623      	mov	r3, r4
 8006080:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	2301      	movs	r3, #1
 8006088:	e7de      	b.n	8006048 <_sungetc_r+0x34>

0800608a <__ssrefill_r>:
 800608a:	b510      	push	{r4, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006090:	b169      	cbz	r1, 80060ae <__ssrefill_r+0x24>
 8006092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006096:	4299      	cmp	r1, r3
 8006098:	d001      	beq.n	800609e <__ssrefill_r+0x14>
 800609a:	f7ff fd6b 	bl	8005b74 <_free_r>
 800609e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060a0:	6063      	str	r3, [r4, #4]
 80060a2:	2000      	movs	r0, #0
 80060a4:	6360      	str	r0, [r4, #52]	@ 0x34
 80060a6:	b113      	cbz	r3, 80060ae <__ssrefill_r+0x24>
 80060a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	6063      	str	r3, [r4, #4]
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f043 0320 	orr.w	r3, r3, #32
 80060bc:	81a3      	strh	r3, [r4, #12]
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	e7f3      	b.n	80060ac <__ssrefill_r+0x22>

080060c4 <__ssvfiscanf_r>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80060ce:	2100      	movs	r1, #0
 80060d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80060d4:	49a5      	ldr	r1, [pc, #660]	@ (800636c <__ssvfiscanf_r+0x2a8>)
 80060d6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80060d8:	f10d 0804 	add.w	r8, sp, #4
 80060dc:	49a4      	ldr	r1, [pc, #656]	@ (8006370 <__ssvfiscanf_r+0x2ac>)
 80060de:	4fa5      	ldr	r7, [pc, #660]	@ (8006374 <__ssvfiscanf_r+0x2b0>)
 80060e0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80060e4:	4606      	mov	r6, r0
 80060e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	7813      	ldrb	r3, [r2, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8158 	beq.w	80063a2 <__ssvfiscanf_r+0x2de>
 80060f2:	5cf9      	ldrb	r1, [r7, r3]
 80060f4:	f011 0108 	ands.w	r1, r1, #8
 80060f8:	f102 0501 	add.w	r5, r2, #1
 80060fc:	d019      	beq.n	8006132 <__ssvfiscanf_r+0x6e>
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd0f      	ble.n	8006124 <__ssvfiscanf_r+0x60>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	5cba      	ldrb	r2, [r7, r2]
 800610a:	0712      	lsls	r2, r2, #28
 800610c:	d401      	bmi.n	8006112 <__ssvfiscanf_r+0x4e>
 800610e:	462a      	mov	r2, r5
 8006110:	e7eb      	b.n	80060ea <__ssvfiscanf_r+0x26>
 8006112:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006114:	3201      	adds	r2, #1
 8006116:	9245      	str	r2, [sp, #276]	@ 0x114
 8006118:	6862      	ldr	r2, [r4, #4]
 800611a:	3301      	adds	r3, #1
 800611c:	3a01      	subs	r2, #1
 800611e:	6062      	str	r2, [r4, #4]
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	e7ec      	b.n	80060fe <__ssvfiscanf_r+0x3a>
 8006124:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006126:	4621      	mov	r1, r4
 8006128:	4630      	mov	r0, r6
 800612a:	4798      	blx	r3
 800612c:	2800      	cmp	r0, #0
 800612e:	d0e9      	beq.n	8006104 <__ssvfiscanf_r+0x40>
 8006130:	e7ed      	b.n	800610e <__ssvfiscanf_r+0x4a>
 8006132:	2b25      	cmp	r3, #37	@ 0x25
 8006134:	d012      	beq.n	800615c <__ssvfiscanf_r+0x98>
 8006136:	4699      	mov	r9, r3
 8006138:	6863      	ldr	r3, [r4, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f340 8093 	ble.w	8006266 <__ssvfiscanf_r+0x1a2>
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	7813      	ldrb	r3, [r2, #0]
 8006144:	454b      	cmp	r3, r9
 8006146:	f040 812c 	bne.w	80063a2 <__ssvfiscanf_r+0x2de>
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	3b01      	subs	r3, #1
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006152:	3201      	adds	r2, #1
 8006154:	3301      	adds	r3, #1
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	9345      	str	r3, [sp, #276]	@ 0x114
 800615a:	e7d8      	b.n	800610e <__ssvfiscanf_r+0x4a>
 800615c:	9141      	str	r1, [sp, #260]	@ 0x104
 800615e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006160:	7853      	ldrb	r3, [r2, #1]
 8006162:	2b2a      	cmp	r3, #42	@ 0x2a
 8006164:	bf02      	ittt	eq
 8006166:	2310      	moveq	r3, #16
 8006168:	1c95      	addeq	r5, r2, #2
 800616a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800616c:	220a      	movs	r2, #10
 800616e:	46a9      	mov	r9, r5
 8006170:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006174:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d91e      	bls.n	80061ba <__ssvfiscanf_r+0xf6>
 800617c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006378 <__ssvfiscanf_r+0x2b4>
 8006180:	2203      	movs	r2, #3
 8006182:	4650      	mov	r0, sl
 8006184:	f7fa f8cc 	bl	8000320 <memchr>
 8006188:	b138      	cbz	r0, 800619a <__ssvfiscanf_r+0xd6>
 800618a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800618c:	eba0 000a 	sub.w	r0, r0, sl
 8006190:	2301      	movs	r3, #1
 8006192:	4083      	lsls	r3, r0
 8006194:	4313      	orrs	r3, r2
 8006196:	9341      	str	r3, [sp, #260]	@ 0x104
 8006198:	464d      	mov	r5, r9
 800619a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800619e:	2b78      	cmp	r3, #120	@ 0x78
 80061a0:	d806      	bhi.n	80061b0 <__ssvfiscanf_r+0xec>
 80061a2:	2b57      	cmp	r3, #87	@ 0x57
 80061a4:	d810      	bhi.n	80061c8 <__ssvfiscanf_r+0x104>
 80061a6:	2b25      	cmp	r3, #37	@ 0x25
 80061a8:	d0c5      	beq.n	8006136 <__ssvfiscanf_r+0x72>
 80061aa:	d857      	bhi.n	800625c <__ssvfiscanf_r+0x198>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d065      	beq.n	800627c <__ssvfiscanf_r+0x1b8>
 80061b0:	2303      	movs	r3, #3
 80061b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80061b4:	230a      	movs	r3, #10
 80061b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80061b8:	e078      	b.n	80062ac <__ssvfiscanf_r+0x1e8>
 80061ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80061bc:	fb02 1103 	mla	r1, r2, r3, r1
 80061c0:	3930      	subs	r1, #48	@ 0x30
 80061c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80061c4:	464d      	mov	r5, r9
 80061c6:	e7d2      	b.n	800616e <__ssvfiscanf_r+0xaa>
 80061c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80061cc:	2a20      	cmp	r2, #32
 80061ce:	d8ef      	bhi.n	80061b0 <__ssvfiscanf_r+0xec>
 80061d0:	a101      	add	r1, pc, #4	@ (adr r1, 80061d8 <__ssvfiscanf_r+0x114>)
 80061d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	0800628b 	.word	0x0800628b
 80061dc:	080061b1 	.word	0x080061b1
 80061e0:	080061b1 	.word	0x080061b1
 80061e4:	080062e5 	.word	0x080062e5
 80061e8:	080061b1 	.word	0x080061b1
 80061ec:	080061b1 	.word	0x080061b1
 80061f0:	080061b1 	.word	0x080061b1
 80061f4:	080061b1 	.word	0x080061b1
 80061f8:	080061b1 	.word	0x080061b1
 80061fc:	080061b1 	.word	0x080061b1
 8006200:	080061b1 	.word	0x080061b1
 8006204:	080062fb 	.word	0x080062fb
 8006208:	080062e1 	.word	0x080062e1
 800620c:	08006263 	.word	0x08006263
 8006210:	08006263 	.word	0x08006263
 8006214:	08006263 	.word	0x08006263
 8006218:	080061b1 	.word	0x080061b1
 800621c:	0800629d 	.word	0x0800629d
 8006220:	080061b1 	.word	0x080061b1
 8006224:	080061b1 	.word	0x080061b1
 8006228:	080061b1 	.word	0x080061b1
 800622c:	080061b1 	.word	0x080061b1
 8006230:	0800630b 	.word	0x0800630b
 8006234:	080062a5 	.word	0x080062a5
 8006238:	08006283 	.word	0x08006283
 800623c:	080061b1 	.word	0x080061b1
 8006240:	080061b1 	.word	0x080061b1
 8006244:	08006307 	.word	0x08006307
 8006248:	080061b1 	.word	0x080061b1
 800624c:	080062e1 	.word	0x080062e1
 8006250:	080061b1 	.word	0x080061b1
 8006254:	080061b1 	.word	0x080061b1
 8006258:	0800628b 	.word	0x0800628b
 800625c:	3b45      	subs	r3, #69	@ 0x45
 800625e:	2b02      	cmp	r3, #2
 8006260:	d8a6      	bhi.n	80061b0 <__ssvfiscanf_r+0xec>
 8006262:	2305      	movs	r3, #5
 8006264:	e021      	b.n	80062aa <__ssvfiscanf_r+0x1e6>
 8006266:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006268:	4621      	mov	r1, r4
 800626a:	4630      	mov	r0, r6
 800626c:	4798      	blx	r3
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f af66 	beq.w	8006140 <__ssvfiscanf_r+0x7c>
 8006274:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006276:	2800      	cmp	r0, #0
 8006278:	f040 808b 	bne.w	8006392 <__ssvfiscanf_r+0x2ce>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e08b      	b.n	800639a <__ssvfiscanf_r+0x2d6>
 8006282:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006284:	f042 0220 	orr.w	r2, r2, #32
 8006288:	9241      	str	r2, [sp, #260]	@ 0x104
 800628a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800628c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006290:	9241      	str	r2, [sp, #260]	@ 0x104
 8006292:	2210      	movs	r2, #16
 8006294:	2b6e      	cmp	r3, #110	@ 0x6e
 8006296:	9242      	str	r2, [sp, #264]	@ 0x108
 8006298:	d902      	bls.n	80062a0 <__ssvfiscanf_r+0x1dc>
 800629a:	e005      	b.n	80062a8 <__ssvfiscanf_r+0x1e4>
 800629c:	2300      	movs	r3, #0
 800629e:	9342      	str	r3, [sp, #264]	@ 0x108
 80062a0:	2303      	movs	r3, #3
 80062a2:	e002      	b.n	80062aa <__ssvfiscanf_r+0x1e6>
 80062a4:	2308      	movs	r3, #8
 80062a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80062a8:	2304      	movs	r3, #4
 80062aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80062ac:	6863      	ldr	r3, [r4, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dd39      	ble.n	8006326 <__ssvfiscanf_r+0x262>
 80062b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062b4:	0659      	lsls	r1, r3, #25
 80062b6:	d404      	bmi.n	80062c2 <__ssvfiscanf_r+0x1fe>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	5cba      	ldrb	r2, [r7, r2]
 80062be:	0712      	lsls	r2, r2, #28
 80062c0:	d438      	bmi.n	8006334 <__ssvfiscanf_r+0x270>
 80062c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	dc47      	bgt.n	8006358 <__ssvfiscanf_r+0x294>
 80062c8:	466b      	mov	r3, sp
 80062ca:	4622      	mov	r2, r4
 80062cc:	a941      	add	r1, sp, #260	@ 0x104
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 f9fa 	bl	80066c8 <_scanf_chars>
 80062d4:	2801      	cmp	r0, #1
 80062d6:	d064      	beq.n	80063a2 <__ssvfiscanf_r+0x2de>
 80062d8:	2802      	cmp	r0, #2
 80062da:	f47f af18 	bne.w	800610e <__ssvfiscanf_r+0x4a>
 80062de:	e7c9      	b.n	8006274 <__ssvfiscanf_r+0x1b0>
 80062e0:	220a      	movs	r2, #10
 80062e2:	e7d7      	b.n	8006294 <__ssvfiscanf_r+0x1d0>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4640      	mov	r0, r8
 80062e8:	f000 fb3c 	bl	8006964 <__sccl>
 80062ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80062f4:	4605      	mov	r5, r0
 80062f6:	2301      	movs	r3, #1
 80062f8:	e7d7      	b.n	80062aa <__ssvfiscanf_r+0x1e6>
 80062fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006300:	9341      	str	r3, [sp, #260]	@ 0x104
 8006302:	2300      	movs	r3, #0
 8006304:	e7d1      	b.n	80062aa <__ssvfiscanf_r+0x1e6>
 8006306:	2302      	movs	r3, #2
 8006308:	e7cf      	b.n	80062aa <__ssvfiscanf_r+0x1e6>
 800630a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800630c:	06c3      	lsls	r3, r0, #27
 800630e:	f53f aefe 	bmi.w	800610e <__ssvfiscanf_r+0x4a>
 8006312:	9b00      	ldr	r3, [sp, #0]
 8006314:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006316:	1d19      	adds	r1, r3, #4
 8006318:	9100      	str	r1, [sp, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	07c0      	lsls	r0, r0, #31
 800631e:	bf4c      	ite	mi
 8006320:	801a      	strhmi	r2, [r3, #0]
 8006322:	601a      	strpl	r2, [r3, #0]
 8006324:	e6f3      	b.n	800610e <__ssvfiscanf_r+0x4a>
 8006326:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006328:	4621      	mov	r1, r4
 800632a:	4630      	mov	r0, r6
 800632c:	4798      	blx	r3
 800632e:	2800      	cmp	r0, #0
 8006330:	d0bf      	beq.n	80062b2 <__ssvfiscanf_r+0x1ee>
 8006332:	e79f      	b.n	8006274 <__ssvfiscanf_r+0x1b0>
 8006334:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006336:	3201      	adds	r2, #1
 8006338:	9245      	str	r2, [sp, #276]	@ 0x114
 800633a:	6862      	ldr	r2, [r4, #4]
 800633c:	3a01      	subs	r2, #1
 800633e:	2a00      	cmp	r2, #0
 8006340:	6062      	str	r2, [r4, #4]
 8006342:	dd02      	ble.n	800634a <__ssvfiscanf_r+0x286>
 8006344:	3301      	adds	r3, #1
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	e7b6      	b.n	80062b8 <__ssvfiscanf_r+0x1f4>
 800634a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800634c:	4621      	mov	r1, r4
 800634e:	4630      	mov	r0, r6
 8006350:	4798      	blx	r3
 8006352:	2800      	cmp	r0, #0
 8006354:	d0b0      	beq.n	80062b8 <__ssvfiscanf_r+0x1f4>
 8006356:	e78d      	b.n	8006274 <__ssvfiscanf_r+0x1b0>
 8006358:	2b04      	cmp	r3, #4
 800635a:	dc0f      	bgt.n	800637c <__ssvfiscanf_r+0x2b8>
 800635c:	466b      	mov	r3, sp
 800635e:	4622      	mov	r2, r4
 8006360:	a941      	add	r1, sp, #260	@ 0x104
 8006362:	4630      	mov	r0, r6
 8006364:	f000 fa0a 	bl	800677c <_scanf_i>
 8006368:	e7b4      	b.n	80062d4 <__ssvfiscanf_r+0x210>
 800636a:	bf00      	nop
 800636c:	08006015 	.word	0x08006015
 8006370:	0800608b 	.word	0x0800608b
 8006374:	08006f7f 	.word	0x08006f7f
 8006378:	08006f36 	.word	0x08006f36
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <__ssvfiscanf_r+0x2e4>)
 800637e:	2b00      	cmp	r3, #0
 8006380:	f43f aec5 	beq.w	800610e <__ssvfiscanf_r+0x4a>
 8006384:	466b      	mov	r3, sp
 8006386:	4622      	mov	r2, r4
 8006388:	a941      	add	r1, sp, #260	@ 0x104
 800638a:	4630      	mov	r0, r6
 800638c:	f3af 8000 	nop.w
 8006390:	e7a0      	b.n	80062d4 <__ssvfiscanf_r+0x210>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	065b      	lsls	r3, r3, #25
 8006396:	f53f af71 	bmi.w	800627c <__ssvfiscanf_r+0x1b8>
 800639a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80063a4:	e7f9      	b.n	800639a <__ssvfiscanf_r+0x2d6>
 80063a6:	bf00      	nop
 80063a8:	00000000 	.word	0x00000000

080063ac <_printf_common>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	4616      	mov	r6, r2
 80063b2:	4698      	mov	r8, r3
 80063b4:	688a      	ldr	r2, [r1, #8]
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bfb8      	it	lt
 80063c0:	4613      	movlt	r3, r2
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063c8:	4607      	mov	r7, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b10a      	cbz	r2, 80063d2 <_printf_common+0x26>
 80063ce:	3301      	adds	r3, #1
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	0699      	lsls	r1, r3, #26
 80063d6:	bf42      	ittt	mi
 80063d8:	6833      	ldrmi	r3, [r6, #0]
 80063da:	3302      	addmi	r3, #2
 80063dc:	6033      	strmi	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d106      	bne.n	80063f4 <_printf_common+0x48>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	6832      	ldr	r2, [r6, #0]
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dc26      	bgt.n	8006442 <_printf_common+0x96>
 80063f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	3b00      	subs	r3, #0
 80063fc:	bf18      	it	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	0692      	lsls	r2, r2, #26
 8006402:	d42b      	bmi.n	800645c <_printf_common+0xb0>
 8006404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	47c8      	blx	r9
 800640e:	3001      	adds	r0, #1
 8006410:	d01e      	beq.n	8006450 <_printf_common+0xa4>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	2b04      	cmp	r3, #4
 800641c:	bf02      	ittt	eq
 800641e:	68e5      	ldreq	r5, [r4, #12]
 8006420:	6833      	ldreq	r3, [r6, #0]
 8006422:	1aed      	subeq	r5, r5, r3
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	bf0c      	ite	eq
 8006428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800642c:	2500      	movne	r5, #0
 800642e:	4293      	cmp	r3, r2
 8006430:	bfc4      	itt	gt
 8006432:	1a9b      	subgt	r3, r3, r2
 8006434:	18ed      	addgt	r5, r5, r3
 8006436:	2600      	movs	r6, #0
 8006438:	341a      	adds	r4, #26
 800643a:	42b5      	cmp	r5, r6
 800643c:	d11a      	bne.n	8006474 <_printf_common+0xc8>
 800643e:	2000      	movs	r0, #0
 8006440:	e008      	b.n	8006454 <_printf_common+0xa8>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4641      	mov	r1, r8
 8006448:	4638      	mov	r0, r7
 800644a:	47c8      	blx	r9
 800644c:	3001      	adds	r0, #1
 800644e:	d103      	bne.n	8006458 <_printf_common+0xac>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	3501      	adds	r5, #1
 800645a:	e7c6      	b.n	80063ea <_printf_common+0x3e>
 800645c:	18e1      	adds	r1, r4, r3
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	2030      	movs	r0, #48	@ 0x30
 8006462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006466:	4422      	add	r2, r4
 8006468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800646c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006470:	3302      	adds	r3, #2
 8006472:	e7c7      	b.n	8006404 <_printf_common+0x58>
 8006474:	2301      	movs	r3, #1
 8006476:	4622      	mov	r2, r4
 8006478:	4641      	mov	r1, r8
 800647a:	4638      	mov	r0, r7
 800647c:	47c8      	blx	r9
 800647e:	3001      	adds	r0, #1
 8006480:	d0e6      	beq.n	8006450 <_printf_common+0xa4>
 8006482:	3601      	adds	r6, #1
 8006484:	e7d9      	b.n	800643a <_printf_common+0x8e>
	...

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	7e0f      	ldrb	r7, [r1, #24]
 800648e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006490:	2f78      	cmp	r7, #120	@ 0x78
 8006492:	4691      	mov	r9, r2
 8006494:	4680      	mov	r8, r0
 8006496:	460c      	mov	r4, r1
 8006498:	469a      	mov	sl, r3
 800649a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	@ 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d2 	beq.w	800664e <_printf_i+0x1c6>
 80064aa:	2f58      	cmp	r7, #88	@ 0x58
 80064ac:	f000 80b9 	beq.w	8006622 <_printf_i+0x19a>
 80064b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a101      	add	r1, pc, #4	@ (adr r1, 80064c8 <_printf_i+0x40>)
 80064c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	08006635 	.word	0x08006635
 80064f8:	0800655f 	.word	0x0800655f
 80064fc:	080065ef 	.word	0x080065ef
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	08006657 	.word	0x08006657
 800650c:	080064b1 	.word	0x080064b1
 8006510:	0800655f 	.word	0x0800655f
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	080065f7 	.word	0x080065f7
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6032      	str	r2, [r6, #0]
 8006528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e09d      	b.n	8006670 <_printf_i+0x1e8>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	6820      	ldr	r0, [r4, #0]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	0606      	lsls	r6, r0, #24
 800653e:	d501      	bpl.n	8006544 <_printf_i+0xbc>
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	e003      	b.n	800654c <_printf_i+0xc4>
 8006544:	0645      	lsls	r5, r0, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0xb8>
 8006548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800654c:	2d00      	cmp	r5, #0
 800654e:	da03      	bge.n	8006558 <_printf_i+0xd0>
 8006550:	232d      	movs	r3, #45	@ 0x2d
 8006552:	426d      	negs	r5, r5
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006558:	4859      	ldr	r0, [pc, #356]	@ (80066c0 <_printf_i+0x238>)
 800655a:	230a      	movs	r3, #10
 800655c:	e011      	b.n	8006582 <_printf_i+0xfa>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	6833      	ldr	r3, [r6, #0]
 8006562:	0608      	lsls	r0, r1, #24
 8006564:	f853 5b04 	ldr.w	r5, [r3], #4
 8006568:	d402      	bmi.n	8006570 <_printf_i+0xe8>
 800656a:	0649      	lsls	r1, r1, #25
 800656c:	bf48      	it	mi
 800656e:	b2ad      	uxthmi	r5, r5
 8006570:	2f6f      	cmp	r7, #111	@ 0x6f
 8006572:	4853      	ldr	r0, [pc, #332]	@ (80066c0 <_printf_i+0x238>)
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	bf14      	ite	ne
 8006578:	230a      	movne	r3, #10
 800657a:	2308      	moveq	r3, #8
 800657c:	2100      	movs	r1, #0
 800657e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006582:	6866      	ldr	r6, [r4, #4]
 8006584:	60a6      	str	r6, [r4, #8]
 8006586:	2e00      	cmp	r6, #0
 8006588:	bfa2      	ittt	ge
 800658a:	6821      	ldrge	r1, [r4, #0]
 800658c:	f021 0104 	bicge.w	r1, r1, #4
 8006590:	6021      	strge	r1, [r4, #0]
 8006592:	b90d      	cbnz	r5, 8006598 <_printf_i+0x110>
 8006594:	2e00      	cmp	r6, #0
 8006596:	d04b      	beq.n	8006630 <_printf_i+0x1a8>
 8006598:	4616      	mov	r6, r2
 800659a:	fbb5 f1f3 	udiv	r1, r5, r3
 800659e:	fb03 5711 	mls	r7, r3, r1, r5
 80065a2:	5dc7      	ldrb	r7, [r0, r7]
 80065a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065a8:	462f      	mov	r7, r5
 80065aa:	42bb      	cmp	r3, r7
 80065ac:	460d      	mov	r5, r1
 80065ae:	d9f4      	bls.n	800659a <_printf_i+0x112>
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d10b      	bne.n	80065cc <_printf_i+0x144>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	07df      	lsls	r7, r3, #31
 80065b8:	d508      	bpl.n	80065cc <_printf_i+0x144>
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	6861      	ldr	r1, [r4, #4]
 80065be:	4299      	cmp	r1, r3
 80065c0:	bfde      	ittt	le
 80065c2:	2330      	movle	r3, #48	@ 0x30
 80065c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065cc:	1b92      	subs	r2, r2, r6
 80065ce:	6122      	str	r2, [r4, #16]
 80065d0:	f8cd a000 	str.w	sl, [sp]
 80065d4:	464b      	mov	r3, r9
 80065d6:	aa03      	add	r2, sp, #12
 80065d8:	4621      	mov	r1, r4
 80065da:	4640      	mov	r0, r8
 80065dc:	f7ff fee6 	bl	80063ac <_printf_common>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d14a      	bne.n	800667a <_printf_i+0x1f2>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	b004      	add	sp, #16
 80065ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	4833      	ldr	r0, [pc, #204]	@ (80066c4 <_printf_i+0x23c>)
 80065f8:	2778      	movs	r7, #120	@ 0x78
 80065fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	6831      	ldr	r1, [r6, #0]
 8006602:	061f      	lsls	r7, r3, #24
 8006604:	f851 5b04 	ldr.w	r5, [r1], #4
 8006608:	d402      	bmi.n	8006610 <_printf_i+0x188>
 800660a:	065f      	lsls	r7, r3, #25
 800660c:	bf48      	it	mi
 800660e:	b2ad      	uxthmi	r5, r5
 8006610:	6031      	str	r1, [r6, #0]
 8006612:	07d9      	lsls	r1, r3, #31
 8006614:	bf44      	itt	mi
 8006616:	f043 0320 	orrmi.w	r3, r3, #32
 800661a:	6023      	strmi	r3, [r4, #0]
 800661c:	b11d      	cbz	r5, 8006626 <_printf_i+0x19e>
 800661e:	2310      	movs	r3, #16
 8006620:	e7ac      	b.n	800657c <_printf_i+0xf4>
 8006622:	4827      	ldr	r0, [pc, #156]	@ (80066c0 <_printf_i+0x238>)
 8006624:	e7e9      	b.n	80065fa <_printf_i+0x172>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f023 0320 	bic.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	e7f6      	b.n	800661e <_printf_i+0x196>
 8006630:	4616      	mov	r6, r2
 8006632:	e7bd      	b.n	80065b0 <_printf_i+0x128>
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	6961      	ldr	r1, [r4, #20]
 800663a:	1d18      	adds	r0, r3, #4
 800663c:	6030      	str	r0, [r6, #0]
 800663e:	062e      	lsls	r6, r5, #24
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	d501      	bpl.n	8006648 <_printf_i+0x1c0>
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	e002      	b.n	800664e <_printf_i+0x1c6>
 8006648:	0668      	lsls	r0, r5, #25
 800664a:	d5fb      	bpl.n	8006644 <_printf_i+0x1bc>
 800664c:	8019      	strh	r1, [r3, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	4616      	mov	r6, r2
 8006654:	e7bc      	b.n	80065d0 <_printf_i+0x148>
 8006656:	6833      	ldr	r3, [r6, #0]
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	6032      	str	r2, [r6, #0]
 800665c:	681e      	ldr	r6, [r3, #0]
 800665e:	6862      	ldr	r2, [r4, #4]
 8006660:	2100      	movs	r1, #0
 8006662:	4630      	mov	r0, r6
 8006664:	f7f9 fe5c 	bl	8000320 <memchr>
 8006668:	b108      	cbz	r0, 800666e <_printf_i+0x1e6>
 800666a:	1b80      	subs	r0, r0, r6
 800666c:	6060      	str	r0, [r4, #4]
 800666e:	6863      	ldr	r3, [r4, #4]
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	2300      	movs	r3, #0
 8006674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006678:	e7aa      	b.n	80065d0 <_printf_i+0x148>
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d0ad      	beq.n	80065e4 <_printf_i+0x15c>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	079b      	lsls	r3, r3, #30
 800668c:	d413      	bmi.n	80066b6 <_printf_i+0x22e>
 800668e:	68e0      	ldr	r0, [r4, #12]
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	4298      	cmp	r0, r3
 8006694:	bfb8      	it	lt
 8006696:	4618      	movlt	r0, r3
 8006698:	e7a6      	b.n	80065e8 <_printf_i+0x160>
 800669a:	2301      	movs	r3, #1
 800669c:	4632      	mov	r2, r6
 800669e:	4649      	mov	r1, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	47d0      	blx	sl
 80066a4:	3001      	adds	r0, #1
 80066a6:	d09d      	beq.n	80065e4 <_printf_i+0x15c>
 80066a8:	3501      	adds	r5, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	9903      	ldr	r1, [sp, #12]
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dcf2      	bgt.n	800669a <_printf_i+0x212>
 80066b4:	e7eb      	b.n	800668e <_printf_i+0x206>
 80066b6:	2500      	movs	r5, #0
 80066b8:	f104 0619 	add.w	r6, r4, #25
 80066bc:	e7f5      	b.n	80066aa <_printf_i+0x222>
 80066be:	bf00      	nop
 80066c0:	08006f41 	.word	0x08006f41
 80066c4:	08006f52 	.word	0x08006f52

080066c8 <_scanf_chars>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4615      	mov	r5, r2
 80066ce:	688a      	ldr	r2, [r1, #8]
 80066d0:	4680      	mov	r8, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b932      	cbnz	r2, 80066e4 <_scanf_chars+0x1c>
 80066d6:	698a      	ldr	r2, [r1, #24]
 80066d8:	2a00      	cmp	r2, #0
 80066da:	bf14      	ite	ne
 80066dc:	f04f 32ff 	movne.w	r2, #4294967295
 80066e0:	2201      	moveq	r2, #1
 80066e2:	608a      	str	r2, [r1, #8]
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006778 <_scanf_chars+0xb0>
 80066ea:	06d1      	lsls	r1, r2, #27
 80066ec:	bf5f      	itttt	pl
 80066ee:	681a      	ldrpl	r2, [r3, #0]
 80066f0:	1d11      	addpl	r1, r2, #4
 80066f2:	6019      	strpl	r1, [r3, #0]
 80066f4:	6816      	ldrpl	r6, [r2, #0]
 80066f6:	2700      	movs	r7, #0
 80066f8:	69a0      	ldr	r0, [r4, #24]
 80066fa:	b188      	cbz	r0, 8006720 <_scanf_chars+0x58>
 80066fc:	2801      	cmp	r0, #1
 80066fe:	d107      	bne.n	8006710 <_scanf_chars+0x48>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	6963      	ldr	r3, [r4, #20]
 8006706:	5c9b      	ldrb	r3, [r3, r2]
 8006708:	b953      	cbnz	r3, 8006720 <_scanf_chars+0x58>
 800670a:	2f00      	cmp	r7, #0
 800670c:	d031      	beq.n	8006772 <_scanf_chars+0xaa>
 800670e:	e022      	b.n	8006756 <_scanf_chars+0x8e>
 8006710:	2802      	cmp	r0, #2
 8006712:	d120      	bne.n	8006756 <_scanf_chars+0x8e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f819 3003 	ldrb.w	r3, [r9, r3]
 800671c:	071b      	lsls	r3, r3, #28
 800671e:	d41a      	bmi.n	8006756 <_scanf_chars+0x8e>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	06da      	lsls	r2, r3, #27
 8006724:	bf5e      	ittt	pl
 8006726:	682b      	ldrpl	r3, [r5, #0]
 8006728:	781b      	ldrbpl	r3, [r3, #0]
 800672a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800672e:	682a      	ldr	r2, [r5, #0]
 8006730:	686b      	ldr	r3, [r5, #4]
 8006732:	3201      	adds	r2, #1
 8006734:	602a      	str	r2, [r5, #0]
 8006736:	68a2      	ldr	r2, [r4, #8]
 8006738:	3b01      	subs	r3, #1
 800673a:	3a01      	subs	r2, #1
 800673c:	606b      	str	r3, [r5, #4]
 800673e:	3701      	adds	r7, #1
 8006740:	60a2      	str	r2, [r4, #8]
 8006742:	b142      	cbz	r2, 8006756 <_scanf_chars+0x8e>
 8006744:	2b00      	cmp	r3, #0
 8006746:	dcd7      	bgt.n	80066f8 <_scanf_chars+0x30>
 8006748:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800674c:	4629      	mov	r1, r5
 800674e:	4640      	mov	r0, r8
 8006750:	4798      	blx	r3
 8006752:	2800      	cmp	r0, #0
 8006754:	d0d0      	beq.n	80066f8 <_scanf_chars+0x30>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f013 0310 	ands.w	r3, r3, #16
 800675c:	d105      	bne.n	800676a <_scanf_chars+0xa2>
 800675e:	68e2      	ldr	r2, [r4, #12]
 8006760:	3201      	adds	r2, #1
 8006762:	60e2      	str	r2, [r4, #12]
 8006764:	69a2      	ldr	r2, [r4, #24]
 8006766:	b102      	cbz	r2, 800676a <_scanf_chars+0xa2>
 8006768:	7033      	strb	r3, [r6, #0]
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	443b      	add	r3, r7
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	2000      	movs	r0, #0
 8006772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006776:	bf00      	nop
 8006778:	08006f7f 	.word	0x08006f7f

0800677c <_scanf_i>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	4698      	mov	r8, r3
 8006782:	4b74      	ldr	r3, [pc, #464]	@ (8006954 <_scanf_i+0x1d8>)
 8006784:	460c      	mov	r4, r1
 8006786:	4682      	mov	sl, r0
 8006788:	4616      	mov	r6, r2
 800678a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800678e:	b087      	sub	sp, #28
 8006790:	ab03      	add	r3, sp, #12
 8006792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006796:	4b70      	ldr	r3, [pc, #448]	@ (8006958 <_scanf_i+0x1dc>)
 8006798:	69a1      	ldr	r1, [r4, #24]
 800679a:	4a70      	ldr	r2, [pc, #448]	@ (800695c <_scanf_i+0x1e0>)
 800679c:	2903      	cmp	r1, #3
 800679e:	bf08      	it	eq
 80067a0:	461a      	moveq	r2, r3
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	9201      	str	r2, [sp, #4]
 80067a6:	1e5a      	subs	r2, r3, #1
 80067a8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067ac:	bf88      	it	hi
 80067ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067b2:	4627      	mov	r7, r4
 80067b4:	bf82      	ittt	hi
 80067b6:	eb03 0905 	addhi.w	r9, r3, r5
 80067ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067be:	60a3      	strhi	r3, [r4, #8]
 80067c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80067c4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80067c8:	bf98      	it	ls
 80067ca:	f04f 0900 	movls.w	r9, #0
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	463d      	mov	r5, r7
 80067d2:	f04f 0b00 	mov.w	fp, #0
 80067d6:	6831      	ldr	r1, [r6, #0]
 80067d8:	ab03      	add	r3, sp, #12
 80067da:	7809      	ldrb	r1, [r1, #0]
 80067dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f7f9 fd9d 	bl	8000320 <memchr>
 80067e6:	b328      	cbz	r0, 8006834 <_scanf_i+0xb8>
 80067e8:	f1bb 0f01 	cmp.w	fp, #1
 80067ec:	d159      	bne.n	80068a2 <_scanf_i+0x126>
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	b92a      	cbnz	r2, 80067fe <_scanf_i+0x82>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	2108      	movs	r1, #8
 80067f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fa:	6061      	str	r1, [r4, #4]
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006804:	6022      	str	r2, [r4, #0]
 8006806:	68a2      	ldr	r2, [r4, #8]
 8006808:	1e51      	subs	r1, r2, #1
 800680a:	60a1      	str	r1, [r4, #8]
 800680c:	b192      	cbz	r2, 8006834 <_scanf_i+0xb8>
 800680e:	6832      	ldr	r2, [r6, #0]
 8006810:	1c51      	adds	r1, r2, #1
 8006812:	6031      	str	r1, [r6, #0]
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	f805 2b01 	strb.w	r2, [r5], #1
 800681a:	6872      	ldr	r2, [r6, #4]
 800681c:	3a01      	subs	r2, #1
 800681e:	2a00      	cmp	r2, #0
 8006820:	6072      	str	r2, [r6, #4]
 8006822:	dc07      	bgt.n	8006834 <_scanf_i+0xb8>
 8006824:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006828:	4631      	mov	r1, r6
 800682a:	4650      	mov	r0, sl
 800682c:	4790      	blx	r2
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8085 	bne.w	800693e <_scanf_i+0x1c2>
 8006834:	f10b 0b01 	add.w	fp, fp, #1
 8006838:	f1bb 0f03 	cmp.w	fp, #3
 800683c:	d1cb      	bne.n	80067d6 <_scanf_i+0x5a>
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	b90b      	cbnz	r3, 8006846 <_scanf_i+0xca>
 8006842:	230a      	movs	r3, #10
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	4945      	ldr	r1, [pc, #276]	@ (8006960 <_scanf_i+0x1e4>)
 800684a:	6960      	ldr	r0, [r4, #20]
 800684c:	1ac9      	subs	r1, r1, r3
 800684e:	f000 f889 	bl	8006964 <__sccl>
 8006852:	f04f 0b00 	mov.w	fp, #0
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d03d      	beq.n	80068da <_scanf_i+0x15e>
 800685e:	6831      	ldr	r1, [r6, #0]
 8006860:	6960      	ldr	r0, [r4, #20]
 8006862:	f891 c000 	ldrb.w	ip, [r1]
 8006866:	f810 000c 	ldrb.w	r0, [r0, ip]
 800686a:	2800      	cmp	r0, #0
 800686c:	d035      	beq.n	80068da <_scanf_i+0x15e>
 800686e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006872:	d124      	bne.n	80068be <_scanf_i+0x142>
 8006874:	0510      	lsls	r0, r2, #20
 8006876:	d522      	bpl.n	80068be <_scanf_i+0x142>
 8006878:	f10b 0b01 	add.w	fp, fp, #1
 800687c:	f1b9 0f00 	cmp.w	r9, #0
 8006880:	d003      	beq.n	800688a <_scanf_i+0x10e>
 8006882:	3301      	adds	r3, #1
 8006884:	f109 39ff 	add.w	r9, r9, #4294967295
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	6873      	ldr	r3, [r6, #4]
 800688c:	3b01      	subs	r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	6073      	str	r3, [r6, #4]
 8006892:	dd1b      	ble.n	80068cc <_scanf_i+0x150>
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	3b01      	subs	r3, #1
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	e7d9      	b.n	8006856 <_scanf_i+0xda>
 80068a2:	f1bb 0f02 	cmp.w	fp, #2
 80068a6:	d1ae      	bne.n	8006806 <_scanf_i+0x8a>
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80068ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80068b2:	d1bf      	bne.n	8006834 <_scanf_i+0xb8>
 80068b4:	2110      	movs	r1, #16
 80068b6:	6061      	str	r1, [r4, #4]
 80068b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068bc:	e7a2      	b.n	8006804 <_scanf_i+0x88>
 80068be:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80068c2:	6022      	str	r2, [r4, #0]
 80068c4:	780b      	ldrb	r3, [r1, #0]
 80068c6:	f805 3b01 	strb.w	r3, [r5], #1
 80068ca:	e7de      	b.n	800688a <_scanf_i+0x10e>
 80068cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80068d0:	4631      	mov	r1, r6
 80068d2:	4650      	mov	r0, sl
 80068d4:	4798      	blx	r3
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d0df      	beq.n	800689a <_scanf_i+0x11e>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	05d9      	lsls	r1, r3, #23
 80068de:	d50d      	bpl.n	80068fc <_scanf_i+0x180>
 80068e0:	42bd      	cmp	r5, r7
 80068e2:	d909      	bls.n	80068f8 <_scanf_i+0x17c>
 80068e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80068e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068ec:	4632      	mov	r2, r6
 80068ee:	4650      	mov	r0, sl
 80068f0:	4798      	blx	r3
 80068f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80068f6:	464d      	mov	r5, r9
 80068f8:	42bd      	cmp	r5, r7
 80068fa:	d028      	beq.n	800694e <_scanf_i+0x1d2>
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	f012 0210 	ands.w	r2, r2, #16
 8006902:	d113      	bne.n	800692c <_scanf_i+0x1b0>
 8006904:	702a      	strb	r2, [r5, #0]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	9e01      	ldr	r6, [sp, #4]
 800690a:	4639      	mov	r1, r7
 800690c:	4650      	mov	r0, sl
 800690e:	47b0      	blx	r6
 8006910:	f8d8 3000 	ldr.w	r3, [r8]
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	1d1a      	adds	r2, r3, #4
 8006918:	f8c8 2000 	str.w	r2, [r8]
 800691c:	f011 0f20 	tst.w	r1, #32
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	d00f      	beq.n	8006944 <_scanf_i+0x1c8>
 8006924:	6018      	str	r0, [r3, #0]
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60e3      	str	r3, [r4, #12]
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	1bed      	subs	r5, r5, r7
 8006930:	445d      	add	r5, fp
 8006932:	442b      	add	r3, r5
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	2000      	movs	r0, #0
 8006938:	b007      	add	sp, #28
 800693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693e:	f04f 0b00 	mov.w	fp, #0
 8006942:	e7ca      	b.n	80068da <_scanf_i+0x15e>
 8006944:	07ca      	lsls	r2, r1, #31
 8006946:	bf4c      	ite	mi
 8006948:	8018      	strhmi	r0, [r3, #0]
 800694a:	6018      	strpl	r0, [r3, #0]
 800694c:	e7eb      	b.n	8006926 <_scanf_i+0x1aa>
 800694e:	2001      	movs	r0, #1
 8006950:	e7f2      	b.n	8006938 <_scanf_i+0x1bc>
 8006952:	bf00      	nop
 8006954:	08006eec 	.word	0x08006eec
 8006958:	08006c0d 	.word	0x08006c0d
 800695c:	08006ced 	.word	0x08006ced
 8006960:	08006f73 	.word	0x08006f73

08006964 <__sccl>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	780b      	ldrb	r3, [r1, #0]
 8006968:	4604      	mov	r4, r0
 800696a:	2b5e      	cmp	r3, #94	@ 0x5e
 800696c:	bf0b      	itete	eq
 800696e:	784b      	ldrbeq	r3, [r1, #1]
 8006970:	1c4a      	addne	r2, r1, #1
 8006972:	1c8a      	addeq	r2, r1, #2
 8006974:	2100      	movne	r1, #0
 8006976:	bf08      	it	eq
 8006978:	2101      	moveq	r1, #1
 800697a:	3801      	subs	r0, #1
 800697c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006980:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006984:	42a8      	cmp	r0, r5
 8006986:	d1fb      	bne.n	8006980 <__sccl+0x1c>
 8006988:	b90b      	cbnz	r3, 800698e <__sccl+0x2a>
 800698a:	1e50      	subs	r0, r2, #1
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	f081 0101 	eor.w	r1, r1, #1
 8006992:	54e1      	strb	r1, [r4, r3]
 8006994:	4610      	mov	r0, r2
 8006996:	4602      	mov	r2, r0
 8006998:	f812 5b01 	ldrb.w	r5, [r2], #1
 800699c:	2d2d      	cmp	r5, #45	@ 0x2d
 800699e:	d005      	beq.n	80069ac <__sccl+0x48>
 80069a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80069a2:	d016      	beq.n	80069d2 <__sccl+0x6e>
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	d0f1      	beq.n	800698c <__sccl+0x28>
 80069a8:	462b      	mov	r3, r5
 80069aa:	e7f2      	b.n	8006992 <__sccl+0x2e>
 80069ac:	7846      	ldrb	r6, [r0, #1]
 80069ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80069b0:	d0fa      	beq.n	80069a8 <__sccl+0x44>
 80069b2:	42b3      	cmp	r3, r6
 80069b4:	dcf8      	bgt.n	80069a8 <__sccl+0x44>
 80069b6:	3002      	adds	r0, #2
 80069b8:	461a      	mov	r2, r3
 80069ba:	3201      	adds	r2, #1
 80069bc:	4296      	cmp	r6, r2
 80069be:	54a1      	strb	r1, [r4, r2]
 80069c0:	dcfb      	bgt.n	80069ba <__sccl+0x56>
 80069c2:	1af2      	subs	r2, r6, r3
 80069c4:	3a01      	subs	r2, #1
 80069c6:	1c5d      	adds	r5, r3, #1
 80069c8:	42b3      	cmp	r3, r6
 80069ca:	bfa8      	it	ge
 80069cc:	2200      	movge	r2, #0
 80069ce:	18ab      	adds	r3, r5, r2
 80069d0:	e7e1      	b.n	8006996 <__sccl+0x32>
 80069d2:	4610      	mov	r0, r2
 80069d4:	e7da      	b.n	800698c <__sccl+0x28>

080069d6 <__submore>:
 80069d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	460c      	mov	r4, r1
 80069dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80069de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d11d      	bne.n	8006a22 <__submore+0x4c>
 80069e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80069ea:	f7ff f92f 	bl	8005c4c <_malloc_r>
 80069ee:	b918      	cbnz	r0, 80069f8 <__submore+0x22>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80069fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006a02:	6360      	str	r0, [r4, #52]	@ 0x34
 8006a04:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006a08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a0c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006a10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a14:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006a18:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006a1c:	6020      	str	r0, [r4, #0]
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7e8      	b.n	80069f4 <__submore+0x1e>
 8006a22:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006a24:	0077      	lsls	r7, r6, #1
 8006a26:	463a      	mov	r2, r7
 8006a28:	f000 f848 	bl	8006abc <_realloc_r>
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0de      	beq.n	80069f0 <__submore+0x1a>
 8006a32:	eb00 0806 	add.w	r8, r0, r6
 8006a36:	4601      	mov	r1, r0
 8006a38:	4632      	mov	r2, r6
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f000 f830 	bl	8006aa0 <memcpy>
 8006a40:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006a44:	f8c4 8000 	str.w	r8, [r4]
 8006a48:	e7e9      	b.n	8006a1e <__submore+0x48>

08006a4a <memmove>:
 8006a4a:	4288      	cmp	r0, r1
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	eb01 0402 	add.w	r4, r1, r2
 8006a52:	d902      	bls.n	8006a5a <memmove+0x10>
 8006a54:	4284      	cmp	r4, r0
 8006a56:	4623      	mov	r3, r4
 8006a58:	d807      	bhi.n	8006a6a <memmove+0x20>
 8006a5a:	1e43      	subs	r3, r0, #1
 8006a5c:	42a1      	cmp	r1, r4
 8006a5e:	d008      	beq.n	8006a72 <memmove+0x28>
 8006a60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a68:	e7f8      	b.n	8006a5c <memmove+0x12>
 8006a6a:	4402      	add	r2, r0
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	428a      	cmp	r2, r1
 8006a70:	d100      	bne.n	8006a74 <memmove+0x2a>
 8006a72:	bd10      	pop	{r4, pc}
 8006a74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a7c:	e7f7      	b.n	8006a6e <memmove+0x24>
	...

08006a80 <_sbrk_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d06      	ldr	r5, [pc, #24]	@ (8006a9c <_sbrk_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fa fa52 	bl	8000f34 <_sbrk>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_sbrk_r+0x1a>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_sbrk_r+0x1a>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	240003ac 	.word	0x240003ac

08006aa0 <memcpy>:
 8006aa0:	440a      	add	r2, r1
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa8:	d100      	bne.n	8006aac <memcpy+0xc>
 8006aaa:	4770      	bx	lr
 8006aac:	b510      	push	{r4, lr}
 8006aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	d1f9      	bne.n	8006aae <memcpy+0xe>
 8006aba:	bd10      	pop	{r4, pc}

08006abc <_realloc_r>:
 8006abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	4615      	mov	r5, r2
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	b921      	cbnz	r1, 8006ad2 <_realloc_r+0x16>
 8006ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006acc:	4611      	mov	r1, r2
 8006ace:	f7ff b8bd 	b.w	8005c4c <_malloc_r>
 8006ad2:	b92a      	cbnz	r2, 8006ae0 <_realloc_r+0x24>
 8006ad4:	f7ff f84e 	bl	8005b74 <_free_r>
 8006ad8:	2400      	movs	r4, #0
 8006ada:	4620      	mov	r0, r4
 8006adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae0:	f000 f906 	bl	8006cf0 <_malloc_usable_size_r>
 8006ae4:	4285      	cmp	r5, r0
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	d802      	bhi.n	8006af0 <_realloc_r+0x34>
 8006aea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006aee:	d8f4      	bhi.n	8006ada <_realloc_r+0x1e>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff f8aa 	bl	8005c4c <_malloc_r>
 8006af8:	4607      	mov	r7, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d0ec      	beq.n	8006ad8 <_realloc_r+0x1c>
 8006afe:	42b5      	cmp	r5, r6
 8006b00:	462a      	mov	r2, r5
 8006b02:	4621      	mov	r1, r4
 8006b04:	bf28      	it	cs
 8006b06:	4632      	movcs	r2, r6
 8006b08:	f7ff ffca 	bl	8006aa0 <memcpy>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4640      	mov	r0, r8
 8006b10:	f7ff f830 	bl	8005b74 <_free_r>
 8006b14:	463c      	mov	r4, r7
 8006b16:	e7e0      	b.n	8006ada <_realloc_r+0x1e>

08006b18 <_strtol_l.constprop.0>:
 8006b18:	2b24      	cmp	r3, #36	@ 0x24
 8006b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1e:	4686      	mov	lr, r0
 8006b20:	4690      	mov	r8, r2
 8006b22:	d801      	bhi.n	8006b28 <_strtol_l.constprop.0+0x10>
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d106      	bne.n	8006b36 <_strtol_l.constprop.0+0x1e>
 8006b28:	f7fe fff8 	bl	8005b1c <__errno>
 8006b2c:	2316      	movs	r3, #22
 8006b2e:	6003      	str	r3, [r0, #0]
 8006b30:	2000      	movs	r0, #0
 8006b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b36:	4834      	ldr	r0, [pc, #208]	@ (8006c08 <_strtol_l.constprop.0+0xf0>)
 8006b38:	460d      	mov	r5, r1
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b40:	5d06      	ldrb	r6, [r0, r4]
 8006b42:	f016 0608 	ands.w	r6, r6, #8
 8006b46:	d1f8      	bne.n	8006b3a <_strtol_l.constprop.0+0x22>
 8006b48:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b4a:	d12d      	bne.n	8006ba8 <_strtol_l.constprop.0+0x90>
 8006b4c:	782c      	ldrb	r4, [r5, #0]
 8006b4e:	2601      	movs	r6, #1
 8006b50:	1c95      	adds	r5, r2, #2
 8006b52:	f033 0210 	bics.w	r2, r3, #16
 8006b56:	d109      	bne.n	8006b6c <_strtol_l.constprop.0+0x54>
 8006b58:	2c30      	cmp	r4, #48	@ 0x30
 8006b5a:	d12a      	bne.n	8006bb2 <_strtol_l.constprop.0+0x9a>
 8006b5c:	782a      	ldrb	r2, [r5, #0]
 8006b5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b62:	2a58      	cmp	r2, #88	@ 0x58
 8006b64:	d125      	bne.n	8006bb2 <_strtol_l.constprop.0+0x9a>
 8006b66:	786c      	ldrb	r4, [r5, #1]
 8006b68:	2310      	movs	r3, #16
 8006b6a:	3502      	adds	r5, #2
 8006b6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b74:	2200      	movs	r2, #0
 8006b76:	fbbc f9f3 	udiv	r9, ip, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b84:	2f09      	cmp	r7, #9
 8006b86:	d81b      	bhi.n	8006bc0 <_strtol_l.constprop.0+0xa8>
 8006b88:	463c      	mov	r4, r7
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	dd27      	ble.n	8006bde <_strtol_l.constprop.0+0xc6>
 8006b8e:	1c57      	adds	r7, r2, #1
 8006b90:	d007      	beq.n	8006ba2 <_strtol_l.constprop.0+0x8a>
 8006b92:	4581      	cmp	r9, r0
 8006b94:	d320      	bcc.n	8006bd8 <_strtol_l.constprop.0+0xc0>
 8006b96:	d101      	bne.n	8006b9c <_strtol_l.constprop.0+0x84>
 8006b98:	45a2      	cmp	sl, r4
 8006b9a:	db1d      	blt.n	8006bd8 <_strtol_l.constprop.0+0xc0>
 8006b9c:	fb00 4003 	mla	r0, r0, r3, r4
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ba6:	e7eb      	b.n	8006b80 <_strtol_l.constprop.0+0x68>
 8006ba8:	2c2b      	cmp	r4, #43	@ 0x2b
 8006baa:	bf04      	itt	eq
 8006bac:	782c      	ldrbeq	r4, [r5, #0]
 8006bae:	1c95      	addeq	r5, r2, #2
 8006bb0:	e7cf      	b.n	8006b52 <_strtol_l.constprop.0+0x3a>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1da      	bne.n	8006b6c <_strtol_l.constprop.0+0x54>
 8006bb6:	2c30      	cmp	r4, #48	@ 0x30
 8006bb8:	bf0c      	ite	eq
 8006bba:	2308      	moveq	r3, #8
 8006bbc:	230a      	movne	r3, #10
 8006bbe:	e7d5      	b.n	8006b6c <_strtol_l.constprop.0+0x54>
 8006bc0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006bc4:	2f19      	cmp	r7, #25
 8006bc6:	d801      	bhi.n	8006bcc <_strtol_l.constprop.0+0xb4>
 8006bc8:	3c37      	subs	r4, #55	@ 0x37
 8006bca:	e7de      	b.n	8006b8a <_strtol_l.constprop.0+0x72>
 8006bcc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006bd0:	2f19      	cmp	r7, #25
 8006bd2:	d804      	bhi.n	8006bde <_strtol_l.constprop.0+0xc6>
 8006bd4:	3c57      	subs	r4, #87	@ 0x57
 8006bd6:	e7d8      	b.n	8006b8a <_strtol_l.constprop.0+0x72>
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	e7e1      	b.n	8006ba2 <_strtol_l.constprop.0+0x8a>
 8006bde:	1c53      	adds	r3, r2, #1
 8006be0:	d108      	bne.n	8006bf4 <_strtol_l.constprop.0+0xdc>
 8006be2:	2322      	movs	r3, #34	@ 0x22
 8006be4:	f8ce 3000 	str.w	r3, [lr]
 8006be8:	4660      	mov	r0, ip
 8006bea:	f1b8 0f00 	cmp.w	r8, #0
 8006bee:	d0a0      	beq.n	8006b32 <_strtol_l.constprop.0+0x1a>
 8006bf0:	1e69      	subs	r1, r5, #1
 8006bf2:	e006      	b.n	8006c02 <_strtol_l.constprop.0+0xea>
 8006bf4:	b106      	cbz	r6, 8006bf8 <_strtol_l.constprop.0+0xe0>
 8006bf6:	4240      	negs	r0, r0
 8006bf8:	f1b8 0f00 	cmp.w	r8, #0
 8006bfc:	d099      	beq.n	8006b32 <_strtol_l.constprop.0+0x1a>
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	d1f6      	bne.n	8006bf0 <_strtol_l.constprop.0+0xd8>
 8006c02:	f8c8 1000 	str.w	r1, [r8]
 8006c06:	e794      	b.n	8006b32 <_strtol_l.constprop.0+0x1a>
 8006c08:	08006f7f 	.word	0x08006f7f

08006c0c <_strtol_r>:
 8006c0c:	f7ff bf84 	b.w	8006b18 <_strtol_l.constprop.0>

08006c10 <_strtoul_l.constprop.0>:
 8006c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4e34      	ldr	r6, [pc, #208]	@ (8006ce8 <_strtoul_l.constprop.0+0xd8>)
 8006c16:	4686      	mov	lr, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c20:	5d37      	ldrb	r7, [r6, r4]
 8006c22:	f017 0708 	ands.w	r7, r7, #8
 8006c26:	d1f8      	bne.n	8006c1a <_strtoul_l.constprop.0+0xa>
 8006c28:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c2a:	d12f      	bne.n	8006c8c <_strtoul_l.constprop.0+0x7c>
 8006c2c:	782c      	ldrb	r4, [r5, #0]
 8006c2e:	2701      	movs	r7, #1
 8006c30:	1c85      	adds	r5, r0, #2
 8006c32:	f033 0010 	bics.w	r0, r3, #16
 8006c36:	d109      	bne.n	8006c4c <_strtoul_l.constprop.0+0x3c>
 8006c38:	2c30      	cmp	r4, #48	@ 0x30
 8006c3a:	d12c      	bne.n	8006c96 <_strtoul_l.constprop.0+0x86>
 8006c3c:	7828      	ldrb	r0, [r5, #0]
 8006c3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006c42:	2858      	cmp	r0, #88	@ 0x58
 8006c44:	d127      	bne.n	8006c96 <_strtoul_l.constprop.0+0x86>
 8006c46:	786c      	ldrb	r4, [r5, #1]
 8006c48:	2310      	movs	r3, #16
 8006c4a:	3502      	adds	r5, #2
 8006c4c:	f04f 38ff 	mov.w	r8, #4294967295
 8006c50:	2600      	movs	r6, #0
 8006c52:	fbb8 f8f3 	udiv	r8, r8, r3
 8006c56:	fb03 f908 	mul.w	r9, r3, r8
 8006c5a:	ea6f 0909 	mvn.w	r9, r9
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006c64:	f1bc 0f09 	cmp.w	ip, #9
 8006c68:	d81c      	bhi.n	8006ca4 <_strtoul_l.constprop.0+0x94>
 8006c6a:	4664      	mov	r4, ip
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	dd2a      	ble.n	8006cc6 <_strtoul_l.constprop.0+0xb6>
 8006c70:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006c74:	d007      	beq.n	8006c86 <_strtoul_l.constprop.0+0x76>
 8006c76:	4580      	cmp	r8, r0
 8006c78:	d322      	bcc.n	8006cc0 <_strtoul_l.constprop.0+0xb0>
 8006c7a:	d101      	bne.n	8006c80 <_strtoul_l.constprop.0+0x70>
 8006c7c:	45a1      	cmp	r9, r4
 8006c7e:	db1f      	blt.n	8006cc0 <_strtoul_l.constprop.0+0xb0>
 8006c80:	fb00 4003 	mla	r0, r0, r3, r4
 8006c84:	2601      	movs	r6, #1
 8006c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c8a:	e7e9      	b.n	8006c60 <_strtoul_l.constprop.0+0x50>
 8006c8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006c8e:	bf04      	itt	eq
 8006c90:	782c      	ldrbeq	r4, [r5, #0]
 8006c92:	1c85      	addeq	r5, r0, #2
 8006c94:	e7cd      	b.n	8006c32 <_strtoul_l.constprop.0+0x22>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1d8      	bne.n	8006c4c <_strtoul_l.constprop.0+0x3c>
 8006c9a:	2c30      	cmp	r4, #48	@ 0x30
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2308      	moveq	r3, #8
 8006ca0:	230a      	movne	r3, #10
 8006ca2:	e7d3      	b.n	8006c4c <_strtoul_l.constprop.0+0x3c>
 8006ca4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006ca8:	f1bc 0f19 	cmp.w	ip, #25
 8006cac:	d801      	bhi.n	8006cb2 <_strtoul_l.constprop.0+0xa2>
 8006cae:	3c37      	subs	r4, #55	@ 0x37
 8006cb0:	e7dc      	b.n	8006c6c <_strtoul_l.constprop.0+0x5c>
 8006cb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006cb6:	f1bc 0f19 	cmp.w	ip, #25
 8006cba:	d804      	bhi.n	8006cc6 <_strtoul_l.constprop.0+0xb6>
 8006cbc:	3c57      	subs	r4, #87	@ 0x57
 8006cbe:	e7d5      	b.n	8006c6c <_strtoul_l.constprop.0+0x5c>
 8006cc0:	f04f 36ff 	mov.w	r6, #4294967295
 8006cc4:	e7df      	b.n	8006c86 <_strtoul_l.constprop.0+0x76>
 8006cc6:	1c73      	adds	r3, r6, #1
 8006cc8:	d106      	bne.n	8006cd8 <_strtoul_l.constprop.0+0xc8>
 8006cca:	2322      	movs	r3, #34	@ 0x22
 8006ccc:	f8ce 3000 	str.w	r3, [lr]
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	b932      	cbnz	r2, 8006ce2 <_strtoul_l.constprop.0+0xd2>
 8006cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	b107      	cbz	r7, 8006cdc <_strtoul_l.constprop.0+0xcc>
 8006cda:	4240      	negs	r0, r0
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	d0f9      	beq.n	8006cd4 <_strtoul_l.constprop.0+0xc4>
 8006ce0:	b106      	cbz	r6, 8006ce4 <_strtoul_l.constprop.0+0xd4>
 8006ce2:	1e69      	subs	r1, r5, #1
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	e7f5      	b.n	8006cd4 <_strtoul_l.constprop.0+0xc4>
 8006ce8:	08006f7f 	.word	0x08006f7f

08006cec <_strtoul_r>:
 8006cec:	f7ff bf90 	b.w	8006c10 <_strtoul_l.constprop.0>

08006cf0 <_malloc_usable_size_r>:
 8006cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf4:	1f18      	subs	r0, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfbc      	itt	lt
 8006cfa:	580b      	ldrlt	r3, [r1, r0]
 8006cfc:	18c0      	addlt	r0, r0, r3
 8006cfe:	4770      	bx	lr

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
