
Final_HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aec  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e0c  08008e0c  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e0c  08008e0c  00009e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e14  08008e14  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e18  08008e18  00009e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008e1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  08008e78  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08008e78  0000a3c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d8f  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb5  00000000  00000000  0001ce21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  0001ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af9  00000000  00000000  0001fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bab6  00000000  00000000  00020619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011835  00000000  00000000  0004c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c1a8  00000000  00000000  0005d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  00179af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0017ddac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000005c 	.word	0x2000005c
 8000270:	00000000 	.word	0x00000000
 8000274:	08008d28 	.word	0x08008d28

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000060 	.word	0x20000060
 8000290:	08008d28 	.word	0x08008d28

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b97e 	b.w	80005b8 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14d      	bne.n	800037c <__udivmoddi4+0xa8>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	460f      	mov	r7, r1
 80002e4:	4684      	mov	ip, r0
 80002e6:	4696      	mov	lr, r2
 80002e8:	fab2 f382 	clz	r3, r2
 80002ec:	d960      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ee:	b14b      	cbz	r3, 8000304 <__udivmoddi4+0x30>
 80002f0:	fa02 fe03 	lsl.w	lr, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000308:	fa1f f48e 	uxth.w	r4, lr
 800030c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000310:	fbb7 f1f6 	udiv	r1, r7, r6
 8000314:	fb06 7711 	mls	r7, r6, r1, r7
 8000318:	fb01 f004 	mul.w	r0, r1, r4
 800031c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000320:	4290      	cmp	r0, r2
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x62>
 8000324:	eb1e 0202 	adds.w	r2, lr, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x60>
 800032e:	4290      	cmp	r0, r2
 8000330:	f200 812d 	bhi.w	800058e <__udivmoddi4+0x2ba>
 8000334:	4639      	mov	r1, r7
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	fa1f fc8c 	uxth.w	ip, ip
 800033c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000340:	fb06 2210 	mls	r2, r6, r0, r2
 8000344:	fb00 f404 	mul.w	r4, r0, r4
 8000348:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800034c:	4564      	cmp	r4, ip
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x8e>
 8000350:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x8c>
 800035a:	4564      	cmp	r4, ip
 800035c:	f200 811a 	bhi.w	8000594 <__udivmoddi4+0x2c0>
 8000360:	4610      	mov	r0, r2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	ebac 0c04 	sub.w	ip, ip, r4
 800036a:	2100      	movs	r1, #0
 800036c:	b125      	cbz	r5, 8000378 <__udivmoddi4+0xa4>
 800036e:	fa2c f303 	lsr.w	r3, ip, r3
 8000372:	2200      	movs	r2, #0
 8000374:	e9c5 3200 	strd	r3, r2, [r5]
 8000378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037c:	428b      	cmp	r3, r1
 800037e:	d905      	bls.n	800038c <__udivmoddi4+0xb8>
 8000380:	b10d      	cbz	r5, 8000386 <__udivmoddi4+0xb2>
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	2100      	movs	r1, #0
 8000388:	4608      	mov	r0, r1
 800038a:	e7f5      	b.n	8000378 <__udivmoddi4+0xa4>
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14d      	bne.n	8000430 <__udivmoddi4+0x15c>
 8000394:	42a3      	cmp	r3, r4
 8000396:	f0c0 80f2 	bcc.w	800057e <__udivmoddi4+0x2aa>
 800039a:	4290      	cmp	r0, r2
 800039c:	f080 80ef 	bcs.w	800057e <__udivmoddi4+0x2aa>
 80003a0:	4606      	mov	r6, r0
 80003a2:	4623      	mov	r3, r4
 80003a4:	4608      	mov	r0, r1
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e6      	beq.n	8000378 <__udivmoddi4+0xa4>
 80003aa:	e9c5 6300 	strd	r6, r3, [r5]
 80003ae:	e7e3      	b.n	8000378 <__udivmoddi4+0xa4>
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f040 80a2 	bne.w	80004fa <__udivmoddi4+0x226>
 80003b6:	1a8a      	subs	r2, r1, r2
 80003b8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003bc:	fa1f f68e 	uxth.w	r6, lr
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003c6:	fb07 2014 	mls	r0, r7, r4, r2
 80003ca:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d2:	fb06 f004 	mul.w	r0, r6, r4
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d90f      	bls.n	80003fa <__udivmoddi4+0x126>
 80003da:	eb1e 0202 	adds.w	r2, lr, r2
 80003de:	f104 38ff 	add.w	r8, r4, #4294967295
 80003e2:	bf2c      	ite	cs
 80003e4:	f04f 0901 	movcs.w	r9, #1
 80003e8:	f04f 0900 	movcc.w	r9, #0
 80003ec:	4290      	cmp	r0, r2
 80003ee:	d903      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003f0:	f1b9 0f00 	cmp.w	r9, #0
 80003f4:	f000 80c8 	beq.w	8000588 <__udivmoddi4+0x2b4>
 80003f8:	4644      	mov	r4, r8
 80003fa:	1a12      	subs	r2, r2, r0
 80003fc:	fa1f fc8c 	uxth.w	ip, ip
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	fb00 f606 	mul.w	r6, r0, r6
 800040c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000410:	4566      	cmp	r6, ip
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x152>
 8000414:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x150>
 800041e:	4566      	cmp	r6, ip
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c6>
 8000424:	4610      	mov	r0, r2
 8000426:	ebac 0c06 	sub.w	ip, ip, r6
 800042a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800042e:	e79d      	b.n	800036c <__udivmoddi4+0x98>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa04 fe01 	lsl.w	lr, r4, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000442:	40f4      	lsrs	r4, r6
 8000444:	408a      	lsls	r2, r1
 8000446:	431f      	orrs	r7, r3
 8000448:	ea4e 030c 	orr.w	r3, lr, ip
 800044c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000450:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000454:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000460:	fb08 4410 	mls	r4, r8, r0, r4
 8000464:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000468:	fb00 f90c 	mul.w	r9, r0, ip
 800046c:	45a1      	cmp	r9, r4
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1ba>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f100 3aff 	add.w	sl, r0, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a1      	cmp	r9, r4
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b8>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 8093 	beq.w	80005b2 <__udivmoddi4+0x2de>
 800048c:	4650      	mov	r0, sl
 800048e:	eba4 0409 	sub.w	r4, r4, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb4 f3f8 	udiv	r3, r4, r8
 800049a:	fb08 4413 	mls	r4, r8, r3, r4
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1e4>
 80004aa:	193c      	adds	r4, r7, r4
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1e2>
 80004b2:	45a4      	cmp	ip, r4
 80004b4:	d87a      	bhi.n	80005ac <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004bc:	eba4 040c 	sub.w	r4, r4, ip
 80004c0:	fba0 9802 	umull	r9, r8, r0, r2
 80004c4:	4544      	cmp	r4, r8
 80004c6:	46cc      	mov	ip, r9
 80004c8:	4643      	mov	r3, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1fe>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x208>
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x208>
 80004d2:	3801      	subs	r0, #1
 80004d4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d8:	eb68 0307 	sbc.w	r3, r8, r7
 80004dc:	b15d      	cbz	r5, 80004f6 <__udivmoddi4+0x222>
 80004de:	ebbe 020c 	subs.w	r2, lr, ip
 80004e2:	eb64 0403 	sbc.w	r4, r4, r3
 80004e6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ea:	fa22 f301 	lsr.w	r3, r2, r1
 80004ee:	40cc      	lsrs	r4, r1
 80004f0:	431e      	orrs	r6, r3
 80004f2:	e9c5 6400 	strd	r6, r4, [r5]
 80004f6:	2100      	movs	r1, #0
 80004f8:	e73e      	b.n	8000378 <__udivmoddi4+0xa4>
 80004fa:	fa02 fe03 	lsl.w	lr, r2, r3
 80004fe:	f1c3 0120 	rsb	r1, r3, #32
 8000502:	fa04 f203 	lsl.w	r2, r4, r3
 8000506:	fa00 fc03 	lsl.w	ip, r0, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000510:	fa20 f101 	lsr.w	r1, r0, r1
 8000514:	fa1f f68e 	uxth.w	r6, lr
 8000518:	fbb4 f0f7 	udiv	r0, r4, r7
 800051c:	430a      	orrs	r2, r1
 800051e:	fb07 4410 	mls	r4, r7, r0, r4
 8000522:	0c11      	lsrs	r1, r2, #16
 8000524:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000528:	fb00 f406 	mul.w	r4, r0, r6
 800052c:	428c      	cmp	r4, r1
 800052e:	d90e      	bls.n	800054e <__udivmoddi4+0x27a>
 8000530:	eb1e 0101 	adds.w	r1, lr, r1
 8000534:	f100 38ff 	add.w	r8, r0, #4294967295
 8000538:	bf2c      	ite	cs
 800053a:	f04f 0901 	movcs.w	r9, #1
 800053e:	f04f 0900 	movcc.w	r9, #0
 8000542:	428c      	cmp	r4, r1
 8000544:	d902      	bls.n	800054c <__udivmoddi4+0x278>
 8000546:	f1b9 0f00 	cmp.w	r9, #0
 800054a:	d02c      	beq.n	80005a6 <__udivmoddi4+0x2d2>
 800054c:	4640      	mov	r0, r8
 800054e:	1b09      	subs	r1, r1, r4
 8000550:	b292      	uxth	r2, r2
 8000552:	fbb1 f4f7 	udiv	r4, r1, r7
 8000556:	fb07 1114 	mls	r1, r7, r4, r1
 800055a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055e:	fb04 f106 	mul.w	r1, r4, r6
 8000562:	4291      	cmp	r1, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x2a2>
 8000566:	eb1e 0202 	adds.w	r2, lr, r2
 800056a:	f104 38ff 	add.w	r8, r4, #4294967295
 800056e:	d201      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000570:	4291      	cmp	r1, r2
 8000572:	d815      	bhi.n	80005a0 <__udivmoddi4+0x2cc>
 8000574:	4644      	mov	r4, r8
 8000576:	1a52      	subs	r2, r2, r1
 8000578:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800057c:	e721      	b.n	80003c2 <__udivmoddi4+0xee>
 800057e:	1a86      	subs	r6, r0, r2
 8000580:	eb64 0303 	sbc.w	r3, r4, r3
 8000584:	2001      	movs	r0, #1
 8000586:	e70e      	b.n	80003a6 <__udivmoddi4+0xd2>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e735      	b.n	80003fa <__udivmoddi4+0x126>
 800058e:	3902      	subs	r1, #2
 8000590:	4472      	add	r2, lr
 8000592:	e6d0      	b.n	8000336 <__udivmoddi4+0x62>
 8000594:	44f4      	add	ip, lr
 8000596:	3802      	subs	r0, #2
 8000598:	e6e3      	b.n	8000362 <__udivmoddi4+0x8e>
 800059a:	44f4      	add	ip, lr
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x152>
 80005a0:	3c02      	subs	r4, #2
 80005a2:	4472      	add	r2, lr
 80005a4:	e7e7      	b.n	8000576 <__udivmoddi4+0x2a2>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4471      	add	r1, lr
 80005aa:	e7d0      	b.n	800054e <__udivmoddi4+0x27a>
 80005ac:	3b02      	subs	r3, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e782      	b.n	80004b8 <__udivmoddi4+0x1e4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	e76a      	b.n	800048e <__udivmoddi4+0x1ba>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fcc0 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f890 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f9e6 	bl	8000998 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005cc:	f000 f8ee 	bl	80007ac <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80005d0:	f000 f950 	bl	8000874 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f994 	bl	8000900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80005d8:	483c      	ldr	r0, [pc, #240]	@ (80006cc <main+0x110>)
 80005da:	f001 f989 	bl	80018f0 <HAL_ADC_Start>
  HAL_FDCAN_Start(&hfdcan1);
 80005de:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <main+0x114>)
 80005e0:	f002 fbb8 	bl	8002d54 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4839      	ldr	r0, [pc, #228]	@ (80006d0 <main+0x114>)
 80005ea:	f002 fc1f 	bl	8002e2c <HAL_FDCAN_ActivateNotification>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <main+0x3c>
    {
      Error_Handler();
 80005f4:	f000 fa58 	bl	8000aa8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ADC_Select_CH1();
 80005f8:	f000 fa06 	bl	8000a08 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80005fc:	4833      	ldr	r0, [pc, #204]	@ (80006cc <main+0x110>)
 80005fe:	f001 f977 	bl	80018f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000602:	f04f 31ff 	mov.w	r1, #4294967295
 8000606:	4831      	ldr	r0, [pc, #196]	@ (80006cc <main+0x110>)
 8000608:	f001 fa60 	bl	8001acc <HAL_ADC_PollForConversion>
	s1_aceleracion = HAL_ADC_GetValue(&hadc1);
 800060c:	482f      	ldr	r0, [pc, #188]	@ (80006cc <main+0x110>)
 800060e:	f001 fb35 	bl	8001c7c <HAL_ADC_GetValue>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b2f      	ldr	r3, [pc, #188]	@ (80006d4 <main+0x118>)
 8000618:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800061a:	482c      	ldr	r0, [pc, #176]	@ (80006cc <main+0x110>)
 800061c:	f001 fa22 	bl	8001a64 <HAL_ADC_Stop>


	ADC_Select_CH3();
 8000620:	f000 fa1a 	bl	8000a58 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8000624:	4829      	ldr	r0, [pc, #164]	@ (80006cc <main+0x110>)
 8000626:	f001 f963 	bl	80018f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800062a:	f04f 31ff 	mov.w	r1, #4294967295
 800062e:	4827      	ldr	r0, [pc, #156]	@ (80006cc <main+0x110>)
 8000630:	f001 fa4c 	bl	8001acc <HAL_ADC_PollForConversion>
	s2_aceleracion = HAL_ADC_GetValue(&hadc1);
 8000634:	4825      	ldr	r0, [pc, #148]	@ (80006cc <main+0x110>)
 8000636:	f001 fb21 	bl	8001c7c <HAL_ADC_GetValue>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <main+0x11c>)
 8000640:	601a      	str	r2, [r3, #0]
	//printValue(s1_aceleracion);
	HAL_ADC_Stop(&hadc1);
 8000642:	4822      	ldr	r0, [pc, #136]	@ (80006cc <main+0x110>)
 8000644:	f001 fa0e 	bl	8001a64 <HAL_ADC_Stop>
	//TxHeader.DLC = 2;
	//TxHeader.IDE = CAN_ID_STD;
	//TxHeader.RTR = CAN_RTR_DATA;
	//TxHeader.StdId = 0x111;

	TxHeader.Identifier = 0x111;
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <main+0x120>)
 800064a:	f240 1211 	movw	r2, #273	@ 0x111
 800064e:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <main+0x120>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <main+0x120>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <main+0x120>)
 800065e:	2204      	movs	r2, #4
 8000660:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <main+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <main+0x120>)
 800066a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800066e:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <main+0x120>)
 8000672:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000676:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <main+0x120>)
 800067a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800067e:	61da      	str	r2, [r3, #28]
	//TxHeader.MessageMarker = 0x52;

	TxData[0] = (s1_aceleracion >> 8) & 0xFF;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <main+0x118>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	121b      	asrs	r3, r3, #8
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <main+0x124>)
 800068a:	701a      	strb	r2, [r3, #0]
	TxData[1] = s1_aceleracion & 0xFF; // S APPS 1
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <main+0x118>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <main+0x124>)
 8000694:	705a      	strb	r2, [r3, #1]
	TxData[2] = (s2_aceleracion >> 8) & 0xFF;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <main+0x11c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	121b      	asrs	r3, r3, #8
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <main+0x124>)
 80006a0:	709a      	strb	r2, [r3, #2]
	TxData[3] = s2_aceleracion & 0xFF; // S APPS 2
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <main+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <main+0x124>)
 80006aa:	70da      	strb	r2, [r3, #3]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK){
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <main+0x124>)
 80006ae:	490b      	ldr	r1, [pc, #44]	@ (80006dc <main+0x120>)
 80006b0:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <main+0x114>)
 80006b2:	f002 fb77 	bl	8002da4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d19d      	bne.n	80005f8 <main+0x3c>
		print("Valor de sensor de aceleración enviado\n\r");
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <main+0x128>)
 80006be:	f000 f985 	bl	80009cc <print>
		HAL_Delay(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 fcfc 	bl	80010c0 <HAL_Delay>
	ADC_Select_CH1();
 80006c8:	e796      	b.n	80005f8 <main+0x3c>
 80006ca:	bf00      	nop
 80006cc:	20000078 	.word	0x20000078
 80006d0:	200000e0 	.word	0x200000e0
 80006d4:	20000204 	.word	0x20000204
 80006d8:	20000208 	.word	0x20000208
 80006dc:	200001d8 	.word	0x200001d8
 80006e0:	200001fc 	.word	0x200001fc
 80006e4:	08008d40 	.word	0x08008d40

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09c      	sub	sp, #112	@ 0x70
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2250      	movs	r2, #80	@ 0x50
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 fe84 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070e:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <SystemClock_Config+0xbc>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <SystemClock_Config+0xbc>)
 8000714:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000718:	6113      	str	r3, [r2, #16]
 800071a:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xbc>)
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000726:	bf00      	nop
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemClock_Config+0xbc>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	2b08      	cmp	r3, #8
 8000732:	d1f9      	bne.n	8000728 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000740:	2308      	movs	r3, #8
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fe81 	bl	8003458 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800075c:	f000 f9a4 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	231f      	movs	r3, #31
 8000762:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2101      	movs	r1, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f003 faa2 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800078a:	f000 f98d 	bl	8000aa8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <SystemClock_Config+0xc0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <SystemClock_Config+0xc0>)
 8000794:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000798:	6013      	str	r3, [r2, #0]
}
 800079a:	bf00      	nop
 800079c:	3770      	adds	r7, #112	@ 0x70
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	44020800 	.word	0x44020800
 80007a8:	40022000 	.word	0x40022000

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 fe23 	bl	8008404 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007c0:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <MX_ADC1_Init+0xc0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b28      	ldr	r3, [pc, #160]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_ADC1_Init+0xbc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_ADC1_Init+0xbc>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	4810      	ldr	r0, [pc, #64]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000826:	f000 ff0f 	bl	8001648 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000830:	f000 f93a 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_ADC1_Init+0xc4>)
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	@ 0x7f
 8000842:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_ADC1_Init+0xbc>)
 8000852:	f001 fa21 	bl	8001c98 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800085c:	f000 f924 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000078 	.word	0x20000078
 800086c:	42028000 	.word	0x42028000
 8000870:	04300002 	.word	0x04300002

08000874 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 800087a:	4a20      	ldr	r2, [pc, #128]	@ (80008fc <MX_FDCAN1_Init+0x88>)
 800087c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 8000892:	2200      	movs	r2, #0
 8000894:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 8000898:	2200      	movs	r2, #0
 800089a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 800089e:	2200      	movs	r2, #0
 80008a0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008a4:	2205      	movs	r2, #5
 80008a6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008bc:	2201      	movs	r2, #1
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008da:	2200      	movs	r2, #0
 80008dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_FDCAN1_Init+0x84>)
 80008e6:	f002 f8db 	bl	8002aa0 <HAL_FDCAN_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008f0:	f000 f8da 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000e0 	.word	0x200000e0
 80008fc:	4000a400 	.word	0x4000a400

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_USART2_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800094a:	f006 ff7d 	bl	8007848 <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f8a8 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800095c:	f007 fc68 	bl	8008230 <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f89f 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800096e:	f007 fc9d 	bl	80082ac <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f896 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USART2_UART_Init+0x90>)
 800097e:	f007 fc1e 	bl	80081be <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f88e 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000144 	.word	0x20000144
 8000994:	40004400 	.word	0x40004400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_GPIO_Init+0x30>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a4:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <MX_GPIO_Init+0x30>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_GPIO_Init+0x30>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	44020c00 	.word	0x44020c00

080009cc <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4909      	ldr	r1, [pc, #36]	@ (80009fc <print+0x30>)
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <print+0x34>)
 80009da:	f007 fcf3 	bl	80083c4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg),
 80009de:	4808      	ldr	r0, [pc, #32]	@ (8000a00 <print+0x34>)
 80009e0:	f7ff fc58 	bl	8000294 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	4904      	ldr	r1, [pc, #16]	@ (8000a00 <print+0x34>)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <print+0x38>)
 80009f0:	f006 ff7a 	bl	80078e8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08008d6c 	.word	0x08008d6c
 8000a00:	2000020c 	.word	0x2000020c
 8000a04:	20000144 	.word	0x20000144

08000a08 <ADC_Select_CH1>:
	s1_aceleracion = buffer_adc[0];
	s2_aceleracion = buffer_adc[1];
}
*/
void ADC_Select_CH1 (void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f007 fcf5 	bl	8008404 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ADC_Select_CH1+0x48>)
 8000a1c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a26:	237f      	movs	r3, #127	@ 0x7f
 8000a28:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	@ (8000a54 <ADC_Select_CH1+0x4c>)
 8000a38:	f001 f92e 	bl	8001c98 <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <ADC_Select_CH1+0x3e>
	  {
	    Error_Handler();
 8000a42:	f000 f831 	bl	8000aa8 <Error_Handler>
	  }
}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	04300002 	.word	0x04300002
 8000a54:	20000078 	.word	0x20000078

08000a58 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2220      	movs	r2, #32
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 fccd 	bl	8008404 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <ADC_Select_CH3+0x48>)
 8000a6c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	237f      	movs	r3, #127	@ 0x7f
 8000a78:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <ADC_Select_CH3+0x4c>)
 8000a88:	f001 f906 	bl	8001c98 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <ADC_Select_CH3+0x3e>
	  {
	    Error_Handler();
 8000a92:	f000 f809 	bl	8000aa8 <Error_Handler>
	  }
}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	0c900008 	.word	0x0c900008
 8000aa4:	20000078 	.word	0x20000078

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0be      	sub	sp, #248	@ 0xf8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	22d0      	movs	r2, #208	@ 0xd0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fc8d 	bl	8008404 <memset>
  if(hadc->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a23      	ldr	r2, [pc, #140]	@ (8000b7c <HAL_ADC_MspInit+0xb8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13f      	bne.n	8000b74 <HAL_ADC_MspInit+0xb0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000af4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 fc1e 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_ADC_MspInit+0x56>
    {
      Error_Handler();
 8000b16:	f7ff ffc7 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b20:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_ADC_MspInit+0xbc>)
 8000b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_INP1
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|S_APPS_2_Pin;
 8000b56:	2342      	movs	r3, #66	@ 0x42
 8000b58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_ADC_MspInit+0xc0>)
 8000b70:	f002 fb20 	bl	80031b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	37f8      	adds	r7, #248	@ 0xf8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	42028000 	.word	0x42028000
 8000b80:	44020c00 	.word	0x44020c00
 8000b84:	42020000 	.word	0x42020000

08000b88 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0be      	sub	sp, #248	@ 0xf8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	22d0      	movs	r2, #208	@ 0xd0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fc2b 	bl	8008404 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <HAL_FDCAN_MspInit+0xc8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d146      	bne.n	8000c46 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	f04f 0304 	mov.w	r3, #4
 8000bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fbbc 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000bda:	f7ff ff65 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000be4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000bf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_FDCAN_MspInit+0xcc>)
 8000c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c34:	2309      	movs	r3, #9
 8000c36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <HAL_FDCAN_MspInit+0xd0>)
 8000c42:	f002 fab7 	bl	80031b4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c46:	bf00      	nop
 8000c48:	37f8      	adds	r7, #248	@ 0xf8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	4000a400 	.word	0x4000a400
 8000c54:	44020c00 	.word	0x44020c00
 8000c58:	42020000 	.word	0x42020000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0be      	sub	sp, #248	@ 0xf8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	22d0      	movs	r2, #208	@ 0xd0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fbc1 	bl	8008404 <memset>
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <HAL_UART_MspInit+0xc4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d144      	bne.n	8000d16 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8c:	f04f 0202 	mov.w	r2, #2
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 fb53 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000cac:	f7ff fefc 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd4:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0xc8>)
 8000ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cec:	230c      	movs	r3, #12
 8000cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0xcc>)
 8000d12:	f002 fa4f 	bl	80031b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	37f8      	adds	r7, #248	@ 0xf8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	44020c00 	.word	0x44020c00
 8000d28:	42020000 	.word	0x42020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f97d 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f007 fb2a 	bl	8008414 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20044000 	.word	0x20044000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000270 	.word	0x20000270
 8000df4:	200003c0 	.word	0x200003c0

08000df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <SystemInit+0xdc>)
 8000e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e04:	4a33      	ldr	r2, [pc, #204]	@ (8000ed4 <SystemInit+0xdc>)
 8000e06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <SystemInit+0xe0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <SystemInit+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <SystemInit+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <SystemInit+0xe0>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	492c      	ldr	r1, [pc, #176]	@ (8000ed8 <SystemInit+0xe0>)
 8000e26:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <SystemInit+0xe4>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <SystemInit+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <SystemInit+0xe0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <SystemInit+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <SystemInit+0xe0>)
 8000e40:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <SystemInit+0xe8>)
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <SystemInit+0xe0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <SystemInit+0xe0>)
 8000e4c:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <SystemInit+0xe8>)
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <SystemInit+0xe0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <SystemInit+0xe0>)
 8000e58:	4a21      	ldr	r2, [pc, #132]	@ (8000ee0 <SystemInit+0xe8>)
 8000e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <SystemInit+0xe0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <SystemInit+0xe0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <SystemInit+0xe0>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <SystemInit+0xe0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <SystemInit+0xdc>)
 8000e76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e7a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <SystemInit+0xec>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e84:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e8c:	d003      	beq.n	8000e96 <SystemInit+0x9e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e94:	d117      	bne.n	8000ec6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <SystemInit+0xec>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <SystemInit+0xec>)
 8000ea4:	4a10      	ldr	r2, [pc, #64]	@ (8000ee8 <SystemInit+0xf0>)
 8000ea6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <SystemInit+0xec>)
 8000eaa:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <SystemInit+0xf4>)
 8000eac:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <SystemInit+0xec>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <SystemInit+0xec>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <SystemInit+0xec>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <SystemInit+0xec>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	61d3      	str	r3, [r2, #28]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	44020c00 	.word	0x44020c00
 8000edc:	eae2eae3 	.word	0xeae2eae3
 8000ee0:	01010280 	.word	0x01010280
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	08192a3b 	.word	0x08192a3b
 8000eec:	4c5d6e7f 	.word	0x4c5d6e7f

08000ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef4:	f7ff ff80 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1e:	f007 fa7f 	bl	8008420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff fb4b 	bl	80005bc <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   r0, =_estack
 8000f28:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f34:	08008e1c 	.word	0x08008e1c
  ldr r2, =_sbss
 8000f38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f3c:	200003c0 	.word	0x200003c0

08000f40 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f001 fcd4 	bl	80028f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f4e:	f003 f873 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <HAL_Init+0x44>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	490b      	ldr	r1, [pc, #44]	@ (8000f8c <HAL_Init+0x48>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_Init+0x4c>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f001 fd0b 	bl	8002984 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f810 	bl	8000f94 <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e002      	b.n	8000f84 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7e:	f7ff fd99 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	44020c00 	.word	0x44020c00
 8000f8c:	08008d88 	.word	0x08008d88
 8000f90:	20000000 	.word	0x20000000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fa0:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <HAL_InitTick+0xdc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e05c      	b.n	8001066 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000fac:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <HAL_InitTick+0xe0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <HAL_InitTick+0xe4>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <HAL_InitTick+0xdc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e037      	b.n	8001042 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000fd2:	f001 fd2f 	bl	8002a34 <HAL_SYSTICK_GetCLKSourceConfig>
 8000fd6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d023      	beq.n	8001026 <HAL_InitTick+0x92>
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d82d      	bhi.n	8001040 <HAL_InitTick+0xac>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_InitTick+0x5e>
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d00d      	beq.n	800100c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ff0:	e026      	b.n	8001040 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_InitTick+0xe4>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <HAL_InitTick+0xdc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001000:	fbb3 f3f1 	udiv	r3, r3, r1
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	60fb      	str	r3, [r7, #12]
        break;
 800100a:	e01a      	b.n	8001042 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_InitTick+0xdc>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	fbb3 f3f2 	udiv	r3, r3, r2
 800101a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	60fb      	str	r3, [r7, #12]
        break;
 8001024:	e00d      	b.n	8001042 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001026:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0xdc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001030:	fbb3 f3f2 	udiv	r3, r3, r2
 8001034:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	60fb      	str	r3, [r7, #12]
        break;
 800103e:	e000      	b.n	8001042 <HAL_InitTick+0xae>
        break;
 8001040:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f001 fc7c 	bl	8002940 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e009      	b.n	8001066 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	f001 fc57 	bl	800290c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800105e:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_InitTick+0xe8>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	e000e010 	.word	0xe000e010
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000274 	.word	0x20000274

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000274 	.word	0x20000274

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800119e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	42028000 	.word	0x42028000

080011bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3360      	adds	r3, #96	@ 0x60
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <LL_ADC_SetOffset+0x44>)
 80011de:	4013      	ands	r3, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011f4:	bf00      	nop
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	03fff000 	.word	0x03fff000

08001204 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3360      	adds	r3, #96	@ 0x60
 8001212:	461a      	mov	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3360      	adds	r3, #96	@ 0x60
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3360      	adds	r3, #96	@ 0x60
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3360      	adds	r3, #96	@ 0x60
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012c6:	bf00      	nop
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3330      	adds	r3, #48	@ 0x30
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	4413      	add	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	211f      	movs	r1, #31
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0e9b      	lsrs	r3, r3, #26
 8001356:	f003 011f 	and.w	r1, r3, #31
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001376:	b480      	push	{r7}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3314      	adds	r3, #20
 8001386:	461a      	mov	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	0e5b      	lsrs	r3, r3, #25
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0d1b      	lsrs	r3, r3, #20
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	2107      	movs	r1, #7
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	0d1b      	lsrs	r3, r3, #20
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013c0:	bf00      	nop
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0318 	and.w	r3, r3, #24
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013f0:	40d9      	lsrs	r1, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	400b      	ands	r3, r1
 80013f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013fa:	431a      	orrs	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	000fffff 	.word	0x000fffff

08001414 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 031f 	and.w	r3, r3, #31
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800145c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6093      	str	r3, [r2, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001484:	d101      	bne.n	800148a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014d4:	d101      	bne.n	80014da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001524:	f043 0202 	orr.w	r2, r3, #2
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <LL_ADC_IsEnabled+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_ADC_IsEnabled+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d101      	bne.n	8001576 <LL_ADC_IsDisableOngoing+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_IsDisableOngoing+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d101      	bne.n	80015ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800160e:	f043 0220 	orr.w	r2, r3, #32
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b08      	cmp	r3, #8
 8001634:	d101      	bne.n	800163a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e136      	b.n	80018d0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	2b00      	cmp	r3, #0
 800166e:	d109      	bne.n	8001684 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fa27 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fef1 	bl	8001470 <LL_ADC_IsDeepPowerDownEnabled>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fed7 	bl	800144c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff0c 	bl	80014c0 <LL_ADC_IsInternalRegulatorEnabled>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d115      	bne.n	80016da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fef0 	bl	8001498 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b8:	4b87      	ldr	r3, [pc, #540]	@ (80018d8 <HAL_ADC_Init+0x290>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	4a87      	ldr	r2, [pc, #540]	@ (80018dc <HAL_ADC_Init+0x294>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	3301      	adds	r3, #1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f9      	bne.n	80016ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff feee 	bl	80014c0 <LL_ADC_IsInternalRegulatorEnabled>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10d      	bne.n	8001706 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	f043 0210 	orr.w	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff62 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001710:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 80cf 	bne.w	80018be <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 80cb 	bne.w	80018be <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001730:	f043 0202 	orr.w	r2, r3, #2
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fefb 	bl	8001538 <LL_ADC_IsEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d110      	bne.n	800176a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001748:	4865      	ldr	r0, [pc, #404]	@ (80018e0 <HAL_ADC_Init+0x298>)
 800174a:	f7ff fef5 	bl	8001538 <LL_ADC_IsEnabled>
 800174e:	4604      	mov	r4, r0
 8001750:	4864      	ldr	r0, [pc, #400]	@ (80018e4 <HAL_ADC_Init+0x29c>)
 8001752:	f7ff fef1 	bl	8001538 <LL_ADC_IsEnabled>
 8001756:	4603      	mov	r3, r0
 8001758:	4323      	orrs	r3, r4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d105      	bne.n	800176a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4619      	mov	r1, r3
 8001764:	4860      	ldr	r0, [pc, #384]	@ (80018e8 <HAL_ADC_Init+0x2a0>)
 8001766:	f7ff fccf 	bl	8001108 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e5b      	ldrb	r3, [r3, #25]
 800176e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800177a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001780:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	3b01      	subs	r3, #1
 800179e:	045b      	lsls	r3, r3, #17
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b48      	ldr	r3, [pc, #288]	@ (80018ec <HAL_ADC_Init+0x2a4>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	430b      	orrs	r3, r1
 80017d4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff16 	bl	8001622 <LL_ADC_INJ_IsConversionOngoing>
 80017f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d13d      	bne.n	800187a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d13a      	bne.n	800187a <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001810:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001820:	f023 0302 	bic.w	r3, r3, #2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	69b9      	ldr	r1, [r7, #24]
 800182a:	430b      	orrs	r3, r1
 800182c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d118      	bne.n	800186a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001842:	f023 0304 	bic.w	r3, r3, #4
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800185a:	430a      	orrs	r2, r1
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	e007      	b.n	800187a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10c      	bne.n	800189c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	f023 010f 	bic.w	r1, r3, #15
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	631a      	str	r2, [r3, #48]	@ 0x30
 800189a:	e007      	b.n	80018ac <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 020f 	bic.w	r2, r2, #15
 80018aa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	f023 0303 	bic.w	r3, r3, #3
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80018bc:	e007      	b.n	80018ce <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3724      	adds	r7, #36	@ 0x24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	20000000 	.word	0x20000000
 80018dc:	053e2d63 	.word	0x053e2d63
 80018e0:	42028000 	.word	0x42028000
 80018e4:	42028100 	.word	0x42028100
 80018e8:	42028300 	.word	0x42028300
 80018ec:	fff04007 	.word	0xfff04007

080018f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018f8:	4857      	ldr	r0, [pc, #348]	@ (8001a58 <HAL_ADC_Start+0x168>)
 80018fa:	f7ff fd8b 	bl	8001414 <LL_ADC_GetMultimode>
 80018fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fe65 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 809c 	bne.w	8001a4a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_ADC_Start+0x30>
 800191c:	2302      	movs	r3, #2
 800191e:	e097      	b.n	8001a50 <HAL_ADC_Start+0x160>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fe73 	bl	8002614 <ADC_Enable>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 8083 	bne.w	8001a40 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a42      	ldr	r2, [pc, #264]	@ (8001a5c <HAL_ADC_Start+0x16c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d002      	beq.n	800195e <HAL_ADC_Start+0x6e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	e000      	b.n	8001960 <HAL_ADC_Start+0x70>
 800195e:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <HAL_ADC_Start+0x170>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4293      	cmp	r3, r2
 8001966:	d002      	beq.n	800196e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001972:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001986:	d106      	bne.n	8001996 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198c:	f023 0206 	bic.w	r2, r3, #6
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001994:	e002      	b.n	800199c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	221c      	movs	r2, #28
 80019a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a5c <HAL_ADC_Start+0x16c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d002      	beq.n	80019bc <HAL_ADC_Start+0xcc>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e000      	b.n	80019be <HAL_ADC_Start+0xce>
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_ADC_Start+0x170>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d008      	beq.n	80019d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d002      	beq.n	80019d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d114      	bne.n	8001a02 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fdc2 	bl	8001584 <LL_ADC_REG_StartConversion>
 8001a00:	e025      	b.n	8001a4e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_ADC_Start+0x16c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d002      	beq.n	8001a1e <HAL_ADC_Start+0x12e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e000      	b.n	8001a20 <HAL_ADC_Start+0x130>
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_ADC_Start+0x170>)
 8001a20:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a3e:	e006      	b.n	8001a4e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001a48:	e001      	b.n	8001a4e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	42028300 	.word	0x42028300
 8001a5c:	42028100 	.word	0x42028100
 8001a60:	42028000 	.word	0x42028000

08001a64 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Stop+0x16>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e023      	b.n	8001ac2 <HAL_ADC_Stop+0x5e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a82:	2103      	movs	r1, #3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fd09 	bl	800249c <ADC_ConversionStop>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fe3f 	bl	8002718 <ADC_Disable>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d109      	bne.n	8001ab8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad6:	4866      	ldr	r0, [pc, #408]	@ (8001c70 <HAL_ADC_PollForConversion+0x1a4>)
 8001ad8:	f7ff fc9c 	bl	8001414 <LL_ADC_GetMultimode>
 8001adc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d102      	bne.n	8001aec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e02a      	b.n	8001b42 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d002      	beq.n	8001afe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d111      	bne.n	8001b22 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0a4      	b.n	8001c66 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b20:	e00f      	b.n	8001b42 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b22:	4853      	ldr	r0, [pc, #332]	@ (8001c70 <HAL_ADC_PollForConversion+0x1a4>)
 8001b24:	f7ff fc84 	bl	8001430 <LL_ADC_GetMultiDMATransfer>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e093      	b.n	8001c66 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b3e:	2304      	movs	r3, #4
 8001b40:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b42:	f7ff fab1 	bl	80010a8 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b48:	e021      	b.n	8001b8e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d01d      	beq.n	8001b8e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b52:	f7ff faa9 	bl	80010a8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d302      	bcc.n	8001b68 <HAL_ADC_PollForConversion+0x9c>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	f043 0204 	orr.w	r2, r3, #4
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e06b      	b.n	8001c66 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0d6      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fba3 	bl	80012f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e5b      	ldrb	r3, [r3, #25]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d118      	bne.n	8001bf2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d111      	bne.n	8001bf2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c74 <HAL_ADC_PollForConversion+0x1a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d002      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x136>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e000      	b.n	8001c04 <HAL_ADC_PollForConversion+0x138>
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_ADC_PollForConversion+0x1ac>)
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d008      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d002      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b09      	cmp	r3, #9
 8001c1c:	d104      	bne.n	8001c28 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	e00c      	b.n	8001c42 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <HAL_ADC_PollForConversion+0x1a8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d002      	beq.n	8001c38 <HAL_ADC_PollForConversion+0x16c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_PollForConversion+0x16e>
 8001c38:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_ADC_PollForConversion+0x1ac>)
 8001c3a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d104      	bne.n	8001c52 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e008      	b.n	8001c64 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d103      	bne.n	8001c64 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	220c      	movs	r2, #12
 8001c62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	42028300 	.word	0x42028300
 8001c74:	42028100 	.word	0x42028100
 8001c78:	42028000 	.word	0x42028000

08001c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x22>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e3d8      	b.n	800246c <HAL_ADC_ConfigChannel+0x7d4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fc84 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 83bd 	bne.w	800244e <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d104      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fa57 	bl	8001194 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f7ff fb13 	bl	800131e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc69 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8001d02:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc89 	bl	8001622 <LL_ADC_INJ_IsConversionOngoing>
 8001d10:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 81d9 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 81d4 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d30:	d10f      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7ff fb1a 	bl	8001376 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fac1 	bl	80012d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d50:	e00e      	b.n	8001d70 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f7ff fb09 	bl	8001376 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fab1 	bl	80012d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d022      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6919      	ldr	r1, [r3, #16]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001da2:	f7ff fa0b 	bl	80011bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f7ff fa57 	bl	8001266 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x136>
 8001dc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x138>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f7ff fa63 	bl	800129c <LL_ADC_SetOffsetSaturation>
 8001dd6:	e17b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fa10 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x16c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fa05 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	e01e      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x1aa>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f9fa 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8001e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e004      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8001e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x1c2>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	e018      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1f4>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e004      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8001e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f9c9 	bl	8001230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f9ad 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x232>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f9a2 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	e01e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x270>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f997 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001ee8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e004      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8001efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x288>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	e018      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x2ba>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e004      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8001f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d106      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f966 	bl	8001230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f94a 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10a      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x2f8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f93f 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	e01e      	b.n	8001fce <HAL_ADC_ConfigChannel+0x336>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2102      	movs	r1, #2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f934 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	e004      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8001fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x34e>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	e016      	b.n	8002014 <HAL_ADC_ConfigChannel+0x37c>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ff8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800200a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	2102      	movs	r1, #2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f905 	bl	8001230 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2103      	movs	r1, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f8e9 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x3ba>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2103      	movs	r1, #3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f8de 	bl	8001204 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	e017      	b.n	8002082 <HAL_ADC_ConfigChannel+0x3ea>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2103      	movs	r1, #3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f8d3 	bl	8001204 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800206a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800206c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800206e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <HAL_ADC_ConfigChannel+0x402>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	e011      	b.n	80020be <HAL_ADC_ConfigChannel+0x426>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80020a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80020ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80020b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020be:	429a      	cmp	r2, r3
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2103      	movs	r1, #3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f8b0 	bl	8001230 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fa2f 	bl	8001538 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 813f 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7ff f96c 	bl	80013cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002334 <HAL_ADC_ConfigChannel+0x69c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f040 8130 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x490>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	3301      	adds	r3, #1
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2b09      	cmp	r3, #9
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e019      	b.n	800215c <HAL_ADC_ConfigChannel+0x4c4>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002138:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800213a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e003      	b.n	800214c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b09      	cmp	r3, #9
 8002154:	bf94      	ite	ls
 8002156:	2301      	movls	r3, #1
 8002158:	2300      	movhi	r3, #0
 800215a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215c:	2b00      	cmp	r3, #0
 800215e:	d079      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_ADC_ConfigChannel+0x4e4>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	3301      	adds	r3, #1
 8002174:	069b      	lsls	r3, r3, #26
 8002176:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800217a:	e015      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x510>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800218a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800218c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800218e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e003      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x530>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	e017      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x560>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80021d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80021da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e003      	b.n	80021ec <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80021e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <HAL_ADC_ConfigChannel+0x586>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	051b      	lsls	r3, r3, #20
 800221c:	e018      	b.n	8002250 <HAL_ADC_ConfigChannel+0x5b8>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002250:	430b      	orrs	r3, r1
 8002252:	e080      	b.n	8002356 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5d8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	3301      	adds	r3, #1
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226e:	e015      	b.n	800229c <HAL_ADC_ConfigChannel+0x604>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	069b      	lsls	r3, r3, #26
 8002298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x624>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	e017      	b.n	80022ec <HAL_ADC_ConfigChannel+0x654>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e003      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x680>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	3b1e      	subs	r3, #30
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002316:	e01d      	b.n	8002354 <HAL_ADC_ConfigChannel+0x6bc>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	613b      	str	r3, [r7, #16]
  return result;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e005      	b.n	8002340 <HAL_ADC_ConfigChannel+0x6a8>
 8002334:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	051b      	lsls	r3, r3, #20
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002354:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	4619      	mov	r1, r3
 800235c:	f7ff f80b 	bl	8001376 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b43      	ldr	r3, [pc, #268]	@ (8002474 <HAL_ADC_ConfigChannel+0x7dc>)
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d079      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	4842      	ldr	r0, [pc, #264]	@ (8002478 <HAL_ADC_ConfigChannel+0x7e0>)
 800236e:	f7fe fef1 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 8002372:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a40      	ldr	r2, [pc, #256]	@ (800247c <HAL_ADC_ConfigChannel+0x7e4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d124      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11e      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3b      	ldr	r2, [pc, #236]	@ (8002480 <HAL_ADC_ConfigChannel+0x7e8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d164      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800239a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800239e:	4619      	mov	r1, r3
 80023a0:	4835      	ldr	r0, [pc, #212]	@ (8002478 <HAL_ADC_ConfigChannel+0x7e0>)
 80023a2:	f7fe fec4 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a6:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_ADC_ConfigChannel+0x7ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	4a36      	ldr	r2, [pc, #216]	@ (8002488 <HAL_ADC_ConfigChannel+0x7f0>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	3301      	adds	r3, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c8:	e04a      	b.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2f      	ldr	r2, [pc, #188]	@ (800248c <HAL_ADC_ConfigChannel+0x7f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d113      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <HAL_ADC_ConfigChannel+0x7f8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d13a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	4619      	mov	r1, r3
 80023f4:	4820      	ldr	r0, [pc, #128]	@ (8002478 <HAL_ADC_ConfigChannel+0x7e0>)
 80023f6:	f7fe fe9a 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fa:	e031      	b.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <HAL_ADC_ConfigChannel+0x7fc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d113      	bne.n	800242e <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002406:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800240a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_ADC_ConfigChannel+0x7e8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d121      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002424:	4619      	mov	r1, r3
 8002426:	4814      	ldr	r0, [pc, #80]	@ (8002478 <HAL_ADC_ConfigChannel+0x7e0>)
 8002428:	f7fe fe81 	bl	800112e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800242c:	e018      	b.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <HAL_ADC_ConfigChannel+0x800>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d113      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a10      	ldr	r2, [pc, #64]	@ (8002480 <HAL_ADC_ConfigChannel+0x7e8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00e      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fe92 	bl	8001170 <LL_ADC_EnableChannelVDDcore>
 800244c:	e008      	b.n	8002460 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002468:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800246c:	4618      	mov	r0, r3
 800246e:	37d8      	adds	r7, #216	@ 0xd8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	80080000 	.word	0x80080000
 8002478:	42028300 	.word	0x42028300
 800247c:	c3210000 	.word	0xc3210000
 8002480:	42028000 	.word	0x42028000
 8002484:	20000000 	.word	0x20000000
 8002488:	053e2d63 	.word	0x053e2d63
 800248c:	43290000 	.word	0x43290000
 8002490:	42028100 	.word	0x42028100
 8002494:	c7520000 	.word	0xc7520000
 8002498:	475a0000 	.word	0x475a0000

0800249c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f88e 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 80024b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f8af 	bl	8001622 <LL_ADC_INJ_IsConversionOngoing>
 80024c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8098 	beq.w	8002604 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02a      	beq.n	8002538 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d126      	bne.n	8002538 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7e1b      	ldrb	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d122      	bne.n	8002538 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80024f6:	e014      	b.n	8002522 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4a45      	ldr	r2, [pc, #276]	@ (8002610 <ADC_ConversionStop+0x174>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d90d      	bls.n	800251c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e074      	b.n	8002606 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d1e3      	bne.n	80024f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2240      	movs	r2, #64	@ 0x40
 8002536:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d014      	beq.n	8002568 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f846 	bl	80015d4 <LL_ADC_REG_IsConversionOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f803 	bl	800155e <LL_ADC_IsDisableOngoing>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f822 	bl	80015ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d014      	beq.n	8002598 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f855 	bl	8001622 <LL_ADC_INJ_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe ffeb 	bl	800155e <LL_ADC_IsDisableOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f831 	bl	80015fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d005      	beq.n	80025aa <ADC_ConversionStop+0x10e>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d105      	bne.n	80025b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80025a4:	230c      	movs	r3, #12
 80025a6:	617b      	str	r3, [r7, #20]
        break;
 80025a8:	e005      	b.n	80025b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80025aa:	2308      	movs	r3, #8
 80025ac:	617b      	str	r3, [r7, #20]
        break;
 80025ae:	e002      	b.n	80025b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025b0:	2304      	movs	r3, #4
 80025b2:	617b      	str	r3, [r7, #20]
        break;
 80025b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025b6:	f7fe fd77 	bl	80010a8 <HAL_GetTick>
 80025ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025bc:	e01b      	b.n	80025f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025be:	f7fe fd73 	bl	80010a8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d914      	bls.n	80025f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1dc      	bne.n	80025be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	a33fffff 	.word	0xa33fffff

08002614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ff87 	bl	8001538 <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d166      	bne.n	80026fe <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <ADC_Enable+0xf4>)
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e052      	b.n	8002700 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe ff42 	bl	80014e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002664:	4829      	ldr	r0, [pc, #164]	@ (800270c <ADC_Enable+0xf8>)
 8002666:	f7fe fd75 	bl	8001154 <LL_ADC_GetCommonPathInternalCh>
 800266a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800266c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <ADC_Enable+0xfc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	4a26      	ldr	r2, [pc, #152]	@ (8002714 <ADC_Enable+0x100>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002688:	e002      	b.n	8002690 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3b01      	subs	r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f9      	bne.n	800268a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002696:	f7fe fd07 	bl	80010a8 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800269c:	e028      	b.n	80026f0 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe ff48 	bl	8001538 <LL_ADC_IsEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe ff18 	bl	80014e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b8:	f7fe fcf6 	bl	80010a8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d914      	bls.n	80026f0 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00d      	beq.n	80026f0 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e007      	b.n	8002700 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d1cf      	bne.n	800269e <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	8000003f 	.word	0x8000003f
 800270c:	42028300 	.word	0x42028300
 8002710:	20000000 	.word	0x20000000
 8002714:	053e2d63 	.word	0x053e2d63

08002718 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe ff1a 	bl	800155e <LL_ADC_IsDisableOngoing>
 800272a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ff01 	bl	8001538 <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d047      	beq.n	80027cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d144      	bne.n	80027cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030d 	and.w	r3, r3, #13
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10c      	bne.n	800276a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fedb 	bl	8001510 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2203      	movs	r2, #3
 8002760:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002762:	f7fe fca1 	bl	80010a8 <HAL_GetTick>
 8002766:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002768:	e029      	b.n	80027be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e023      	b.n	80027ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002786:	f7fe fc8f 	bl	80010a8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1dc      	bne.n	8002786 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	@ (800281c <__NVIC_SetPriorityGrouping+0x44>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff6a 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800291a:	f7ff ff81 	bl	8002820 <__NVIC_GetPriorityGrouping>
 800291e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	6978      	ldr	r0, [r7, #20]
 8002926:	f7ff ffb3 	bl	8002890 <NVIC_EncodePriority>
 800292a:	4602      	mov	r2, r0
 800292c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff82 	bl	800283c <__NVIC_SetPriority>
}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002950:	d301      	bcc.n	8002956 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002952:	2301      	movs	r3, #1
 8002954:	e00d      	b.n	8002972 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_SYSTICK_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_SYSTICK_Config+0x40>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_SYSTICK_Config+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <HAL_SYSTICK_Config+0x40>)
 800296a:	f043 0303 	orr.w	r3, r3, #3
 800296e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d844      	bhi.n	8002a1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002992:	a201      	add	r2, pc, #4	@ (adr r2, 8002998 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029bb 	.word	0x080029bb
 800299c:	080029d9 	.word	0x080029d9
 80029a0:	080029fb 	.word	0x080029fb
 80029a4:	08002a1d 	.word	0x08002a1d
 80029a8:	080029ad 	.word	0x080029ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029ac:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6013      	str	r3, [r2, #0]
      break;
 80029b8:	e031      	b.n	8002a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029ce:	f023 030c 	bic.w	r3, r3, #12
 80029d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029d6:	e022      	b.n	8002a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029ea:	f023 030c 	bic.w	r3, r3, #12
 80029ee:	4a10      	ldr	r2, [pc, #64]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80029f8:	e011      	b.n	8002a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a0c:	f023 030c 	bic.w	r3, r3, #12
 8002a10:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a12:	f043 0308 	orr.w	r3, r3, #8
 8002a16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002a1a:	e000      	b.n	8002a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002a1c:	bf00      	nop
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010
 8002a30:	44020c00 	.word	0x44020c00

08002a34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002a3a:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002a46:	2304      	movs	r3, #4
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	e01e      	b.n	8002a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002a4c:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d00f      	beq.n	8002a7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d80f      	bhi.n	8002a84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d003      	beq.n	8002a78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002a70:	e008      	b.n	8002a84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
        break;
 8002a76:	e008      	b.n	8002a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	607b      	str	r3, [r7, #4]
        break;
 8002a7c:	e005      	b.n	8002a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	607b      	str	r3, [r7, #4]
        break;
 8002a82:	e002      	b.n	8002a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002a84:	2300      	movs	r3, #0
 8002a86:	607b      	str	r3, [r7, #4]
        break;
 8002a88:	bf00      	nop
    }
  }
  return systick_source;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e010 	.word	0xe000e010
 8002a9c:	44020c00 	.word	0x44020c00

08002aa0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e147      	b.n	8002d42 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe f85e 	bl	8000b88 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7fe fae4 	bl	80010a8 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ae2:	e012      	b.n	8002b0a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ae4:	f7fe fae0 	bl	80010a8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d90b      	bls.n	8002b0a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e11b      	b.n	8002d42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d0e5      	beq.n	8002ae4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b28:	f7fe fabe 	bl	80010a8 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b2e:	e012      	b.n	8002b56 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b30:	f7fe faba 	bl	80010a8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d90b      	bls.n	8002b56 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0f5      	b.n	8002d42 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0e5      	beq.n	8002b30 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0202 	orr.w	r2, r2, #2
 8002b72:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a74      	ldr	r2, [pc, #464]	@ (8002d4c <HAL_FDCAN_Init+0x2ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d103      	bne.n	8002b86 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b7e:	4a74      	ldr	r2, [pc, #464]	@ (8002d50 <HAL_FDCAN_Init+0x2b0>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7c1b      	ldrb	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	e007      	b.n	8002bb0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bae:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7c5b      	ldrb	r3, [r3, #17]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	e007      	b.n	8002bda <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bd8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7c9b      	ldrb	r3, [r3, #18]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d108      	bne.n	8002bf4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	e007      	b.n	8002c04 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002c28:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0210 	bic.w	r2, r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0204 	orr.w	r2, r2, #4
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	e02c      	b.n	8002cae <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d028      	beq.n	8002cae <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d01c      	beq.n	8002c9e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c72:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0210 	orr.w	r2, r2, #16
 8002c82:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d110      	bne.n	8002cae <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cbe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cc6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cd6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cd8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ce2:	d115      	bne.n	8002d10 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cf2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d0c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d0e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f966 	bl	8002ff8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	4000a400 	.word	0x4000a400
 8002d50:	4000a500 	.word	0x4000a500

08002d54 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e006      	b.n	8002d98 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d12c      	bne.n	8002e16 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e023      	b.n	8002e24 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f962 	bl	80030bc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e006      	b.n	8002e24 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f043 0208 	orr.w	r2, r3, #8
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e3e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <HAL_FDCAN_ActivateNotification+0x22>
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	f040 80c8 	bne.w	8002fde <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03b      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d031      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d027      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d013      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13b      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d131      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d127      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11d      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00c      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0202 	orr.w	r2, r2, #2
 8002f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e006      	b.n	8002fec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003000:	4b2c      	ldr	r3, [pc, #176]	@ (80030b4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003002:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d103      	bne.n	8003016 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003014:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003024:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800304a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003052:	061a      	lsls	r2, r3, #24
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e005      	b.n	8003098 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d3f3      	bcc.n	800308c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	4000ac00 	.word	0x4000ac00
 80030b8:	4000a800 	.word	0x4000a800

080030bc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80030da:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e00a      	b.n	80030fe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80030f0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80030f6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80030f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030fc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003108:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800310e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003114:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	3304      	adds	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	3304      	adds	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e020      	b.n	8003192 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3303      	adds	r3, #3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3302      	adds	r3, #2
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	440b      	add	r3, r1
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003168:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	440b      	add	r3, r1
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003176:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	440a      	add	r2, r1
 800317e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003180:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3304      	adds	r3, #4
 800318a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3304      	adds	r3, #4
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a06      	ldr	r2, [pc, #24]	@ (80031b0 <FDCAN_CopyMessageToRAM+0xf4>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	461a      	mov	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4293      	cmp	r3, r2
 80031a0:	d3d6      	bcc.n	8003150 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	3724      	adds	r7, #36	@ 0x24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	08008da0 	.word	0x08008da0

080031b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031c2:	e136      	b.n	8003432 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8128 	beq.w	800342c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x38>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d125      	bne.n	8003238 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d00b      	beq.n	800328c <HAL_GPIO_Init+0xd8>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d007      	beq.n	800328c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003280:	2b11      	cmp	r3, #17
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b12      	cmp	r3, #18
 800328a:	d130      	bne.n	80032ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032c2:	2201      	movs	r2, #1
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4013      	ands	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 0201 	and.w	r2, r3, #1
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d017      	beq.n	8003326 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4013      	ands	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d07c      	beq.n	800342c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003332:	4a47      	ldr	r2, [pc, #284]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3318      	adds	r3, #24
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4013      	ands	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0a9a      	lsrs	r2, r3, #10
 800335a:	4b3e      	ldr	r3, [pc, #248]	@ (8003454 <HAL_GPIO_Init+0x2a0>)
 800335c:	4013      	ands	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	f002 0203 	and.w	r2, r2, #3
 8003364:	00d2      	lsls	r2, r2, #3
 8003366:	4093      	lsls	r3, r2
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800336e:	4938      	ldr	r1, [pc, #224]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3318      	adds	r3, #24
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800337c:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43db      	mvns	r3, r3
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80033a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80033a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4013      	ands	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80033ca:	4a21      	ldr	r2, [pc, #132]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4013      	ands	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80033f6:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80033fe:	4b14      	ldr	r3, [pc, #80]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003404:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003424:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_GPIO_Init+0x29c>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	3301      	adds	r3, #1
 8003430:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f aec1 	bne.w	80031c4 <HAL_GPIO_Init+0x10>
  }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	44022000 	.word	0x44022000
 8003454:	002f7f7f 	.word	0x002f7f7f

08003458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f000 bc28 	b.w	8003cbc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b94      	ldr	r3, [pc, #592]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 0318 	and.w	r3, r3, #24
 8003474:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003476:	4b92      	ldr	r3, [pc, #584]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05b      	beq.n	8003544 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x46>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b18      	cmp	r3, #24
 8003496:	d114      	bne.n	80034c2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d111      	bne.n	80034c2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f000 bc08 	b.w	8003cbc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80034ac:	4b84      	ldr	r3, [pc, #528]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	4981      	ldr	r1, [pc, #516]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80034c0:	e040      	b.n	8003544 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d023      	beq.n	8003512 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034ca:	4b7d      	ldr	r3, [pc, #500]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7c      	ldr	r2, [pc, #496]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fd fde7 	bl	80010a8 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80034de:	f7fd fde3 	bl	80010a8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e3e5      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80034f0:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80034fc:	4b70      	ldr	r3, [pc, #448]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	496d      	ldr	r1, [pc, #436]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800350c:	4313      	orrs	r3, r2
 800350e:	618b      	str	r3, [r1, #24]
 8003510:	e018      	b.n	8003544 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003512:	4b6b      	ldr	r3, [pc, #428]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6a      	ldr	r2, [pc, #424]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fdc3 	bl	80010a8 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003526:	f7fd fdbf 	bl	80010a8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e3c1      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003538:	4b61      	ldr	r3, [pc, #388]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a0 	beq.w	8003692 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d005      	beq.n	8003564 <HAL_RCC_OscConfig+0x10c>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b18      	cmp	r3, #24
 800355c:	d109      	bne.n	8003572 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 8092 	bne.w	8003692 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e3a4      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x132>
 800357c:	4b50      	ldr	r3, [pc, #320]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4f      	ldr	r2, [pc, #316]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e058      	b.n	800363c <HAL_RCC_OscConfig+0x1e4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x160>
 8003592:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b48      	ldr	r3, [pc, #288]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a47      	ldr	r2, [pc, #284]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a44      	ldr	r2, [pc, #272]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e041      	b.n	800363c <HAL_RCC_OscConfig+0x1e4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x190>
 80035c2:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3e      	ldr	r2, [pc, #248]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b3c      	ldr	r3, [pc, #240]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a3b      	ldr	r2, [pc, #236]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b39      	ldr	r3, [pc, #228]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a38      	ldr	r2, [pc, #224]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e029      	b.n	800363c <HAL_RCC_OscConfig+0x1e4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80035f0:	d112      	bne.n	8003618 <HAL_RCC_OscConfig+0x1c0>
 80035f2:	4b33      	ldr	r3, [pc, #204]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a32      	ldr	r2, [pc, #200]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2f      	ldr	r2, [pc, #188]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b2d      	ldr	r3, [pc, #180]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2c      	ldr	r2, [pc, #176]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e011      	b.n	800363c <HAL_RCC_OscConfig+0x1e4>
 8003618:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a28      	ldr	r2, [pc, #160]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a25      	ldr	r2, [pc, #148]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b23      	ldr	r3, [pc, #140]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003636:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fd30 	bl	80010a8 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800364c:	f7fd fd2c 	bl	80010a8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e32e      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b18      	ldr	r3, [pc, #96]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x1f4>
 800366a:	e012      	b.n	8003692 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fd1c 	bl	80010a8 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003674:	f7fd fd18 	bl	80010a8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e31a      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003686:	4b0e      	ldr	r3, [pc, #56]	@ (80036c0 <HAL_RCC_OscConfig+0x268>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 809a 	beq.w	80037d4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x25a>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b18      	cmp	r3, #24
 80036aa:	d149      	bne.n	8003740 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d146      	bne.n	8003740 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e2fe      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
 80036be:	bf00      	nop
 80036c0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80036ca:	4b9a      	ldr	r3, [pc, #616]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0218 	and.w	r2, r3, #24
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d014      	beq.n	8003704 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036da:	4b96      	ldr	r3, [pc, #600]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0218 	bic.w	r2, r3, #24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	4993      	ldr	r1, [pc, #588]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80036ec:	f000 fdd0 	bl	8004290 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f0:	4b91      	ldr	r3, [pc, #580]	@ (8003938 <HAL_RCC_OscConfig+0x4e0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fc4d 	bl	8000f94 <HAL_InitTick>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e2db      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fcd0 	bl	80010a8 <HAL_GetTick>
 8003708:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800370c:	f7fd fccc 	bl	80010a8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e2ce      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371e:	4b85      	ldr	r3, [pc, #532]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800372a:	4b82      	ldr	r3, [pc, #520]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	497e      	ldr	r1, [pc, #504]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800373e:	e049      	b.n	80037d4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003748:	4b7a      	ldr	r3, [pc, #488]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 0218 	bic.w	r2, r3, #24
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4977      	ldr	r1, [pc, #476]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800375a:	4b76      	ldr	r3, [pc, #472]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a75      	ldr	r2, [pc, #468]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fd fc9f 	bl	80010a8 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800376e:	f7fd fc9b 	bl	80010a8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e29d      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003780:	4b6c      	ldr	r3, [pc, #432]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800378c:	4b69      	ldr	r3, [pc, #420]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	4966      	ldr	r1, [pc, #408]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	610b      	str	r3, [r1, #16]
 80037a0:	e018      	b.n	80037d4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b64      	ldr	r3, [pc, #400]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a63      	ldr	r2, [pc, #396]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fd fc7b 	bl	80010a8 <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80037b6:	f7fd fc77 	bl	80010a8 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e279      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03c      	beq.n	800385a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01c      	beq.n	8003822 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e8:	4b52      	ldr	r3, [pc, #328]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80037ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ee:	4a51      	ldr	r2, [pc, #324]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80037f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd fc56 	bl	80010a8 <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003800:	f7fd fc52 	bl	80010a8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e254      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003812:	4b48      	ldr	r3, [pc, #288]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ef      	beq.n	8003800 <HAL_RCC_OscConfig+0x3a8>
 8003820:	e01b      	b.n	800385a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003822:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003828:	4a42      	ldr	r2, [pc, #264]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800382e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fc39 	bl	80010a8 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800383a:	f7fd fc35 	bl	80010a8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e237      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800384c:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800384e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003852:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ef      	bne.n	800383a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80d2 	beq.w	8003a0c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003868:	4b34      	ldr	r3, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x4e4>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d118      	bne.n	80038a6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003874:	4b31      	ldr	r3, [pc, #196]	@ (800393c <HAL_RCC_OscConfig+0x4e4>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	4a30      	ldr	r2, [pc, #192]	@ (800393c <HAL_RCC_OscConfig+0x4e4>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003880:	f7fd fc12 	bl	80010a8 <HAL_GetTick>
 8003884:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e210      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800389a:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCC_OscConfig+0x4e4>)
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d108      	bne.n	80038c0 <HAL_RCC_OscConfig+0x468>
 80038ae:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038be:	e074      	b.n	80039aa <HAL_RCC_OscConfig+0x552>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d118      	bne.n	80038fa <HAL_RCC_OscConfig+0x4a2>
 80038c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ce:	4a19      	ldr	r2, [pc, #100]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038d8:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038de:	4a15      	ldr	r2, [pc, #84]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ee:	4a11      	ldr	r2, [pc, #68]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038f8:	e057      	b.n	80039aa <HAL_RCC_OscConfig+0x552>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d11e      	bne.n	8003940 <HAL_RCC_OscConfig+0x4e8>
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003908:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003912:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003918:	4a06      	ldr	r2, [pc, #24]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800391a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800391e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 8003924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003928:	4a02      	ldr	r2, [pc, #8]	@ (8003934 <HAL_RCC_OscConfig+0x4dc>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003932:	e03a      	b.n	80039aa <HAL_RCC_OscConfig+0x552>
 8003934:	44020c00 	.word	0x44020c00
 8003938:	20000004 	.word	0x20000004
 800393c:	44020800 	.word	0x44020800
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b85      	cmp	r3, #133	@ 0x85
 8003946:	d118      	bne.n	800397a <HAL_RCC_OscConfig+0x522>
 8003948:	4ba2      	ldr	r3, [pc, #648]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800394a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800394e:	4aa1      	ldr	r2, [pc, #644]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003958:	4b9e      	ldr	r3, [pc, #632]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800395a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800395e:	4a9d      	ldr	r2, [pc, #628]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003964:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003968:	4b9a      	ldr	r3, [pc, #616]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800396a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800396e:	4a99      	ldr	r2, [pc, #612]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003978:	e017      	b.n	80039aa <HAL_RCC_OscConfig+0x552>
 800397a:	4b96      	ldr	r3, [pc, #600]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800397c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003980:	4a94      	ldr	r2, [pc, #592]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800398a:	4b92      	ldr	r3, [pc, #584]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800398c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003990:	4a90      	ldr	r2, [pc, #576]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800399a:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 800399c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039a0:	4a8c      	ldr	r2, [pc, #560]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 80039a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7fd fb79 	bl	80010a8 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fd fb75 	bl	80010a8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e175      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	4b80      	ldr	r3, [pc, #512]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 80039d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ed      	beq.n	80039ba <HAL_RCC_OscConfig+0x562>
 80039de:	e015      	b.n	8003a0c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fb62 	bl	80010a8 <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f7fd fb5e 	bl	80010a8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e15e      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039fe:	4b75      	ldr	r3, [pc, #468]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ed      	bne.n	80039e8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d036      	beq.n	8003a86 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d019      	beq.n	8003a54 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a20:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fb3c 	bl	80010a8 <HAL_GetTick>
 8003a30:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003a34:	f7fd fb38 	bl	80010a8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e13a      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a46:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x5dc>
 8003a52:	e018      	b.n	8003a86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a54:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fb22 	bl	80010a8 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003a68:	f7fd fb1e 	bl	80010a8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e120      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a7a:	4b56      	ldr	r3, [pc, #344]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8115 	beq.w	8003cba <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b18      	cmp	r3, #24
 8003a94:	f000 80af 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	f040 8086 	bne.w	8003bae <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd fafb 	bl	80010a8 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003ab6:	f7fd faf7 	bl	80010a8 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0f9      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ac8:	4b42      	ldr	r3, [pc, #264]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003adc:	f023 0303 	bic.w	r3, r3, #3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ae8:	0212      	lsls	r2, r2, #8
 8003aea:	430a      	orrs	r2, r1
 8003aec:	4939      	ldr	r1, [pc, #228]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af6:	3b01      	subs	r3, #1
 8003af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	3b01      	subs	r3, #1
 8003b02:	025b      	lsls	r3, r3, #9
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b22:	492c      	ldr	r1, [pc, #176]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b38:	4a26      	ldr	r2, [pc, #152]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003b3e:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	4a24      	ldr	r2, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	f023 020c 	bic.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	491f      	ldr	r1, [pc, #124]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	f023 0220 	bic.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b68:	491a      	ldr	r1, [pc, #104]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b78:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003b80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fa8f 	bl	80010a8 <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b8e:	f7fd fa8b 	bl	80010a8 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e08d      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x736>
 8003bac:	e085      	b.n	8003cba <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a08      	ldr	r2, [pc, #32]	@ (8003bd4 <HAL_RCC_OscConfig+0x77c>)
 8003bb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fa75 	bl	80010a8 <HAL_GetTick>
 8003bbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003bc2:	f7fd fa71 	bl	80010a8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d903      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e073      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
 8003bd4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ee      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003be4:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	4a36      	ldr	r2, [pc, #216]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003bea:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	6293      	str	r3, [r2, #40]	@ 0x28
 8003bf4:	e061      	b.n	8003cba <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003bf6:	4b33      	ldr	r3, [pc, #204]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bfc:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d031      	beq.n	8003c6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0203 	and.w	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d12a      	bne.n	8003c6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d122      	bne.n	8003c6e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c32:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11a      	bne.n	8003c6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	0a5b      	lsrs	r3, r3, #9
 8003c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d111      	bne.n	8003c6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0e1b      	lsrs	r3, r3, #24
 8003c60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e024      	b.n	8003cbc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c72:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d01a      	beq.n	8003cba <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c84:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003c8a:	f023 0310 	bic.w	r3, r3, #16
 8003c8e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fa0a 	bl	80010a8 <HAL_GetTick>
 8003c94:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c96:	bf00      	nop
 8003c98:	f7fd fa06 	bl	80010a8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d0f9      	beq.n	8003c98 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca8:	4a06      	ldr	r2, [pc, #24]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	4a04      	ldr	r2, [pc, #16]	@ (8003cc4 <HAL_RCC_OscConfig+0x86c>)
 8003cb4:	f043 0310 	orr.w	r3, r3, #16
 8003cb8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	44020c00 	.word	0x44020c00

08003cc8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e19e      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b83      	ldr	r3, [pc, #524]	@ (8003eec <HAL_RCC_ClockConfig+0x224>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b80      	ldr	r3, [pc, #512]	@ (8003eec <HAL_RCC_ClockConfig+0x224>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	497e      	ldr	r1, [pc, #504]	@ (8003eec <HAL_RCC_ClockConfig+0x224>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_ClockConfig+0x224>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e186      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d012      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	4b74      	ldr	r3, [pc, #464]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d909      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003d2a:	4b71      	ldr	r3, [pc, #452]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	496d      	ldr	r1, [pc, #436]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	4b68      	ldr	r3, [pc, #416]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d909      	bls.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d5c:	4b64      	ldr	r3, [pc, #400]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	4961      	ldr	r1, [pc, #388]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d908      	bls.n	8003d9e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d8c:	4b58      	ldr	r3, [pc, #352]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4955      	ldr	r1, [pc, #340]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	4b50      	ldr	r3, [pc, #320]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d908      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003dba:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 020f 	bic.w	r2, r3, #15
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	494a      	ldr	r1, [pc, #296]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8093 	beq.w	8003f00 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003de2:	4b43      	ldr	r3, [pc, #268]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d121      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e113      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d115      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e107      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003e12:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0fb      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e22:	4b33      	ldr	r3, [pc, #204]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0f3      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	492c      	ldr	r1, [pc, #176]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd f930 	bl	80010a8 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e54:	f7fd f928 	bl	80010a8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0d7      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f003 0318 	and.w	r3, r3, #24
 8003e72:	2b18      	cmp	r3, #24
 8003e74:	d1ee      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x18c>
 8003e76:	e043      	b.n	8003f00 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d112      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e82:	f7fd f911 	bl	80010a8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0c0      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 0318 	and.w	r3, r3, #24
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
 8003ea4:	e02c      	b.n	8003f00 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d122      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd f8fa 	bl	80010a8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0a9      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_RCC_ClockConfig+0x228>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0318 	and.w	r3, r3, #24
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d1ee      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
 8003ed2:	e015      	b.n	8003f00 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7fd f8e8 	bl	80010a8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d906      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e097      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 0318 	and.w	r3, r3, #24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e9      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	4b44      	ldr	r3, [pc, #272]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d208      	bcs.n	8003f2e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003f1c:	4b41      	ldr	r3, [pc, #260]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 020f 	bic.w	r2, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	493e      	ldr	r1, [pc, #248]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004028 <HAL_RCC_ClockConfig+0x360>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d210      	bcs.n	8003f5e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004028 <HAL_RCC_ClockConfig+0x360>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 020f 	bic.w	r2, r3, #15
 8003f44:	4938      	ldr	r1, [pc, #224]	@ (8004028 <HAL_RCC_ClockConfig+0x360>)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4c:	4b36      	ldr	r3, [pc, #216]	@ (8004028 <HAL_RCC_ClockConfig+0x360>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e05d      	b.n	800401a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d208      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4927      	ldr	r1, [pc, #156]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d012      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	4b21      	ldr	r3, [pc, #132]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d209      	bcs.n	8003fbe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003faa:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	491a      	ldr	r1, [pc, #104]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d209      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003fdc:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	490e      	ldr	r1, [pc, #56]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ff0:	f000 f822 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490b      	ldr	r1, [pc, #44]	@ (800402c <HAL_RCC_ClockConfig+0x364>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a0a      	ldr	r2, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x368>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800400a:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <HAL_RCC_ClockConfig+0x36c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc ffc0 	bl	8000f94 <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004018:	7afb      	ldrb	r3, [r7, #11]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	44020c00 	.word	0x44020c00
 8004028:	40022000 	.word	0x40022000
 800402c:	08008d88 	.word	0x08008d88
 8004030:	20000000 	.word	0x20000000
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800403e:	4b8c      	ldr	r3, [pc, #560]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0318 	and.w	r3, r3, #24
 8004046:	2b08      	cmp	r3, #8
 8004048:	d102      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800404a:	4b8a      	ldr	r3, [pc, #552]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x23c>)
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e107      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004050:	4b87      	ldr	r3, [pc, #540]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 0318 	and.w	r3, r3, #24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d112      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800405c:	4b84      	ldr	r3, [pc, #528]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004068:	4b81      	ldr	r3, [pc, #516]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	4a81      	ldr	r2, [pc, #516]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x240>)
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e0f1      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800407c:	4b7e      	ldr	r3, [pc, #504]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x240>)
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	e0ee      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004082:	4b7b      	ldr	r3, [pc, #492]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f003 0318 	and.w	r3, r3, #24
 800408a:	2b10      	cmp	r3, #16
 800408c:	d102      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800408e:	4b7b      	ldr	r3, [pc, #492]	@ (800427c <HAL_RCC_GetSysClockFreq+0x244>)
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e0e5      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004094:	4b76      	ldr	r3, [pc, #472]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f003 0318 	and.w	r3, r3, #24
 800409c:	2b18      	cmp	r3, #24
 800409e:	f040 80dd 	bne.w	800425c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80040a2:	4b73      	ldr	r3, [pc, #460]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80040ac:	4b70      	ldr	r3, [pc, #448]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80040b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80040c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80040c8:	08db      	lsrs	r3, r3, #3
 80040ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040dc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80b7 	beq.w	8004256 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d003      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0xbe>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d056      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x16a>
 80040f4:	e077      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80040f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02d      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004102:	4b5b      	ldr	r3, [pc, #364]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	08db      	lsrs	r3, r3, #3
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	4a5a      	ldr	r2, [pc, #360]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x240>)
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412c:	4b50      	ldr	r3, [pc, #320]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 800412e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800413c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004140:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x248>
 8004144:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004148:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800414c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004150:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004158:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800415c:	e065      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004168:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004284 <HAL_RCC_GetSysClockFreq+0x24c>
 800416c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004170:	4b3f      	ldr	r3, [pc, #252]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 8004172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004180:	ed97 6a02 	vldr	s12, [r7, #8]
 8004184:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x248>
 8004188:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800418c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004190:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004194:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80041a0:	e043      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ac:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004288 <HAL_RCC_GetSysClockFreq+0x250>
 80041b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80041b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x248>
 80041cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80041e4:	e021      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800428c <HAL_RCC_GetSysClockFreq+0x254>
 80041f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 80041fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004208:	ed97 6a02 	vldr	s12, [r7, #8]
 800420c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004280 <HAL_RCC_GetSysClockFreq+0x248>
 8004210:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004214:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004224:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004228:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x238>)
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004234:	3301      	adds	r3, #1
 8004236:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004242:	edd7 6a06 	vldr	s13, [r7, #24]
 8004246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 3a90 	vmov	r3, s15
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e004      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e001      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x240>)
 800425e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004260:	69fb      	ldr	r3, [r7, #28]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3724      	adds	r7, #36	@ 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	44020c00 	.word	0x44020c00
 8004274:	003d0900 	.word	0x003d0900
 8004278:	03d09000 	.word	0x03d09000
 800427c:	017d7840 	.word	0x017d7840
 8004280:	46000000 	.word	0x46000000
 8004284:	4c742400 	.word	0x4c742400
 8004288:	4bbebc20 	.word	0x4bbebc20
 800428c:	4a742400 	.word	0x4a742400

08004290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004294:	f7ff fed0 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b08      	ldr	r3, [pc, #32]	@ (80042bc <HAL_RCC_GetHCLKFreq+0x2c>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800429e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80042a2:	4907      	ldr	r1, [pc, #28]	@ (80042c0 <HAL_RCC_GetHCLKFreq+0x30>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80042a6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80042aa:	fa22 f303 	lsr.w	r3, r2, r3
 80042ae:	4a05      	ldr	r2, [pc, #20]	@ (80042c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80042b0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80042b2:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80042b4:	681b      	ldr	r3, [r3, #0]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	44020c00 	.word	0x44020c00
 80042c0:	08008d88 	.word	0x08008d88
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80042cc:	f7ff ffe0 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4904      	ldr	r1, [pc, #16]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	44020c00 	.word	0x44020c00
 80042f0:	08008d98 	.word	0x08008d98

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80042f8:	f7ff ffca 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4904      	ldr	r1, [pc, #16]	@ (800431c <HAL_RCC_GetPCLK2Freq+0x28>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	44020c00 	.word	0x44020c00
 800431c:	08008d98 	.word	0x08008d98

08004320 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004324:	f7ff ffb4 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_RCC_GetPCLK3Freq+0x24>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	0b1b      	lsrs	r3, r3, #12
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4904      	ldr	r1, [pc, #16]	@ (8004348 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	44020c00 	.word	0x44020c00
 8004348:	08008d98 	.word	0x08008d98

0800434c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b0ba      	sub	sp, #232	@ 0xe8
 8004352:	af00      	add	r7, sp, #0
 8004354:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004358:	2300      	movs	r3, #0
 800435a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800435e:	2300      	movs	r3, #0
 8004360:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004370:	2500      	movs	r5, #0
 8004372:	ea54 0305 	orrs.w	r3, r4, r5
 8004376:	d00b      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004378:	4bcd      	ldr	r3, [pc, #820]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800437a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800437e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004388:	4ac9      	ldr	r2, [pc, #804]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800438a:	430b      	orrs	r3, r1
 800438c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 0801 	and.w	r8, r2, #1
 800439c:	f04f 0900 	mov.w	r9, #0
 80043a0:	ea58 0309 	orrs.w	r3, r8, r9
 80043a4:	d042      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80043a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d823      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80043b0:	a201      	add	r2, pc, #4	@ (adr r2, 80043b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	08004401 	.word	0x08004401
 80043bc:	080043d1 	.word	0x080043d1
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	08004401 	.word	0x08004401
 80043c8:	08004401 	.word	0x08004401
 80043cc:	08004401 	.word	0x08004401
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043d4:	3308      	adds	r3, #8
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 f906 	bl	80075e8 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80043e2:	e00e      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e8:	3330      	adds	r3, #48	@ 0x30
 80043ea:	4618      	mov	r0, r3
 80043ec:	f003 f994 	bl	8007718 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800440a:	4ba9      	ldr	r3, [pc, #676]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800440c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004410:	f023 0107 	bic.w	r1, r3, #7
 8004414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	4aa5      	ldr	r2, [pc, #660]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800441c:	430b      	orrs	r3, r1
 800441e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004428:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800442c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f002 0a02 	and.w	sl, r2, #2
 8004438:	f04f 0b00 	mov.w	fp, #0
 800443c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004440:	f000 8088 	beq.w	8004554 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004444:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	2b28      	cmp	r3, #40	@ 0x28
 800444c:	d868      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004529 	.word	0x08004529
 8004458:	08004521 	.word	0x08004521
 800445c:	08004521 	.word	0x08004521
 8004460:	08004521 	.word	0x08004521
 8004464:	08004521 	.word	0x08004521
 8004468:	08004521 	.word	0x08004521
 800446c:	08004521 	.word	0x08004521
 8004470:	08004521 	.word	0x08004521
 8004474:	080044f9 	.word	0x080044f9
 8004478:	08004521 	.word	0x08004521
 800447c:	08004521 	.word	0x08004521
 8004480:	08004521 	.word	0x08004521
 8004484:	08004521 	.word	0x08004521
 8004488:	08004521 	.word	0x08004521
 800448c:	08004521 	.word	0x08004521
 8004490:	08004521 	.word	0x08004521
 8004494:	0800450d 	.word	0x0800450d
 8004498:	08004521 	.word	0x08004521
 800449c:	08004521 	.word	0x08004521
 80044a0:	08004521 	.word	0x08004521
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004521 	.word	0x08004521
 80044ac:	08004521 	.word	0x08004521
 80044b0:	08004521 	.word	0x08004521
 80044b4:	08004529 	.word	0x08004529
 80044b8:	08004521 	.word	0x08004521
 80044bc:	08004521 	.word	0x08004521
 80044c0:	08004521 	.word	0x08004521
 80044c4:	08004521 	.word	0x08004521
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004529 	.word	0x08004529
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004521 	.word	0x08004521
 80044e4:	08004521 	.word	0x08004521
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004521 	.word	0x08004521
 80044f4:	08004529 	.word	0x08004529
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044fc:	3308      	adds	r3, #8
 80044fe:	4618      	mov	r0, r3
 8004500:	f003 f872 	bl	80075e8 <RCCEx_PLL2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800450a:	e00e      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800450c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004510:	3330      	adds	r3, #48	@ 0x30
 8004512:	4618      	mov	r0, r3
 8004514:	f003 f900 	bl	8007718 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004532:	4b5f      	ldr	r3, [pc, #380]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004538:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800453c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	4a5b      	ldr	r2, [pc, #364]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004544:	430b      	orrs	r3, r1
 8004546:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800454a:	e003      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004550:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f002 0304 	and.w	r3, r2, #4
 8004560:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800456a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d04e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800457a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800457e:	d02c      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004580:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004584:	d825      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800458a:	d028      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x292>
 800458c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004590:	d81f      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004592:	2bc0      	cmp	r3, #192	@ 0xc0
 8004594:	d025      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004596:	2bc0      	cmp	r3, #192	@ 0xc0
 8004598:	d81b      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800459a:	2b80      	cmp	r3, #128	@ 0x80
 800459c:	d00f      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x272>
 800459e:	2b80      	cmp	r3, #128	@ 0x80
 80045a0:	d817      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01f      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	d113      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ae:	3308      	adds	r3, #8
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 f819 	bl	80075e8 <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80045bc:	e014      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c2:	3330      	adds	r3, #48	@ 0x30
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 f8a7 	bl	8007718 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80045d0:	e00a      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80045da:	bf00      	nop
 80045dc:	e004      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10c      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80045f0:	4b2f      	ldr	r3, [pc, #188]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80045f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045f6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80045fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004600:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004602:	430b      	orrs	r3, r1
 8004604:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800460e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f002 0308 	and.w	r3, r2, #8
 800461e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004622:	2300      	movs	r3, #0
 8004624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d056      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004638:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800463c:	d031      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800463e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004642:	d82a      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004648:	d02d      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800464e:	d824      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004650:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004654:	d029      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004656:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800465a:	d81e      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004660:	d011      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004666:	d818      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800466c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004670:	d113      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004676:	3308      	adds	r3, #8
 8004678:	4618      	mov	r0, r3
 800467a:	f002 ffb5 	bl	80075e8 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004684:	e017      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468a:	3330      	adds	r3, #48	@ 0x30
 800468c:	4618      	mov	r0, r3
 800468e:	f003 f843 	bl	8007718 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004698:	e00d      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80046a0:	e009      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046a2:	bf00      	nop
 80046a4:	e007      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046a6:	bf00      	nop
 80046a8:	e005      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046aa:	bf00      	nop
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80046ae:	bf00      	nop
 80046b0:	44020c00 	.word	0x44020c00
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80046be:	4bb9      	ldr	r3, [pc, #740]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80046c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046c4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ce:	4ab5      	ldr	r2, [pc, #724]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f002 0310 	and.w	r3, r2, #16
 80046ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d053      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004706:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800470a:	d031      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800470c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004710:	d82a      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004716:	d02d      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471c:	d824      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800471e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004722:	d029      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004724:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004728:	d81e      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472e:	d011      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004734:	d818      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d020      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	d113      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004744:	3308      	adds	r3, #8
 8004746:	4618      	mov	r0, r3
 8004748:	f002 ff4e 	bl	80075e8 <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004752:	e014      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004758:	3330      	adds	r3, #48	@ 0x30
 800475a:	4618      	mov	r0, r3
 800475c:	f002 ffdc 	bl	8007718 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004766:	e00a      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800476e:	e006      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004770:	bf00      	nop
 8004772:	e004      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004774:	bf00      	nop
 8004776:	e002      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800477c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004786:	4b87      	ldr	r3, [pc, #540]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004788:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800478c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004796:	4a83      	ldr	r2, [pc, #524]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004798:	430b      	orrs	r3, r1
 800479a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0320 	and.w	r3, r2, #32
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d053      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80047c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80047d2:	d031      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80047d4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80047d8:	d82a      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047de:	d02d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047e4:	d824      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80047ea:	d029      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80047ec:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80047f0:	d81e      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f6:	d011      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d818      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004806:	d113      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800480c:	3308      	adds	r3, #8
 800480e:	4618      	mov	r0, r3
 8004810:	f002 feea 	bl	80075e8 <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800481a:	e014      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800481c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004820:	3330      	adds	r3, #48	@ 0x30
 8004822:	4618      	mov	r0, r3
 8004824:	f002 ff78 	bl	8007718 <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 800482e:	e00a      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004838:	bf00      	nop
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800484e:	4b55      	ldr	r3, [pc, #340]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004854:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	4a51      	ldr	r2, [pc, #324]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800486c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800487c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004886:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d053      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004896:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800489a:	d031      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800489c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80048a0:	d82a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048a6:	d02d      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80048a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ac:	d824      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b2:	d029      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048b8:	d81e      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048be:	d011      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80048c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048c4:	d818      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ce:	d113      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d4:	3308      	adds	r3, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f002 fe86 	bl	80075e8 <RCCEx_PLL2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80048e2:	e014      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e8:	3330      	adds	r3, #48	@ 0x30
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 ff14 	bl	8007718 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80048f6:	e00a      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004926:	4a1f      	ldr	r2, [pc, #124]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004934:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004944:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800494e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d03d      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004962:	d01b      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004968:	d814      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800496a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800496e:	d017      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004974:	d80e      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497e:	d109      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004984:	3330      	adds	r3, #48	@ 0x30
 8004986:	4618      	mov	r0, r3
 8004988:	f002 fec6 	bl	8007718 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004992:	e00a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800499a:	e006      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800499c:	bf00      	nop
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80049a0:	bf00      	nop
 80049a2:	e002      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80049a4:	44020c00 	.word	0x44020c00
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80049b2:	4b99      	ldr	r3, [pc, #612]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049b8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c2:	4a95      	ldr	r2, [pc, #596]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049ca:	e003      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80049e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80049ee:	460b      	mov	r3, r1
 80049f0:	4313      	orrs	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80049f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049fe:	d01b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004a00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a04:	d814      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004a06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a0a:	d017      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004a0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a10:	d80e      	bhi.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d014      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a20:	3330      	adds	r3, #48	@ 0x30
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fe78 	bl	8007718 <RCCEx_PLL3_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a36:	e004      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004a38:	bf00      	nop
 8004a3a:	e002      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004a4a:	4b73      	ldr	r3, [pc, #460]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a50:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d03d      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004a8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a98:	d01b      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004a9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a9e:	d814      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa4:	d017      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aaa:	d80e      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d014      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ab4:	d109      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aba:	3330      	adds	r3, #48	@ 0x30
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 fe2b 	bl	8007718 <RCCEx_PLL3_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004ac8:	e008      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004aea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af6:	4a48      	ldr	r2, [pc, #288]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d035      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b34:	d015      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004b36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b3a:	d80e      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d012      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b44:	d109      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4a:	3330      	adds	r3, #48	@ 0x30
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f002 fde3 	bl	8007718 <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004b70:	4b29      	ldr	r3, [pc, #164]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b76:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b82:	4a25      	ldr	r2, [pc, #148]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b8a:	e003      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004baa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d037      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc0:	d015      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc6:	d80e      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd6:	3330      	adds	r3, #48	@ 0x30
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 fd9d 	bl	8007718 <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bec:	e002      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004bf2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004bf4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0e:	4a02      	ldr	r2, [pc, #8]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8004c18:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004c40:	4bb8      	ldr	r3, [pc, #736]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4ab7      	ldr	r2, [pc, #732]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c4a:	61d3      	str	r3, [r2, #28]
 8004c4c:	4bb5      	ldr	r3, [pc, #724]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c58:	4ab2      	ldr	r2, [pc, #712]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c74:	460b      	mov	r3, r1
 8004c76:	4313      	orrs	r3, r2
 8004c78:	d055      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c82:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c86:	d031      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004c88:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c8c:	d82a      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c92:	d02d      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c98:	d824      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9e:	d029      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca4:	d81e      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004caa:	d011      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb0:	d818      	bhi.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cba:	d113      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f002 fc90 	bl	80075e8 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004cce:	e014      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd4:	3330      	adds	r3, #48	@ 0x30
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fd1e 	bl	8007718 <RCCEx_PLL3_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cea:	e006      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004cec:	bf00      	nop
 8004cee:	e004      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004cf0:	bf00      	nop
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004cf4:	bf00      	nop
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004d02:	4b88      	ldr	r3, [pc, #544]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d14:	4a83      	ldr	r2, [pc, #524]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d22:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004d32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d34:	2300      	movs	r3, #0
 8004d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d055      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d4e:	d031      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004d50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d54:	d82a      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d5a:	d02d      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d60:	d824      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004d62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d66:	d029      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004d68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d6c:	d81e      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d72:	d011      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d78:	d818      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d82:	d113      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d88:	3308      	adds	r3, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f002 fc2c 	bl	80075e8 <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004d96:	e014      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d9c:	3330      	adds	r3, #48	@ 0x30
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fcba 	bl	8007718 <RCCEx_PLL3_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004db2:	e006      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004db4:	bf00      	nop
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004dca:	4b56      	ldr	r3, [pc, #344]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004dd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ddc:	4a51      	ldr	r2, [pc, #324]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d032      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d80f      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d211      	bcs.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d911      	bls.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d109      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e26:	3308      	adds	r3, #8
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f002 fbdd 	bl	80075e8 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e34:	e006      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e3c:	e002      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004e4c:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e52:	f023 0107 	bic.w	r1, r3, #7
 8004e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e5e:	4a31      	ldr	r2, [pc, #196]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004e60:	430b      	orrs	r3, r1
 8004e62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d024      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb8:	f023 0108 	bic.w	r1, r3, #8
 8004ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ec4:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ecc:	e003      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ed2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004eec:	460b      	mov	r3, r1
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f000 80b9 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f00:	f7fc f8d2 	bl	80010a8 <HAL_GetTick>
 8004f04:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004f08:	e010      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fc f8cd 	bl	80010a8 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d908      	bls.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f20:	e00a      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004f22:	bf00      	nop
 8004f24:	44020c00 	.word	0x44020c00
 8004f28:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004f2c:	4bba      	ldr	r3, [pc, #744]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0e8      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8004f38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808e 	bne.w	800505e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f42:	4bb6      	ldr	r3, [pc, #728]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f68:	4bac      	ldr	r3, [pc, #688]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f76:	4ba9      	ldr	r3, [pc, #676]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7c:	4aa7      	ldr	r2, [pc, #668]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f86:	4ba5      	ldr	r3, [pc, #660]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8c:	4aa3      	ldr	r2, [pc, #652]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f96:	4aa1      	ldr	r2, [pc, #644]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d019      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fc f87c 	bl	80010a8 <HAL_GetTick>
 8004fb0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb4:	e00d      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7fc f877 	bl	80010a8 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d903      	bls.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	4b92      	ldr	r3, [pc, #584]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ea      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004fe0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d135      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff8:	d110      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004ffa:	4b88      	ldr	r3, [pc, #544]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005006:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005010:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005014:	4a81      	ldr	r2, [pc, #516]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005016:	430b      	orrs	r3, r1
 8005018:	61d3      	str	r3, [r2, #28]
 800501a:	e005      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800501c:	4b7f      	ldr	r3, [pc, #508]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	4a7e      	ldr	r2, [pc, #504]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005022:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005026:	61d3      	str	r3, [r2, #28]
 8005028:	4b7c      	ldr	r3, [pc, #496]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800502a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800502e:	4a7b      	ldr	r2, [pc, #492]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005038:	4b78      	ldr	r3, [pc, #480]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800503a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800503e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005042:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504a:	4a74      	ldr	r2, [pc, #464]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800504c:	430b      	orrs	r3, r1
 800504e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005052:	e008      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005054:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005058:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005062:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005074:	2300      	movs	r3, #0
 8005076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005078:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	d035      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800508a:	2b30      	cmp	r3, #48	@ 0x30
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800508e:	2b30      	cmp	r3, #48	@ 0x30
 8005090:	d80e      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005092:	2b20      	cmp	r3, #32
 8005094:	d012      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d80a      	bhi.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d106      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4b5e      	ldr	r3, [pc, #376]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	4a5d      	ldr	r2, [pc, #372]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80050b8:	bf00      	nop
 80050ba:	e002      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80050bc:	bf00      	nop
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80050ca:	4b54      	ldr	r3, [pc, #336]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80050d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050dc:	4a4f      	ldr	r2, [pc, #316]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80050de:	430b      	orrs	r3, r1
 80050e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050ea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80050fc:	2300      	movs	r3, #0
 80050fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005100:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d033      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800510e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d007      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800511a:	e010      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800511c:	4b3f      	ldr	r3, [pc, #252]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	4a3e      	ldr	r2, [pc, #248]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005126:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005128:	e00d      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512e:	3308      	adds	r3, #8
 8005130:	4618      	mov	r0, r3
 8005132:	f002 fa59 	bl	80075e8 <RCCEx_PLL2_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800513c:	e003      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005146:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800514e:	4b33      	ldr	r3, [pc, #204]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005150:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005154:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800515c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005160:	4a2e      	ldr	r2, [pc, #184]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005162:	430b      	orrs	r3, r1
 8005164:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005168:	e003      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800516e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800517e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005184:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d04c      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800518e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005196:	2b04      	cmp	r3, #4
 8005198:	d827      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800519a:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b5 	.word	0x080051b5
 80051a4:	080051c3 	.word	0x080051c3
 80051a8:	080051d7 	.word	0x080051d7
 80051ac:	080051f3 	.word	0x080051f3
 80051b0:	080051f3 	.word	0x080051f3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	4a18      	ldr	r2, [pc, #96]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80051c0:	e018      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	3308      	adds	r3, #8
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 fa0d 	bl	80075e8 <RCCEx_PLL2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80051d4:	e00e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051da:	3330      	adds	r3, #48	@ 0x30
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fa9b 	bl	8007718 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80051e8:	e004      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80051f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d111      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051fc:	4b07      	ldr	r3, [pc, #28]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005202:	f023 0107 	bic.w	r1, r3, #7
 8005206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800520a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800520e:	4a03      	ldr	r2, [pc, #12]	@ (800521c <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005210:	430b      	orrs	r3, r1
 8005212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005216:	e007      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005218:	44020800 	.word	0x44020800
 800521c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005224:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005234:	633b      	str	r3, [r7, #48]	@ 0x30
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800523e:	460b      	mov	r3, r1
 8005240:	4313      	orrs	r3, r2
 8005242:	f000 8081 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800524a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800524e:	2b20      	cmp	r3, #32
 8005250:	d85f      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052dd 	.word	0x080052dd
 800525c:	08005313 	.word	0x08005313
 8005260:	08005313 	.word	0x08005313
 8005264:	08005313 	.word	0x08005313
 8005268:	08005313 	.word	0x08005313
 800526c:	08005313 	.word	0x08005313
 8005270:	08005313 	.word	0x08005313
 8005274:	08005313 	.word	0x08005313
 8005278:	080052eb 	.word	0x080052eb
 800527c:	08005313 	.word	0x08005313
 8005280:	08005313 	.word	0x08005313
 8005284:	08005313 	.word	0x08005313
 8005288:	08005313 	.word	0x08005313
 800528c:	08005313 	.word	0x08005313
 8005290:	08005313 	.word	0x08005313
 8005294:	08005313 	.word	0x08005313
 8005298:	080052ff 	.word	0x080052ff
 800529c:	08005313 	.word	0x08005313
 80052a0:	08005313 	.word	0x08005313
 80052a4:	08005313 	.word	0x08005313
 80052a8:	08005313 	.word	0x08005313
 80052ac:	08005313 	.word	0x08005313
 80052b0:	08005313 	.word	0x08005313
 80052b4:	08005313 	.word	0x08005313
 80052b8:	0800531b 	.word	0x0800531b
 80052bc:	08005313 	.word	0x08005313
 80052c0:	08005313 	.word	0x08005313
 80052c4:	08005313 	.word	0x08005313
 80052c8:	08005313 	.word	0x08005313
 80052cc:	08005313 	.word	0x08005313
 80052d0:	08005313 	.word	0x08005313
 80052d4:	08005313 	.word	0x08005313
 80052d8:	0800531b 	.word	0x0800531b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4bb9      	ldr	r3, [pc, #740]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	4ab8      	ldr	r2, [pc, #736]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80052e8:	e018      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ee:	3308      	adds	r3, #8
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 f979 	bl	80075e8 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80052fc:	e00e      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005302:	3330      	adds	r3, #48	@ 0x30
 8005304:	4618      	mov	r0, r3
 8005306:	f002 fa07 	bl	8007718 <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800531a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005324:	4ba7      	ldr	r3, [pc, #668]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800532a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800532e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005336:	4aa3      	ldr	r2, [pc, #652]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005338:	430b      	orrs	r3, r1
 800533a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005344:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005356:	2300      	movs	r3, #0
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d04e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800536c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005370:	d02e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005376:	d827      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005378:	2bc0      	cmp	r3, #192	@ 0xc0
 800537a:	d02b      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 800537c:	2bc0      	cmp	r3, #192	@ 0xc0
 800537e:	d823      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d017      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005384:	2b80      	cmp	r3, #128	@ 0x80
 8005386:	d81f      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800538c:	2b40      	cmp	r3, #64	@ 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005390:	e01a      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005392:	4b8c      	ldr	r3, [pc, #560]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	4a8b      	ldr	r2, [pc, #556]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800539c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800539e:	e01a      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a4:	3308      	adds	r3, #8
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 f91e 	bl	80075e8 <RCCEx_PLL2_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80053b2:	e010      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b8:	3330      	adds	r3, #48	@ 0x30
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 f9ac 	bl	8007718 <RCCEx_PLL3_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80053c6:	e006      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053ce:	e002      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80053d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80053de:	4b79      	ldr	r3, [pc, #484]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e4:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80053e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053f0:	4974      	ldr	r1, [pc, #464]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800540e:	623b      	str	r3, [r7, #32]
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
 8005414:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d055      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005422:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005426:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800542a:	d031      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 800542c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005430:	d82a      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005436:	d02d      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800543c:	d824      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800543e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005442:	d029      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005444:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005448:	d81e      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544e:	d011      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005454:	d818      	bhi.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d020      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800545a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800545e:	d113      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005460:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005464:	3308      	adds	r3, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f002 f8be 	bl	80075e8 <RCCEx_PLL2_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005472:	e014      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005478:	3330      	adds	r3, #48	@ 0x30
 800547a:	4618      	mov	r0, r3
 800547c:	f002 f94c 	bl	8007718 <RCCEx_PLL3_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005486:	e00a      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800548e:	e006      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005490:	bf00      	nop
 8005492:	e004      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800549c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10d      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054ac:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80054b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054b8:	4942      	ldr	r1, [pc, #264]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80054c0:	e003      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054c6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	2100      	movs	r1, #0
 80054d4:	61b9      	str	r1, [r7, #24]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054e0:	460b      	mov	r3, r1
 80054e2:	4313      	orrs	r3, r2
 80054e4:	d03c      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80054e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d81b      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005533 	.word	0x08005533
 80054fc:	08005509 	.word	0x08005509
 8005500:	08005517 	.word	0x08005517
 8005504:	08005533 	.word	0x08005533
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4b2e      	ldr	r3, [pc, #184]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	4a2d      	ldr	r2, [pc, #180]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005512:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005514:	e00e      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551a:	3308      	adds	r3, #8
 800551c:	4618      	mov	r0, r3
 800551e:	f002 f863 	bl	80075e8 <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005528:	e004      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005530:	e000      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005534:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800553c:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800553e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800554e:	491d      	ldr	r1, [pc, #116]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800555c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	2100      	movs	r1, #0
 800556a:	6139      	str	r1, [r7, #16]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d03c      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800557c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005588:	d00e      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800558a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800558e:	d815      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005598:	d110      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559a:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	4a09      	ldr	r2, [pc, #36]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055a6:	e010      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ac:	3308      	adds	r3, #8
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 f81a 	bl	80075e8 <RCCEx_PLL2_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055ba:	e006      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055c2:	e002      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80055c4:	44020c00 	.word	0x44020c00
        break;
 80055c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80055d2:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80055d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e4:	4938      	ldr	r1, [pc, #224]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80055ec:	e003      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	2100      	movs	r1, #0
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800560c:	460b      	mov	r3, r1
 800560e:	4313      	orrs	r3, r2
 8005610:	d038      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005616:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800561a:	2b30      	cmp	r3, #48	@ 0x30
 800561c:	d01b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 800561e:	2b30      	cmp	r3, #48	@ 0x30
 8005620:	d815      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005622:	2b10      	cmp	r3, #16
 8005624:	d002      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d007      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 800562a:	e010      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b26      	ldr	r3, [pc, #152]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	4a25      	ldr	r2, [pc, #148]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005636:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005638:	e00e      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800563a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563e:	3330      	adds	r3, #48	@ 0x30
 8005640:	4618      	mov	r0, r3
 8005642:	f002 f869 	bl	8007718 <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005666:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800566a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800566e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005672:	4915      	ldr	r1, [pc, #84]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005680:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	2100      	movs	r1, #0
 800568e:	6039      	str	r1, [r7, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	e9d7 1200 	ldrd	r1, r2, [r7]
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d00c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80056a0:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056b2:	4905      	ldr	r1, [pc, #20]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80056ba:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80056be:	4618      	mov	r0, r3
 80056c0:	37e8      	adds	r7, #232	@ 0xe8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c8:	44020c00 	.word	0x44020c00

080056cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b08b      	sub	sp, #44	@ 0x2c
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80056d4:	4bad      	ldr	r3, [pc, #692]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80056de:	4bab      	ldr	r3, [pc, #684]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80056e8:	4ba8      	ldr	r3, [pc, #672]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056f2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80056f4:	4ba5      	ldr	r3, [pc, #660]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80056fe:	4ba3      	ldr	r3, [pc, #652]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	08db      	lsrs	r3, r3, #3
 8005704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8126 	beq.w	800596e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b03      	cmp	r3, #3
 8005726:	d053      	beq.n	80057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d86f      	bhi.n	800580e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d003      	beq.n	800573c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d02b      	beq.n	8005792 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800573a:	e068      	b.n	800580e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800573c:	4b93      	ldr	r3, [pc, #588]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	08db      	lsrs	r3, r3, #3
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	4a92      	ldr	r2, [pc, #584]	@ (8005990 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005770:	ed97 6a04 	vldr	s12, [r7, #16]
 8005774:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005778:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005790:	e068      	b.n	8005864 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005998 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80057a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80057b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80057ce:	e049      	b.n	8005864 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800599c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80057f0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80057f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005808:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800580c:	e02a      	b.n	8005864 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800580e:	4b5f      	ldr	r3, [pc, #380]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	08db      	lsrs	r3, r3, #3
 8005814:	f003 0303 	and.w	r3, r3, #3
 8005818:	4a5d      	ldr	r2, [pc, #372]	@ (8005990 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800581a:	fa22 f303 	lsr.w	r3, r2, r3
 800581e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	ee07 3a90 	vmov	s15, r3
 8005830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a04 	vldr	s12, [r7, #16]
 8005846:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005994 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005862:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005864:	4b49      	ldr	r3, [pc, #292]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005870:	d121      	bne.n	80058b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005872:	4b46      	ldr	r3, [pc, #280]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800587e:	4b43      	ldr	r3, [pc, #268]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005882:	0a5b      	lsrs	r3, r3, #9
 8005884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005894:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005898:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800589c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058bc:	4b33      	ldr	r3, [pc, #204]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058c8:	d121      	bne.n	800590e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80058ca:	4b30      	ldr	r3, [pc, #192]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058d6:	4b2d      	ldr	r3, [pc, #180]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80058e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80058f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005914:	4b1d      	ldr	r3, [pc, #116]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005920:	d121      	bne.n	8005966 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005922:	4b1a      	ldr	r3, [pc, #104]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d017      	beq.n	800595e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005932:	0e1b      	lsrs	r3, r3, #24
 8005934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005944:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005948:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800594c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005954:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800595c:	e010      	b.n	8005980 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
}
 8005964:	e00c      	b.n	8005980 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	372c      	adds	r7, #44	@ 0x2c
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	44020c00 	.word	0x44020c00
 8005990:	03d09000 	.word	0x03d09000
 8005994:	46000000 	.word	0x46000000
 8005998:	4a742400 	.word	0x4a742400
 800599c:	4bbebc20 	.word	0x4bbebc20

080059a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b08b      	sub	sp, #44	@ 0x2c
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80059a8:	4bad      	ldr	r3, [pc, #692]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80059b2:	4bab      	ldr	r3, [pc, #684]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80059bc:	4ba8      	ldr	r3, [pc, #672]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80059c8:	4ba5      	ldr	r3, [pc, #660]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80059d2:	4ba3      	ldr	r3, [pc, #652]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8126 	beq.w	8005c42 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d053      	beq.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d86f      	bhi.n	8005ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d003      	beq.n	8005a10 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d02b      	beq.n	8005a66 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005a0e:	e068      	b.n	8005ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a10:	4b93      	ldr	r3, [pc, #588]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	08db      	lsrs	r3, r3, #3
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	4a92      	ldr	r2, [pc, #584]	@ (8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a20:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a44:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a48:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005a64:	e068      	b.n	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a70:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a86:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005aa2:	e049      	b.n	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ac4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005adc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005ae0:	e02a      	b.n	8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	08db      	lsrs	r3, r3, #3
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	4a5d      	ldr	r2, [pc, #372]	@ (8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b16:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b1a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005b36:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b38:	4b49      	ldr	r3, [pc, #292]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b44:	d121      	bne.n	8005b8a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005b46:	4b46      	ldr	r3, [pc, #280]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d017      	beq.n	8005b82 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b52:	4b43      	ldr	r3, [pc, #268]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b56:	0a5b      	lsrs	r3, r3, #9
 8005b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005b64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005b6c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b78:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e006      	b.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b90:	4b33      	ldr	r3, [pc, #204]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b9c:	d121      	bne.n	8005be2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b9e:	4b30      	ldr	r3, [pc, #192]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d017      	beq.n	8005bda <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005baa:	4b2d      	ldr	r3, [pc, #180]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	0c1b      	lsrs	r3, r3, #16
 8005bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bb4:	ee07 3a90 	vmov	s15, r3
 8005bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005bc4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e006      	b.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	e002      	b.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005be8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf4:	d121      	bne.n	8005c3a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d017      	beq.n	8005c32 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c02:	4b17      	ldr	r3, [pc, #92]	@ (8005c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c06:	0e1b      	lsrs	r3, r3, #24
 8005c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005c1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c28:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c30:	e010      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	e00c      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	372c      	adds	r7, #44	@ 0x2c
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	44020c00 	.word	0x44020c00
 8005c64:	03d09000 	.word	0x03d09000
 8005c68:	46000000 	.word	0x46000000
 8005c6c:	4a742400 	.word	0x4a742400
 8005c70:	4bbebc20 	.word	0x4bbebc20

08005c74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b08b      	sub	sp, #44	@ 0x2c
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005c7c:	4bad      	ldr	r3, [pc, #692]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c84:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005c86:	4bab      	ldr	r3, [pc, #684]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005c90:	4ba8      	ldr	r3, [pc, #672]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c9a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005c9c:	4ba5      	ldr	r3, [pc, #660]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005ca6:	4ba3      	ldr	r3, [pc, #652]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005caa:	08db      	lsrs	r3, r3, #3
 8005cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8126 	beq.w	8005f16 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d053      	beq.n	8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d86f      	bhi.n	8005db6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d02b      	beq.n	8005d3a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005ce2:	e068      	b.n	8005db6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ce4:	4b93      	ldr	r3, [pc, #588]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	4a92      	ldr	r2, [pc, #584]	@ (8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d18:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d1c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d38:	e068      	b.n	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d44:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005d76:	e049      	b.n	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d94:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d98:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005db4:	e02a      	b.n	8005e0c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005db6:	4b5f      	ldr	r3, [pc, #380]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a04 	vldr	s12, [r7, #16]
 8005dee:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e0a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e0c:	4b49      	ldr	r3, [pc, #292]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e18:	d121      	bne.n	8005e5e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005e1a:	4b46      	ldr	r3, [pc, #280]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d017      	beq.n	8005e56 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e26:	4b43      	ldr	r3, [pc, #268]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	0a5b      	lsrs	r3, r3, #9
 8005e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005e40:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e006      	b.n	8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e002      	b.n	8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e64:	4b33      	ldr	r3, [pc, #204]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e70:	d121      	bne.n	8005eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005e72:	4b30      	ldr	r3, [pc, #192]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e88:	ee07 3a90 	vmov	s15, r3
 8005e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e94:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005e98:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	e006      	b.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	e002      	b.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec8:	d121      	bne.n	8005f0e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005eca:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ed6:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	0e1b      	lsrs	r3, r3, #24
 8005edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005ee8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005ef0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005f04:	e010      	b.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	e00c      	b.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	e008      	b.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	372c      	adds	r7, #44	@ 0x2c
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	44020c00 	.word	0x44020c00
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	46000000 	.word	0x46000000
 8005f40:	4a742400 	.word	0x4a742400
 8005f44:	4bbebc20 	.word	0x4bbebc20

08005f48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b08f      	sub	sp, #60	@ 0x3c
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f56:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005f5a:	4321      	orrs	r1, r4
 8005f5c:	d150      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f6a:	4b23      	ldr	r3, [pc, #140]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d108      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7e:	d104      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f86:	f001 bb20 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f98:	d108      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa0:	d104      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005fa2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa8:	f001 bb0f 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005fac:	4b12      	ldr	r3, [pc, #72]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fb8:	d119      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc0:	d115      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fce:	d30a      	bcc.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005fd0:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	0a1b      	lsrs	r3, r3, #8
 8005fd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fda:	4a08      	ldr	r2, [pc, #32]	@ (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005fe2:	f001 baf2 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005fea:	f001 baee 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff2:	f001 baea 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005ff6:	bf00      	nop
 8005ff8:	44020c00 	.word	0x44020c00
 8005ffc:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006004:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8006008:	ea50 0104 	orrs.w	r1, r0, r4
 800600c:	f000 8615 	beq.w	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8006010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006014:	2801      	cmp	r0, #1
 8006016:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800601a:	f081 82d3 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800601e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006022:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006026:	ea50 0104 	orrs.w	r1, r0, r4
 800602a:	f000 84d8 	beq.w	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800602e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006032:	2801      	cmp	r0, #1
 8006034:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006038:	f081 82c4 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800603c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006040:	f1a1 0410 	sub.w	r4, r1, #16
 8006044:	ea50 0104 	orrs.w	r1, r0, r4
 8006048:	f001 8288 	beq.w	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800604c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006050:	2801      	cmp	r0, #1
 8006052:	f171 0110 	sbcs.w	r1, r1, #16
 8006056:	f081 82b5 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800605a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800605e:	f1a1 0408 	sub.w	r4, r1, #8
 8006062:	ea50 0104 	orrs.w	r1, r0, r4
 8006066:	f001 81fe 	beq.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800606a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800606e:	2801      	cmp	r0, #1
 8006070:	f171 0108 	sbcs.w	r1, r1, #8
 8006074:	f081 82a6 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800607c:	1f0c      	subs	r4, r1, #4
 800607e:	ea50 0104 	orrs.w	r1, r0, r4
 8006082:	f000 8753 	beq.w	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8006086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800608a:	2801      	cmp	r0, #1
 800608c:	f171 0104 	sbcs.w	r1, r1, #4
 8006090:	f081 8298 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006098:	1e8c      	subs	r4, r1, #2
 800609a:	ea50 0104 	orrs.w	r1, r0, r4
 800609e:	f001 8173 	beq.w	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80060a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a6:	2801      	cmp	r0, #1
 80060a8:	f171 0102 	sbcs.w	r1, r1, #2
 80060ac:	f081 828a 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80060b8:	4321      	orrs	r1, r4
 80060ba:	f001 80fe 	beq.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80060be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c2:	4ccb      	ldr	r4, [pc, #812]	@ (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	f171 0100 	sbcs.w	r1, r1, #0
 80060ca:	f081 827b 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060d2:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80060d6:	4321      	orrs	r1, r4
 80060d8:	f001 8076 	beq.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 80060dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060e0:	4cc4      	ldr	r4, [pc, #784]	@ (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 80060e2:	42a0      	cmp	r0, r4
 80060e4:	f171 0100 	sbcs.w	r1, r1, #0
 80060e8:	f081 826c 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80060ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f0:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80060f4:	4321      	orrs	r1, r4
 80060f6:	f000 87b5 	beq.w	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 80060fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060fe:	4cbe      	ldr	r4, [pc, #760]	@ (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8006100:	42a0      	cmp	r0, r4
 8006102:	f171 0100 	sbcs.w	r1, r1, #0
 8006106:	f081 825d 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800610a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800610e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006112:	4321      	orrs	r1, r4
 8006114:	f000 8738 	beq.w	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800611c:	4cb7      	ldr	r4, [pc, #732]	@ (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800611e:	42a0      	cmp	r0, r4
 8006120:	f171 0100 	sbcs.w	r1, r1, #0
 8006124:	f081 824e 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800612c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006130:	4321      	orrs	r1, r4
 8006132:	f001 81cd 	beq.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8006136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613a:	4cb1      	ldr	r4, [pc, #708]	@ (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800613c:	42a0      	cmp	r0, r4
 800613e:	f171 0100 	sbcs.w	r1, r1, #0
 8006142:	f081 823f 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800614e:	4321      	orrs	r1, r4
 8006150:	f000 80d9 	beq.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006158:	4caa      	ldr	r4, [pc, #680]	@ (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800615a:	42a0      	cmp	r0, r4
 800615c:	f171 0100 	sbcs.w	r1, r1, #0
 8006160:	f081 8230 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006168:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800616c:	4321      	orrs	r1, r4
 800616e:	f000 83da 	beq.w	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006176:	4ca4      	ldr	r4, [pc, #656]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8006178:	42a0      	cmp	r0, r4
 800617a:	f171 0100 	sbcs.w	r1, r1, #0
 800617e:	f081 8221 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006186:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800618a:	4321      	orrs	r1, r4
 800618c:	f000 8627 	beq.w	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8006190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006194:	4c9d      	ldr	r4, [pc, #628]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8006196:	42a0      	cmp	r0, r4
 8006198:	f171 0100 	sbcs.w	r1, r1, #0
 800619c:	f081 8212 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80061a8:	4321      	orrs	r1, r4
 80061aa:	f000 857a 	beq.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80061ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061b2:	4c97      	ldr	r4, [pc, #604]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80061b4:	42a0      	cmp	r0, r4
 80061b6:	f171 0100 	sbcs.w	r1, r1, #0
 80061ba:	f081 8203 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80061c6:	4321      	orrs	r1, r4
 80061c8:	f000 84fb 	beq.w	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80061cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061d0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80061d4:	f171 0100 	sbcs.w	r1, r1, #0
 80061d8:	f081 81f4 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061e0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80061e4:	4321      	orrs	r1, r4
 80061e6:	f000 84a9 	beq.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80061ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061ee:	f248 0401 	movw	r4, #32769	@ 0x8001
 80061f2:	42a0      	cmp	r0, r4
 80061f4:	f171 0100 	sbcs.w	r1, r1, #0
 80061f8:	f081 81e4 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80061fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006200:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006204:	4321      	orrs	r1, r4
 8006206:	f000 8456 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800620a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800620e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006212:	42a0      	cmp	r0, r4
 8006214:	f171 0100 	sbcs.w	r1, r1, #0
 8006218:	f081 81d4 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800621c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006220:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006224:	4321      	orrs	r1, r4
 8006226:	f000 8403 	beq.w	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800622a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800622e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006232:	42a0      	cmp	r0, r4
 8006234:	f171 0100 	sbcs.w	r1, r1, #0
 8006238:	f081 81c4 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800623c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006240:	2821      	cmp	r0, #33	@ 0x21
 8006242:	f171 0100 	sbcs.w	r1, r1, #0
 8006246:	d255      	bcs.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800624c:	4301      	orrs	r1, r0
 800624e:	f001 81b9 	beq.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006256:	1e42      	subs	r2, r0, #1
 8006258:	f141 33ff 	adc.w	r3, r1, #4294967295
 800625c:	2a20      	cmp	r2, #32
 800625e:	f173 0100 	sbcs.w	r1, r3, #0
 8006262:	f081 81af 	bcs.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8006266:	2a1f      	cmp	r2, #31
 8006268:	f201 81ac 	bhi.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800626c:	a101      	add	r1, pc, #4	@ (adr r1, 8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 800626e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006272:	bf00      	nop
 8006274:	0800634b 	.word	0x0800634b
 8006278:	08006449 	.word	0x08006449
 800627c:	080075c5 	.word	0x080075c5
 8006280:	08006509 	.word	0x08006509
 8006284:	080075c5 	.word	0x080075c5
 8006288:	080075c5 	.word	0x080075c5
 800628c:	080075c5 	.word	0x080075c5
 8006290:	080065d9 	.word	0x080065d9
 8006294:	080075c5 	.word	0x080075c5
 8006298:	080075c5 	.word	0x080075c5
 800629c:	080075c5 	.word	0x080075c5
 80062a0:	080075c5 	.word	0x080075c5
 80062a4:	080075c5 	.word	0x080075c5
 80062a8:	080075c5 	.word	0x080075c5
 80062ac:	080075c5 	.word	0x080075c5
 80062b0:	080066bd 	.word	0x080066bd
 80062b4:	080075c5 	.word	0x080075c5
 80062b8:	080075c5 	.word	0x080075c5
 80062bc:	080075c5 	.word	0x080075c5
 80062c0:	080075c5 	.word	0x080075c5
 80062c4:	080075c5 	.word	0x080075c5
 80062c8:	080075c5 	.word	0x080075c5
 80062cc:	080075c5 	.word	0x080075c5
 80062d0:	080075c5 	.word	0x080075c5
 80062d4:	080075c5 	.word	0x080075c5
 80062d8:	080075c5 	.word	0x080075c5
 80062dc:	080075c5 	.word	0x080075c5
 80062e0:	080075c5 	.word	0x080075c5
 80062e4:	080075c5 	.word	0x080075c5
 80062e8:	080075c5 	.word	0x080075c5
 80062ec:	080075c5 	.word	0x080075c5
 80062f0:	08006793 	.word	0x08006793
 80062f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80062fc:	430b      	orrs	r3, r1
 80062fe:	f000 82b3 	beq.w	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8006302:	f001 b95f 	b.w	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006306:	4b43      	ldr	r3, [pc, #268]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800630c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006310:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006318:	f107 0320 	add.w	r3, r7, #32
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff f9d5 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006326:	f001 b950 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	2b40      	cmp	r3, #64	@ 0x40
 800632e:	d108      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fb33 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800633e:	f001 b944 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006346:	f001 b940 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800634a:	4b32      	ldr	r3, [pc, #200]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800634c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fd ffca 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8006360:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006362:	f001 b932 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006366:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800636e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006372:	d10a      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	2b01      	cmp	r3, #1
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637a:	f107 0314 	add.w	r3, r7, #20
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fb0e 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
 8006388:	e05c      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800638a:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006396:	d10a      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	2b02      	cmp	r3, #2
 800639c:	d107      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fc66 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ac:	e04a      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d109      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063c0:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d2:	e037      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80063d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e0:	d11e      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11b      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80063e8:	4b0c      	ldr	r3, [pc, #48]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ec:	e02a      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80063ee:	bf00      	nop
 80063f0:	40000001 	.word	0x40000001
 80063f4:	20000001 	.word	0x20000001
 80063f8:	10000001 	.word	0x10000001
 80063fc:	08000001 	.word	0x08000001
 8006400:	04000001 	.word	0x04000001
 8006404:	00400001 	.word	0x00400001
 8006408:	00200001 	.word	0x00200001
 800640c:	00040001 	.word	0x00040001
 8006410:	00020001 	.word	0x00020001
 8006414:	44020c00 	.word	0x44020c00
 8006418:	03d09000 	.word	0x03d09000
 800641c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006420:	4ba3      	ldr	r3, [pc, #652]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d106      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2b05      	cmp	r3, #5
 8006432:	d103      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8006434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006440:	f001 b8c3 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006444:	f001 b8c1 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006448:	4b99      	ldr	r3, [pc, #612]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800644a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800644e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006452:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800645a:	f7fd ff35 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 800645e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006460:	f001 b8b3 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006464:	4b92      	ldr	r3, [pc, #584]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800646c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006470:	d10a      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	2b08      	cmp	r3, #8
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fa8f 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	e03d      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	2b10      	cmp	r3, #16
 800648c:	d108      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800648e:	f107 0308 	add.w	r3, r7, #8
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fbee 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800649c:	f001 b895 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80064a0:	4b83      	ldr	r3, [pc, #524]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10c      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	2b18      	cmp	r3, #24
 80064b0:	d109      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064b2:	4b7f      	ldr	r3, [pc, #508]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	08db      	lsrs	r3, r3, #3
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	4a7d      	ldr	r2, [pc, #500]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c4:	e01e      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80064c6:	4b7a      	ldr	r3, [pc, #488]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d2:	d105      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d102      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80064da:	4b77      	ldr	r3, [pc, #476]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80064dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064de:	e011      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80064e0:	4b73      	ldr	r3, [pc, #460]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80064e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d106      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2b28      	cmp	r3, #40	@ 0x28
 80064f2:	d103      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80064f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006500:	f001 b863 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006504:	f001 b861 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006508:	4b69      	ldr	r3, [pc, #420]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800650a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800650e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006512:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fd fed5 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 800651e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006520:	f001 b853 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006524:	4b62      	ldr	r3, [pc, #392]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800652c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006530:	d10a      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	d107      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006538:	f107 0314 	add.w	r3, r7, #20
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fa2f 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
 8006546:	e045      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006548:	4b59      	ldr	r3, [pc, #356]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006554:	d10a      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	2b80      	cmp	r3, #128	@ 0x80
 800655a:	d107      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800655c:	f107 0308 	add.w	r3, r7, #8
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fb87 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	637b      	str	r3, [r7, #52]	@ 0x34
 800656a:	e033      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800656c:	4b50      	ldr	r3, [pc, #320]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d10c      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	2bc0      	cmp	r3, #192	@ 0xc0
 800657c:	d109      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800657e:	4b4c      	ldr	r3, [pc, #304]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	08db      	lsrs	r3, r3, #3
 8006584:	f003 0303 	and.w	r3, r3, #3
 8006588:	4a4a      	ldr	r2, [pc, #296]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006590:	e020      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006592:	4b47      	ldr	r3, [pc, #284]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659e:	d106      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a6:	d102      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80065a8:	4b43      	ldr	r3, [pc, #268]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80065aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ac:	e012      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80065ae:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d107      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80065c2:	d103      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 80065c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ca:	e003      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065d0:	f000 bffb 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80065d4:	f000 bff9 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065d8:	4b35      	ldr	r3, [pc, #212]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065de:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fd fe6d 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 80065ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80065f0:	f000 bfeb 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80065f4:	4b2e      	ldr	r3, [pc, #184]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006600:	d10b      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d107      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff f9c6 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	e047      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800661a:	4b25      	ldr	r3, [pc, #148]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006626:	d10b      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662e:	d107      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fb1d 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
 800663e:	e034      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006640:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d10d      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006652:	d109      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006654:	4b16      	ldr	r3, [pc, #88]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	08db      	lsrs	r3, r3, #3
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	e020      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006668:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667c:	d102      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 800667e:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
 8006682:	e012      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006684:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8006686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006698:	d103      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669e:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a6:	f000 bf90 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80066aa:	f000 bf8e 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80066ae:	bf00      	nop
 80066b0:	44020c00 	.word	0x44020c00
 80066b4:	03d09000 	.word	0x03d09000
 80066b8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066bc:	4ba5      	ldr	r3, [pc, #660]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066c2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80066c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ce:	f7fd fdfb 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 80066d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80066d4:	f000 bf79 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80066d8:	4b9e      	ldr	r3, [pc, #632]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e4:	d10b      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ee:	f107 0314 	add.w	r3, r7, #20
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff f954 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fc:	e047      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80066fe:	4b95      	ldr	r3, [pc, #596]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006712:	d107      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006714:	f107 0308 	add.w	r3, r7, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff faab 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
 8006722:	e034      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006724:	4b8b      	ldr	r3, [pc, #556]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d10d      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006736:	d109      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006738:	4b86      	ldr	r3, [pc, #536]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	4a85      	ldr	r2, [pc, #532]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
 800674a:	e020      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800674c:	4b81      	ldr	r3, [pc, #516]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006758:	d106      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006760:	d102      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8006762:	4b7e      	ldr	r3, [pc, #504]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
 8006766:	e012      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006768:	4b7a      	ldr	r3, [pc, #488]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800676a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b02      	cmp	r3, #2
 8006774:	d107      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800677c:	d103      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 800677e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
 8006784:	e003      	b.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800678a:	f000 bf1e 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800678e:	f000 bf1c 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006792:	4b70      	ldr	r3, [pc, #448]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006798:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800679c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d104      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7fd fd90 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 80067a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80067aa:	f000 bf0e 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80067ae:	4b69      	ldr	r3, [pc, #420]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff f8e9 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d2:	e047      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80067d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e0:	d10b      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ea:	f107 0308 	add.w	r3, r7, #8
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fa40 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f8:	e034      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b02      	cmp	r3, #2
 8006804:	d10d      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800680c:	d109      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800680e:	4b51      	ldr	r3, [pc, #324]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	08db      	lsrs	r3, r3, #3
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	4a4f      	ldr	r2, [pc, #316]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800681a:	fa22 f303 	lsr.w	r3, r2, r3
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	e020      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006822:	4b4c      	ldr	r3, [pc, #304]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682e:	d106      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006836:	d102      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8006838:	4b48      	ldr	r3, [pc, #288]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
 800683c:	e012      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800683e:	4b45      	ldr	r3, [pc, #276]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b02      	cmp	r3, #2
 800684a:	d107      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006852:	d103      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
 800685a:	e003      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006860:	f000 beb3 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006864:	f000 beb1 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006868:	4b3a      	ldr	r3, [pc, #232]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800686a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800686e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006872:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800687a:	f7fd fd51 	bl	8004320 <HAL_RCC_GetPCLK3Freq>
 800687e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006880:	f000 bea3 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800688a:	d108      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff f885 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800689a:	f000 be96 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068a4:	d108      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff f9e2 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068b4:	f000 be89 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80068b8:	4b26      	ldr	r3, [pc, #152]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068ca:	d109      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068cc:	4b21      	ldr	r3, [pc, #132]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	4a20      	ldr	r2, [pc, #128]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80068d8:	fa22 f303 	lsr.w	r3, r2, r3
 80068dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068de:	e020      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80068e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ec:	d106      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068f4:	d102      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 80068f6:	4b19      	ldr	r3, [pc, #100]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fa:	e012      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80068fc:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80068fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d107      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006910:	d103      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8006912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800691e:	f000 be54 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006922:	f000 be52 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8006928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006938:	f7fd fcaa 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 800693c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800693e:	f000 be44 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10b      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8006948:	f7fd fb76 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 800694c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800694e:	f000 be3c 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006952:	bf00      	nop
 8006954:	44020c00 	.word	0x44020c00
 8006958:	03d09000 	.word	0x03d09000
 800695c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	2b02      	cmp	r3, #2
 8006964:	d108      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff f818 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006974:	f000 be29 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006978:	4b9f      	ldr	r3, [pc, #636]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006984:	d105      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	2b03      	cmp	r3, #3
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 800698c:	4b9b      	ldr	r3, [pc, #620]	@ (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006990:	e023      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006992:	4b99      	ldr	r3, [pc, #612]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b02      	cmp	r3, #2
 800699c:	d10c      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d109      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069a4:	4b94      	ldr	r3, [pc, #592]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	08db      	lsrs	r3, r3, #3
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	4a94      	ldr	r2, [pc, #592]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b6:	e010      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80069b8:	4b8f      	ldr	r3, [pc, #572]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d105      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	2b05      	cmp	r3, #5
 80069ca:	d102      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 80069cc:	4b8d      	ldr	r3, [pc, #564]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d6:	f000 bdf8 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069da:	f000 bdf6 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80069de:	4b86      	ldr	r3, [pc, #536]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80069ea:	4b83      	ldr	r3, [pc, #524]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80069ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a04:	e012      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006a06:	4b7c      	ldr	r3, [pc, #496]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d103      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8006a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006a28:	f000 bdcf 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a2c:	f000 bdcd 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006a30:	4b71      	ldr	r3, [pc, #452]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d104      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7fd fc41 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8006a46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a48:	f000 bdbf 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a52:	d108      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff f90b 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a62:	f000 bdb2 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a66:	4b64      	ldr	r3, [pc, #400]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d10d      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a78:	d109      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	08db      	lsrs	r3, r3, #3
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	4a5e      	ldr	r2, [pc, #376]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8c:	e011      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aa2:	d102      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8006aa4:	4b57      	ldr	r3, [pc, #348]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	e003      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aae:	f000 bd8c 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006ab2:	f000 bd8a 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006ab6:	4b50      	ldr	r3, [pc, #320]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006ab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006abc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006ac0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd fbfe 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8006acc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ace:	f000 bd7c 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ad8:	d108      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff f8c8 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ae8:	f000 bd6f 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006aec:	4b42      	ldr	r3, [pc, #264]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d10d      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006afe:	d109      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b00:	4b3d      	ldr	r3, [pc, #244]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	08db      	lsrs	r3, r3, #3
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b12:	e011      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006b14:	4b38      	ldr	r3, [pc, #224]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b20:	d106      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006b28:	d102      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8006b2a:	4b36      	ldr	r3, [pc, #216]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b34:	f000 bd49 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b38:	f000 bd47 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b4e:	f7fd fbe7 	bl	8004320 <HAL_RCC_GetPCLK3Freq>
 8006b52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b54:	f000 bd39 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5e:	d108      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b60:	f107 0308 	add.w	r3, r7, #8
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff f885 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b6e:	f000 bd2c 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006b72:	4b21      	ldr	r3, [pc, #132]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d10d      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b84:	d109      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b86:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	e011      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006b9a:	4b17      	ldr	r3, [pc, #92]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006bb0:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	e003      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bba:	f000 bd06 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006bbe:	f000 bd04 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bc8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006bcc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fd fb78 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bda:	f000 bcf6 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006be4:	d110      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f842 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bf4:	f000 bce9 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006bf8:	44020c00 	.word	0x44020c00
 8006bfc:	017d7840 	.word	0x017d7840
 8006c00:	03d09000 	.word	0x03d09000
 8006c04:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006c08:	4ba4      	ldr	r3, [pc, #656]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d10e      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1a:	d10a      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c1c:	4b9f      	ldr	r3, [pc, #636]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	4a9e      	ldr	r2, [pc, #632]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c2e:	f000 bccc 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c36:	f000 bcc8 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006c3a:	4b98      	ldr	r3, [pc, #608]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c4c:	f7fd fb68 	bl	8004320 <HAL_RCC_GetPCLK3Freq>
 8006c50:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c52:	f000 bcba 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c5c:	d108      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff f806 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c6c:	f000 bcad 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006c70:	4b8a      	ldr	r3, [pc, #552]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d10e      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c82:	d10a      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c84:	4b85      	ldr	r3, [pc, #532]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	08db      	lsrs	r3, r3, #3
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	4a84      	ldr	r2, [pc, #528]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c96:	f000 bc98 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c9e:	f000 bc94 	b.w	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ca2:	4b7e      	ldr	r3, [pc, #504]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006ca4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ca8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006cb4:	d056      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006cbc:	f200 808b 	bhi.w	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc6:	d03e      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cce:	f200 8082 	bhi.w	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cd8:	d027      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ce0:	d879      	bhi.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce8:	d017      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf0:	d871      	bhi.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006d00:	e069      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006d02:	f7fd fb0d 	bl	8004320 <HAL_RCC_GetPCLK3Freq>
 8006d06:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006d08:	e068      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d0a:	f107 0314 	add.w	r3, r7, #20
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fe46 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d18:	e060      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe ffa8 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d28:	e058      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d103      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d3e:	e04d      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d44:	e04a      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006d46:	4b55      	ldr	r3, [pc, #340]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d54:	d103      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006d56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d5c:	e03e      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d62:	e03b      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d64:	4b4d      	ldr	r3, [pc, #308]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d70:	4b4a      	ldr	r3, [pc, #296]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d10c      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d82:	4b46      	ldr	r3, [pc, #280]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	4a44      	ldr	r2, [pc, #272]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d94:	e01e      	b.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d96:	4b41      	ldr	r3, [pc, #260]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da2:	d106      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d102      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dac:	4b3d      	ldr	r3, [pc, #244]	@ (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006db0:	e010      	b.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006db2:	4b3a      	ldr	r3, [pc, #232]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d106      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc6:	d102      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006dc8:	4b37      	ldr	r3, [pc, #220]	@ (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006dd2:	e003      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006dda:	bf00      	nop
          }
        }
        break;
 8006ddc:	e3f5      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006dde:	4b2f      	ldr	r3, [pc, #188]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006de4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006df0:	d05f      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006df8:	f200 8094 	bhi.w	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e02:	d03f      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e0a:	f200 808b 	bhi.w	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e14:	d028      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e1c:	f200 8082 	bhi.w	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e26:	d017      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2e:	d879      	bhi.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8006e3e:	e071      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fd fa42 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8006e44:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006e46:	e070      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fda7 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e56:	e068      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e58:	f107 0308 	add.w	r3, r7, #8
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe ff09 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e66:	e060      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d103      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e7c:	e055      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e82:	e052      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e84:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e92:	d10b      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8006e94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e9a:	e046      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006e9c:	44020c00 	.word	0x44020c00
 8006ea0:	03d09000 	.word	0x03d09000
 8006ea4:	003d0900 	.word	0x003d0900
 8006ea8:	017d7840 	.word	0x017d7840
              frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006eb0:	e03b      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006eb2:	4bae      	ldr	r3, [pc, #696]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ebe:	4bab      	ldr	r3, [pc, #684]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ed0:	4ba6      	ldr	r3, [pc, #664]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4aa5      	ldr	r2, [pc, #660]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	e01e      	b.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef0:	d106      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006efa:	4b9e      	ldr	r3, [pc, #632]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	e010      	b.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f00:	4b9a      	ldr	r3, [pc, #616]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f14:	d102      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f16:	4b98      	ldr	r3, [pc, #608]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1a:	e002      	b.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006f20:	e003      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f28:	bf00      	nop
          }
        }
        break;
 8006f2a:	e34e      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006f38:	4b8c      	ldr	r3, [pc, #560]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f44:	d105      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d102      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8006f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006f50:	e33b      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5a:	f107 0320 	add.w	r3, r7, #32
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fbb4 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f68:	e32f      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f70:	d107      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f72:	f107 0314 	add.w	r3, r7, #20
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fd12 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f80:	e323      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f86:	e320      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006f88:	4b78      	ldr	r3, [pc, #480]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d860      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8006f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fb5 	.word	0x08006fb5
 8006fa4:	08006fc5 	.word	0x08006fc5
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	08006fe5 	.word	0x08006fe5
 8006fb0:	08006feb 	.word	0x08006feb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb4:	f107 0320 	add.w	r3, r7, #32
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fb87 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fc2:	e04e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe fce9 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fd2:	e046      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fe4b 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fe2:	e03e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006fe4:	4b65      	ldr	r3, [pc, #404]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fe8:	e03b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fea:	4b60      	ldr	r3, [pc, #384]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ff0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d10c      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007008:	4b58      	ldr	r3, [pc, #352]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a57      	ldr	r2, [pc, #348]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	637b      	str	r3, [r7, #52]	@ 0x34
 800701a:	e01e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800701c:	4b53      	ldr	r3, [pc, #332]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007028:	d106      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007030:	d102      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007032:	4b50      	ldr	r3, [pc, #320]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8007034:	637b      	str	r3, [r7, #52]	@ 0x34
 8007036:	e010      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007038:	4b4c      	ldr	r3, [pc, #304]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007044:	d106      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800704c:	d102      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800704e:	4b4a      	ldr	r3, [pc, #296]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
 8007052:	e002      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007058:	e003      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800705a:	e002      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007060:	bf00      	nop
          }
        }
        break;
 8007062:	e2b2      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007064:	4b41      	ldr	r3, [pc, #260]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	2b20      	cmp	r3, #32
 8007074:	f200 80a4 	bhi.w	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	08007105 	.word	0x08007105
 8007084:	080071c1 	.word	0x080071c1
 8007088:	080071c1 	.word	0x080071c1
 800708c:	080071c1 	.word	0x080071c1
 8007090:	080071c1 	.word	0x080071c1
 8007094:	080071c1 	.word	0x080071c1
 8007098:	080071c1 	.word	0x080071c1
 800709c:	080071c1 	.word	0x080071c1
 80070a0:	08007115 	.word	0x08007115
 80070a4:	080071c1 	.word	0x080071c1
 80070a8:	080071c1 	.word	0x080071c1
 80070ac:	080071c1 	.word	0x080071c1
 80070b0:	080071c1 	.word	0x080071c1
 80070b4:	080071c1 	.word	0x080071c1
 80070b8:	080071c1 	.word	0x080071c1
 80070bc:	080071c1 	.word	0x080071c1
 80070c0:	08007125 	.word	0x08007125
 80070c4:	080071c1 	.word	0x080071c1
 80070c8:	080071c1 	.word	0x080071c1
 80070cc:	080071c1 	.word	0x080071c1
 80070d0:	080071c1 	.word	0x080071c1
 80070d4:	080071c1 	.word	0x080071c1
 80070d8:	080071c1 	.word	0x080071c1
 80070dc:	080071c1 	.word	0x080071c1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080071c1 	.word	0x080071c1
 80070e8:	080071c1 	.word	0x080071c1
 80070ec:	080071c1 	.word	0x080071c1
 80070f0:	080071c1 	.word	0x080071c1
 80070f4:	080071c1 	.word	0x080071c1
 80070f8:	080071c1 	.word	0x080071c1
 80070fc:	080071c1 	.word	0x080071c1
 8007100:	0800713b 	.word	0x0800713b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007104:	f107 0320 	add.w	r3, r7, #32
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fadf 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007112:	e058      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fc41 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007122:	e050      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fda3 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007132:	e048      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007134:	4b11      	ldr	r3, [pc, #68]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007138:	e045      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800713a:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800713c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007140:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007146:	4b09      	ldr	r3, [pc, #36]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d116      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d113      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	4a03      	ldr	r2, [pc, #12]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	637b      	str	r3, [r7, #52]	@ 0x34
 800716a:	e028      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800716c:	44020c00 	.word	0x44020c00
 8007170:	03d09000 	.word	0x03d09000
 8007174:	003d0900 	.word	0x003d0900
 8007178:	017d7840 	.word	0x017d7840
 800717c:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007180:	4b95      	ldr	r3, [pc, #596]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800718c:	d106      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 800718e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007194:	d102      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007196:	4b91      	ldr	r3, [pc, #580]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007198:	637b      	str	r3, [r7, #52]	@ 0x34
 800719a:	e010      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800719c:	4b8e      	ldr	r3, [pc, #568]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071a8:	d106      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071b0:	d102      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071b2:	4b8b      	ldr	r3, [pc, #556]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b6:	e002      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80071c0:	2300      	movs	r3, #0
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071c4:	bf00      	nop
          }
        }
        break;
 80071c6:	e200      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80071c8:	4b83      	ldr	r3, [pc, #524]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80071ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80071d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071da:	d031      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e2:	d866      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071e8:	d027      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ee:	d860      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	2b80      	cmp	r3, #128	@ 0x80
 80071f4:	d019      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	2b80      	cmp	r3, #128	@ 0x80
 80071fa:	d85a      	bhi.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d008      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8007208:	e053      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800720a:	f107 0320 	add.w	r3, r7, #32
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fa5c 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007218:	e04e      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fbbe 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007228:	e046      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fd20 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007238:	e03e      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800723a:	4b6a      	ldr	r3, [pc, #424]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723e:	e03b      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007240:	4b65      	ldr	r3, [pc, #404]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007246:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800724a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800724c:	4b62      	ldr	r3, [pc, #392]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d10c      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800725e:	4b5e      	ldr	r3, [pc, #376]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	4a5f      	ldr	r2, [pc, #380]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	e01e      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007272:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d102      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007288:	4b54      	ldr	r3, [pc, #336]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34
 800728c:	e010      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800728e:	4b52      	ldr	r3, [pc, #328]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729a:	d106      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a2:	d102      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072a4:	4b4e      	ldr	r3, [pc, #312]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80072a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a8:	e002      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80072b0:	e002      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072b6:	bf00      	nop
          }
        }
        break;
 80072b8:	e187      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80072ba:	4b47      	ldr	r3, [pc, #284]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072c0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80072cc:	f7fd f812 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 80072d0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80072d2:	e17a      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80072d4:	4b40      	ldr	r3, [pc, #256]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e0:	d10b      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e8:	d107      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ea:	f107 0314 	add.w	r3, r7, #20
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fb56 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f8:	e045      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80072fa:	4b37      	ldr	r3, [pc, #220]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007306:	d10b      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800730e:	d107      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007310:	f107 0308 	add.w	r3, r7, #8
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fcad 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
 800731e:	e032      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007320:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d10d      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007332:	d109      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007334:	4b28      	ldr	r3, [pc, #160]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	08db      	lsrs	r3, r3, #3
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	4a2a      	ldr	r2, [pc, #168]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	e01e      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007348:	4b23      	ldr	r3, [pc, #140]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007354:	d106      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800735c:	d102      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800735e:	4b1f      	ldr	r3, [pc, #124]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
 8007362:	e010      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007364:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007370:	d106      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007378:	d102      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 800737a:	4b19      	ldr	r3, [pc, #100]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
 800737e:	e002      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007384:	e121      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007386:	e120      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007388:	4b13      	ldr	r3, [pc, #76]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800738a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	633b      	str	r3, [r7, #48]	@ 0x30
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2b03      	cmp	r3, #3
 8007398:	d861      	bhi.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073b9 	.word	0x080073b9
 80073a8:	080073c9 	.word	0x080073c9
 80073ac:	080073ed 	.word	0x080073ed

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80073b0:	f7fc ff6e 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80073b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80073b6:	e055      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b8:	f107 0320 	add.w	r3, r7, #32
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe f985 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073c6:	e04d      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fae7 	bl	80059a0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073d6:	e045      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80073d8:	44020c00 	.word	0x44020c00
 80073dc:	003d0900 	.word	0x003d0900
 80073e0:	017d7840 	.word	0x017d7840
 80073e4:	00bb8000 	.word	0x00bb8000
 80073e8:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ec:	4b79      	ldr	r3, [pc, #484]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f8:	4b76      	ldr	r3, [pc, #472]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b02      	cmp	r3, #2
 8007402:	d10c      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800740a:	4b72      	ldr	r3, [pc, #456]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	08db      	lsrs	r3, r3, #3
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	4a70      	ldr	r2, [pc, #448]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8007416:	fa22 f303 	lsr.w	r3, r2, r3
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
 800741c:	e01e      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800741e:	4b6d      	ldr	r3, [pc, #436]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742a:	d106      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007432:	d102      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007434:	4b69      	ldr	r3, [pc, #420]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
 8007438:	e010      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800743a:	4b66      	ldr	r3, [pc, #408]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007446:	d106      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800744e:	d102      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007450:	4b63      	ldr	r3, [pc, #396]	@ (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8007452:	637b      	str	r3, [r7, #52]	@ 0x34
 8007454:	e002      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800745a:	e003      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007462:	bf00      	nop
          }
        }
        break;
 8007464:	e0b1      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007466:	4b5b      	ldr	r3, [pc, #364]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800746c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007470:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007472:	4b58      	ldr	r3, [pc, #352]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b02      	cmp	r3, #2
 800747e:	d106      	bne.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8007486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
 800748c:	e01f      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800748e:	4b51      	ldr	r3, [pc, #324]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800749c:	d106      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d103      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80074a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074aa:	e010      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80074ac:	4b49      	ldr	r3, [pc, #292]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b8:	d106      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	2b80      	cmp	r3, #128	@ 0x80
 80074be:	d103      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 80074c0:	f248 0312 	movw	r3, #32786	@ 0x8012
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	e002      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80074cc:	e07d      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80074ce:	e07c      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80074d0:	4b40      	ldr	r3, [pc, #256]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80074dc:	4b3d      	ldr	r3, [pc, #244]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074e8:	d105      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80074f0:	4b3c      	ldr	r3, [pc, #240]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f4:	e031      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80074f6:	4b37      	ldr	r3, [pc, #220]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007502:	d10a      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	2b10      	cmp	r3, #16
 8007508:	d107      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750a:	f107 0320 	add.w	r3, r7, #32
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe f8dc 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
 8007518:	e01f      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800751a:	4b2e      	ldr	r3, [pc, #184]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800751c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b02      	cmp	r3, #2
 8007526:	d106      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	2b20      	cmp	r3, #32
 800752c:	d103      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
 8007534:	e011      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007536:	4b27      	ldr	r3, [pc, #156]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800753c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007544:	d106      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	2b30      	cmp	r3, #48	@ 0x30
 800754a:	d103      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800754c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007550:	637b      	str	r3, [r7, #52]	@ 0x34
 8007552:	e002      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007558:	e037      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800755a:	e036      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800755c:	4b1d      	ldr	r3, [pc, #116]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800755e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007562:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007566:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b10      	cmp	r3, #16
 800756c:	d107      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800756e:	f107 0320 	add.w	r3, r7, #32
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe f8aa 	bl	80056cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800757c:	e025      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800757e:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758a:	d10a      	bne.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2b20      	cmp	r3, #32
 8007590:	d107      	bne.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007592:	f107 0308 	add.w	r3, r7, #8
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fb6c 	bl	8005c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a0:	e00f      	b.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ae:	d105      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2b30      	cmp	r3, #48	@ 0x30
 80075b4:	d102      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80075b6:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ba:	e002      	b.n	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80075c2:	e002      	b.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c8:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	373c      	adds	r7, #60	@ 0x3c
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd90      	pop	{r4, r7, pc}
 80075d4:	44020c00 	.word	0x44020c00
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	017d7840 	.word	0x017d7840
 80075e4:	02dc6c00 	.word	0x02dc6c00

080075e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80075f0:	4b48      	ldr	r3, [pc, #288]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a47      	ldr	r2, [pc, #284]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80075f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075fc:	f7f9 fd54 	bl	80010a8 <HAL_GetTick>
 8007600:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007602:	e008      	b.n	8007616 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007604:	f7f9 fd50 	bl	80010a8 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e07a      	b.n	800770c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007616:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007622:	4b3c      	ldr	r3, [pc, #240]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6852      	ldr	r2, [r2, #4]
 8007636:	0212      	lsls	r2, r2, #8
 8007638:	430a      	orrs	r2, r1
 800763a:	4936      	ldr	r1, [pc, #216]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	3b01      	subs	r3, #1
 8007646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	025b      	lsls	r3, r3, #9
 8007652:	b29b      	uxth	r3, r3
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	3b01      	subs	r3, #1
 800765c:	041b      	lsls	r3, r3, #16
 800765e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	3b01      	subs	r3, #1
 800766a:	061b      	lsls	r3, r3, #24
 800766c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007670:	4928      	ldr	r1, [pc, #160]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007676:	4b27      	ldr	r3, [pc, #156]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	f023 020c 	bic.w	r2, r3, #12
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	4924      	ldr	r1, [pc, #144]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007684:	4313      	orrs	r3, r2
 8007686:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007688:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	f023 0220 	bic.w	r2, r3, #32
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	491f      	ldr	r1, [pc, #124]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007696:	4313      	orrs	r3, r2
 8007698:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800769a:	4b1e      	ldr	r3, [pc, #120]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	491c      	ldr	r1, [pc, #112]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80076a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a19      	ldr	r2, [pc, #100]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80076b4:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6a12      	ldr	r2, [r2, #32]
 80076c4:	00d2      	lsls	r2, r2, #3
 80076c6:	4913      	ldr	r1, [pc, #76]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80076cc:	4b11      	ldr	r3, [pc, #68]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	4a10      	ldr	r2, [pc, #64]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076d2:	f043 0310 	orr.w	r3, r3, #16
 80076d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80076d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 80076de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076e4:	f7f9 fce0 	bl	80010a8 <HAL_GetTick>
 80076e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076ea:	e008      	b.n	80076fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076ec:	f7f9 fcdc 	bl	80010a8 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e006      	b.n	800770c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076fe:	4b05      	ldr	r3, [pc, #20]	@ (8007714 <RCCEx_PLL2_Config+0x12c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0f0      	beq.n	80076ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800770a:	2300      	movs	r3, #0

}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	44020c00 	.word	0x44020c00

08007718 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007720:	4b48      	ldr	r3, [pc, #288]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a47      	ldr	r2, [pc, #284]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800772a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800772c:	f7f9 fcbc 	bl	80010a8 <HAL_GetTick>
 8007730:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007732:	e008      	b.n	8007746 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007734:	f7f9 fcb8 	bl	80010a8 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e07a      	b.n	800783c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007746:	4b3f      	ldr	r3, [pc, #252]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007752:	4b3c      	ldr	r3, [pc, #240]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007756:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6811      	ldr	r1, [r2, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6852      	ldr	r2, [r2, #4]
 8007766:	0212      	lsls	r2, r2, #8
 8007768:	430a      	orrs	r2, r1
 800776a:	4936      	ldr	r1, [pc, #216]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 800776c:	4313      	orrs	r3, r2
 800776e:	630b      	str	r3, [r1, #48]	@ 0x30
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	3b01      	subs	r3, #1
 8007776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	3b01      	subs	r3, #1
 8007780:	025b      	lsls	r3, r3, #9
 8007782:	b29b      	uxth	r3, r3
 8007784:	431a      	orrs	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	3b01      	subs	r3, #1
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	3b01      	subs	r3, #1
 800779a:	061b      	lsls	r3, r3, #24
 800779c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077a0:	4928      	ldr	r1, [pc, #160]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077a6:	4b27      	ldr	r3, [pc, #156]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077aa:	f023 020c 	bic.w	r2, r3, #12
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	4924      	ldr	r1, [pc, #144]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80077b8:	4b22      	ldr	r3, [pc, #136]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	f023 0220 	bic.w	r2, r3, #32
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	491f      	ldr	r1, [pc, #124]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80077ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	491c      	ldr	r1, [pc, #112]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80077d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	4a19      	ldr	r2, [pc, #100]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077de:	f023 0310 	bic.w	r3, r3, #16
 80077e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80077e4:	4b17      	ldr	r3, [pc, #92]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6a12      	ldr	r2, [r2, #32]
 80077f4:	00d2      	lsls	r2, r2, #3
 80077f6:	4913      	ldr	r1, [pc, #76]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80077fc:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	4a10      	ldr	r2, [pc, #64]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007802:	f043 0310 	orr.w	r3, r3, #16
 8007806:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007808:	4b0e      	ldr	r3, [pc, #56]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a0d      	ldr	r2, [pc, #52]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 800780e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007812:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007814:	f7f9 fc48 	bl	80010a8 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800781a:	e008      	b.n	800782e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800781c:	f7f9 fc44 	bl	80010a8 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e006      	b.n	800783c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <RCCEx_PLL3_Config+0x12c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	44020c00 	.word	0x44020c00

08007848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e042      	b.n	80078e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7f9 f9f5 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2224      	movs	r2, #36	@ 0x24
 8007876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa74 	bl	8007d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8c3 	bl	8007a24 <UART_SetConfig>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e01b      	b.n	80078e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 faf3 	bl	8007ec4 <UART_CheckIdleState>
 80078de:	4603      	mov	r3, r0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	@ 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fe:	2b20      	cmp	r3, #32
 8007900:	f040 808b 	bne.w	8007a1a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Transmit+0x28>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e083      	b.n	8007a1c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791e:	2b80      	cmp	r3, #128	@ 0x80
 8007920:	d107      	bne.n	8007932 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007930:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2221      	movs	r2, #33	@ 0x21
 800793e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007942:	f7f9 fbb1 	bl	80010a8 <HAL_GetTick>
 8007946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007960:	d108      	bne.n	8007974 <HAL_UART_Transmit+0x8c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e003      	b.n	800797c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800797c:	e030      	b.n	80079e0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	@ 0x80
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fb45 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e03d      	b.n	8007a1c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	3302      	adds	r3, #2
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e007      	b.n	80079ce <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1c8      	bne.n	800797e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2200      	movs	r2, #0
 80079f4:	2140      	movs	r1, #64	@ 0x40
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fb0e 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e006      	b.n	8007a1c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e000      	b.n	8007a1c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007a1a:	2302      	movs	r3, #2
  }
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3720      	adds	r7, #32
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a28:	b094      	sub	sp, #80	@ 0x50
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4b83      	ldr	r3, [pc, #524]	@ (8007c48 <UART_SetConfig+0x224>)
 8007a3a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	497c      	ldr	r1, [pc, #496]	@ (8007c4c <UART_SetConfig+0x228>)
 8007a5c:	4019      	ands	r1, r3
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a64:	430b      	orrs	r3, r1
 8007a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	68d9      	ldr	r1, [r3, #12]
 8007a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	ea40 0301 	orr.w	r3, r0, r1
 8007a7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8007c48 <UART_SetConfig+0x224>)
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d009      	beq.n	8007aa4 <UART_SetConfig+0x80>
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4b6e      	ldr	r3, [pc, #440]	@ (8007c50 <UART_SetConfig+0x22c>)
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d004      	beq.n	8007aa4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007aae:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	f023 000f 	bic.w	r0, r3, #15
 8007ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	ea40 0301 	orr.w	r3, r0, r1
 8007ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8007c54 <UART_SetConfig+0x230>)
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d102      	bne.n	8007ae4 <UART_SetConfig+0xc0>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae2:	e032      	b.n	8007b4a <UART_SetConfig+0x126>
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8007c58 <UART_SetConfig+0x234>)
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d102      	bne.n	8007af4 <UART_SetConfig+0xd0>
 8007aee:	2302      	movs	r3, #2
 8007af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af2:	e02a      	b.n	8007b4a <UART_SetConfig+0x126>
 8007af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4b58      	ldr	r3, [pc, #352]	@ (8007c5c <UART_SetConfig+0x238>)
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d102      	bne.n	8007b04 <UART_SetConfig+0xe0>
 8007afe:	2304      	movs	r3, #4
 8007b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b02:	e022      	b.n	8007b4a <UART_SetConfig+0x126>
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b55      	ldr	r3, [pc, #340]	@ (8007c60 <UART_SetConfig+0x23c>)
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d102      	bne.n	8007b14 <UART_SetConfig+0xf0>
 8007b0e:	2308      	movs	r3, #8
 8007b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b12:	e01a      	b.n	8007b4a <UART_SetConfig+0x126>
 8007b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b52      	ldr	r3, [pc, #328]	@ (8007c64 <UART_SetConfig+0x240>)
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d102      	bne.n	8007b24 <UART_SetConfig+0x100>
 8007b1e:	2310      	movs	r3, #16
 8007b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b22:	e012      	b.n	8007b4a <UART_SetConfig+0x126>
 8007b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	4b4f      	ldr	r3, [pc, #316]	@ (8007c68 <UART_SetConfig+0x244>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d102      	bne.n	8007b34 <UART_SetConfig+0x110>
 8007b2e:	2320      	movs	r3, #32
 8007b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b32:	e00a      	b.n	8007b4a <UART_SetConfig+0x126>
 8007b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b43      	ldr	r3, [pc, #268]	@ (8007c48 <UART_SetConfig+0x224>)
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d103      	bne.n	8007b46 <UART_SetConfig+0x122>
 8007b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b44:	e001      	b.n	8007b4a <UART_SetConfig+0x126>
 8007b46:	2300      	movs	r3, #0
 8007b48:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c48 <UART_SetConfig+0x224>)
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d005      	beq.n	8007b60 <UART_SetConfig+0x13c>
 8007b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b3d      	ldr	r3, [pc, #244]	@ (8007c50 <UART_SetConfig+0x22c>)
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	f040 8088 	bne.w	8007c70 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b62:	2200      	movs	r2, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b6c:	f7fe f9ec 	bl	8005f48 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b70:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80eb 	beq.w	8007d50 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8007c6c <UART_SetConfig+0x248>)
 8007b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	4413      	add	r3, r2
 8007b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d305      	bcc.n	8007baa <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007bb0:	e048      	b.n	8007c44 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	61fa      	str	r2, [r7, #28]
 8007bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8007c6c <UART_SetConfig+0x248>)
 8007bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	617a      	str	r2, [r7, #20]
 8007bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bd4:	f7f8 fb66 	bl	80002a4 <__aeabi_uldivmod>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	020b      	lsls	r3, r1, #8
 8007bea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bee:	0202      	lsls	r2, r0, #8
 8007bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bf2:	6849      	ldr	r1, [r1, #4]
 8007bf4:	0849      	lsrs	r1, r1, #1
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	eb12 0804 	adds.w	r8, r2, r4
 8007c00:	eb43 0905 	adc.w	r9, r3, r5
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	60fa      	str	r2, [r7, #12]
 8007c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 fb45 	bl	80002a4 <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4613      	mov	r3, r2
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c28:	d308      	bcc.n	8007c3c <UART_SetConfig+0x218>
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c30:	d204      	bcs.n	8007c3c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e003      	b.n	8007c44 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007c42:	e085      	b.n	8007d50 <UART_SetConfig+0x32c>
 8007c44:	e084      	b.n	8007d50 <UART_SetConfig+0x32c>
 8007c46:	bf00      	nop
 8007c48:	44002400 	.word	0x44002400
 8007c4c:	cfff69f3 	.word	0xcfff69f3
 8007c50:	54002400 	.word	0x54002400
 8007c54:	40013800 	.word	0x40013800
 8007c58:	40004400 	.word	0x40004400
 8007c5c:	40004800 	.word	0x40004800
 8007c60:	40004c00 	.word	0x40004c00
 8007c64:	40005000 	.word	0x40005000
 8007c68:	40006400 	.word	0x40006400
 8007c6c:	08008db0 	.word	0x08008db0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c78:	d13c      	bne.n	8007cf4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c86:	f7fe f95f 	bl	8005f48 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c8a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d05e      	beq.n	8007d50 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	4a39      	ldr	r2, [pc, #228]	@ (8007d7c <UART_SetConfig+0x358>)
 8007c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca4:	005a      	lsls	r2, r3, #1
 8007ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	441a      	add	r2, r3
 8007cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cba:	2b0f      	cmp	r3, #15
 8007cbc:	d916      	bls.n	8007cec <UART_SetConfig+0x2c8>
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d212      	bcs.n	8007cec <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f023 030f 	bic.w	r3, r3, #15
 8007cce:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007ce8:	60da      	str	r2, [r3, #12]
 8007cea:	e031      	b.n	8007d50 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007cf2:	e02d      	b.n	8007d50 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	469a      	mov	sl, r3
 8007cfa:	4693      	mov	fp, r2
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	4659      	mov	r1, fp
 8007d00:	f7fe f922 	bl	8005f48 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d04:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d021      	beq.n	8007d50 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	4a1a      	ldr	r2, [pc, #104]	@ (8007d7c <UART_SetConfig+0x358>)
 8007d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	441a      	add	r2, r3
 8007d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d32:	2b0f      	cmp	r3, #15
 8007d34:	d909      	bls.n	8007d4a <UART_SetConfig+0x326>
 8007d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d3c:	d205      	bcs.n	8007d4a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e002      	b.n	8007d50 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	2201      	movs	r2, #1
 8007d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d62:	2200      	movs	r2, #0
 8007d64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d68:	2200      	movs	r2, #0
 8007d6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3750      	adds	r7, #80	@ 0x50
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08008db0 	.word	0x08008db0

08007d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e14:	f003 0310 	and.w	r3, r3, #16
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e7e:	d10a      	bne.n	8007e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b098      	sub	sp, #96	@ 0x60
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed4:	f7f9 f8e8 	bl	80010a8 <HAL_GetTick>
 8007ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d12f      	bne.n	8007f48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f88e 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d022      	beq.n	8007f48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e6      	bne.n	8007f02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e063      	b.n	8008010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d149      	bne.n	8007fea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f857 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d03c      	beq.n	8007fea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc2:	61fa      	str	r2, [r7, #28]
 8007fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	69b9      	ldr	r1, [r7, #24]
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e012      	b.n	8008010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3758      	adds	r7, #88	@ 0x58
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	e04f      	b.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d04b      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7f9 f839 	bl	80010a8 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <UART_WaitOnFlagUntilTimeout+0x30>
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e04e      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d037      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b80      	cmp	r3, #128	@ 0x80
 800805e:	d034      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d031      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d110      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2208      	movs	r2, #8
 800807a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f838 	bl	80080f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2208      	movs	r2, #8
 8008086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e029      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a4:	d111      	bne.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f81e 	bl	80080f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e00f      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69da      	ldr	r2, [r3, #28]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4013      	ands	r3, r2
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	bf0c      	ite	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	2300      	movne	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d0a0      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b095      	sub	sp, #84	@ 0x54
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800810e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
 800811a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800811e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e6      	bne.n	80080fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	61fb      	str	r3, [r7, #28]
   return(result);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008142:	f023 0301 	bic.w	r3, r3, #1
 8008146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008150:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e3      	bne.n	800812c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d118      	bne.n	800819e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60bb      	str	r3, [r7, #8]
   return(result);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f023 0310 	bic.w	r3, r3, #16
 8008180:	647b      	str	r3, [r7, #68]	@ 0x44
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800818a:	61bb      	str	r3, [r7, #24]
 800818c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6979      	ldr	r1, [r7, #20]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	613b      	str	r3, [r7, #16]
   return(result);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e6      	bne.n	800816c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80081b2:	bf00      	nop
 80081b4:	3754      	adds	r7, #84	@ 0x54
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e027      	b.n	8008224 <HAL_UARTEx_DisableFifoMode+0x66>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	@ 0x24
 80081e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0201 	bic.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008202:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008244:	2302      	movs	r3, #2
 8008246:	e02d      	b.n	80082a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2224      	movs	r2, #36	@ 0x24
 8008254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0201 	bic.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f84f 	bl	8008328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e02d      	b.n	8008320 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2224      	movs	r2, #36	@ 0x24
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0201 	bic.w	r2, r2, #1
 80082ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f811 	bl	8008328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008334:	2b00      	cmp	r3, #0
 8008336:	d108      	bne.n	800834a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008348:	e031      	b.n	80083ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800834a:	2308      	movs	r3, #8
 800834c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800834e:	2308      	movs	r3, #8
 8008350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	0e5b      	lsrs	r3, r3, #25
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	0f5b      	lsrs	r3, r3, #29
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	7b3a      	ldrb	r2, [r7, #12]
 8008376:	4911      	ldr	r1, [pc, #68]	@ (80083bc <UARTEx_SetNbDataToProcess+0x94>)
 8008378:	5c8a      	ldrb	r2, [r1, r2]
 800837a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800837e:	7b3a      	ldrb	r2, [r7, #12]
 8008380:	490f      	ldr	r1, [pc, #60]	@ (80083c0 <UARTEx_SetNbDataToProcess+0x98>)
 8008382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008384:	fb93 f3f2 	sdiv	r3, r3, r2
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	7b7a      	ldrb	r2, [r7, #13]
 8008394:	4909      	ldr	r1, [pc, #36]	@ (80083bc <UARTEx_SetNbDataToProcess+0x94>)
 8008396:	5c8a      	ldrb	r2, [r1, r2]
 8008398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800839c:	7b7a      	ldrb	r2, [r7, #13]
 800839e:	4908      	ldr	r1, [pc, #32]	@ (80083c0 <UARTEx_SetNbDataToProcess+0x98>)
 80083a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	08008dc8 	.word	0x08008dc8
 80083c0:	08008dd0 	.word	0x08008dd0

080083c4 <siprintf>:
 80083c4:	b40e      	push	{r1, r2, r3}
 80083c6:	b500      	push	{lr}
 80083c8:	b09c      	sub	sp, #112	@ 0x70
 80083ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80083d0:	9002      	str	r0, [sp, #8]
 80083d2:	9006      	str	r0, [sp, #24]
 80083d4:	9107      	str	r1, [sp, #28]
 80083d6:	9104      	str	r1, [sp, #16]
 80083d8:	4808      	ldr	r0, [pc, #32]	@ (80083fc <siprintf+0x38>)
 80083da:	4909      	ldr	r1, [pc, #36]	@ (8008400 <siprintf+0x3c>)
 80083dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e0:	9105      	str	r1, [sp, #20]
 80083e2:	a902      	add	r1, sp, #8
 80083e4:	6800      	ldr	r0, [r0, #0]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f000 f994 	bl	8008714 <_svfiprintf_r>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	b01c      	add	sp, #112	@ 0x70
 80083f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f8:	b003      	add	sp, #12
 80083fa:	4770      	bx	lr
 80083fc:	2000000c 	.word	0x2000000c
 8008400:	ffff0208 	.word	0xffff0208

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <__errno>:
 8008414:	4b01      	ldr	r3, [pc, #4]	@ (800841c <__errno+0x8>)
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	2000000c 	.word	0x2000000c

08008420 <__libc_init_array>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4d0d      	ldr	r5, [pc, #52]	@ (8008458 <__libc_init_array+0x38>)
 8008424:	2600      	movs	r6, #0
 8008426:	4c0d      	ldr	r4, [pc, #52]	@ (800845c <__libc_init_array+0x3c>)
 8008428:	1b64      	subs	r4, r4, r5
 800842a:	10a4      	asrs	r4, r4, #2
 800842c:	42a6      	cmp	r6, r4
 800842e:	d109      	bne.n	8008444 <__libc_init_array+0x24>
 8008430:	4d0b      	ldr	r5, [pc, #44]	@ (8008460 <__libc_init_array+0x40>)
 8008432:	2600      	movs	r6, #0
 8008434:	4c0b      	ldr	r4, [pc, #44]	@ (8008464 <__libc_init_array+0x44>)
 8008436:	f000 fc77 	bl	8008d28 <_init>
 800843a:	1b64      	subs	r4, r4, r5
 800843c:	10a4      	asrs	r4, r4, #2
 800843e:	42a6      	cmp	r6, r4
 8008440:	d105      	bne.n	800844e <__libc_init_array+0x2e>
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	f855 3b04 	ldr.w	r3, [r5], #4
 8008448:	3601      	adds	r6, #1
 800844a:	4798      	blx	r3
 800844c:	e7ee      	b.n	800842c <__libc_init_array+0xc>
 800844e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008452:	3601      	adds	r6, #1
 8008454:	4798      	blx	r3
 8008456:	e7f2      	b.n	800843e <__libc_init_array+0x1e>
 8008458:	08008e14 	.word	0x08008e14
 800845c:	08008e14 	.word	0x08008e14
 8008460:	08008e14 	.word	0x08008e14
 8008464:	08008e18 	.word	0x08008e18

08008468 <__retarget_lock_acquire_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_release_recursive>:
 800846a:	4770      	bx	lr

0800846c <_free_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4605      	mov	r5, r0
 8008470:	2900      	cmp	r1, #0
 8008472:	d041      	beq.n	80084f8 <_free_r+0x8c>
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f0c      	subs	r4, r1, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfb8      	it	lt
 800847e:	18e4      	addlt	r4, r4, r3
 8008480:	f000 f8e0 	bl	8008644 <__malloc_lock>
 8008484:	4a1d      	ldr	r2, [pc, #116]	@ (80084fc <_free_r+0x90>)
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	b933      	cbnz	r3, 8008498 <_free_r+0x2c>
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	6014      	str	r4, [r2, #0]
 800848e:	4628      	mov	r0, r5
 8008490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008494:	f000 b8dc 	b.w	8008650 <__malloc_unlock>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d908      	bls.n	80084ae <_free_r+0x42>
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	1821      	adds	r1, r4, r0
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf01      	itttt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	1809      	addeq	r1, r1, r0
 80084aa:	6021      	streq	r1, [r4, #0]
 80084ac:	e7ed      	b.n	800848a <_free_r+0x1e>
 80084ae:	461a      	mov	r2, r3
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	b10b      	cbz	r3, 80084b8 <_free_r+0x4c>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d9fa      	bls.n	80084ae <_free_r+0x42>
 80084b8:	6811      	ldr	r1, [r2, #0]
 80084ba:	1850      	adds	r0, r2, r1
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d10b      	bne.n	80084d8 <_free_r+0x6c>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	4401      	add	r1, r0
 80084c4:	1850      	adds	r0, r2, r1
 80084c6:	6011      	str	r1, [r2, #0]
 80084c8:	4283      	cmp	r3, r0
 80084ca:	d1e0      	bne.n	800848e <_free_r+0x22>
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	4408      	add	r0, r1
 80084d2:	6053      	str	r3, [r2, #4]
 80084d4:	6010      	str	r0, [r2, #0]
 80084d6:	e7da      	b.n	800848e <_free_r+0x22>
 80084d8:	d902      	bls.n	80084e0 <_free_r+0x74>
 80084da:	230c      	movs	r3, #12
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	e7d6      	b.n	800848e <_free_r+0x22>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf02      	ittt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	bf08      	it	eq
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	6054      	str	r4, [r2, #4]
 80084f6:	e7ca      	b.n	800848e <_free_r+0x22>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	bf00      	nop
 80084fc:	200003bc 	.word	0x200003bc

08008500 <sbrk_aligned>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4e0f      	ldr	r6, [pc, #60]	@ (8008540 <sbrk_aligned+0x40>)
 8008504:	460c      	mov	r4, r1
 8008506:	4605      	mov	r5, r0
 8008508:	6831      	ldr	r1, [r6, #0]
 800850a:	b911      	cbnz	r1, 8008512 <sbrk_aligned+0x12>
 800850c:	f000 fbaa 	bl	8008c64 <_sbrk_r>
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 fba5 	bl	8008c64 <_sbrk_r>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	d103      	bne.n	8008526 <sbrk_aligned+0x26>
 800851e:	f04f 34ff 	mov.w	r4, #4294967295
 8008522:	4620      	mov	r0, r4
 8008524:	bd70      	pop	{r4, r5, r6, pc}
 8008526:	1cc4      	adds	r4, r0, #3
 8008528:	f024 0403 	bic.w	r4, r4, #3
 800852c:	42a0      	cmp	r0, r4
 800852e:	d0f8      	beq.n	8008522 <sbrk_aligned+0x22>
 8008530:	1a21      	subs	r1, r4, r0
 8008532:	4628      	mov	r0, r5
 8008534:	f000 fb96 	bl	8008c64 <_sbrk_r>
 8008538:	3001      	adds	r0, #1
 800853a:	d1f2      	bne.n	8008522 <sbrk_aligned+0x22>
 800853c:	e7ef      	b.n	800851e <sbrk_aligned+0x1e>
 800853e:	bf00      	nop
 8008540:	200003b8 	.word	0x200003b8

08008544 <_malloc_r>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	1ccd      	adds	r5, r1, #3
 800854a:	4606      	mov	r6, r0
 800854c:	f025 0503 	bic.w	r5, r5, #3
 8008550:	3508      	adds	r5, #8
 8008552:	2d0c      	cmp	r5, #12
 8008554:	bf38      	it	cc
 8008556:	250c      	movcc	r5, #12
 8008558:	2d00      	cmp	r5, #0
 800855a:	db01      	blt.n	8008560 <_malloc_r+0x1c>
 800855c:	42a9      	cmp	r1, r5
 800855e:	d904      	bls.n	800856a <_malloc_r+0x26>
 8008560:	230c      	movs	r3, #12
 8008562:	6033      	str	r3, [r6, #0]
 8008564:	2000      	movs	r0, #0
 8008566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008640 <_malloc_r+0xfc>
 800856e:	f000 f869 	bl	8008644 <__malloc_lock>
 8008572:	f8d8 3000 	ldr.w	r3, [r8]
 8008576:	461c      	mov	r4, r3
 8008578:	bb44      	cbnz	r4, 80085cc <_malloc_r+0x88>
 800857a:	4629      	mov	r1, r5
 800857c:	4630      	mov	r0, r6
 800857e:	f7ff ffbf 	bl	8008500 <sbrk_aligned>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	4604      	mov	r4, r0
 8008586:	d158      	bne.n	800863a <_malloc_r+0xf6>
 8008588:	f8d8 4000 	ldr.w	r4, [r8]
 800858c:	4627      	mov	r7, r4
 800858e:	2f00      	cmp	r7, #0
 8008590:	d143      	bne.n	800861a <_malloc_r+0xd6>
 8008592:	2c00      	cmp	r4, #0
 8008594:	d04b      	beq.n	800862e <_malloc_r+0xea>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	4639      	mov	r1, r7
 800859a:	4630      	mov	r0, r6
 800859c:	eb04 0903 	add.w	r9, r4, r3
 80085a0:	f000 fb60 	bl	8008c64 <_sbrk_r>
 80085a4:	4581      	cmp	r9, r0
 80085a6:	d142      	bne.n	800862e <_malloc_r+0xea>
 80085a8:	6821      	ldr	r1, [r4, #0]
 80085aa:	4630      	mov	r0, r6
 80085ac:	1a6d      	subs	r5, r5, r1
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7ff ffa6 	bl	8008500 <sbrk_aligned>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d03a      	beq.n	800862e <_malloc_r+0xea>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	442b      	add	r3, r5
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	f8d8 3000 	ldr.w	r3, [r8]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	bb62      	cbnz	r2, 8008620 <_malloc_r+0xdc>
 80085c6:	f8c8 7000 	str.w	r7, [r8]
 80085ca:	e00f      	b.n	80085ec <_malloc_r+0xa8>
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	1b52      	subs	r2, r2, r5
 80085d0:	d420      	bmi.n	8008614 <_malloc_r+0xd0>
 80085d2:	2a0b      	cmp	r2, #11
 80085d4:	d917      	bls.n	8008606 <_malloc_r+0xc2>
 80085d6:	1961      	adds	r1, r4, r5
 80085d8:	42a3      	cmp	r3, r4
 80085da:	6025      	str	r5, [r4, #0]
 80085dc:	bf18      	it	ne
 80085de:	6059      	strne	r1, [r3, #4]
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	bf08      	it	eq
 80085e4:	f8c8 1000 	streq.w	r1, [r8]
 80085e8:	5162      	str	r2, [r4, r5]
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	4630      	mov	r0, r6
 80085ee:	f000 f82f 	bl	8008650 <__malloc_unlock>
 80085f2:	f104 000b 	add.w	r0, r4, #11
 80085f6:	1d23      	adds	r3, r4, #4
 80085f8:	f020 0007 	bic.w	r0, r0, #7
 80085fc:	1ac2      	subs	r2, r0, r3
 80085fe:	bf1c      	itt	ne
 8008600:	1a1b      	subne	r3, r3, r0
 8008602:	50a3      	strne	r3, [r4, r2]
 8008604:	e7af      	b.n	8008566 <_malloc_r+0x22>
 8008606:	6862      	ldr	r2, [r4, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	bf0c      	ite	eq
 800860c:	f8c8 2000 	streq.w	r2, [r8]
 8008610:	605a      	strne	r2, [r3, #4]
 8008612:	e7eb      	b.n	80085ec <_malloc_r+0xa8>
 8008614:	4623      	mov	r3, r4
 8008616:	6864      	ldr	r4, [r4, #4]
 8008618:	e7ae      	b.n	8008578 <_malloc_r+0x34>
 800861a:	463c      	mov	r4, r7
 800861c:	687f      	ldr	r7, [r7, #4]
 800861e:	e7b6      	b.n	800858e <_malloc_r+0x4a>
 8008620:	461a      	mov	r2, r3
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	42a3      	cmp	r3, r4
 8008626:	d1fb      	bne.n	8008620 <_malloc_r+0xdc>
 8008628:	2300      	movs	r3, #0
 800862a:	6053      	str	r3, [r2, #4]
 800862c:	e7de      	b.n	80085ec <_malloc_r+0xa8>
 800862e:	230c      	movs	r3, #12
 8008630:	4630      	mov	r0, r6
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	f000 f80c 	bl	8008650 <__malloc_unlock>
 8008638:	e794      	b.n	8008564 <_malloc_r+0x20>
 800863a:	6005      	str	r5, [r0, #0]
 800863c:	e7d6      	b.n	80085ec <_malloc_r+0xa8>
 800863e:	bf00      	nop
 8008640:	200003bc 	.word	0x200003bc

08008644 <__malloc_lock>:
 8008644:	4801      	ldr	r0, [pc, #4]	@ (800864c <__malloc_lock+0x8>)
 8008646:	f7ff bf0f 	b.w	8008468 <__retarget_lock_acquire_recursive>
 800864a:	bf00      	nop
 800864c:	200003b4 	.word	0x200003b4

08008650 <__malloc_unlock>:
 8008650:	4801      	ldr	r0, [pc, #4]	@ (8008658 <__malloc_unlock+0x8>)
 8008652:	f7ff bf0a 	b.w	800846a <__retarget_lock_release_recursive>
 8008656:	bf00      	nop
 8008658:	200003b4 	.word	0x200003b4

0800865c <__ssputs_r>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	461f      	mov	r7, r3
 8008662:	688e      	ldr	r6, [r1, #8]
 8008664:	4682      	mov	sl, r0
 8008666:	460c      	mov	r4, r1
 8008668:	42be      	cmp	r6, r7
 800866a:	4690      	mov	r8, r2
 800866c:	680b      	ldr	r3, [r1, #0]
 800866e:	d82d      	bhi.n	80086cc <__ssputs_r+0x70>
 8008670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008678:	d026      	beq.n	80086c8 <__ssputs_r+0x6c>
 800867a:	6965      	ldr	r5, [r4, #20]
 800867c:	6909      	ldr	r1, [r1, #16]
 800867e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008682:	eba3 0901 	sub.w	r9, r3, r1
 8008686:	1c7b      	adds	r3, r7, #1
 8008688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800868c:	444b      	add	r3, r9
 800868e:	106d      	asrs	r5, r5, #1
 8008690:	429d      	cmp	r5, r3
 8008692:	bf38      	it	cc
 8008694:	461d      	movcc	r5, r3
 8008696:	0553      	lsls	r3, r2, #21
 8008698:	d527      	bpl.n	80086ea <__ssputs_r+0x8e>
 800869a:	4629      	mov	r1, r5
 800869c:	f7ff ff52 	bl	8008544 <_malloc_r>
 80086a0:	4606      	mov	r6, r0
 80086a2:	b360      	cbz	r0, 80086fe <__ssputs_r+0xa2>
 80086a4:	464a      	mov	r2, r9
 80086a6:	6921      	ldr	r1, [r4, #16]
 80086a8:	f000 fafa 	bl	8008ca0 <memcpy>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	6126      	str	r6, [r4, #16]
 80086ba:	444e      	add	r6, r9
 80086bc:	6165      	str	r5, [r4, #20]
 80086be:	eba5 0509 	sub.w	r5, r5, r9
 80086c2:	6026      	str	r6, [r4, #0]
 80086c4:	463e      	mov	r6, r7
 80086c6:	60a5      	str	r5, [r4, #8]
 80086c8:	42be      	cmp	r6, r7
 80086ca:	d900      	bls.n	80086ce <__ssputs_r+0x72>
 80086cc:	463e      	mov	r6, r7
 80086ce:	4632      	mov	r2, r6
 80086d0:	4641      	mov	r1, r8
 80086d2:	6820      	ldr	r0, [r4, #0]
 80086d4:	f000 faac 	bl	8008c30 <memmove>
 80086d8:	68a3      	ldr	r3, [r4, #8]
 80086da:	2000      	movs	r0, #0
 80086dc:	1b9b      	subs	r3, r3, r6
 80086de:	60a3      	str	r3, [r4, #8]
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	4433      	add	r3, r6
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	462a      	mov	r2, r5
 80086ec:	f000 fae5 	bl	8008cba <_realloc_r>
 80086f0:	4606      	mov	r6, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1e0      	bne.n	80086b8 <__ssputs_r+0x5c>
 80086f6:	6921      	ldr	r1, [r4, #16]
 80086f8:	4650      	mov	r0, sl
 80086fa:	f7ff feb7 	bl	800846c <_free_r>
 80086fe:	230c      	movs	r3, #12
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	f8ca 3000 	str.w	r3, [sl]
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	e7e9      	b.n	80086e6 <__ssputs_r+0x8a>
	...

08008714 <_svfiprintf_r>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	4698      	mov	r8, r3
 800871a:	898b      	ldrh	r3, [r1, #12]
 800871c:	b09d      	sub	sp, #116	@ 0x74
 800871e:	4607      	mov	r7, r0
 8008720:	061b      	lsls	r3, r3, #24
 8008722:	460d      	mov	r5, r1
 8008724:	4614      	mov	r4, r2
 8008726:	d510      	bpl.n	800874a <_svfiprintf_r+0x36>
 8008728:	690b      	ldr	r3, [r1, #16]
 800872a:	b973      	cbnz	r3, 800874a <_svfiprintf_r+0x36>
 800872c:	2140      	movs	r1, #64	@ 0x40
 800872e:	f7ff ff09 	bl	8008544 <_malloc_r>
 8008732:	6028      	str	r0, [r5, #0]
 8008734:	6128      	str	r0, [r5, #16]
 8008736:	b930      	cbnz	r0, 8008746 <_svfiprintf_r+0x32>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b01d      	add	sp, #116	@ 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	2340      	movs	r3, #64	@ 0x40
 8008748:	616b      	str	r3, [r5, #20]
 800874a:	2300      	movs	r3, #0
 800874c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008750:	f04f 0901 	mov.w	r9, #1
 8008754:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80088f8 <_svfiprintf_r+0x1e4>
 8008758:	9309      	str	r3, [sp, #36]	@ 0x24
 800875a:	2320      	movs	r3, #32
 800875c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008760:	2330      	movs	r3, #48	@ 0x30
 8008762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008766:	4623      	mov	r3, r4
 8008768:	469a      	mov	sl, r3
 800876a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876e:	b10a      	cbz	r2, 8008774 <_svfiprintf_r+0x60>
 8008770:	2a25      	cmp	r2, #37	@ 0x25
 8008772:	d1f9      	bne.n	8008768 <_svfiprintf_r+0x54>
 8008774:	ebba 0b04 	subs.w	fp, sl, r4
 8008778:	d00b      	beq.n	8008792 <_svfiprintf_r+0x7e>
 800877a:	465b      	mov	r3, fp
 800877c:	4622      	mov	r2, r4
 800877e:	4629      	mov	r1, r5
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff ff6b 	bl	800865c <__ssputs_r>
 8008786:	3001      	adds	r0, #1
 8008788:	f000 80a7 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800878c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800878e:	445a      	add	r2, fp
 8008790:	9209      	str	r2, [sp, #36]	@ 0x24
 8008792:	f89a 3000 	ldrb.w	r3, [sl]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 809f 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800879c:	2300      	movs	r3, #0
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	f10a 0a01 	add.w	sl, sl, #1
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	9307      	str	r3, [sp, #28]
 80087aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80087b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b4:	4654      	mov	r4, sl
 80087b6:	2205      	movs	r2, #5
 80087b8:	484f      	ldr	r0, [pc, #316]	@ (80088f8 <_svfiprintf_r+0x1e4>)
 80087ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087be:	f000 fa61 	bl	8008c84 <memchr>
 80087c2:	9a04      	ldr	r2, [sp, #16]
 80087c4:	b9d8      	cbnz	r0, 80087fe <_svfiprintf_r+0xea>
 80087c6:	06d0      	lsls	r0, r2, #27
 80087c8:	bf44      	itt	mi
 80087ca:	2320      	movmi	r3, #32
 80087cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d0:	0711      	lsls	r1, r2, #28
 80087d2:	bf44      	itt	mi
 80087d4:	232b      	movmi	r3, #43	@ 0x2b
 80087d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087da:	f89a 3000 	ldrb.w	r3, [sl]
 80087de:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e0:	d015      	beq.n	800880e <_svfiprintf_r+0xfa>
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	4654      	mov	r4, sl
 80087e6:	2000      	movs	r0, #0
 80087e8:	f04f 0c0a 	mov.w	ip, #10
 80087ec:	4621      	mov	r1, r4
 80087ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f2:	3b30      	subs	r3, #48	@ 0x30
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d94b      	bls.n	8008890 <_svfiprintf_r+0x17c>
 80087f8:	b1b0      	cbz	r0, 8008828 <_svfiprintf_r+0x114>
 80087fa:	9207      	str	r2, [sp, #28]
 80087fc:	e014      	b.n	8008828 <_svfiprintf_r+0x114>
 80087fe:	eba0 0308 	sub.w	r3, r0, r8
 8008802:	46a2      	mov	sl, r4
 8008804:	fa09 f303 	lsl.w	r3, r9, r3
 8008808:	4313      	orrs	r3, r2
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	e7d2      	b.n	80087b4 <_svfiprintf_r+0xa0>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	9103      	str	r1, [sp, #12]
 8008818:	bfbb      	ittet	lt
 800881a:	425b      	neglt	r3, r3
 800881c:	f042 0202 	orrlt.w	r2, r2, #2
 8008820:	9307      	strge	r3, [sp, #28]
 8008822:	9307      	strlt	r3, [sp, #28]
 8008824:	bfb8      	it	lt
 8008826:	9204      	strlt	r2, [sp, #16]
 8008828:	7823      	ldrb	r3, [r4, #0]
 800882a:	2b2e      	cmp	r3, #46	@ 0x2e
 800882c:	d10a      	bne.n	8008844 <_svfiprintf_r+0x130>
 800882e:	7863      	ldrb	r3, [r4, #1]
 8008830:	2b2a      	cmp	r3, #42	@ 0x2a
 8008832:	d132      	bne.n	800889a <_svfiprintf_r+0x186>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	3402      	adds	r4, #2
 8008838:	1d1a      	adds	r2, r3, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008840:	9203      	str	r2, [sp, #12]
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008908 <_svfiprintf_r+0x1f4>
 8008848:	2203      	movs	r2, #3
 800884a:	7821      	ldrb	r1, [r4, #0]
 800884c:	4650      	mov	r0, sl
 800884e:	f000 fa19 	bl	8008c84 <memchr>
 8008852:	b138      	cbz	r0, 8008864 <_svfiprintf_r+0x150>
 8008854:	eba0 000a 	sub.w	r0, r0, sl
 8008858:	2240      	movs	r2, #64	@ 0x40
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	3401      	adds	r4, #1
 800885e:	4082      	lsls	r2, r0
 8008860:	4313      	orrs	r3, r2
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	2206      	movs	r2, #6
 800886a:	4824      	ldr	r0, [pc, #144]	@ (80088fc <_svfiprintf_r+0x1e8>)
 800886c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008870:	f000 fa08 	bl	8008c84 <memchr>
 8008874:	2800      	cmp	r0, #0
 8008876:	d036      	beq.n	80088e6 <_svfiprintf_r+0x1d2>
 8008878:	4b21      	ldr	r3, [pc, #132]	@ (8008900 <_svfiprintf_r+0x1ec>)
 800887a:	bb1b      	cbnz	r3, 80088c4 <_svfiprintf_r+0x1b0>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3307      	adds	r3, #7
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	3308      	adds	r3, #8
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	4433      	add	r3, r6
 800888c:	9309      	str	r3, [sp, #36]	@ 0x24
 800888e:	e76a      	b.n	8008766 <_svfiprintf_r+0x52>
 8008890:	fb0c 3202 	mla	r2, ip, r2, r3
 8008894:	460c      	mov	r4, r1
 8008896:	2001      	movs	r0, #1
 8008898:	e7a8      	b.n	80087ec <_svfiprintf_r+0xd8>
 800889a:	2300      	movs	r3, #0
 800889c:	3401      	adds	r4, #1
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	4619      	mov	r1, r3
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ac:	3a30      	subs	r2, #48	@ 0x30
 80088ae:	2a09      	cmp	r2, #9
 80088b0:	d903      	bls.n	80088ba <_svfiprintf_r+0x1a6>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0c6      	beq.n	8008844 <_svfiprintf_r+0x130>
 80088b6:	9105      	str	r1, [sp, #20]
 80088b8:	e7c4      	b.n	8008844 <_svfiprintf_r+0x130>
 80088ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80088be:	4604      	mov	r4, r0
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f0      	b.n	80088a6 <_svfiprintf_r+0x192>
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	462a      	mov	r2, r5
 80088c8:	a904      	add	r1, sp, #16
 80088ca:	4638      	mov	r0, r7
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088d0:	f3af 8000 	nop.w
 80088d4:	1c42      	adds	r2, r0, #1
 80088d6:	4606      	mov	r6, r0
 80088d8:	d1d6      	bne.n	8008888 <_svfiprintf_r+0x174>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	065b      	lsls	r3, r3, #25
 80088de:	f53f af2d 	bmi.w	800873c <_svfiprintf_r+0x28>
 80088e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088e4:	e72c      	b.n	8008740 <_svfiprintf_r+0x2c>
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	462a      	mov	r2, r5
 80088ea:	a904      	add	r1, sp, #16
 80088ec:	4638      	mov	r0, r7
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	4b04      	ldr	r3, [pc, #16]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088f2:	f000 f87d 	bl	80089f0 <_printf_i>
 80088f6:	e7ed      	b.n	80088d4 <_svfiprintf_r+0x1c0>
 80088f8:	08008dd8 	.word	0x08008dd8
 80088fc:	08008de2 	.word	0x08008de2
 8008900:	00000000 	.word	0x00000000
 8008904:	0800865d 	.word	0x0800865d
 8008908:	08008dde 	.word	0x08008dde

0800890c <_printf_common>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	4616      	mov	r6, r2
 8008912:	4698      	mov	r8, r3
 8008914:	688a      	ldr	r2, [r1, #8]
 8008916:	4607      	mov	r7, r0
 8008918:	690b      	ldr	r3, [r1, #16]
 800891a:	460c      	mov	r4, r1
 800891c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008920:	4293      	cmp	r3, r2
 8008922:	bfb8      	it	lt
 8008924:	4613      	movlt	r3, r2
 8008926:	6033      	str	r3, [r6, #0]
 8008928:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800892c:	b10a      	cbz	r2, 8008932 <_printf_common+0x26>
 800892e:	3301      	adds	r3, #1
 8008930:	6033      	str	r3, [r6, #0]
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	0699      	lsls	r1, r3, #26
 8008936:	bf42      	ittt	mi
 8008938:	6833      	ldrmi	r3, [r6, #0]
 800893a:	3302      	addmi	r3, #2
 800893c:	6033      	strmi	r3, [r6, #0]
 800893e:	6825      	ldr	r5, [r4, #0]
 8008940:	f015 0506 	ands.w	r5, r5, #6
 8008944:	d106      	bne.n	8008954 <_printf_common+0x48>
 8008946:	f104 0a19 	add.w	sl, r4, #25
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	6832      	ldr	r2, [r6, #0]
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	42ab      	cmp	r3, r5
 8008952:	dc2b      	bgt.n	80089ac <_printf_common+0xa0>
 8008954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	3b00      	subs	r3, #0
 800895c:	bf18      	it	ne
 800895e:	2301      	movne	r3, #1
 8008960:	0692      	lsls	r2, r2, #26
 8008962:	d430      	bmi.n	80089c6 <_printf_common+0xba>
 8008964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008968:	4641      	mov	r1, r8
 800896a:	4638      	mov	r0, r7
 800896c:	47c8      	blx	r9
 800896e:	3001      	adds	r0, #1
 8008970:	d023      	beq.n	80089ba <_printf_common+0xae>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	341a      	adds	r4, #26
 8008976:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800897a:	f003 0306 	and.w	r3, r3, #6
 800897e:	2b04      	cmp	r3, #4
 8008980:	bf0a      	itet	eq
 8008982:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008986:	2500      	movne	r5, #0
 8008988:	6833      	ldreq	r3, [r6, #0]
 800898a:	f04f 0600 	mov.w	r6, #0
 800898e:	bf08      	it	eq
 8008990:	1aed      	subeq	r5, r5, r3
 8008992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008996:	bf08      	it	eq
 8008998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800899c:	4293      	cmp	r3, r2
 800899e:	bfc4      	itt	gt
 80089a0:	1a9b      	subgt	r3, r3, r2
 80089a2:	18ed      	addgt	r5, r5, r3
 80089a4:	42b5      	cmp	r5, r6
 80089a6:	d11a      	bne.n	80089de <_printf_common+0xd2>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e008      	b.n	80089be <_printf_common+0xb2>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4652      	mov	r2, sl
 80089b0:	4641      	mov	r1, r8
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c8      	blx	r9
 80089b6:	3001      	adds	r0, #1
 80089b8:	d103      	bne.n	80089c2 <_printf_common+0xb6>
 80089ba:	f04f 30ff 	mov.w	r0, #4294967295
 80089be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c2:	3501      	adds	r5, #1
 80089c4:	e7c1      	b.n	800894a <_printf_common+0x3e>
 80089c6:	18e1      	adds	r1, r4, r3
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	2030      	movs	r0, #48	@ 0x30
 80089cc:	3302      	adds	r3, #2
 80089ce:	4422      	add	r2, r4
 80089d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089dc:	e7c2      	b.n	8008964 <_printf_common+0x58>
 80089de:	2301      	movs	r3, #1
 80089e0:	4622      	mov	r2, r4
 80089e2:	4641      	mov	r1, r8
 80089e4:	4638      	mov	r0, r7
 80089e6:	47c8      	blx	r9
 80089e8:	3001      	adds	r0, #1
 80089ea:	d0e6      	beq.n	80089ba <_printf_common+0xae>
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7d9      	b.n	80089a4 <_printf_common+0x98>

080089f0 <_printf_i>:
 80089f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	7e0f      	ldrb	r7, [r1, #24]
 80089f6:	4691      	mov	r9, r2
 80089f8:	4680      	mov	r8, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	2f78      	cmp	r7, #120	@ 0x78
 80089fe:	469a      	mov	sl, r3
 8008a00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a06:	d807      	bhi.n	8008a18 <_printf_i+0x28>
 8008a08:	2f62      	cmp	r7, #98	@ 0x62
 8008a0a:	d80a      	bhi.n	8008a22 <_printf_i+0x32>
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	f000 80d2 	beq.w	8008bb6 <_printf_i+0x1c6>
 8008a12:	2f58      	cmp	r7, #88	@ 0x58
 8008a14:	f000 80b9 	beq.w	8008b8a <_printf_i+0x19a>
 8008a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a20:	e03a      	b.n	8008a98 <_printf_i+0xa8>
 8008a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a26:	2b15      	cmp	r3, #21
 8008a28:	d8f6      	bhi.n	8008a18 <_printf_i+0x28>
 8008a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a30 <_printf_i+0x40>)
 8008a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a30:	08008a89 	.word	0x08008a89
 8008a34:	08008a9d 	.word	0x08008a9d
 8008a38:	08008a19 	.word	0x08008a19
 8008a3c:	08008a19 	.word	0x08008a19
 8008a40:	08008a19 	.word	0x08008a19
 8008a44:	08008a19 	.word	0x08008a19
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008a19 	.word	0x08008a19
 8008a50:	08008a19 	.word	0x08008a19
 8008a54:	08008a19 	.word	0x08008a19
 8008a58:	08008a19 	.word	0x08008a19
 8008a5c:	08008b9d 	.word	0x08008b9d
 8008a60:	08008ac7 	.word	0x08008ac7
 8008a64:	08008b57 	.word	0x08008b57
 8008a68:	08008a19 	.word	0x08008a19
 8008a6c:	08008a19 	.word	0x08008a19
 8008a70:	08008bbf 	.word	0x08008bbf
 8008a74:	08008a19 	.word	0x08008a19
 8008a78:	08008ac7 	.word	0x08008ac7
 8008a7c:	08008a19 	.word	0x08008a19
 8008a80:	08008a19 	.word	0x08008a19
 8008a84:	08008b5f 	.word	0x08008b5f
 8008a88:	6833      	ldr	r3, [r6, #0]
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6032      	str	r2, [r6, #0]
 8008a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e09d      	b.n	8008bd8 <_printf_i+0x1e8>
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	1d19      	adds	r1, r3, #4
 8008aa2:	6031      	str	r1, [r6, #0]
 8008aa4:	0606      	lsls	r6, r0, #24
 8008aa6:	d501      	bpl.n	8008aac <_printf_i+0xbc>
 8008aa8:	681d      	ldr	r5, [r3, #0]
 8008aaa:	e003      	b.n	8008ab4 <_printf_i+0xc4>
 8008aac:	0645      	lsls	r5, r0, #25
 8008aae:	d5fb      	bpl.n	8008aa8 <_printf_i+0xb8>
 8008ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ab4:	2d00      	cmp	r5, #0
 8008ab6:	da03      	bge.n	8008ac0 <_printf_i+0xd0>
 8008ab8:	232d      	movs	r3, #45	@ 0x2d
 8008aba:	426d      	negs	r5, r5
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ac0:	4859      	ldr	r0, [pc, #356]	@ (8008c28 <_printf_i+0x238>)
 8008ac2:	230a      	movs	r3, #10
 8008ac4:	e011      	b.n	8008aea <_printf_i+0xfa>
 8008ac6:	6821      	ldr	r1, [r4, #0]
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	0608      	lsls	r0, r1, #24
 8008acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ad0:	d402      	bmi.n	8008ad8 <_printf_i+0xe8>
 8008ad2:	0649      	lsls	r1, r1, #25
 8008ad4:	bf48      	it	mi
 8008ad6:	b2ad      	uxthmi	r5, r5
 8008ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	4852      	ldr	r0, [pc, #328]	@ (8008c28 <_printf_i+0x238>)
 8008ade:	bf14      	ite	ne
 8008ae0:	230a      	movne	r3, #10
 8008ae2:	2308      	moveq	r3, #8
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aea:	6866      	ldr	r6, [r4, #4]
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	60a6      	str	r6, [r4, #8]
 8008af0:	bfa2      	ittt	ge
 8008af2:	6821      	ldrge	r1, [r4, #0]
 8008af4:	f021 0104 	bicge.w	r1, r1, #4
 8008af8:	6021      	strge	r1, [r4, #0]
 8008afa:	b90d      	cbnz	r5, 8008b00 <_printf_i+0x110>
 8008afc:	2e00      	cmp	r6, #0
 8008afe:	d04b      	beq.n	8008b98 <_printf_i+0x1a8>
 8008b00:	4616      	mov	r6, r2
 8008b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b06:	fb03 5711 	mls	r7, r3, r1, r5
 8008b0a:	5dc7      	ldrb	r7, [r0, r7]
 8008b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b10:	462f      	mov	r7, r5
 8008b12:	460d      	mov	r5, r1
 8008b14:	42bb      	cmp	r3, r7
 8008b16:	d9f4      	bls.n	8008b02 <_printf_i+0x112>
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d10b      	bne.n	8008b34 <_printf_i+0x144>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	07df      	lsls	r7, r3, #31
 8008b20:	d508      	bpl.n	8008b34 <_printf_i+0x144>
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	6861      	ldr	r1, [r4, #4]
 8008b26:	4299      	cmp	r1, r3
 8008b28:	bfde      	ittt	le
 8008b2a:	2330      	movle	r3, #48	@ 0x30
 8008b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b34:	1b92      	subs	r2, r2, r6
 8008b36:	6122      	str	r2, [r4, #16]
 8008b38:	464b      	mov	r3, r9
 8008b3a:	aa03      	add	r2, sp, #12
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f8cd a000 	str.w	sl, [sp]
 8008b44:	f7ff fee2 	bl	800890c <_printf_common>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d14a      	bne.n	8008be2 <_printf_i+0x1f2>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	b004      	add	sp, #16
 8008b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	f043 0320 	orr.w	r3, r3, #32
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	2778      	movs	r7, #120	@ 0x78
 8008b60:	4832      	ldr	r0, [pc, #200]	@ (8008c2c <_printf_i+0x23c>)
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b68:	061f      	lsls	r7, r3, #24
 8008b6a:	6831      	ldr	r1, [r6, #0]
 8008b6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b70:	d402      	bmi.n	8008b78 <_printf_i+0x188>
 8008b72:	065f      	lsls	r7, r3, #25
 8008b74:	bf48      	it	mi
 8008b76:	b2ad      	uxthmi	r5, r5
 8008b78:	6031      	str	r1, [r6, #0]
 8008b7a:	07d9      	lsls	r1, r3, #31
 8008b7c:	bf44      	itt	mi
 8008b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b82:	6023      	strmi	r3, [r4, #0]
 8008b84:	b11d      	cbz	r5, 8008b8e <_printf_i+0x19e>
 8008b86:	2310      	movs	r3, #16
 8008b88:	e7ac      	b.n	8008ae4 <_printf_i+0xf4>
 8008b8a:	4827      	ldr	r0, [pc, #156]	@ (8008c28 <_printf_i+0x238>)
 8008b8c:	e7e9      	b.n	8008b62 <_printf_i+0x172>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f023 0320 	bic.w	r3, r3, #32
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	e7f6      	b.n	8008b86 <_printf_i+0x196>
 8008b98:	4616      	mov	r6, r2
 8008b9a:	e7bd      	b.n	8008b18 <_printf_i+0x128>
 8008b9c:	6833      	ldr	r3, [r6, #0]
 8008b9e:	6825      	ldr	r5, [r4, #0]
 8008ba0:	1d18      	adds	r0, r3, #4
 8008ba2:	6961      	ldr	r1, [r4, #20]
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	062e      	lsls	r6, r5, #24
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	d501      	bpl.n	8008bb0 <_printf_i+0x1c0>
 8008bac:	6019      	str	r1, [r3, #0]
 8008bae:	e002      	b.n	8008bb6 <_printf_i+0x1c6>
 8008bb0:	0668      	lsls	r0, r5, #25
 8008bb2:	d5fb      	bpl.n	8008bac <_printf_i+0x1bc>
 8008bb4:	8019      	strh	r1, [r3, #0]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4616      	mov	r6, r2
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	e7bc      	b.n	8008b38 <_printf_i+0x148>
 8008bbe:	6833      	ldr	r3, [r6, #0]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	6032      	str	r2, [r6, #0]
 8008bc6:	681e      	ldr	r6, [r3, #0]
 8008bc8:	6862      	ldr	r2, [r4, #4]
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 f85a 	bl	8008c84 <memchr>
 8008bd0:	b108      	cbz	r0, 8008bd6 <_printf_i+0x1e6>
 8008bd2:	1b80      	subs	r0, r0, r6
 8008bd4:	6060      	str	r0, [r4, #4]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008be0:	e7aa      	b.n	8008b38 <_printf_i+0x148>
 8008be2:	6923      	ldr	r3, [r4, #16]
 8008be4:	4632      	mov	r2, r6
 8008be6:	4649      	mov	r1, r9
 8008be8:	4640      	mov	r0, r8
 8008bea:	47d0      	blx	sl
 8008bec:	3001      	adds	r0, #1
 8008bee:	d0ad      	beq.n	8008b4c <_printf_i+0x15c>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	079b      	lsls	r3, r3, #30
 8008bf4:	d413      	bmi.n	8008c1e <_printf_i+0x22e>
 8008bf6:	68e0      	ldr	r0, [r4, #12]
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	bfb8      	it	lt
 8008bfe:	4618      	movlt	r0, r3
 8008c00:	e7a6      	b.n	8008b50 <_printf_i+0x160>
 8008c02:	2301      	movs	r3, #1
 8008c04:	4632      	mov	r2, r6
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	47d0      	blx	sl
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d09d      	beq.n	8008b4c <_printf_i+0x15c>
 8008c10:	3501      	adds	r5, #1
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	9903      	ldr	r1, [sp, #12]
 8008c16:	1a5b      	subs	r3, r3, r1
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	dcf2      	bgt.n	8008c02 <_printf_i+0x212>
 8008c1c:	e7eb      	b.n	8008bf6 <_printf_i+0x206>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	f104 0619 	add.w	r6, r4, #25
 8008c24:	e7f5      	b.n	8008c12 <_printf_i+0x222>
 8008c26:	bf00      	nop
 8008c28:	08008de9 	.word	0x08008de9
 8008c2c:	08008dfa 	.word	0x08008dfa

08008c30 <memmove>:
 8008c30:	4288      	cmp	r0, r1
 8008c32:	b510      	push	{r4, lr}
 8008c34:	eb01 0402 	add.w	r4, r1, r2
 8008c38:	d902      	bls.n	8008c40 <memmove+0x10>
 8008c3a:	4284      	cmp	r4, r0
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	d807      	bhi.n	8008c50 <memmove+0x20>
 8008c40:	1e43      	subs	r3, r0, #1
 8008c42:	42a1      	cmp	r1, r4
 8008c44:	d008      	beq.n	8008c58 <memmove+0x28>
 8008c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c4e:	e7f8      	b.n	8008c42 <memmove+0x12>
 8008c50:	4402      	add	r2, r0
 8008c52:	4601      	mov	r1, r0
 8008c54:	428a      	cmp	r2, r1
 8008c56:	d100      	bne.n	8008c5a <memmove+0x2a>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c62:	e7f7      	b.n	8008c54 <memmove+0x24>

08008c64 <_sbrk_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	2300      	movs	r3, #0
 8008c68:	4d05      	ldr	r5, [pc, #20]	@ (8008c80 <_sbrk_r+0x1c>)
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f8 f88c 	bl	8000d8c <_sbrk>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_sbrk_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_sbrk_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	200003b0 	.word	0x200003b0

08008c84 <memchr>:
 8008c84:	b2c9      	uxtb	r1, r1
 8008c86:	4603      	mov	r3, r0
 8008c88:	4402      	add	r2, r0
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	d101      	bne.n	8008c96 <memchr+0x12>
 8008c92:	2000      	movs	r0, #0
 8008c94:	e003      	b.n	8008c9e <memchr+0x1a>
 8008c96:	7804      	ldrb	r4, [r0, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	428c      	cmp	r4, r1
 8008c9c:	d1f6      	bne.n	8008c8c <memchr+0x8>
 8008c9e:	bd10      	pop	{r4, pc}

08008ca0 <memcpy>:
 8008ca0:	440a      	add	r2, r1
 8008ca2:	1e43      	subs	r3, r0, #1
 8008ca4:	4291      	cmp	r1, r2
 8008ca6:	d100      	bne.n	8008caa <memcpy+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	b510      	push	{r4, lr}
 8008cac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb0:	4291      	cmp	r1, r2
 8008cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cb6:	d1f9      	bne.n	8008cac <memcpy+0xc>
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <_realloc_r>:
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b921      	cbnz	r1, 8008cd0 <_realloc_r+0x16>
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	f7ff bc3a 	b.w	8008544 <_malloc_r>
 8008cd0:	b92a      	cbnz	r2, 8008cde <_realloc_r+0x24>
 8008cd2:	f7ff fbcb 	bl	800846c <_free_r>
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	4620      	mov	r0, r4
 8008cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cde:	f000 f81a 	bl	8008d16 <_malloc_usable_size_r>
 8008ce2:	4285      	cmp	r5, r0
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	d802      	bhi.n	8008cee <_realloc_r+0x34>
 8008ce8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008cec:	d8f4      	bhi.n	8008cd8 <_realloc_r+0x1e>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	f7ff fc27 	bl	8008544 <_malloc_r>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d0ec      	beq.n	8008cd6 <_realloc_r+0x1c>
 8008cfc:	42b5      	cmp	r5, r6
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	bf28      	it	cs
 8008d04:	4632      	movcs	r2, r6
 8008d06:	f7ff ffcb 	bl	8008ca0 <memcpy>
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	463c      	mov	r4, r7
 8008d10:	f7ff fbac 	bl	800846c <_free_r>
 8008d14:	e7e0      	b.n	8008cd8 <_realloc_r+0x1e>

08008d16 <_malloc_usable_size_r>:
 8008d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1a:	1f18      	subs	r0, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfbc      	itt	lt
 8008d20:	580b      	ldrlt	r3, [r1, r0]
 8008d22:	18c0      	addlt	r0, r0, r3
 8008d24:	4770      	bx	lr
	...

08008d28 <_init>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr

08008d34 <_fini>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr
