
prueba_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af0  08004af0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004af4  08004af4  00005af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004af8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  2000005c  08004b54  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08004b54  000063b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c233  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cda  00000000  00000000  000122bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00013fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000763  00000000  00000000  00014948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d187  00000000  00000000  000150ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c82f  00000000  00000000  00032232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b68b3  00000000  00000000  0003ea61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000f5358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f82d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004754 	.word	0x08004754

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004754 	.word	0x08004754

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <process_gps_data>:
#include <stdio.h>
#include <stdlib.h>


// Procesado del texto, identificación por líneas
void process_gps_data(char *uart_buffer, GPGGA_Data *data) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0a2      	sub	sp, #136	@ 0x88
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    char *line;
    char *next_line = uart_buffer;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    char line_buffer[120];  // Asumiendo que ninguna línea excede los 120 caracteres

    while ((line = strtok_r(next_line, "\r\n", &next_line))) {
 80005d0:	e071      	b.n	80006b6 <process_gps_data+0xf6>
        if (strstr(line, "$GPGGA") == line) {  // Verificar si la línea contiene GPGGA
 80005d2:	4943      	ldr	r1, [pc, #268]	@ (80006e0 <process_gps_data+0x120>)
 80005d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80005d8:	f002 ffb3 	bl	8003542 <strstr>
 80005dc:	4602      	mov	r2, r0
 80005de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d112      	bne.n	800060c <process_gps_data+0x4c>
        	snprintf(line_buffer, sizeof(line_buffer), "GPGGA Data received: %s", line);
 80005e6:	f107 0008 	add.w	r0, r7, #8
 80005ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005ee:	4a3d      	ldr	r2, [pc, #244]	@ (80006e4 <process_gps_data+0x124>)
 80005f0:	2178      	movs	r1, #120	@ 0x78
 80005f2:	f002 fef3 	bl	80033dc <sniprintf>
        	parse_gpgga(line, data);
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80005fc:	f000 f884 	bl	8000708 <parse_gpgga>
            print(line_buffer);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f000 faef 	bl	8000be8 <print>
 800060a:	e054      	b.n	80006b6 <process_gps_data+0xf6>
        } else if (strstr(line, "$GPRMC") == line) {  // Verificar si la línea contiene GPRMC
 800060c:	4936      	ldr	r1, [pc, #216]	@ (80006e8 <process_gps_data+0x128>)
 800060e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000612:	f002 ff96 	bl	8003542 <strstr>
 8000616:	4602      	mov	r2, r0
 8000618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800061c:	4293      	cmp	r3, r2
 800061e:	d10d      	bne.n	800063c <process_gps_data+0x7c>
            snprintf(line_buffer, sizeof(line_buffer), "GPRMC Data received: %s", line);
 8000620:	f107 0008 	add.w	r0, r7, #8
 8000624:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <process_gps_data+0x12c>)
 800062a:	2178      	movs	r1, #120	@ 0x78
 800062c:	f002 fed6 	bl	80033dc <sniprintf>
            print(line_buffer);
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fad7 	bl	8000be8 <print>
 800063a:	e03c      	b.n	80006b6 <process_gps_data+0xf6>
        }else if (strstr(line, "$GPGSA") == line) {  // Verificar si la línea contiene GPRMC
 800063c:	492c      	ldr	r1, [pc, #176]	@ (80006f0 <process_gps_data+0x130>)
 800063e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000642:	f002 ff7e 	bl	8003542 <strstr>
 8000646:	4602      	mov	r2, r0
 8000648:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800064c:	4293      	cmp	r3, r2
 800064e:	d10d      	bne.n	800066c <process_gps_data+0xac>
            snprintf(line_buffer, sizeof(line_buffer), "GPGSA Data received: %s", line);
 8000650:	f107 0008 	add.w	r0, r7, #8
 8000654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000658:	4a26      	ldr	r2, [pc, #152]	@ (80006f4 <process_gps_data+0x134>)
 800065a:	2178      	movs	r1, #120	@ 0x78
 800065c:	f002 febe 	bl	80033dc <sniprintf>
            print(line_buffer);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fabf 	bl	8000be8 <print>
 800066a:	e024      	b.n	80006b6 <process_gps_data+0xf6>
        }else if (strstr(line, "$GPGSV") == line) {  // Verificar si la línea contiene GPRMC
 800066c:	4922      	ldr	r1, [pc, #136]	@ (80006f8 <process_gps_data+0x138>)
 800066e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000672:	f002 ff66 	bl	8003542 <strstr>
 8000676:	4602      	mov	r2, r0
 8000678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800067c:	4293      	cmp	r3, r2
 800067e:	d10d      	bne.n	800069c <process_gps_data+0xdc>
            snprintf(line_buffer, sizeof(line_buffer), "GPGSV Data received: %s", line);
 8000680:	f107 0008 	add.w	r0, r7, #8
 8000684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000688:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <process_gps_data+0x13c>)
 800068a:	2178      	movs	r1, #120	@ 0x78
 800068c:	f002 fea6 	bl	80033dc <sniprintf>
            print(line_buffer);
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	4618      	mov	r0, r3
 8000696:	f000 faa7 	bl	8000be8 <print>
 800069a:	e00c      	b.n	80006b6 <process_gps_data+0xf6>
        } else {
        	snprintf(line_buffer, sizeof(line_buffer), "Data not identified: %s", line);
 800069c:	f107 0008 	add.w	r0, r7, #8
 80006a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <process_gps_data+0x140>)
 80006a6:	2178      	movs	r1, #120	@ 0x78
 80006a8:	f002 fe98 	bl	80033dc <sniprintf>
        	print(line_buffer);
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fa99 	bl	8000be8 <print>
    while ((line = strtok_r(next_line, "\r\n", &next_line))) {
 80006b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80006ba:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80006be:	4911      	ldr	r1, [pc, #68]	@ (8000704 <process_gps_data+0x144>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 ff3b 	bl	800353c <strtok_r>
 80006c6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 80006ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f47f af7f 	bne.w	80005d2 <process_gps_data+0x12>
        }
    }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3788      	adds	r7, #136	@ 0x88
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	0800476c 	.word	0x0800476c
 80006e4:	08004774 	.word	0x08004774
 80006e8:	0800478c 	.word	0x0800478c
 80006ec:	08004794 	.word	0x08004794
 80006f0:	080047ac 	.word	0x080047ac
 80006f4:	080047b4 	.word	0x080047b4
 80006f8:	080047cc 	.word	0x080047cc
 80006fc:	080047d4 	.word	0x080047d4
 8000700:	080047ec 	.word	0x080047ec
 8000704:	08004804 	.word	0x08004804

08000708 <parse_gpgga>:

// Función para parsear la trama GPGGA
void parse_gpgga(char *gpgga_sentence, GPGGA_Data *data) {
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b0af      	sub	sp, #188	@ 0xbc
 800070c:	af0a      	add	r7, sp, #40	@ 0x28
 800070e:	6178      	str	r0, [r7, #20]
 8000710:	6139      	str	r1, [r7, #16]
    // "$GPGGA,202530.00,5109.0262,N,11401.8407,W,5,40,0.5,1097.36,M,-17.00,M,18,TSTR*61"
    // "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f,%c"

    // Utilizamos sscanf para extraer los campos de la trama
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
           data->time, data->latitude, &data->lat_direction, data->longitude,
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	f103 0c0b 	add.w	ip, r3, #11
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	3315      	adds	r3, #21
           data->time, data->latitude, &data->lat_direction, data->longitude,
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	3216      	adds	r2, #22
    sscanf(gpgga_sentence, "$GPGGA,%[^,],%[^,],%c,%[^,],%c,%d,%d,%[^,],%[^,],%c,%[^,],%c",
 8000724:	6939      	ldr	r1, [r7, #16]
 8000726:	3121      	adds	r1, #33	@ 0x21
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	6938      	ldr	r0, [r7, #16]
 800072c:	3024      	adds	r0, #36	@ 0x24
 800072e:	693c      	ldr	r4, [r7, #16]
 8000730:	3428      	adds	r4, #40	@ 0x28
 8000732:	693d      	ldr	r5, [r7, #16]
 8000734:	352c      	adds	r5, #44	@ 0x2c
 8000736:	693e      	ldr	r6, [r7, #16]
 8000738:	3634      	adds	r6, #52	@ 0x34
 800073a:	6939      	ldr	r1, [r7, #16]
 800073c:	313c      	adds	r1, #60	@ 0x3c
 800073e:	6079      	str	r1, [r7, #4]
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	313d      	adds	r1, #61	@ 0x3d
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	6939      	ldr	r1, [r7, #16]
 8000748:	3145      	adds	r1, #69	@ 0x45
 800074a:	9109      	str	r1, [sp, #36]	@ 0x24
 800074c:	6839      	ldr	r1, [r7, #0]
 800074e:	9108      	str	r1, [sp, #32]
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	9107      	str	r1, [sp, #28]
 8000754:	9606      	str	r6, [sp, #24]
 8000756:	9505      	str	r5, [sp, #20]
 8000758:	9404      	str	r4, [sp, #16]
 800075a:	9003      	str	r0, [sp, #12]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	9102      	str	r1, [sp, #8]
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4663      	mov	r3, ip
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4945      	ldr	r1, [pc, #276]	@ (8000880 <parse_gpgga+0x178>)
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f002 fe8a 	bl	8003484 <siscanf>
           &data->hdop, &data->altitude, &data->altitude_units,
           &data->geoid_height, &data->geoid_units);

    // Se puede poner los siguiente para que lo muestre por terminal

    print(". . .Parsing . . .");
 8000770:	4844      	ldr	r0, [pc, #272]	@ (8000884 <parse_gpgga+0x17c>)
 8000772:	f000 fa39 	bl	8000be8 <print>
    char print_buffer[120];
    snprintf(print_buffer, sizeof(print_buffer), "Time: %s", data->time);
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	f107 0018 	add.w	r0, r7, #24
 800077c:	4a42      	ldr	r2, [pc, #264]	@ (8000888 <parse_gpgga+0x180>)
 800077e:	2178      	movs	r1, #120	@ 0x78
 8000780:	f002 fe2c 	bl	80033dc <sniprintf>
    print(print_buffer);
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fa2d 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Latitude: %s %c", data->latitude, data->lat_direction);
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	f103 020b 	add.w	r2, r3, #11
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	7d5b      	ldrb	r3, [r3, #21]
 8000798:	f107 0018 	add.w	r0, r7, #24
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4613      	mov	r3, r2
 80007a0:	4a3a      	ldr	r2, [pc, #232]	@ (800088c <parse_gpgga+0x184>)
 80007a2:	2178      	movs	r1, #120	@ 0x78
 80007a4:	f002 fe1a 	bl	80033dc <sniprintf>
    print(print_buffer);
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fa1b 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Longitude: %s %c", data->longitude, data->lon_direction);
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	f103 0216 	add.w	r2, r3, #22
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007be:	f107 0018 	add.w	r0, r7, #24
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	4613      	mov	r3, r2
 80007c6:	4a32      	ldr	r2, [pc, #200]	@ (8000890 <parse_gpgga+0x188>)
 80007c8:	2178      	movs	r1, #120	@ 0x78
 80007ca:	f002 fe07 	bl	80033dc <sniprintf>
    print(print_buffer);
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fa08 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Fix Quality: %d", data->fix_quality);
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007dc:	f107 0018 	add.w	r0, r7, #24
 80007e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000894 <parse_gpgga+0x18c>)
 80007e2:	2178      	movs	r1, #120	@ 0x78
 80007e4:	f002 fdfa 	bl	80033dc <sniprintf>
    print(print_buffer);
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f9fb 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Satellites: %d", data->satellites);
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f6:	f107 0018 	add.w	r0, r7, #24
 80007fa:	4a27      	ldr	r2, [pc, #156]	@ (8000898 <parse_gpgga+0x190>)
 80007fc:	2178      	movs	r1, #120	@ 0x78
 80007fe:	f002 fded 	bl	80033dc <sniprintf>
    print(print_buffer);
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f9ee 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "HDOP: %s", data->hdop);
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	332c      	adds	r3, #44	@ 0x2c
 8000810:	f107 0018 	add.w	r0, r7, #24
 8000814:	4a21      	ldr	r2, [pc, #132]	@ (800089c <parse_gpgga+0x194>)
 8000816:	2178      	movs	r1, #120	@ 0x78
 8000818:	f002 fde0 	bl	80033dc <sniprintf>
    print(print_buffer);
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f9e1 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Altitude: %s %c", data->altitude, data->altitude_units);
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000832:	f107 0018 	add.w	r0, r7, #24
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	4613      	mov	r3, r2
 800083a:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <parse_gpgga+0x198>)
 800083c:	2178      	movs	r1, #120	@ 0x78
 800083e:	f002 fdcd 	bl	80033dc <sniprintf>
    print(print_buffer);
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f9ce 	bl	8000be8 <print>
    snprintf(print_buffer, sizeof(print_buffer), "Geoid Height: %s %c", data->geoid_height, data->geoid_units);
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	f103 023d 	add.w	r2, r3, #61	@ 0x3d
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000858:	f107 0018 	add.w	r0, r7, #24
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4613      	mov	r3, r2
 8000860:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <parse_gpgga+0x19c>)
 8000862:	2178      	movs	r1, #120	@ 0x78
 8000864:	f002 fdba 	bl	80033dc <sniprintf>
    print(print_buffer);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9bb 	bl	8000be8 <print>
    print(". . . Finish parsing . . . ");
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <parse_gpgga+0x1a0>)
 8000874:	f000 f9b8 	bl	8000be8 <print>

}
 8000878:	bf00      	nop
 800087a:	3794      	adds	r7, #148	@ 0x94
 800087c:	46bd      	mov	sp, r7
 800087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000880:	08004808 	.word	0x08004808
 8000884:	08004848 	.word	0x08004848
 8000888:	0800485c 	.word	0x0800485c
 800088c:	08004868 	.word	0x08004868
 8000890:	08004878 	.word	0x08004878
 8000894:	0800488c 	.word	0x0800488c
 8000898:	0800489c 	.word	0x0800489c
 800089c:	080048ac 	.word	0x080048ac
 80008a0:	080048b8 	.word	0x080048b8
 80008a4:	080048c8 	.word	0x080048c8
 80008a8:	080048dc 	.word	0x080048dc

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	@ 0x50
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fb1c 	bl	8000eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f83b 	bl	8000930 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  print("Initialization complete");
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <main+0x70>)
 80008bc:	f000 f994 	bl	8000be8 <print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_GPIO_Init();
 80008c0:	f000 f91a 	bl	8000af8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80008c4:	f000 f8cc 	bl	8000a60 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80008c8:	f000 f87e 	bl	80009c8 <MX_UART4_Init>
    memset(uart_gps, 0, sizeof(uart_gps));  // Limpiar buffer antes de recibir datos
 80008cc:	2264      	movs	r2, #100	@ 0x64
 80008ce:	2100      	movs	r1, #0
 80008d0:	4813      	ldr	r0, [pc, #76]	@ (8000920 <main+0x74>)
 80008d2:	f002 fe03 	bl	80034dc <memset>
    HAL_StatusTypeDef result = HAL_UART_Receive(&huart4, (uint8_t*) uart_gps, sizeof(uart_gps) - 1, 1000);  // Intentar recibir datos
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	2263      	movs	r2, #99	@ 0x63
 80008dc:	4910      	ldr	r1, [pc, #64]	@ (8000920 <main+0x74>)
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <main+0x78>)
 80008e0:	f001 fec6 	bl	8002670 <HAL_UART_Receive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (result == HAL_OK) {
 80008ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10c      	bne.n	800090c <main+0x60>
		uart_gps[sizeof(uart_gps) - 1] = '\0';  // Asegurar terminación nula
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <main+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
		print("Data received:");
 80008fa:	480b      	ldr	r0, [pc, #44]	@ (8000928 <main+0x7c>)
 80008fc:	f000 f974 	bl	8000be8 <print>
		GPGGA_Data data;
		process_gps_data(uart_gps, &data);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	@ (8000920 <main+0x74>)
 8000906:	f7ff fe5b 	bl	80005c0 <process_gps_data>
 800090a:	e002      	b.n	8000912 <main+0x66>
		// ahora en data tienes los datos de GPGGA, que son los importantes
		// cuando el gps devuelve el string gpgga sin apenas datos aparecen resultados sin sentido en data
		//print(uart_gps);  // Opcional: Imprimir todos los datos recibidos
	} else {
		print("No data received or error occurred");
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <main+0x80>)
 800090e:	f000 f96b 	bl	8000be8 <print>
	}
	// Reiniciar la recepción
	//HAL_UART_Receive_IT(&huart4, (uint8_t*)uart_gps, sizeof(uart_gps) - 1);


    HAL_Delay(2000);  // Esperar 1 segundo antes de la siguiente iteración
 8000912:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000916:	f000 fb5b 	bl	8000fd0 <HAL_Delay>
  {
 800091a:	e7d1      	b.n	80008c0 <main+0x14>
 800091c:	080048f8 	.word	0x080048f8
 8000920:	20000204 	.word	0x20000204
 8000924:	20000078 	.word	0x20000078
 8000928:	08004910 	.word	0x08004910
 800092c:	08004920 	.word	0x08004920

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2238      	movs	r2, #56	@ 0x38
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fdcc 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fddc 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800096e:	2304      	movs	r3, #4
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000972:	2355      	movs	r3, #85	@ 0x55
 8000974:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097a:	2302      	movs	r3, #2
 800097c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fe76 	bl	8001678 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000992:	f000 f947 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099a:	2303      	movs	r3, #3
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2104      	movs	r1, #4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f974 	bl	8001c9c <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009ba:	f000 f933 	bl	8000c24 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	@ 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_UART4_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_UART4_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a12:	f001 fd4f 	bl	80024b4 <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f902 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a24:	f002 fc10 	bl	8003248 <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f8f9 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a36:	f002 fc45 	bl	80032c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f8f0 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_UART4_Init+0x90>)
 8000a46:	f002 fbc6 	bl	80031d6 <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f8e8 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000078 	.word	0x20000078
 8000a5c:	40004c00 	.word	0x40004c00

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000aaa:	f001 fd03 	bl	80024b4 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8b6 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000abc:	f002 fbc4 	bl	8003248 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f8ad 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000ace:	f002 fbf9 	bl	80032c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f8a4 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_USART2_UART_Init+0x90>)
 8000ade:	f002 fb7a 	bl	80031d6 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f89c 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000010c 	.word	0x2000010c
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a33      	ldr	r2, [pc, #204]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b26:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4a27      	ldr	r2, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_GPIO_Init+0xe8>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f000 fcb3 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4814      	ldr	r0, [pc, #80]	@ (8000be4 <MX_GPIO_Init+0xec>)
 8000b92:	f000 fb23 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f000 fb12 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f000 fb03 	bl	80011dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000800 	.word	0x48000800

08000be8 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s\r\n", uart_buffer);
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4909      	ldr	r1, [pc, #36]	@ (8000c18 <print+0x30>)
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <print+0x34>)
 8000bf6:	f002 fc25 	bl	8003444 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <print+0x34>)
 8000bfc:	f7ff fb10 	bl	8000220 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	4904      	ldr	r1, [pc, #16]	@ (8000c1c <print+0x34>)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <print+0x38>)
 8000c0c:	f001 fca2 	bl	8002554 <HAL_UART_Transmit>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08004944 	.word	0x08004944
 8000c1c:	200001a0 	.word	0x200001a0
 8000c20:	2000010c 	.word	0x2000010c

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <Error_Handler+0x8>

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c66:	f000 fcf7 	bl	8001658 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	@ 0x70
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	2244      	movs	r2, #68	@ 0x44
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fc1f 	bl	80034dc <memset>
  if(huart->Instance==UART4)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8000d9c <HAL_UART_MspInit+0x124>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d137      	bne.n	8000d18 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fa0d 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ffb0 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cc4:	4b36      	ldr	r3, [pc, #216]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc8:	4a35      	ldr	r2, [pc, #212]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000d06:	2305      	movs	r3, #5
 8000d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4824      	ldr	r0, [pc, #144]	@ (8000da4 <HAL_UART_MspInit+0x12c>)
 8000d12:	f000 fa63 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d16:	e03c      	b.n	8000d92 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <HAL_UART_MspInit+0x130>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d137      	bne.n	8000d92 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 f9d0 	bl	80020d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000d3a:	f7ff ff73 	bl	8000c24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a11      	ldr	r2, [pc, #68]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_UART_MspInit+0x128>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000d6e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f000 fa25 	bl	80011dc <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	@ 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004c00 	.word	0x40004c00
 8000da0:	40021000 	.word	0x40021000
 8000da4:	48000800 	.word	0x48000800
 8000da8:	40004400 	.word	0x40004400

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f8c7 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f002 fb98 	bl	8003570 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20008000 	.word	0x20008000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000268 	.word	0x20000268
 8000e74:	200003b8 	.word	0x200003b8

08000e78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e9c:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff ffea 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	@ (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fb57 	bl	800357c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fced 	bl	80008ac <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   r0, =_estack
 8000ed4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ee0:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8000ee4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee8:	200003b8 	.word	0x200003b8

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>

08000eee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f93d 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f80e 	bl	8000f20 <HAL_InitTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e001      	b.n	8000f14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f10:	f7ff fe8e 	bl	8000c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f14:	79fb      	ldrb	r3, [r7, #7]

}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_InitTick+0x68>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d022      	beq.n	8000f7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_InitTick+0x6c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <HAL_InitTick+0x68>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f93a 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10f      	bne.n	8000f74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	d809      	bhi.n	8000f6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f62:	f000 f914 	bl	800118e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_InitTick+0x70>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e004      	b.n	8000f7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a03      	ldr	r2, [pc, #12]	@ (8000fb0 <HAL_IncTick+0x1c>)
 8000fa4:	6013      	str	r3, [r2, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	2000026c 	.word	0x2000026c
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000026c 	.word	0x2000026c

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d004      	beq.n	8000ff4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_Delay+0x40>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff4:	bf00      	nop
 8000ff6:	f7ff ffdf 	bl	8000fb8 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f7      	bhi.n	8000ff6 <HAL_Delay+0x26>
  {
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff47 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff5e 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffb2 	bl	8001134 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011ea:	e15a      	b.n	80014a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 814c 	beq.w	800149c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d017      	beq.n	80012ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80a6 	beq.w	800149c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	4b5b      	ldr	r3, [pc, #364]	@ (80014c0 <HAL_GPIO_Init+0x2e4>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001354:	4a5a      	ldr	r2, [pc, #360]	@ (80014c0 <HAL_GPIO_Init+0x2e4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6613      	str	r3, [r2, #96]	@ 0x60
 800135c:	4b58      	ldr	r3, [pc, #352]	@ (80014c0 <HAL_GPIO_Init+0x2e4>)
 800135e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001368:	4a56      	ldr	r2, [pc, #344]	@ (80014c4 <HAL_GPIO_Init+0x2e8>)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001392:	d01f      	beq.n	80013d4 <HAL_GPIO_Init+0x1f8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <HAL_GPIO_Init+0x2ec>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d019      	beq.n	80013d0 <HAL_GPIO_Init+0x1f4>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a4b      	ldr	r2, [pc, #300]	@ (80014cc <HAL_GPIO_Init+0x2f0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d013      	beq.n	80013cc <HAL_GPIO_Init+0x1f0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a4a      	ldr	r2, [pc, #296]	@ (80014d0 <HAL_GPIO_Init+0x2f4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d00d      	beq.n	80013c8 <HAL_GPIO_Init+0x1ec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a49      	ldr	r2, [pc, #292]	@ (80014d4 <HAL_GPIO_Init+0x2f8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d007      	beq.n	80013c4 <HAL_GPIO_Init+0x1e8>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <HAL_GPIO_Init+0x2fc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d101      	bne.n	80013c0 <HAL_GPIO_Init+0x1e4>
 80013bc:	2305      	movs	r3, #5
 80013be:	e00a      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013c0:	2306      	movs	r3, #6
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1fa>
 80013d4:	2300      	movs	r3, #0
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e6:	4937      	ldr	r1, [pc, #220]	@ (80014c4 <HAL_GPIO_Init+0x2e8>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_GPIO_Init+0x300>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001418:	4a30      	ldr	r2, [pc, #192]	@ (80014dc <HAL_GPIO_Init+0x300>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800141e:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x300>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001442:	4a26      	ldr	r2, [pc, #152]	@ (80014dc <HAL_GPIO_Init+0x300>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <HAL_GPIO_Init+0x300>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146c:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <HAL_GPIO_Init+0x300>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_GPIO_Init+0x300>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <HAL_GPIO_Init+0x300>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f ae9d 	bne.w	80011ec <HAL_GPIO_Init+0x10>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48001000 	.word	0x48001000
 80014d8:	48001400 	.word	0x48001400
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d141      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152a:	d131      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001532:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001544:	4a41      	ldr	r2, [pc, #260]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2232      	movs	r2, #50	@ 0x32
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3301      	adds	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001562:	e002      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b01      	subs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001576:	d102      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f2      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d158      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e057      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015a0:	e04d      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a8:	d141      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d131      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d0:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001650 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2232      	movs	r2, #50	@ 0x32
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	e002      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d102      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f2      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001616:	d112      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e011      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800162c:	e007      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40007000 	.word	0x40007000
 8001650:	20000000 	.word	0x20000000
 8001654:	431bde83 	.word	0x431bde83

08001658 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001666:	6093      	str	r3, [r2, #8]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e2fe      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4b97      	ldr	r3, [pc, #604]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b94      	ldr	r3, [pc, #592]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3e>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b8d      	ldr	r3, [pc, #564]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05b      	beq.n	8001780 <HAL_RCC_OscConfig+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d157      	bne.n	8001780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2d9      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x74>
 80016de:	4b85      	ldr	r3, [pc, #532]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a84      	ldr	r2, [pc, #528]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01d      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x98>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7b      	ldr	r2, [pc, #492]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0xb0>
 8001710:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a77      	ldr	r2, [pc, #476]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a74      	ldr	r2, [pc, #464]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d013      	beq.n	8001758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fc42 	bl	8000fb8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fc3e 	bl	8000fb8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e29e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0xc0>
 8001756:	e014      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fc2e 	bl	8000fb8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fc2a 	bl	8000fb8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e28a      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0xe8>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x136>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_OscConfig+0x13c>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11f      	bne.n	80017f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x154>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e25d      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	4946      	ldr	r1, [pc, #280]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fb9b 	bl	8000f20 <HAL_InitTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e249      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d023      	beq.n	8001844 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3c      	ldr	r2, [pc, #240]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fbd6 	bl	8000fb8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fbd2 	bl	8000fb8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e232      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001822:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	492d      	ldr	r1, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001844:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a2a      	ldr	r2, [pc, #168]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800184a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fbb2 	bl	8000fb8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fbae 	bl	8000fb8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e20e      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e0>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d041      	beq.n	800190a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fb8b 	bl	8000fb8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fb87 	bl	8000fb8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1e7      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ef      	beq.n	80018a6 <HAL_RCC_OscConfig+0x22e>
 80018c6:	e020      	b.n	800190a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fb6e 	bl	8000fb8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018de:	e00d      	b.n	80018fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fb6a 	bl	8000fb8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d906      	bls.n	80018fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ca      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ea      	bne.n	80018e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x2b4>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x2b6>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	4a7e      	ldr	r2, [pc, #504]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
 800193e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4b79      	ldr	r3, [pc, #484]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195a:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a75      	ldr	r2, [pc, #468]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff fb27 	bl	8000fb8 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff fb23 	bl	8000fb8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e183      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	4b6c      	ldr	r3, [pc, #432]	@ (8001b34 <HAL_RCC_OscConfig+0x4bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x32e>
 8001994:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a65      	ldr	r2, [pc, #404]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a4:	e024      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d110      	bne.n	80019d0 <HAL_RCC_OscConfig+0x358>
 80019ae:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ce:	e00f      	b.n	80019f0 <HAL_RCC_OscConfig+0x378>
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a56      	ldr	r2, [pc, #344]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fade 	bl	8000fb8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fada 	bl	8000fb8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e138      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x388>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fac7 	bl	8000fb8 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fac3 	bl	8000fb8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e121      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b35      	ldr	r3, [pc, #212]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fa96 	bl	8000fb8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a90:	f7ff fa92 	bl	8000fb8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0f2      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ef      	beq.n	8001a90 <HAL_RCC_OscConfig+0x418>
 8001ab0:	e01b      	b.n	8001aea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fa79 	bl	8000fb8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aca:	f7ff fa75 	bl	8000fb8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0d5      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ef      	bne.n	8001aca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80c9 	beq.w	8001c86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f000 8083 	beq.w	8001c08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d15e      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fa4f 	bl	8000fb8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	e00c      	b.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fa4b 	bl	8000fb8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d905      	bls.n	8001b38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ab      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ec      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b52      	ldr	r3, [pc, #328]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_OscConfig+0x61c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6a11      	ldr	r1, [r2, #32]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b5e:	0212      	lsls	r2, r2, #8
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b66:	0852      	lsrs	r2, r2, #1
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	0552      	lsls	r2, r2, #21
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b72:	0852      	lsrs	r2, r2, #1
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0652      	lsls	r2, r2, #25
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b7e:	06d2      	lsls	r2, r2, #27
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b3e      	ldr	r3, [pc, #248]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a3d      	ldr	r2, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa0a 	bl	8000fb8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff fa06 	bl	8000fb8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e066      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x530>
 8001bc6:	e05e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f9f0 	bl	8000fb8 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f9ec 	bl	8000fb8 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04c      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4924      	ldr	r1, [pc, #144]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	60cb      	str	r3, [r1, #12]
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e039      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d12c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d123      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d113      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	019f800c 	.word	0x019f800c
 8001c98:	feeefffc 	.word	0xfeeefffc

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e11e      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b91      	ldr	r3, [pc, #580]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 020f 	bic.w	r2, r3, #15
 8001cca:	498c      	ldr	r1, [pc, #560]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e106      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d073      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d129      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b81      	ldr	r3, [pc, #516]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0f4      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d08:	f000 f99e 	bl	8002048 <RCC_GetSysClockFreqFromPLLSource>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d93f      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d16:	4b7a      	ldr	r3, [pc, #488]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d033      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12f      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d36:	4b72      	ldr	r3, [pc, #456]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d3e:	4a70      	ldr	r2, [pc, #448]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e024      	b.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0c6      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0be      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d74:	f000 f8ce 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_RCC_ClockConfig+0x268>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d909      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d82:	4b5f      	ldr	r3, [pc, #380]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4957      	ldr	r1, [pc, #348]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7ff f906 	bl	8000fb8 <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff f902 	bl	8000fb8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e095      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b43      	ldr	r3, [pc, #268]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e10:	4a3b      	ldr	r2, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b39      	ldr	r3, [pc, #228]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4936      	ldr	r1, [pc, #216]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b80      	cmp	r3, #128	@ 0x80
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e32:	4b33      	ldr	r3, [pc, #204]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a32      	ldr	r2, [pc, #200]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d21d      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 020f 	bic.w	r2, r3, #15
 8001e54:	4929      	ldr	r1, [pc, #164]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff f8ac 	bl	8000fb8 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f8a8 	bl	8000fb8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e03b      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ed      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4917      	ldr	r1, [pc, #92]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490f      	ldr	r1, [pc, #60]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec6:	f000 f825 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490c      	ldr	r1, [pc, #48]	@ (8001f08 <HAL_RCC_ClockConfig+0x26c>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x270>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_RCC_ClockConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f818 	bl	8000f20 <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	04c4b400 	.word	0x04c4b400
 8001f08:	08004958 	.word	0x08004958
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e047      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f2c:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e03e      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f3e:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d136      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a16      	ldr	r2, [pc, #88]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f72:	68d2      	ldr	r2, [r2, #12]
 8001f74:	0a12      	lsrs	r2, r2, #8
 8001f76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e00c      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f82:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	68d2      	ldr	r2, [r2, #12]
 8001f8e:	0a12      	lsrs	r2, r2, #8
 8001f90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0e5b      	lsrs	r3, r3, #25
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e001      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fbc:	693b      	ldr	r3, [r7, #16]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	016e3600 	.word	0x016e3600

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08004968 	.word	0x08004968

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002020:	f7ff ffda 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4904      	ldr	r1, [pc, #16]	@ (8002044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08004968 	.word	0x08004968

08002048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d10c      	bne.n	8002086 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206c:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	0a12      	lsrs	r2, r2, #8
 800207a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
    break;
 8002084:	e00c      	b.n	80020a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    break;
 800209e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	016e3600 	.word	0x016e3600
 80020d0:	00f42400 	.word	0x00f42400

080020d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020dc:	2300      	movs	r3, #0
 80020de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e0:	2300      	movs	r3, #0
 80020e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8098 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b40      	ldr	r3, [pc, #256]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	4a3f      	ldr	r2, [pc, #252]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
 800210e:	4b3d      	ldr	r3, [pc, #244]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a39      	ldr	r2, [pc, #228]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212a:	f7fe ff45 	bl	8000fb8 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002130:	e009      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7fe ff41 	bl	8000fb8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
        break;
 8002144:	e005      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002146:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d159      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002162:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01e      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d019      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800217e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a0:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff01 	bl	8000fb8 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	e00b      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe fefd 	bl	8000fb8 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d902      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	74fb      	strb	r3, [r7, #19]
            break;
 80021d0:	e006      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ec      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021fc:	e008      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
 8002202:	e005      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4ba6      	ldr	r3, [pc, #664]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	4aa5      	ldr	r2, [pc, #660]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4ba0      	ldr	r3, [pc, #640]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	499c      	ldr	r1, [pc, #624]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002250:	4b97      	ldr	r3, [pc, #604]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 020c 	bic.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4994      	ldr	r1, [pc, #592]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002272:	4b8f      	ldr	r3, [pc, #572]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	498b      	ldr	r1, [pc, #556]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002294:	4b86      	ldr	r3, [pc, #536]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4983      	ldr	r1, [pc, #524]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b6:	4b7e      	ldr	r3, [pc, #504]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	497a      	ldr	r1, [pc, #488]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d8:	4b75      	ldr	r3, [pc, #468]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4972      	ldr	r1, [pc, #456]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fa:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4969      	ldr	r1, [pc, #420]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231c:	4b64      	ldr	r3, [pc, #400]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4961      	ldr	r1, [pc, #388]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233e:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	4958      	ldr	r1, [pc, #352]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	4950      	ldr	r1, [pc, #320]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002398:	4b45      	ldr	r3, [pc, #276]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	4942      	ldr	r1, [pc, #264]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a3c      	ldr	r2, [pc, #240]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023d0:	4b37      	ldr	r3, [pc, #220]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4934      	ldr	r1, [pc, #208]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002416:	4926      	ldr	r1, [pc, #152]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002426:	d105      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002428:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a20      	ldr	r2, [pc, #128]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002432:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	4918      	ldr	r1, [pc, #96]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800245e:	d105      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	490a      	ldr	r1, [pc, #40]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002496:	d105      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e042      	b.n	800254c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fe fbcd 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2224      	movs	r2, #36	@ 0x24
 80024e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0201 	bic.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fc4a 	bl	8002d98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f97b 	bl	8002800 <UART_SetConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01b      	b.n	800254c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fcc9 	bl	8002edc <UART_CheckIdleState>
 800254a:	4603      	mov	r3, r0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af02      	add	r7, sp, #8
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	2b20      	cmp	r3, #32
 800256c:	d17b      	bne.n	8002666 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_UART_Transmit+0x26>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e074      	b.n	8002668 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	@ 0x21
 800258a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258e:	f7fe fd13 	bl	8000fb8 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x6c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c8:	e030      	b.n	800262c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fd2b 	bl	8003030 <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e03d      	b.n	8002668 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3302      	adds	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e007      	b.n	800261a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1c8      	bne.n	80025ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	@ 0x40
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fcf4 	bl	8003030 <UART_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e006      	b.n	8002668 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002686:	2b20      	cmp	r3, #32
 8002688:	f040 80b5 	bne.w	80027f6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_UART_Receive+0x28>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0ad      	b.n	80027f8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	@ 0x22
 80026a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fc81 	bl	8000fb8 <HAL_GetTick>
 80026b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d0:	d10e      	bne.n	80026f0 <HAL_UART_Receive+0x80>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d105      	bne.n	80026e6 <HAL_UART_Receive+0x76>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80026e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80026e4:	e02d      	b.n	8002742 <HAL_UART_Receive+0xd2>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	@ 0xff
 80026ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80026ee:	e028      	b.n	8002742 <HAL_UART_Receive+0xd2>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_UART_Receive+0xa4>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <HAL_UART_Receive+0x9a>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	22ff      	movs	r2, #255	@ 0xff
 8002704:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002708:	e01b      	b.n	8002742 <HAL_UART_Receive+0xd2>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	227f      	movs	r2, #127	@ 0x7f
 800270e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002712:	e016      	b.n	8002742 <HAL_UART_Receive+0xd2>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800271c:	d10d      	bne.n	800273a <HAL_UART_Receive+0xca>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <HAL_UART_Receive+0xc0>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	227f      	movs	r2, #127	@ 0x7f
 800272a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800272e:	e008      	b.n	8002742 <HAL_UART_Receive+0xd2>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	223f      	movs	r2, #63	@ 0x3f
 8002734:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002738:	e003      	b.n	8002742 <HAL_UART_Receive+0xd2>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002748:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	d108      	bne.n	8002766 <HAL_UART_Receive+0xf6>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e003      	b.n	800276e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800276e:	e036      	b.n	80027de <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	2120      	movs	r1, #32
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fc58 	bl	8003030 <UART_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e032      	b.n	80027f8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10c      	bne.n	80027b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	b29a      	uxth	r2, r3
 80027a0:	8a7b      	ldrh	r3, [r7, #18]
 80027a2:	4013      	ands	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e00c      	b.n	80027cc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	8a7b      	ldrh	r3, [r7, #18]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4013      	ands	r3, r2
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1c2      	bne.n	8002770 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b08c      	sub	sp, #48	@ 0x30
 8002806:	af00      	add	r7, sp, #0
 8002808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	431a      	orrs	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4313      	orrs	r3, r2
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4bab      	ldr	r3, [pc, #684]	@ (8002adc <UART_SetConfig+0x2dc>)
 8002830:	4013      	ands	r3, r2
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002838:	430b      	orrs	r3, r1
 800283a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4aa0      	ldr	r2, [pc, #640]	@ (8002ae0 <UART_SetConfig+0x2e0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002868:	4313      	orrs	r3, r2
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002876:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002880:	430b      	orrs	r3, r1
 8002882:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	f023 010f 	bic.w	r1, r3, #15
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a91      	ldr	r2, [pc, #580]	@ (8002ae4 <UART_SetConfig+0x2e4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d125      	bne.n	80028f0 <UART_SetConfig+0xf0>
 80028a4:	4b90      	ldr	r3, [pc, #576]	@ (8002ae8 <UART_SetConfig+0x2e8>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d81a      	bhi.n	80028e8 <UART_SetConfig+0xe8>
 80028b2:	a201      	add	r2, pc, #4	@ (adr r2, 80028b8 <UART_SetConfig+0xb8>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028d9 	.word	0x080028d9
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028e1 	.word	0x080028e1
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ce:	e0d6      	b.n	8002a7e <UART_SetConfig+0x27e>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d6:	e0d2      	b.n	8002a7e <UART_SetConfig+0x27e>
 80028d8:	2304      	movs	r3, #4
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028de:	e0ce      	b.n	8002a7e <UART_SetConfig+0x27e>
 80028e0:	2308      	movs	r3, #8
 80028e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028e6:	e0ca      	b.n	8002a7e <UART_SetConfig+0x27e>
 80028e8:	2310      	movs	r3, #16
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ee:	e0c6      	b.n	8002a7e <UART_SetConfig+0x27e>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a7d      	ldr	r2, [pc, #500]	@ (8002aec <UART_SetConfig+0x2ec>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d138      	bne.n	800296c <UART_SetConfig+0x16c>
 80028fa:	4b7b      	ldr	r3, [pc, #492]	@ (8002ae8 <UART_SetConfig+0x2e8>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d82d      	bhi.n	8002964 <UART_SetConfig+0x164>
 8002908:	a201      	add	r2, pc, #4	@ (adr r2, 8002910 <UART_SetConfig+0x110>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002945 	.word	0x08002945
 8002914:	08002965 	.word	0x08002965
 8002918:	08002965 	.word	0x08002965
 800291c:	08002965 	.word	0x08002965
 8002920:	08002955 	.word	0x08002955
 8002924:	08002965 	.word	0x08002965
 8002928:	08002965 	.word	0x08002965
 800292c:	08002965 	.word	0x08002965
 8002930:	0800294d 	.word	0x0800294d
 8002934:	08002965 	.word	0x08002965
 8002938:	08002965 	.word	0x08002965
 800293c:	08002965 	.word	0x08002965
 8002940:	0800295d 	.word	0x0800295d
 8002944:	2300      	movs	r3, #0
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800294a:	e098      	b.n	8002a7e <UART_SetConfig+0x27e>
 800294c:	2302      	movs	r3, #2
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002952:	e094      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002954:	2304      	movs	r3, #4
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800295a:	e090      	b.n	8002a7e <UART_SetConfig+0x27e>
 800295c:	2308      	movs	r3, #8
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002962:	e08c      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002964:	2310      	movs	r3, #16
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800296a:	e088      	b.n	8002a7e <UART_SetConfig+0x27e>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a5f      	ldr	r2, [pc, #380]	@ (8002af0 <UART_SetConfig+0x2f0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d125      	bne.n	80029c2 <UART_SetConfig+0x1c2>
 8002976:	4b5c      	ldr	r3, [pc, #368]	@ (8002ae8 <UART_SetConfig+0x2e8>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002980:	2b30      	cmp	r3, #48	@ 0x30
 8002982:	d016      	beq.n	80029b2 <UART_SetConfig+0x1b2>
 8002984:	2b30      	cmp	r3, #48	@ 0x30
 8002986:	d818      	bhi.n	80029ba <UART_SetConfig+0x1ba>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d00a      	beq.n	80029a2 <UART_SetConfig+0x1a2>
 800298c:	2b20      	cmp	r3, #32
 800298e:	d814      	bhi.n	80029ba <UART_SetConfig+0x1ba>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <UART_SetConfig+0x19a>
 8002994:	2b10      	cmp	r3, #16
 8002996:	d008      	beq.n	80029aa <UART_SetConfig+0x1aa>
 8002998:	e00f      	b.n	80029ba <UART_SetConfig+0x1ba>
 800299a:	2300      	movs	r3, #0
 800299c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029a0:	e06d      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029a8:	e069      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029aa:	2304      	movs	r3, #4
 80029ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029b0:	e065      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029b2:	2308      	movs	r3, #8
 80029b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029b8:	e061      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029ba:	2310      	movs	r3, #16
 80029bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029c0:	e05d      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4b      	ldr	r2, [pc, #300]	@ (8002af4 <UART_SetConfig+0x2f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d125      	bne.n	8002a18 <UART_SetConfig+0x218>
 80029cc:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <UART_SetConfig+0x2e8>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d8:	d016      	beq.n	8002a08 <UART_SetConfig+0x208>
 80029da:	2bc0      	cmp	r3, #192	@ 0xc0
 80029dc:	d818      	bhi.n	8002a10 <UART_SetConfig+0x210>
 80029de:	2b80      	cmp	r3, #128	@ 0x80
 80029e0:	d00a      	beq.n	80029f8 <UART_SetConfig+0x1f8>
 80029e2:	2b80      	cmp	r3, #128	@ 0x80
 80029e4:	d814      	bhi.n	8002a10 <UART_SetConfig+0x210>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <UART_SetConfig+0x1f0>
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d008      	beq.n	8002a00 <UART_SetConfig+0x200>
 80029ee:	e00f      	b.n	8002a10 <UART_SetConfig+0x210>
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029f6:	e042      	b.n	8002a7e <UART_SetConfig+0x27e>
 80029f8:	2302      	movs	r3, #2
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029fe:	e03e      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a00:	2304      	movs	r3, #4
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a06:	e03a      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a0e:	e036      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a10:	2310      	movs	r3, #16
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a16:	e032      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a30      	ldr	r2, [pc, #192]	@ (8002ae0 <UART_SetConfig+0x2e0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d12a      	bne.n	8002a78 <UART_SetConfig+0x278>
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <UART_SetConfig+0x2e8>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a30:	d01a      	beq.n	8002a68 <UART_SetConfig+0x268>
 8002a32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a36:	d81b      	bhi.n	8002a70 <UART_SetConfig+0x270>
 8002a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a3c:	d00c      	beq.n	8002a58 <UART_SetConfig+0x258>
 8002a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a42:	d815      	bhi.n	8002a70 <UART_SetConfig+0x270>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <UART_SetConfig+0x250>
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4c:	d008      	beq.n	8002a60 <UART_SetConfig+0x260>
 8002a4e:	e00f      	b.n	8002a70 <UART_SetConfig+0x270>
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a56:	e012      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a5e:	e00e      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a60:	2304      	movs	r3, #4
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a66:	e00a      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a6e:	e006      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a70:	2310      	movs	r3, #16
 8002a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a76:	e002      	b.n	8002a7e <UART_SetConfig+0x27e>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <UART_SetConfig+0x2e0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 80a8 	bne.w	8002bda <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d834      	bhi.n	8002afc <UART_SetConfig+0x2fc>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <UART_SetConfig+0x298>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002afd 	.word	0x08002afd
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002afd 	.word	0x08002afd
 8002aa8:	08002acb 	.word	0x08002acb
 8002aac:	08002afd 	.word	0x08002afd
 8002ab0:	08002afd 	.word	0x08002afd
 8002ab4:	08002afd 	.word	0x08002afd
 8002ab8:	08002ad3 	.word	0x08002ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff fa98 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ac2:	e021      	b.n	8002b08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <UART_SetConfig+0x2f8>)
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ac8:	e01e      	b.n	8002b08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aca:	f7ff fa23 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002ace:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ad0:	e01a      	b.n	8002b08 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ad8:	e016      	b.n	8002b08 <UART_SetConfig+0x308>
 8002ada:	bf00      	nop
 8002adc:	cfff69f3 	.word	0xcfff69f3
 8002ae0:	40008000 	.word	0x40008000
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40004400 	.word	0x40004400
 8002af0:	40004800 	.word	0x40004800
 8002af4:	40004c00 	.word	0x40004c00
 8002af8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 812a 	beq.w	8002d64 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	4a9e      	ldr	r2, [pc, #632]	@ (8002d90 <UART_SetConfig+0x590>)
 8002b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d305      	bcc.n	8002b40 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d903      	bls.n	8002b48 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b46:	e10d      	b.n	8002d64 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	4a8e      	ldr	r2, [pc, #568]	@ (8002d90 <UART_SetConfig+0x590>)
 8002b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b6a:	f7fd fbb1 	bl	80002d0 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	020b      	lsls	r3, r1, #8
 8002b80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b84:	0202      	lsls	r2, r0, #8
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	6849      	ldr	r1, [r1, #4]
 8002b8a:	0849      	lsrs	r1, r1, #1
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	4605      	mov	r5, r0
 8002b92:	eb12 0804 	adds.w	r8, r2, r4
 8002b96:	eb43 0905 	adc.w	r9, r3, r5
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	469a      	mov	sl, r3
 8002ba2:	4693      	mov	fp, r2
 8002ba4:	4652      	mov	r2, sl
 8002ba6:	465b      	mov	r3, fp
 8002ba8:	4640      	mov	r0, r8
 8002baa:	4649      	mov	r1, r9
 8002bac:	f7fd fb90 	bl	80002d0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bbe:	d308      	bcc.n	8002bd2 <UART_SetConfig+0x3d2>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc6:	d204      	bcs.n	8002bd2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	e0c8      	b.n	8002d64 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002bd8:	e0c4      	b.n	8002d64 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be2:	d167      	bne.n	8002cb4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d828      	bhi.n	8002c3e <UART_SetConfig+0x43e>
 8002bec:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <UART_SetConfig+0x3f4>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c29 	.word	0x08002c29
 8002c00:	08002c3f 	.word	0x08002c3f
 8002c04:	08002c2f 	.word	0x08002c2f
 8002c08:	08002c3f 	.word	0x08002c3f
 8002c0c:	08002c3f 	.word	0x08002c3f
 8002c10:	08002c3f 	.word	0x08002c3f
 8002c14:	08002c37 	.word	0x08002c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff f9ea 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c1e:	e014      	b.n	8002c4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c20:	f7ff f9fc 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c26:	e010      	b.n	8002c4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c28:	4b5a      	ldr	r3, [pc, #360]	@ (8002d94 <UART_SetConfig+0x594>)
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c2c:	e00d      	b.n	8002c4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c2e:	f7ff f971 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c34:	e009      	b.n	8002c4a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c3c:	e005      	b.n	8002c4a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8089 	beq.w	8002d64 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	4a4e      	ldr	r2, [pc, #312]	@ (8002d90 <UART_SetConfig+0x590>)
 8002c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c64:	005a      	lsls	r2, r3, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	441a      	add	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	d916      	bls.n	8002cac <UART_SetConfig+0x4ac>
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c84:	d212      	bcs.n	8002cac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f023 030f 	bic.w	r3, r3, #15
 8002c8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	8bfb      	ldrh	r3, [r7, #30]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	8bfa      	ldrh	r2, [r7, #30]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	e05b      	b.n	8002d64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002cb2:	e057      	b.n	8002d64 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d828      	bhi.n	8002d0e <UART_SetConfig+0x50e>
 8002cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <UART_SetConfig+0x4c4>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002ce9 	.word	0x08002ce9
 8002cc8:	08002cf1 	.word	0x08002cf1
 8002ccc:	08002cf9 	.word	0x08002cf9
 8002cd0:	08002d0f 	.word	0x08002d0f
 8002cd4:	08002cff 	.word	0x08002cff
 8002cd8:	08002d0f 	.word	0x08002d0f
 8002cdc:	08002d0f 	.word	0x08002d0f
 8002ce0:	08002d0f 	.word	0x08002d0f
 8002ce4:	08002d07 	.word	0x08002d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce8:	f7ff f982 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cee:	e014      	b.n	8002d1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf0:	f7ff f994 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <UART_SetConfig+0x594>)
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cfc:	e00d      	b.n	8002d1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfe:	f7ff f909 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002d02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d04:	e009      	b.n	8002d1a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d0c:	e005      	b.n	8002d1a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d18:	bf00      	nop
    }

    if (pclk != 0U)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d021      	beq.n	8002d64 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <UART_SetConfig+0x590>)
 8002d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	441a      	add	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	d909      	bls.n	8002d5e <UART_SetConfig+0x55e>
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d50:	d205      	bcs.n	8002d5e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e002      	b.n	8002d64 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2200      	movs	r2, #0
 8002d78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002d80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3730      	adds	r7, #48	@ 0x30
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	08004970 	.word	0x08004970
 8002d94:	00f42400 	.word	0x00f42400

08002d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01a      	beq.n	8002eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e96:	d10a      	bne.n	8002eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b098      	sub	sp, #96	@ 0x60
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eec:	f7fe f864 	bl	8000fb8 <HAL_GetTick>
 8002ef0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d12f      	bne.n	8002f60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f88e 	bl	8003030 <UART_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d022      	beq.n	8002f60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e6      	bne.n	8002f1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e063      	b.n	8003028 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d149      	bne.n	8003002 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f857 	bl	8003030 <UART_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d03c      	beq.n	8003002 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	623b      	str	r3, [r7, #32]
   return(result);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e6      	bne.n	8002f88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e5      	bne.n	8002fba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e012      	b.n	8003028 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3758      	adds	r7, #88	@ 0x58
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003040:	e04f      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d04b      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fd ffb5 	bl	8000fb8 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <UART_WaitOnFlagUntilTimeout+0x30>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e04e      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d037      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b80      	cmp	r3, #128	@ 0x80
 8003076:	d034      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b40      	cmp	r3, #64	@ 0x40
 800307c:	d031      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d110      	bne.n	80030ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2208      	movs	r2, #8
 8003092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f838 	bl	800310a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2208      	movs	r2, #8
 800309e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e029      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030bc:	d111      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f81e 	bl	800310a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e00f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d0a0      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800310a:	b480      	push	{r7}
 800310c:	b095      	sub	sp, #84	@ 0x54
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003122:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003130:	643b      	str	r3, [r7, #64]	@ 0x40
 8003132:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003136:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e6      	bne.n	8003112 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3308      	adds	r3, #8
 800314a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	61fb      	str	r3, [r7, #28]
   return(result);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800316e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e3      	bne.n	8003144 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d118      	bne.n	80031b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	60bb      	str	r3, [r7, #8]
   return(result);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0310 	bic.w	r3, r3, #16
 8003198:	647b      	str	r3, [r7, #68]	@ 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6979      	ldr	r1, [r7, #20]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	613b      	str	r3, [r7, #16]
   return(result);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e6      	bne.n	8003184 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80031ca:	bf00      	nop
 80031cc:	3754      	adds	r7, #84	@ 0x54
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_UARTEx_DisableFifoMode+0x16>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e027      	b.n	800323c <HAL_UARTEx_DisableFifoMode+0x66>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800321a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800325c:	2302      	movs	r3, #2
 800325e:	e02d      	b.n	80032bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	@ 0x24
 800326c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f84f 	bl	8003340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032d8:	2302      	movs	r3, #2
 80032da:	e02d      	b.n	8003338 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f811 	bl	8003340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003360:	e031      	b.n	80033c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003362:	2308      	movs	r3, #8
 8003364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003366:	2308      	movs	r3, #8
 8003368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	0e5b      	lsrs	r3, r3, #25
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	0f5b      	lsrs	r3, r3, #29
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	7b3a      	ldrb	r2, [r7, #12]
 800338e:	4911      	ldr	r1, [pc, #68]	@ (80033d4 <UARTEx_SetNbDataToProcess+0x94>)
 8003390:	5c8a      	ldrb	r2, [r1, r2]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003396:	7b3a      	ldrb	r2, [r7, #12]
 8003398:	490f      	ldr	r1, [pc, #60]	@ (80033d8 <UARTEx_SetNbDataToProcess+0x98>)
 800339a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800339c:	fb93 f3f2 	sdiv	r3, r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	7b7a      	ldrb	r2, [r7, #13]
 80033ac:	4909      	ldr	r1, [pc, #36]	@ (80033d4 <UARTEx_SetNbDataToProcess+0x94>)
 80033ae:	5c8a      	ldrb	r2, [r1, r2]
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80033b4:	7b7a      	ldrb	r2, [r7, #13]
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <UARTEx_SetNbDataToProcess+0x98>)
 80033b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	08004988 	.word	0x08004988
 80033d8:	08004990 	.word	0x08004990

080033dc <sniprintf>:
 80033dc:	b40c      	push	{r2, r3}
 80033de:	b530      	push	{r4, r5, lr}
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <sniprintf+0x64>)
 80033e2:	1e0c      	subs	r4, r1, #0
 80033e4:	681d      	ldr	r5, [r3, #0]
 80033e6:	b09d      	sub	sp, #116	@ 0x74
 80033e8:	da08      	bge.n	80033fc <sniprintf+0x20>
 80033ea:	238b      	movs	r3, #139	@ 0x8b
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	b01d      	add	sp, #116	@ 0x74
 80033f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033f8:	b002      	add	sp, #8
 80033fa:	4770      	bx	lr
 80033fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003400:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003404:	bf14      	ite	ne
 8003406:	f104 33ff 	addne.w	r3, r4, #4294967295
 800340a:	4623      	moveq	r3, r4
 800340c:	9304      	str	r3, [sp, #16]
 800340e:	9307      	str	r3, [sp, #28]
 8003410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003414:	9002      	str	r0, [sp, #8]
 8003416:	9006      	str	r0, [sp, #24]
 8003418:	f8ad 3016 	strh.w	r3, [sp, #22]
 800341c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800341e:	ab21      	add	r3, sp, #132	@ 0x84
 8003420:	a902      	add	r1, sp, #8
 8003422:	4628      	mov	r0, r5
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	f000 fa23 	bl	8003870 <_svfiprintf_r>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	bfbc      	itt	lt
 800342e:	238b      	movlt	r3, #139	@ 0x8b
 8003430:	602b      	strlt	r3, [r5, #0]
 8003432:	2c00      	cmp	r4, #0
 8003434:	d0dd      	beq.n	80033f2 <sniprintf+0x16>
 8003436:	9b02      	ldr	r3, [sp, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e7d9      	b.n	80033f2 <sniprintf+0x16>
 800343e:	bf00      	nop
 8003440:	2000000c 	.word	0x2000000c

08003444 <siprintf>:
 8003444:	b40e      	push	{r1, r2, r3}
 8003446:	b500      	push	{lr}
 8003448:	b09c      	sub	sp, #112	@ 0x70
 800344a:	ab1d      	add	r3, sp, #116	@ 0x74
 800344c:	9002      	str	r0, [sp, #8]
 800344e:	9006      	str	r0, [sp, #24]
 8003450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003454:	4809      	ldr	r0, [pc, #36]	@ (800347c <siprintf+0x38>)
 8003456:	9107      	str	r1, [sp, #28]
 8003458:	9104      	str	r1, [sp, #16]
 800345a:	4909      	ldr	r1, [pc, #36]	@ (8003480 <siprintf+0x3c>)
 800345c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003460:	9105      	str	r1, [sp, #20]
 8003462:	6800      	ldr	r0, [r0, #0]
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	a902      	add	r1, sp, #8
 8003468:	f000 fa02 	bl	8003870 <_svfiprintf_r>
 800346c:	9b02      	ldr	r3, [sp, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	b01c      	add	sp, #112	@ 0x70
 8003474:	f85d eb04 	ldr.w	lr, [sp], #4
 8003478:	b003      	add	sp, #12
 800347a:	4770      	bx	lr
 800347c:	2000000c 	.word	0x2000000c
 8003480:	ffff0208 	.word	0xffff0208

08003484 <siscanf>:
 8003484:	b40e      	push	{r1, r2, r3}
 8003486:	b530      	push	{r4, r5, lr}
 8003488:	b09c      	sub	sp, #112	@ 0x70
 800348a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800348c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003490:	f854 5b04 	ldr.w	r5, [r4], #4
 8003494:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003498:	9002      	str	r0, [sp, #8]
 800349a:	9006      	str	r0, [sp, #24]
 800349c:	f7fc fec0 	bl	8000220 <strlen>
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <siscanf+0x4c>)
 80034a2:	9003      	str	r0, [sp, #12]
 80034a4:	9007      	str	r0, [sp, #28]
 80034a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034a8:	480a      	ldr	r0, [pc, #40]	@ (80034d4 <siscanf+0x50>)
 80034aa:	9401      	str	r4, [sp, #4]
 80034ac:	2300      	movs	r3, #0
 80034ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80034b0:	9314      	str	r3, [sp, #80]	@ 0x50
 80034b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80034ba:	462a      	mov	r2, r5
 80034bc:	4623      	mov	r3, r4
 80034be:	a902      	add	r1, sp, #8
 80034c0:	6800      	ldr	r0, [r0, #0]
 80034c2:	f000 fb29 	bl	8003b18 <__ssvfiscanf_r>
 80034c6:	b01c      	add	sp, #112	@ 0x70
 80034c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034cc:	b003      	add	sp, #12
 80034ce:	4770      	bx	lr
 80034d0:	080034d9 	.word	0x080034d9
 80034d4:	2000000c 	.word	0x2000000c

080034d8 <__seofread>:
 80034d8:	2000      	movs	r0, #0
 80034da:	4770      	bx	lr

080034dc <memset>:
 80034dc:	4402      	add	r2, r0
 80034de:	4603      	mov	r3, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <__strtok_r>:
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	b908      	cbnz	r0, 80034f6 <__strtok_r+0xa>
 80034f2:	6814      	ldr	r4, [r2, #0]
 80034f4:	b144      	cbz	r4, 8003508 <__strtok_r+0x1c>
 80034f6:	4620      	mov	r0, r4
 80034f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80034fc:	460f      	mov	r7, r1
 80034fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003502:	b91e      	cbnz	r6, 800350c <__strtok_r+0x20>
 8003504:	b965      	cbnz	r5, 8003520 <__strtok_r+0x34>
 8003506:	6015      	str	r5, [r2, #0]
 8003508:	2000      	movs	r0, #0
 800350a:	e005      	b.n	8003518 <__strtok_r+0x2c>
 800350c:	42b5      	cmp	r5, r6
 800350e:	d1f6      	bne.n	80034fe <__strtok_r+0x12>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <__strtok_r+0xa>
 8003514:	6014      	str	r4, [r2, #0]
 8003516:	7003      	strb	r3, [r0, #0]
 8003518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351a:	461c      	mov	r4, r3
 800351c:	e00c      	b.n	8003538 <__strtok_r+0x4c>
 800351e:	b915      	cbnz	r5, 8003526 <__strtok_r+0x3a>
 8003520:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003524:	460e      	mov	r6, r1
 8003526:	f816 5b01 	ldrb.w	r5, [r6], #1
 800352a:	42ab      	cmp	r3, r5
 800352c:	d1f7      	bne.n	800351e <__strtok_r+0x32>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f3      	beq.n	800351a <__strtok_r+0x2e>
 8003532:	2300      	movs	r3, #0
 8003534:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003538:	6014      	str	r4, [r2, #0]
 800353a:	e7ed      	b.n	8003518 <__strtok_r+0x2c>

0800353c <strtok_r>:
 800353c:	2301      	movs	r3, #1
 800353e:	f7ff bfd5 	b.w	80034ec <__strtok_r>

08003542 <strstr>:
 8003542:	780a      	ldrb	r2, [r1, #0]
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	b96a      	cbnz	r2, 8003564 <strstr+0x22>
 8003548:	bd70      	pop	{r4, r5, r6, pc}
 800354a:	429a      	cmp	r2, r3
 800354c:	d109      	bne.n	8003562 <strstr+0x20>
 800354e:	460c      	mov	r4, r1
 8003550:	4605      	mov	r5, r0
 8003552:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f6      	beq.n	8003548 <strstr+0x6>
 800355a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800355e:	429e      	cmp	r6, r3
 8003560:	d0f7      	beq.n	8003552 <strstr+0x10>
 8003562:	3001      	adds	r0, #1
 8003564:	7803      	ldrb	r3, [r0, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ef      	bne.n	800354a <strstr+0x8>
 800356a:	4618      	mov	r0, r3
 800356c:	e7ec      	b.n	8003548 <strstr+0x6>
	...

08003570 <__errno>:
 8003570:	4b01      	ldr	r3, [pc, #4]	@ (8003578 <__errno+0x8>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c

0800357c <__libc_init_array>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4d0d      	ldr	r5, [pc, #52]	@ (80035b4 <__libc_init_array+0x38>)
 8003580:	4c0d      	ldr	r4, [pc, #52]	@ (80035b8 <__libc_init_array+0x3c>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	2600      	movs	r6, #0
 8003588:	42a6      	cmp	r6, r4
 800358a:	d109      	bne.n	80035a0 <__libc_init_array+0x24>
 800358c:	4d0b      	ldr	r5, [pc, #44]	@ (80035bc <__libc_init_array+0x40>)
 800358e:	4c0c      	ldr	r4, [pc, #48]	@ (80035c0 <__libc_init_array+0x44>)
 8003590:	f001 f8e0 	bl	8004754 <_init>
 8003594:	1b64      	subs	r4, r4, r5
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	2600      	movs	r6, #0
 800359a:	42a6      	cmp	r6, r4
 800359c:	d105      	bne.n	80035aa <__libc_init_array+0x2e>
 800359e:	bd70      	pop	{r4, r5, r6, pc}
 80035a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a4:	4798      	blx	r3
 80035a6:	3601      	adds	r6, #1
 80035a8:	e7ee      	b.n	8003588 <__libc_init_array+0xc>
 80035aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ae:	4798      	blx	r3
 80035b0:	3601      	adds	r6, #1
 80035b2:	e7f2      	b.n	800359a <__libc_init_array+0x1e>
 80035b4:	08004af0 	.word	0x08004af0
 80035b8:	08004af0 	.word	0x08004af0
 80035bc:	08004af0 	.word	0x08004af0
 80035c0:	08004af4 	.word	0x08004af4

080035c4 <__retarget_lock_acquire_recursive>:
 80035c4:	4770      	bx	lr

080035c6 <__retarget_lock_release_recursive>:
 80035c6:	4770      	bx	lr

080035c8 <_free_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4605      	mov	r5, r0
 80035cc:	2900      	cmp	r1, #0
 80035ce:	d041      	beq.n	8003654 <_free_r+0x8c>
 80035d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d4:	1f0c      	subs	r4, r1, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfb8      	it	lt
 80035da:	18e4      	addlt	r4, r4, r3
 80035dc:	f000 f8e0 	bl	80037a0 <__malloc_lock>
 80035e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <_free_r+0x90>)
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	b933      	cbnz	r3, 80035f4 <_free_r+0x2c>
 80035e6:	6063      	str	r3, [r4, #4]
 80035e8:	6014      	str	r4, [r2, #0]
 80035ea:	4628      	mov	r0, r5
 80035ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f0:	f000 b8dc 	b.w	80037ac <__malloc_unlock>
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	d908      	bls.n	800360a <_free_r+0x42>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	1821      	adds	r1, r4, r0
 80035fc:	428b      	cmp	r3, r1
 80035fe:	bf01      	itttt	eq
 8003600:	6819      	ldreq	r1, [r3, #0]
 8003602:	685b      	ldreq	r3, [r3, #4]
 8003604:	1809      	addeq	r1, r1, r0
 8003606:	6021      	streq	r1, [r4, #0]
 8003608:	e7ed      	b.n	80035e6 <_free_r+0x1e>
 800360a:	461a      	mov	r2, r3
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b10b      	cbz	r3, 8003614 <_free_r+0x4c>
 8003610:	42a3      	cmp	r3, r4
 8003612:	d9fa      	bls.n	800360a <_free_r+0x42>
 8003614:	6811      	ldr	r1, [r2, #0]
 8003616:	1850      	adds	r0, r2, r1
 8003618:	42a0      	cmp	r0, r4
 800361a:	d10b      	bne.n	8003634 <_free_r+0x6c>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	4401      	add	r1, r0
 8003620:	1850      	adds	r0, r2, r1
 8003622:	4283      	cmp	r3, r0
 8003624:	6011      	str	r1, [r2, #0]
 8003626:	d1e0      	bne.n	80035ea <_free_r+0x22>
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	6053      	str	r3, [r2, #4]
 800362e:	4408      	add	r0, r1
 8003630:	6010      	str	r0, [r2, #0]
 8003632:	e7da      	b.n	80035ea <_free_r+0x22>
 8003634:	d902      	bls.n	800363c <_free_r+0x74>
 8003636:	230c      	movs	r3, #12
 8003638:	602b      	str	r3, [r5, #0]
 800363a:	e7d6      	b.n	80035ea <_free_r+0x22>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	1821      	adds	r1, r4, r0
 8003640:	428b      	cmp	r3, r1
 8003642:	bf04      	itt	eq
 8003644:	6819      	ldreq	r1, [r3, #0]
 8003646:	685b      	ldreq	r3, [r3, #4]
 8003648:	6063      	str	r3, [r4, #4]
 800364a:	bf04      	itt	eq
 800364c:	1809      	addeq	r1, r1, r0
 800364e:	6021      	streq	r1, [r4, #0]
 8003650:	6054      	str	r4, [r2, #4]
 8003652:	e7ca      	b.n	80035ea <_free_r+0x22>
 8003654:	bd38      	pop	{r3, r4, r5, pc}
 8003656:	bf00      	nop
 8003658:	200003b4 	.word	0x200003b4

0800365c <sbrk_aligned>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4e0f      	ldr	r6, [pc, #60]	@ (800369c <sbrk_aligned+0x40>)
 8003660:	460c      	mov	r4, r1
 8003662:	6831      	ldr	r1, [r6, #0]
 8003664:	4605      	mov	r5, r0
 8003666:	b911      	cbnz	r1, 800366e <sbrk_aligned+0x12>
 8003668:	f000 ff34 	bl	80044d4 <_sbrk_r>
 800366c:	6030      	str	r0, [r6, #0]
 800366e:	4621      	mov	r1, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f000 ff2f 	bl	80044d4 <_sbrk_r>
 8003676:	1c43      	adds	r3, r0, #1
 8003678:	d103      	bne.n	8003682 <sbrk_aligned+0x26>
 800367a:	f04f 34ff 	mov.w	r4, #4294967295
 800367e:	4620      	mov	r0, r4
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	1cc4      	adds	r4, r0, #3
 8003684:	f024 0403 	bic.w	r4, r4, #3
 8003688:	42a0      	cmp	r0, r4
 800368a:	d0f8      	beq.n	800367e <sbrk_aligned+0x22>
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f000 ff20 	bl	80044d4 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d1f2      	bne.n	800367e <sbrk_aligned+0x22>
 8003698:	e7ef      	b.n	800367a <sbrk_aligned+0x1e>
 800369a:	bf00      	nop
 800369c:	200003b0 	.word	0x200003b0

080036a0 <_malloc_r>:
 80036a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a4:	1ccd      	adds	r5, r1, #3
 80036a6:	f025 0503 	bic.w	r5, r5, #3
 80036aa:	3508      	adds	r5, #8
 80036ac:	2d0c      	cmp	r5, #12
 80036ae:	bf38      	it	cc
 80036b0:	250c      	movcc	r5, #12
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	4606      	mov	r6, r0
 80036b6:	db01      	blt.n	80036bc <_malloc_r+0x1c>
 80036b8:	42a9      	cmp	r1, r5
 80036ba:	d904      	bls.n	80036c6 <_malloc_r+0x26>
 80036bc:	230c      	movs	r3, #12
 80036be:	6033      	str	r3, [r6, #0]
 80036c0:	2000      	movs	r0, #0
 80036c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800379c <_malloc_r+0xfc>
 80036ca:	f000 f869 	bl	80037a0 <__malloc_lock>
 80036ce:	f8d8 3000 	ldr.w	r3, [r8]
 80036d2:	461c      	mov	r4, r3
 80036d4:	bb44      	cbnz	r4, 8003728 <_malloc_r+0x88>
 80036d6:	4629      	mov	r1, r5
 80036d8:	4630      	mov	r0, r6
 80036da:	f7ff ffbf 	bl	800365c <sbrk_aligned>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	4604      	mov	r4, r0
 80036e2:	d158      	bne.n	8003796 <_malloc_r+0xf6>
 80036e4:	f8d8 4000 	ldr.w	r4, [r8]
 80036e8:	4627      	mov	r7, r4
 80036ea:	2f00      	cmp	r7, #0
 80036ec:	d143      	bne.n	8003776 <_malloc_r+0xd6>
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	d04b      	beq.n	800378a <_malloc_r+0xea>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	4639      	mov	r1, r7
 80036f6:	4630      	mov	r0, r6
 80036f8:	eb04 0903 	add.w	r9, r4, r3
 80036fc:	f000 feea 	bl	80044d4 <_sbrk_r>
 8003700:	4581      	cmp	r9, r0
 8003702:	d142      	bne.n	800378a <_malloc_r+0xea>
 8003704:	6821      	ldr	r1, [r4, #0]
 8003706:	1a6d      	subs	r5, r5, r1
 8003708:	4629      	mov	r1, r5
 800370a:	4630      	mov	r0, r6
 800370c:	f7ff ffa6 	bl	800365c <sbrk_aligned>
 8003710:	3001      	adds	r0, #1
 8003712:	d03a      	beq.n	800378a <_malloc_r+0xea>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	442b      	add	r3, r5
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	f8d8 3000 	ldr.w	r3, [r8]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	bb62      	cbnz	r2, 800377c <_malloc_r+0xdc>
 8003722:	f8c8 7000 	str.w	r7, [r8]
 8003726:	e00f      	b.n	8003748 <_malloc_r+0xa8>
 8003728:	6822      	ldr	r2, [r4, #0]
 800372a:	1b52      	subs	r2, r2, r5
 800372c:	d420      	bmi.n	8003770 <_malloc_r+0xd0>
 800372e:	2a0b      	cmp	r2, #11
 8003730:	d917      	bls.n	8003762 <_malloc_r+0xc2>
 8003732:	1961      	adds	r1, r4, r5
 8003734:	42a3      	cmp	r3, r4
 8003736:	6025      	str	r5, [r4, #0]
 8003738:	bf18      	it	ne
 800373a:	6059      	strne	r1, [r3, #4]
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	bf08      	it	eq
 8003740:	f8c8 1000 	streq.w	r1, [r8]
 8003744:	5162      	str	r2, [r4, r5]
 8003746:	604b      	str	r3, [r1, #4]
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f82f 	bl	80037ac <__malloc_unlock>
 800374e:	f104 000b 	add.w	r0, r4, #11
 8003752:	1d23      	adds	r3, r4, #4
 8003754:	f020 0007 	bic.w	r0, r0, #7
 8003758:	1ac2      	subs	r2, r0, r3
 800375a:	bf1c      	itt	ne
 800375c:	1a1b      	subne	r3, r3, r0
 800375e:	50a3      	strne	r3, [r4, r2]
 8003760:	e7af      	b.n	80036c2 <_malloc_r+0x22>
 8003762:	6862      	ldr	r2, [r4, #4]
 8003764:	42a3      	cmp	r3, r4
 8003766:	bf0c      	ite	eq
 8003768:	f8c8 2000 	streq.w	r2, [r8]
 800376c:	605a      	strne	r2, [r3, #4]
 800376e:	e7eb      	b.n	8003748 <_malloc_r+0xa8>
 8003770:	4623      	mov	r3, r4
 8003772:	6864      	ldr	r4, [r4, #4]
 8003774:	e7ae      	b.n	80036d4 <_malloc_r+0x34>
 8003776:	463c      	mov	r4, r7
 8003778:	687f      	ldr	r7, [r7, #4]
 800377a:	e7b6      	b.n	80036ea <_malloc_r+0x4a>
 800377c:	461a      	mov	r2, r3
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	42a3      	cmp	r3, r4
 8003782:	d1fb      	bne.n	800377c <_malloc_r+0xdc>
 8003784:	2300      	movs	r3, #0
 8003786:	6053      	str	r3, [r2, #4]
 8003788:	e7de      	b.n	8003748 <_malloc_r+0xa8>
 800378a:	230c      	movs	r3, #12
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	4630      	mov	r0, r6
 8003790:	f000 f80c 	bl	80037ac <__malloc_unlock>
 8003794:	e794      	b.n	80036c0 <_malloc_r+0x20>
 8003796:	6005      	str	r5, [r0, #0]
 8003798:	e7d6      	b.n	8003748 <_malloc_r+0xa8>
 800379a:	bf00      	nop
 800379c:	200003b4 	.word	0x200003b4

080037a0 <__malloc_lock>:
 80037a0:	4801      	ldr	r0, [pc, #4]	@ (80037a8 <__malloc_lock+0x8>)
 80037a2:	f7ff bf0f 	b.w	80035c4 <__retarget_lock_acquire_recursive>
 80037a6:	bf00      	nop
 80037a8:	200003ac 	.word	0x200003ac

080037ac <__malloc_unlock>:
 80037ac:	4801      	ldr	r0, [pc, #4]	@ (80037b4 <__malloc_unlock+0x8>)
 80037ae:	f7ff bf0a 	b.w	80035c6 <__retarget_lock_release_recursive>
 80037b2:	bf00      	nop
 80037b4:	200003ac 	.word	0x200003ac

080037b8 <__ssputs_r>:
 80037b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	688e      	ldr	r6, [r1, #8]
 80037be:	461f      	mov	r7, r3
 80037c0:	42be      	cmp	r6, r7
 80037c2:	680b      	ldr	r3, [r1, #0]
 80037c4:	4682      	mov	sl, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4690      	mov	r8, r2
 80037ca:	d82d      	bhi.n	8003828 <__ssputs_r+0x70>
 80037cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80037d4:	d026      	beq.n	8003824 <__ssputs_r+0x6c>
 80037d6:	6965      	ldr	r5, [r4, #20]
 80037d8:	6909      	ldr	r1, [r1, #16]
 80037da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037de:	eba3 0901 	sub.w	r9, r3, r1
 80037e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037e6:	1c7b      	adds	r3, r7, #1
 80037e8:	444b      	add	r3, r9
 80037ea:	106d      	asrs	r5, r5, #1
 80037ec:	429d      	cmp	r5, r3
 80037ee:	bf38      	it	cc
 80037f0:	461d      	movcc	r5, r3
 80037f2:	0553      	lsls	r3, r2, #21
 80037f4:	d527      	bpl.n	8003846 <__ssputs_r+0x8e>
 80037f6:	4629      	mov	r1, r5
 80037f8:	f7ff ff52 	bl	80036a0 <_malloc_r>
 80037fc:	4606      	mov	r6, r0
 80037fe:	b360      	cbz	r0, 800385a <__ssputs_r+0xa2>
 8003800:	6921      	ldr	r1, [r4, #16]
 8003802:	464a      	mov	r2, r9
 8003804:	f000 fe76 	bl	80044f4 <memcpy>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003812:	81a3      	strh	r3, [r4, #12]
 8003814:	6126      	str	r6, [r4, #16]
 8003816:	6165      	str	r5, [r4, #20]
 8003818:	444e      	add	r6, r9
 800381a:	eba5 0509 	sub.w	r5, r5, r9
 800381e:	6026      	str	r6, [r4, #0]
 8003820:	60a5      	str	r5, [r4, #8]
 8003822:	463e      	mov	r6, r7
 8003824:	42be      	cmp	r6, r7
 8003826:	d900      	bls.n	800382a <__ssputs_r+0x72>
 8003828:	463e      	mov	r6, r7
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	4632      	mov	r2, r6
 800382e:	4641      	mov	r1, r8
 8003830:	f000 fe35 	bl	800449e <memmove>
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	1b9b      	subs	r3, r3, r6
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	4433      	add	r3, r6
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	2000      	movs	r0, #0
 8003842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003846:	462a      	mov	r2, r5
 8003848:	f000 fe62 	bl	8004510 <_realloc_r>
 800384c:	4606      	mov	r6, r0
 800384e:	2800      	cmp	r0, #0
 8003850:	d1e0      	bne.n	8003814 <__ssputs_r+0x5c>
 8003852:	6921      	ldr	r1, [r4, #16]
 8003854:	4650      	mov	r0, sl
 8003856:	f7ff feb7 	bl	80035c8 <_free_r>
 800385a:	230c      	movs	r3, #12
 800385c:	f8ca 3000 	str.w	r3, [sl]
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	e7e9      	b.n	8003842 <__ssputs_r+0x8a>
	...

08003870 <_svfiprintf_r>:
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	4698      	mov	r8, r3
 8003876:	898b      	ldrh	r3, [r1, #12]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	b09d      	sub	sp, #116	@ 0x74
 800387c:	4607      	mov	r7, r0
 800387e:	460d      	mov	r5, r1
 8003880:	4614      	mov	r4, r2
 8003882:	d510      	bpl.n	80038a6 <_svfiprintf_r+0x36>
 8003884:	690b      	ldr	r3, [r1, #16]
 8003886:	b973      	cbnz	r3, 80038a6 <_svfiprintf_r+0x36>
 8003888:	2140      	movs	r1, #64	@ 0x40
 800388a:	f7ff ff09 	bl	80036a0 <_malloc_r>
 800388e:	6028      	str	r0, [r5, #0]
 8003890:	6128      	str	r0, [r5, #16]
 8003892:	b930      	cbnz	r0, 80038a2 <_svfiprintf_r+0x32>
 8003894:	230c      	movs	r3, #12
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	b01d      	add	sp, #116	@ 0x74
 800389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a2:	2340      	movs	r3, #64	@ 0x40
 80038a4:	616b      	str	r3, [r5, #20]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80038aa:	2320      	movs	r3, #32
 80038ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038b4:	2330      	movs	r3, #48	@ 0x30
 80038b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a54 <_svfiprintf_r+0x1e4>
 80038ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038be:	f04f 0901 	mov.w	r9, #1
 80038c2:	4623      	mov	r3, r4
 80038c4:	469a      	mov	sl, r3
 80038c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ca:	b10a      	cbz	r2, 80038d0 <_svfiprintf_r+0x60>
 80038cc:	2a25      	cmp	r2, #37	@ 0x25
 80038ce:	d1f9      	bne.n	80038c4 <_svfiprintf_r+0x54>
 80038d0:	ebba 0b04 	subs.w	fp, sl, r4
 80038d4:	d00b      	beq.n	80038ee <_svfiprintf_r+0x7e>
 80038d6:	465b      	mov	r3, fp
 80038d8:	4622      	mov	r2, r4
 80038da:	4629      	mov	r1, r5
 80038dc:	4638      	mov	r0, r7
 80038de:	f7ff ff6b 	bl	80037b8 <__ssputs_r>
 80038e2:	3001      	adds	r0, #1
 80038e4:	f000 80a7 	beq.w	8003a36 <_svfiprintf_r+0x1c6>
 80038e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038ea:	445a      	add	r2, fp
 80038ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80038ee:	f89a 3000 	ldrb.w	r3, [sl]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 809f 	beq.w	8003a36 <_svfiprintf_r+0x1c6>
 80038f8:	2300      	movs	r3, #0
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003902:	f10a 0a01 	add.w	sl, sl, #1
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	9307      	str	r3, [sp, #28]
 800390a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800390e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003910:	4654      	mov	r4, sl
 8003912:	2205      	movs	r2, #5
 8003914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003918:	484e      	ldr	r0, [pc, #312]	@ (8003a54 <_svfiprintf_r+0x1e4>)
 800391a:	f7fc fc89 	bl	8000230 <memchr>
 800391e:	9a04      	ldr	r2, [sp, #16]
 8003920:	b9d8      	cbnz	r0, 800395a <_svfiprintf_r+0xea>
 8003922:	06d0      	lsls	r0, r2, #27
 8003924:	bf44      	itt	mi
 8003926:	2320      	movmi	r3, #32
 8003928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800392c:	0711      	lsls	r1, r2, #28
 800392e:	bf44      	itt	mi
 8003930:	232b      	movmi	r3, #43	@ 0x2b
 8003932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003936:	f89a 3000 	ldrb.w	r3, [sl]
 800393a:	2b2a      	cmp	r3, #42	@ 0x2a
 800393c:	d015      	beq.n	800396a <_svfiprintf_r+0xfa>
 800393e:	9a07      	ldr	r2, [sp, #28]
 8003940:	4654      	mov	r4, sl
 8003942:	2000      	movs	r0, #0
 8003944:	f04f 0c0a 	mov.w	ip, #10
 8003948:	4621      	mov	r1, r4
 800394a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800394e:	3b30      	subs	r3, #48	@ 0x30
 8003950:	2b09      	cmp	r3, #9
 8003952:	d94b      	bls.n	80039ec <_svfiprintf_r+0x17c>
 8003954:	b1b0      	cbz	r0, 8003984 <_svfiprintf_r+0x114>
 8003956:	9207      	str	r2, [sp, #28]
 8003958:	e014      	b.n	8003984 <_svfiprintf_r+0x114>
 800395a:	eba0 0308 	sub.w	r3, r0, r8
 800395e:	fa09 f303 	lsl.w	r3, r9, r3
 8003962:	4313      	orrs	r3, r2
 8003964:	9304      	str	r3, [sp, #16]
 8003966:	46a2      	mov	sl, r4
 8003968:	e7d2      	b.n	8003910 <_svfiprintf_r+0xa0>
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	1d19      	adds	r1, r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	9103      	str	r1, [sp, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	bfbb      	ittet	lt
 8003976:	425b      	neglt	r3, r3
 8003978:	f042 0202 	orrlt.w	r2, r2, #2
 800397c:	9307      	strge	r3, [sp, #28]
 800397e:	9307      	strlt	r3, [sp, #28]
 8003980:	bfb8      	it	lt
 8003982:	9204      	strlt	r2, [sp, #16]
 8003984:	7823      	ldrb	r3, [r4, #0]
 8003986:	2b2e      	cmp	r3, #46	@ 0x2e
 8003988:	d10a      	bne.n	80039a0 <_svfiprintf_r+0x130>
 800398a:	7863      	ldrb	r3, [r4, #1]
 800398c:	2b2a      	cmp	r3, #42	@ 0x2a
 800398e:	d132      	bne.n	80039f6 <_svfiprintf_r+0x186>
 8003990:	9b03      	ldr	r3, [sp, #12]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	9203      	str	r2, [sp, #12]
 8003998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800399c:	3402      	adds	r4, #2
 800399e:	9305      	str	r3, [sp, #20]
 80039a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a64 <_svfiprintf_r+0x1f4>
 80039a4:	7821      	ldrb	r1, [r4, #0]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4650      	mov	r0, sl
 80039aa:	f7fc fc41 	bl	8000230 <memchr>
 80039ae:	b138      	cbz	r0, 80039c0 <_svfiprintf_r+0x150>
 80039b0:	9b04      	ldr	r3, [sp, #16]
 80039b2:	eba0 000a 	sub.w	r0, r0, sl
 80039b6:	2240      	movs	r2, #64	@ 0x40
 80039b8:	4082      	lsls	r2, r0
 80039ba:	4313      	orrs	r3, r2
 80039bc:	3401      	adds	r4, #1
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c4:	4824      	ldr	r0, [pc, #144]	@ (8003a58 <_svfiprintf_r+0x1e8>)
 80039c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039ca:	2206      	movs	r2, #6
 80039cc:	f7fc fc30 	bl	8000230 <memchr>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d036      	beq.n	8003a42 <_svfiprintf_r+0x1d2>
 80039d4:	4b21      	ldr	r3, [pc, #132]	@ (8003a5c <_svfiprintf_r+0x1ec>)
 80039d6:	bb1b      	cbnz	r3, 8003a20 <_svfiprintf_r+0x1b0>
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	3307      	adds	r3, #7
 80039dc:	f023 0307 	bic.w	r3, r3, #7
 80039e0:	3308      	adds	r3, #8
 80039e2:	9303      	str	r3, [sp, #12]
 80039e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039e6:	4433      	add	r3, r6
 80039e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ea:	e76a      	b.n	80038c2 <_svfiprintf_r+0x52>
 80039ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80039f0:	460c      	mov	r4, r1
 80039f2:	2001      	movs	r0, #1
 80039f4:	e7a8      	b.n	8003948 <_svfiprintf_r+0xd8>
 80039f6:	2300      	movs	r3, #0
 80039f8:	3401      	adds	r4, #1
 80039fa:	9305      	str	r3, [sp, #20]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f04f 0c0a 	mov.w	ip, #10
 8003a02:	4620      	mov	r0, r4
 8003a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a08:	3a30      	subs	r2, #48	@ 0x30
 8003a0a:	2a09      	cmp	r2, #9
 8003a0c:	d903      	bls.n	8003a16 <_svfiprintf_r+0x1a6>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0c6      	beq.n	80039a0 <_svfiprintf_r+0x130>
 8003a12:	9105      	str	r1, [sp, #20]
 8003a14:	e7c4      	b.n	80039a0 <_svfiprintf_r+0x130>
 8003a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e7f0      	b.n	8003a02 <_svfiprintf_r+0x192>
 8003a20:	ab03      	add	r3, sp, #12
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	462a      	mov	r2, r5
 8003a26:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <_svfiprintf_r+0x1f0>)
 8003a28:	a904      	add	r1, sp, #16
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	f3af 8000 	nop.w
 8003a30:	1c42      	adds	r2, r0, #1
 8003a32:	4606      	mov	r6, r0
 8003a34:	d1d6      	bne.n	80039e4 <_svfiprintf_r+0x174>
 8003a36:	89ab      	ldrh	r3, [r5, #12]
 8003a38:	065b      	lsls	r3, r3, #25
 8003a3a:	f53f af2d 	bmi.w	8003898 <_svfiprintf_r+0x28>
 8003a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a40:	e72c      	b.n	800389c <_svfiprintf_r+0x2c>
 8003a42:	ab03      	add	r3, sp, #12
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	462a      	mov	r2, r5
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <_svfiprintf_r+0x1f0>)
 8003a4a:	a904      	add	r1, sp, #16
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f000 fa45 	bl	8003edc <_printf_i>
 8003a52:	e7ed      	b.n	8003a30 <_svfiprintf_r+0x1c0>
 8003a54:	08004998 	.word	0x08004998
 8003a58:	080049a2 	.word	0x080049a2
 8003a5c:	00000000 	.word	0x00000000
 8003a60:	080037b9 	.word	0x080037b9
 8003a64:	0800499e 	.word	0x0800499e

08003a68 <_sungetc_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	1c4b      	adds	r3, r1, #1
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	d103      	bne.n	8003a78 <_sungetc_r+0x10>
 8003a70:	f04f 35ff 	mov.w	r5, #4294967295
 8003a74:	4628      	mov	r0, r5
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	8993      	ldrh	r3, [r2, #12]
 8003a7a:	f023 0320 	bic.w	r3, r3, #32
 8003a7e:	8193      	strh	r3, [r2, #12]
 8003a80:	6853      	ldr	r3, [r2, #4]
 8003a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a84:	b2cd      	uxtb	r5, r1
 8003a86:	b18a      	cbz	r2, 8003aac <_sungetc_r+0x44>
 8003a88:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	dd08      	ble.n	8003aa0 <_sungetc_r+0x38>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	e7e9      	b.n	8003a74 <_sungetc_r+0xc>
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	f000 fcc2 	bl	800442a <__submore>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d0f1      	beq.n	8003a8e <_sungetc_r+0x26>
 8003aaa:	e7e1      	b.n	8003a70 <_sungetc_r+0x8>
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	b141      	cbz	r1, 8003ac4 <_sungetc_r+0x5c>
 8003ab2:	4291      	cmp	r1, r2
 8003ab4:	d206      	bcs.n	8003ac4 <_sungetc_r+0x5c>
 8003ab6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003aba:	42a9      	cmp	r1, r5
 8003abc:	d102      	bne.n	8003ac4 <_sungetc_r+0x5c>
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	6022      	str	r2, [r4, #0]
 8003ac2:	e7ea      	b.n	8003a9a <_sungetc_r+0x32>
 8003ac4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003ac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ace:	2303      	movs	r3, #3
 8003ad0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	2301      	movs	r3, #1
 8003adc:	e7de      	b.n	8003a9c <_sungetc_r+0x34>

08003ade <__ssrefill_r>:
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003ae4:	b169      	cbz	r1, 8003b02 <__ssrefill_r+0x24>
 8003ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003aea:	4299      	cmp	r1, r3
 8003aec:	d001      	beq.n	8003af2 <__ssrefill_r+0x14>
 8003aee:	f7ff fd6b 	bl	80035c8 <_free_r>
 8003af2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	2000      	movs	r0, #0
 8003af8:	6360      	str	r0, [r4, #52]	@ 0x34
 8003afa:	b113      	cbz	r3, 8003b02 <__ssrefill_r+0x24>
 8003afc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f043 0320 	orr.w	r3, r3, #32
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	e7f3      	b.n	8003b00 <__ssrefill_r+0x22>

08003b18 <__ssvfiscanf_r>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003b22:	2100      	movs	r1, #0
 8003b24:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003b28:	49a5      	ldr	r1, [pc, #660]	@ (8003dc0 <__ssvfiscanf_r+0x2a8>)
 8003b2a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003b2c:	f10d 0804 	add.w	r8, sp, #4
 8003b30:	49a4      	ldr	r1, [pc, #656]	@ (8003dc4 <__ssvfiscanf_r+0x2ac>)
 8003b32:	4fa5      	ldr	r7, [pc, #660]	@ (8003dc8 <__ssvfiscanf_r+0x2b0>)
 8003b34:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003b38:	4606      	mov	r6, r0
 8003b3a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	7813      	ldrb	r3, [r2, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8158 	beq.w	8003df6 <__ssvfiscanf_r+0x2de>
 8003b46:	5cf9      	ldrb	r1, [r7, r3]
 8003b48:	f011 0108 	ands.w	r1, r1, #8
 8003b4c:	f102 0501 	add.w	r5, r2, #1
 8003b50:	d019      	beq.n	8003b86 <__ssvfiscanf_r+0x6e>
 8003b52:	6863      	ldr	r3, [r4, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dd0f      	ble.n	8003b78 <__ssvfiscanf_r+0x60>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	5cba      	ldrb	r2, [r7, r2]
 8003b5e:	0712      	lsls	r2, r2, #28
 8003b60:	d401      	bmi.n	8003b66 <__ssvfiscanf_r+0x4e>
 8003b62:	462a      	mov	r2, r5
 8003b64:	e7eb      	b.n	8003b3e <__ssvfiscanf_r+0x26>
 8003b66:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003b68:	3201      	adds	r2, #1
 8003b6a:	9245      	str	r2, [sp, #276]	@ 0x114
 8003b6c:	6862      	ldr	r2, [r4, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	6062      	str	r2, [r4, #4]
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	e7ec      	b.n	8003b52 <__ssvfiscanf_r+0x3a>
 8003b78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	4798      	blx	r3
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d0e9      	beq.n	8003b58 <__ssvfiscanf_r+0x40>
 8003b84:	e7ed      	b.n	8003b62 <__ssvfiscanf_r+0x4a>
 8003b86:	2b25      	cmp	r3, #37	@ 0x25
 8003b88:	d012      	beq.n	8003bb0 <__ssvfiscanf_r+0x98>
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f340 8093 	ble.w	8003cba <__ssvfiscanf_r+0x1a2>
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	7813      	ldrb	r3, [r2, #0]
 8003b98:	454b      	cmp	r3, r9
 8003b9a:	f040 812c 	bne.w	8003df6 <__ssvfiscanf_r+0x2de>
 8003b9e:	6863      	ldr	r3, [r4, #4]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003ba6:	3201      	adds	r2, #1
 8003ba8:	3301      	adds	r3, #1
 8003baa:	6022      	str	r2, [r4, #0]
 8003bac:	9345      	str	r3, [sp, #276]	@ 0x114
 8003bae:	e7d8      	b.n	8003b62 <__ssvfiscanf_r+0x4a>
 8003bb0:	9141      	str	r1, [sp, #260]	@ 0x104
 8003bb2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003bb4:	7853      	ldrb	r3, [r2, #1]
 8003bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb8:	bf02      	ittt	eq
 8003bba:	2310      	moveq	r3, #16
 8003bbc:	1c95      	addeq	r5, r2, #2
 8003bbe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	46a9      	mov	r9, r5
 8003bc4:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003bc8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d91e      	bls.n	8003c0e <__ssvfiscanf_r+0xf6>
 8003bd0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8003dcc <__ssvfiscanf_r+0x2b4>
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4650      	mov	r0, sl
 8003bd8:	f7fc fb2a 	bl	8000230 <memchr>
 8003bdc:	b138      	cbz	r0, 8003bee <__ssvfiscanf_r+0xd6>
 8003bde:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003be0:	eba0 000a 	sub.w	r0, r0, sl
 8003be4:	2301      	movs	r3, #1
 8003be6:	4083      	lsls	r3, r0
 8003be8:	4313      	orrs	r3, r2
 8003bea:	9341      	str	r3, [sp, #260]	@ 0x104
 8003bec:	464d      	mov	r5, r9
 8003bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bf2:	2b78      	cmp	r3, #120	@ 0x78
 8003bf4:	d806      	bhi.n	8003c04 <__ssvfiscanf_r+0xec>
 8003bf6:	2b57      	cmp	r3, #87	@ 0x57
 8003bf8:	d810      	bhi.n	8003c1c <__ssvfiscanf_r+0x104>
 8003bfa:	2b25      	cmp	r3, #37	@ 0x25
 8003bfc:	d0c5      	beq.n	8003b8a <__ssvfiscanf_r+0x72>
 8003bfe:	d857      	bhi.n	8003cb0 <__ssvfiscanf_r+0x198>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d065      	beq.n	8003cd0 <__ssvfiscanf_r+0x1b8>
 8003c04:	2303      	movs	r3, #3
 8003c06:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003c08:	230a      	movs	r3, #10
 8003c0a:	9342      	str	r3, [sp, #264]	@ 0x108
 8003c0c:	e078      	b.n	8003d00 <__ssvfiscanf_r+0x1e8>
 8003c0e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003c10:	fb02 1103 	mla	r1, r2, r3, r1
 8003c14:	3930      	subs	r1, #48	@ 0x30
 8003c16:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003c18:	464d      	mov	r5, r9
 8003c1a:	e7d2      	b.n	8003bc2 <__ssvfiscanf_r+0xaa>
 8003c1c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003c20:	2a20      	cmp	r2, #32
 8003c22:	d8ef      	bhi.n	8003c04 <__ssvfiscanf_r+0xec>
 8003c24:	a101      	add	r1, pc, #4	@ (adr r1, 8003c2c <__ssvfiscanf_r+0x114>)
 8003c26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003cdf 	.word	0x08003cdf
 8003c30:	08003c05 	.word	0x08003c05
 8003c34:	08003c05 	.word	0x08003c05
 8003c38:	08003d39 	.word	0x08003d39
 8003c3c:	08003c05 	.word	0x08003c05
 8003c40:	08003c05 	.word	0x08003c05
 8003c44:	08003c05 	.word	0x08003c05
 8003c48:	08003c05 	.word	0x08003c05
 8003c4c:	08003c05 	.word	0x08003c05
 8003c50:	08003c05 	.word	0x08003c05
 8003c54:	08003c05 	.word	0x08003c05
 8003c58:	08003d4f 	.word	0x08003d4f
 8003c5c:	08003d35 	.word	0x08003d35
 8003c60:	08003cb7 	.word	0x08003cb7
 8003c64:	08003cb7 	.word	0x08003cb7
 8003c68:	08003cb7 	.word	0x08003cb7
 8003c6c:	08003c05 	.word	0x08003c05
 8003c70:	08003cf1 	.word	0x08003cf1
 8003c74:	08003c05 	.word	0x08003c05
 8003c78:	08003c05 	.word	0x08003c05
 8003c7c:	08003c05 	.word	0x08003c05
 8003c80:	08003c05 	.word	0x08003c05
 8003c84:	08003d5f 	.word	0x08003d5f
 8003c88:	08003cf9 	.word	0x08003cf9
 8003c8c:	08003cd7 	.word	0x08003cd7
 8003c90:	08003c05 	.word	0x08003c05
 8003c94:	08003c05 	.word	0x08003c05
 8003c98:	08003d5b 	.word	0x08003d5b
 8003c9c:	08003c05 	.word	0x08003c05
 8003ca0:	08003d35 	.word	0x08003d35
 8003ca4:	08003c05 	.word	0x08003c05
 8003ca8:	08003c05 	.word	0x08003c05
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	3b45      	subs	r3, #69	@ 0x45
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d8a6      	bhi.n	8003c04 <__ssvfiscanf_r+0xec>
 8003cb6:	2305      	movs	r3, #5
 8003cb8:	e021      	b.n	8003cfe <__ssvfiscanf_r+0x1e6>
 8003cba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4798      	blx	r3
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	f43f af66 	beq.w	8003b94 <__ssvfiscanf_r+0x7c>
 8003cc8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	f040 808b 	bne.w	8003de6 <__ssvfiscanf_r+0x2ce>
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	e08b      	b.n	8003dee <__ssvfiscanf_r+0x2d6>
 8003cd6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003cd8:	f042 0220 	orr.w	r2, r2, #32
 8003cdc:	9241      	str	r2, [sp, #260]	@ 0x104
 8003cde:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce4:	9241      	str	r2, [sp, #260]	@ 0x104
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003cea:	9242      	str	r2, [sp, #264]	@ 0x108
 8003cec:	d902      	bls.n	8003cf4 <__ssvfiscanf_r+0x1dc>
 8003cee:	e005      	b.n	8003cfc <__ssvfiscanf_r+0x1e4>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9342      	str	r3, [sp, #264]	@ 0x108
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e002      	b.n	8003cfe <__ssvfiscanf_r+0x1e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	9342      	str	r3, [sp, #264]	@ 0x108
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dd39      	ble.n	8003d7a <__ssvfiscanf_r+0x262>
 8003d06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003d08:	0659      	lsls	r1, r3, #25
 8003d0a:	d404      	bmi.n	8003d16 <__ssvfiscanf_r+0x1fe>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	5cba      	ldrb	r2, [r7, r2]
 8003d12:	0712      	lsls	r2, r2, #28
 8003d14:	d438      	bmi.n	8003d88 <__ssvfiscanf_r+0x270>
 8003d16:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	dc47      	bgt.n	8003dac <__ssvfiscanf_r+0x294>
 8003d1c:	466b      	mov	r3, sp
 8003d1e:	4622      	mov	r2, r4
 8003d20:	a941      	add	r1, sp, #260	@ 0x104
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 f9fa 	bl	800411c <_scanf_chars>
 8003d28:	2801      	cmp	r0, #1
 8003d2a:	d064      	beq.n	8003df6 <__ssvfiscanf_r+0x2de>
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	f47f af18 	bne.w	8003b62 <__ssvfiscanf_r+0x4a>
 8003d32:	e7c9      	b.n	8003cc8 <__ssvfiscanf_r+0x1b0>
 8003d34:	220a      	movs	r2, #10
 8003d36:	e7d7      	b.n	8003ce8 <__ssvfiscanf_r+0x1d0>
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	f000 fb3c 	bl	80043b8 <__sccl>
 8003d40:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d46:	9341      	str	r3, [sp, #260]	@ 0x104
 8003d48:	4605      	mov	r5, r0
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e7d7      	b.n	8003cfe <__ssvfiscanf_r+0x1e6>
 8003d4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d54:	9341      	str	r3, [sp, #260]	@ 0x104
 8003d56:	2300      	movs	r3, #0
 8003d58:	e7d1      	b.n	8003cfe <__ssvfiscanf_r+0x1e6>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e7cf      	b.n	8003cfe <__ssvfiscanf_r+0x1e6>
 8003d5e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003d60:	06c3      	lsls	r3, r0, #27
 8003d62:	f53f aefe 	bmi.w	8003b62 <__ssvfiscanf_r+0x4a>
 8003d66:	9b00      	ldr	r3, [sp, #0]
 8003d68:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003d6a:	1d19      	adds	r1, r3, #4
 8003d6c:	9100      	str	r1, [sp, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	07c0      	lsls	r0, r0, #31
 8003d72:	bf4c      	ite	mi
 8003d74:	801a      	strhmi	r2, [r3, #0]
 8003d76:	601a      	strpl	r2, [r3, #0]
 8003d78:	e6f3      	b.n	8003b62 <__ssvfiscanf_r+0x4a>
 8003d7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4630      	mov	r0, r6
 8003d80:	4798      	blx	r3
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d0bf      	beq.n	8003d06 <__ssvfiscanf_r+0x1ee>
 8003d86:	e79f      	b.n	8003cc8 <__ssvfiscanf_r+0x1b0>
 8003d88:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003d8a:	3201      	adds	r2, #1
 8003d8c:	9245      	str	r2, [sp, #276]	@ 0x114
 8003d8e:	6862      	ldr	r2, [r4, #4]
 8003d90:	3a01      	subs	r2, #1
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	6062      	str	r2, [r4, #4]
 8003d96:	dd02      	ble.n	8003d9e <__ssvfiscanf_r+0x286>
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	e7b6      	b.n	8003d0c <__ssvfiscanf_r+0x1f4>
 8003d9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003da0:	4621      	mov	r1, r4
 8003da2:	4630      	mov	r0, r6
 8003da4:	4798      	blx	r3
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d0b0      	beq.n	8003d0c <__ssvfiscanf_r+0x1f4>
 8003daa:	e78d      	b.n	8003cc8 <__ssvfiscanf_r+0x1b0>
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	dc0f      	bgt.n	8003dd0 <__ssvfiscanf_r+0x2b8>
 8003db0:	466b      	mov	r3, sp
 8003db2:	4622      	mov	r2, r4
 8003db4:	a941      	add	r1, sp, #260	@ 0x104
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 fa0a 	bl	80041d0 <_scanf_i>
 8003dbc:	e7b4      	b.n	8003d28 <__ssvfiscanf_r+0x210>
 8003dbe:	bf00      	nop
 8003dc0:	08003a69 	.word	0x08003a69
 8003dc4:	08003adf 	.word	0x08003adf
 8003dc8:	080049e7 	.word	0x080049e7
 8003dcc:	0800499e 	.word	0x0800499e
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <__ssvfiscanf_r+0x2e4>)
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f43f aec5 	beq.w	8003b62 <__ssvfiscanf_r+0x4a>
 8003dd8:	466b      	mov	r3, sp
 8003dda:	4622      	mov	r2, r4
 8003ddc:	a941      	add	r1, sp, #260	@ 0x104
 8003dde:	4630      	mov	r0, r6
 8003de0:	f3af 8000 	nop.w
 8003de4:	e7a0      	b.n	8003d28 <__ssvfiscanf_r+0x210>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	065b      	lsls	r3, r3, #25
 8003dea:	f53f af71 	bmi.w	8003cd0 <__ssvfiscanf_r+0x1b8>
 8003dee:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003df8:	e7f9      	b.n	8003dee <__ssvfiscanf_r+0x2d6>
 8003dfa:	bf00      	nop
 8003dfc:	00000000 	.word	0x00000000

08003e00 <_printf_common>:
 8003e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	4616      	mov	r6, r2
 8003e06:	4698      	mov	r8, r3
 8003e08:	688a      	ldr	r2, [r1, #8]
 8003e0a:	690b      	ldr	r3, [r1, #16]
 8003e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bfb8      	it	lt
 8003e14:	4613      	movlt	r3, r2
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	b10a      	cbz	r2, 8003e26 <_printf_common+0x26>
 8003e22:	3301      	adds	r3, #1
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	0699      	lsls	r1, r3, #26
 8003e2a:	bf42      	ittt	mi
 8003e2c:	6833      	ldrmi	r3, [r6, #0]
 8003e2e:	3302      	addmi	r3, #2
 8003e30:	6033      	strmi	r3, [r6, #0]
 8003e32:	6825      	ldr	r5, [r4, #0]
 8003e34:	f015 0506 	ands.w	r5, r5, #6
 8003e38:	d106      	bne.n	8003e48 <_printf_common+0x48>
 8003e3a:	f104 0a19 	add.w	sl, r4, #25
 8003e3e:	68e3      	ldr	r3, [r4, #12]
 8003e40:	6832      	ldr	r2, [r6, #0]
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	dc26      	bgt.n	8003e96 <_printf_common+0x96>
 8003e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	3b00      	subs	r3, #0
 8003e50:	bf18      	it	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	0692      	lsls	r2, r2, #26
 8003e56:	d42b      	bmi.n	8003eb0 <_printf_common+0xb0>
 8003e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4638      	mov	r0, r7
 8003e60:	47c8      	blx	r9
 8003e62:	3001      	adds	r0, #1
 8003e64:	d01e      	beq.n	8003ea4 <_printf_common+0xa4>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	f003 0306 	and.w	r3, r3, #6
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf02      	ittt	eq
 8003e72:	68e5      	ldreq	r5, [r4, #12]
 8003e74:	6833      	ldreq	r3, [r6, #0]
 8003e76:	1aed      	subeq	r5, r5, r3
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	bf0c      	ite	eq
 8003e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e80:	2500      	movne	r5, #0
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bfc4      	itt	gt
 8003e86:	1a9b      	subgt	r3, r3, r2
 8003e88:	18ed      	addgt	r5, r5, r3
 8003e8a:	2600      	movs	r6, #0
 8003e8c:	341a      	adds	r4, #26
 8003e8e:	42b5      	cmp	r5, r6
 8003e90:	d11a      	bne.n	8003ec8 <_printf_common+0xc8>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e008      	b.n	8003ea8 <_printf_common+0xa8>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4652      	mov	r2, sl
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	47c8      	blx	r9
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d103      	bne.n	8003eac <_printf_common+0xac>
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	3501      	adds	r5, #1
 8003eae:	e7c6      	b.n	8003e3e <_printf_common+0x3e>
 8003eb0:	18e1      	adds	r1, r4, r3
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	2030      	movs	r0, #48	@ 0x30
 8003eb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eba:	4422      	add	r2, r4
 8003ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	e7c7      	b.n	8003e58 <_printf_common+0x58>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4641      	mov	r1, r8
 8003ece:	4638      	mov	r0, r7
 8003ed0:	47c8      	blx	r9
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d0e6      	beq.n	8003ea4 <_printf_common+0xa4>
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7d9      	b.n	8003e8e <_printf_common+0x8e>
	...

08003edc <_printf_i>:
 8003edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	7e0f      	ldrb	r7, [r1, #24]
 8003ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ee4:	2f78      	cmp	r7, #120	@ 0x78
 8003ee6:	4691      	mov	r9, r2
 8003ee8:	4680      	mov	r8, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	469a      	mov	sl, r3
 8003eee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ef2:	d807      	bhi.n	8003f04 <_printf_i+0x28>
 8003ef4:	2f62      	cmp	r7, #98	@ 0x62
 8003ef6:	d80a      	bhi.n	8003f0e <_printf_i+0x32>
 8003ef8:	2f00      	cmp	r7, #0
 8003efa:	f000 80d2 	beq.w	80040a2 <_printf_i+0x1c6>
 8003efe:	2f58      	cmp	r7, #88	@ 0x58
 8003f00:	f000 80b9 	beq.w	8004076 <_printf_i+0x19a>
 8003f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f0c:	e03a      	b.n	8003f84 <_printf_i+0xa8>
 8003f0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f12:	2b15      	cmp	r3, #21
 8003f14:	d8f6      	bhi.n	8003f04 <_printf_i+0x28>
 8003f16:	a101      	add	r1, pc, #4	@ (adr r1, 8003f1c <_printf_i+0x40>)
 8003f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f05 	.word	0x08003f05
 8003f28:	08003f05 	.word	0x08003f05
 8003f2c:	08003f05 	.word	0x08003f05
 8003f30:	08003f05 	.word	0x08003f05
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f05 	.word	0x08003f05
 8003f3c:	08003f05 	.word	0x08003f05
 8003f40:	08003f05 	.word	0x08003f05
 8003f44:	08003f05 	.word	0x08003f05
 8003f48:	08004089 	.word	0x08004089
 8003f4c:	08003fb3 	.word	0x08003fb3
 8003f50:	08004043 	.word	0x08004043
 8003f54:	08003f05 	.word	0x08003f05
 8003f58:	08003f05 	.word	0x08003f05
 8003f5c:	080040ab 	.word	0x080040ab
 8003f60:	08003f05 	.word	0x08003f05
 8003f64:	08003fb3 	.word	0x08003fb3
 8003f68:	08003f05 	.word	0x08003f05
 8003f6c:	08003f05 	.word	0x08003f05
 8003f70:	0800404b 	.word	0x0800404b
 8003f74:	6833      	ldr	r3, [r6, #0]
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6032      	str	r2, [r6, #0]
 8003f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f84:	2301      	movs	r3, #1
 8003f86:	e09d      	b.n	80040c4 <_printf_i+0x1e8>
 8003f88:	6833      	ldr	r3, [r6, #0]
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	1d19      	adds	r1, r3, #4
 8003f8e:	6031      	str	r1, [r6, #0]
 8003f90:	0606      	lsls	r6, r0, #24
 8003f92:	d501      	bpl.n	8003f98 <_printf_i+0xbc>
 8003f94:	681d      	ldr	r5, [r3, #0]
 8003f96:	e003      	b.n	8003fa0 <_printf_i+0xc4>
 8003f98:	0645      	lsls	r5, r0, #25
 8003f9a:	d5fb      	bpl.n	8003f94 <_printf_i+0xb8>
 8003f9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	da03      	bge.n	8003fac <_printf_i+0xd0>
 8003fa4:	232d      	movs	r3, #45	@ 0x2d
 8003fa6:	426d      	negs	r5, r5
 8003fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fac:	4859      	ldr	r0, [pc, #356]	@ (8004114 <_printf_i+0x238>)
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e011      	b.n	8003fd6 <_printf_i+0xfa>
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	6833      	ldr	r3, [r6, #0]
 8003fb6:	0608      	lsls	r0, r1, #24
 8003fb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fbc:	d402      	bmi.n	8003fc4 <_printf_i+0xe8>
 8003fbe:	0649      	lsls	r1, r1, #25
 8003fc0:	bf48      	it	mi
 8003fc2:	b2ad      	uxthmi	r5, r5
 8003fc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fc6:	4853      	ldr	r0, [pc, #332]	@ (8004114 <_printf_i+0x238>)
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	bf14      	ite	ne
 8003fcc:	230a      	movne	r3, #10
 8003fce:	2308      	moveq	r3, #8
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fd6:	6866      	ldr	r6, [r4, #4]
 8003fd8:	60a6      	str	r6, [r4, #8]
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	bfa2      	ittt	ge
 8003fde:	6821      	ldrge	r1, [r4, #0]
 8003fe0:	f021 0104 	bicge.w	r1, r1, #4
 8003fe4:	6021      	strge	r1, [r4, #0]
 8003fe6:	b90d      	cbnz	r5, 8003fec <_printf_i+0x110>
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	d04b      	beq.n	8004084 <_printf_i+0x1a8>
 8003fec:	4616      	mov	r6, r2
 8003fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ff6:	5dc7      	ldrb	r7, [r0, r7]
 8003ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ffc:	462f      	mov	r7, r5
 8003ffe:	42bb      	cmp	r3, r7
 8004000:	460d      	mov	r5, r1
 8004002:	d9f4      	bls.n	8003fee <_printf_i+0x112>
 8004004:	2b08      	cmp	r3, #8
 8004006:	d10b      	bne.n	8004020 <_printf_i+0x144>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	07df      	lsls	r7, r3, #31
 800400c:	d508      	bpl.n	8004020 <_printf_i+0x144>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	6861      	ldr	r1, [r4, #4]
 8004012:	4299      	cmp	r1, r3
 8004014:	bfde      	ittt	le
 8004016:	2330      	movle	r3, #48	@ 0x30
 8004018:	f806 3c01 	strble.w	r3, [r6, #-1]
 800401c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004020:	1b92      	subs	r2, r2, r6
 8004022:	6122      	str	r2, [r4, #16]
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	464b      	mov	r3, r9
 800402a:	aa03      	add	r2, sp, #12
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fee6 	bl	8003e00 <_printf_common>
 8004034:	3001      	adds	r0, #1
 8004036:	d14a      	bne.n	80040ce <_printf_i+0x1f2>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	b004      	add	sp, #16
 800403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f043 0320 	orr.w	r3, r3, #32
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	4833      	ldr	r0, [pc, #204]	@ (8004118 <_printf_i+0x23c>)
 800404c:	2778      	movs	r7, #120	@ 0x78
 800404e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	6831      	ldr	r1, [r6, #0]
 8004056:	061f      	lsls	r7, r3, #24
 8004058:	f851 5b04 	ldr.w	r5, [r1], #4
 800405c:	d402      	bmi.n	8004064 <_printf_i+0x188>
 800405e:	065f      	lsls	r7, r3, #25
 8004060:	bf48      	it	mi
 8004062:	b2ad      	uxthmi	r5, r5
 8004064:	6031      	str	r1, [r6, #0]
 8004066:	07d9      	lsls	r1, r3, #31
 8004068:	bf44      	itt	mi
 800406a:	f043 0320 	orrmi.w	r3, r3, #32
 800406e:	6023      	strmi	r3, [r4, #0]
 8004070:	b11d      	cbz	r5, 800407a <_printf_i+0x19e>
 8004072:	2310      	movs	r3, #16
 8004074:	e7ac      	b.n	8003fd0 <_printf_i+0xf4>
 8004076:	4827      	ldr	r0, [pc, #156]	@ (8004114 <_printf_i+0x238>)
 8004078:	e7e9      	b.n	800404e <_printf_i+0x172>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	f023 0320 	bic.w	r3, r3, #32
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	e7f6      	b.n	8004072 <_printf_i+0x196>
 8004084:	4616      	mov	r6, r2
 8004086:	e7bd      	b.n	8004004 <_printf_i+0x128>
 8004088:	6833      	ldr	r3, [r6, #0]
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	6961      	ldr	r1, [r4, #20]
 800408e:	1d18      	adds	r0, r3, #4
 8004090:	6030      	str	r0, [r6, #0]
 8004092:	062e      	lsls	r6, r5, #24
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	d501      	bpl.n	800409c <_printf_i+0x1c0>
 8004098:	6019      	str	r1, [r3, #0]
 800409a:	e002      	b.n	80040a2 <_printf_i+0x1c6>
 800409c:	0668      	lsls	r0, r5, #25
 800409e:	d5fb      	bpl.n	8004098 <_printf_i+0x1bc>
 80040a0:	8019      	strh	r1, [r3, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	4616      	mov	r6, r2
 80040a8:	e7bc      	b.n	8004024 <_printf_i+0x148>
 80040aa:	6833      	ldr	r3, [r6, #0]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	6032      	str	r2, [r6, #0]
 80040b0:	681e      	ldr	r6, [r3, #0]
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	2100      	movs	r1, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7fc f8ba 	bl	8000230 <memchr>
 80040bc:	b108      	cbz	r0, 80040c2 <_printf_i+0x1e6>
 80040be:	1b80      	subs	r0, r0, r6
 80040c0:	6060      	str	r0, [r4, #4]
 80040c2:	6863      	ldr	r3, [r4, #4]
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	2300      	movs	r3, #0
 80040c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040cc:	e7aa      	b.n	8004024 <_printf_i+0x148>
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	4632      	mov	r2, r6
 80040d2:	4649      	mov	r1, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	47d0      	blx	sl
 80040d8:	3001      	adds	r0, #1
 80040da:	d0ad      	beq.n	8004038 <_printf_i+0x15c>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	079b      	lsls	r3, r3, #30
 80040e0:	d413      	bmi.n	800410a <_printf_i+0x22e>
 80040e2:	68e0      	ldr	r0, [r4, #12]
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	4298      	cmp	r0, r3
 80040e8:	bfb8      	it	lt
 80040ea:	4618      	movlt	r0, r3
 80040ec:	e7a6      	b.n	800403c <_printf_i+0x160>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4632      	mov	r2, r6
 80040f2:	4649      	mov	r1, r9
 80040f4:	4640      	mov	r0, r8
 80040f6:	47d0      	blx	sl
 80040f8:	3001      	adds	r0, #1
 80040fa:	d09d      	beq.n	8004038 <_printf_i+0x15c>
 80040fc:	3501      	adds	r5, #1
 80040fe:	68e3      	ldr	r3, [r4, #12]
 8004100:	9903      	ldr	r1, [sp, #12]
 8004102:	1a5b      	subs	r3, r3, r1
 8004104:	42ab      	cmp	r3, r5
 8004106:	dcf2      	bgt.n	80040ee <_printf_i+0x212>
 8004108:	e7eb      	b.n	80040e2 <_printf_i+0x206>
 800410a:	2500      	movs	r5, #0
 800410c:	f104 0619 	add.w	r6, r4, #25
 8004110:	e7f5      	b.n	80040fe <_printf_i+0x222>
 8004112:	bf00      	nop
 8004114:	080049a9 	.word	0x080049a9
 8004118:	080049ba 	.word	0x080049ba

0800411c <_scanf_chars>:
 800411c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004120:	4615      	mov	r5, r2
 8004122:	688a      	ldr	r2, [r1, #8]
 8004124:	4680      	mov	r8, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b932      	cbnz	r2, 8004138 <_scanf_chars+0x1c>
 800412a:	698a      	ldr	r2, [r1, #24]
 800412c:	2a00      	cmp	r2, #0
 800412e:	bf14      	ite	ne
 8004130:	f04f 32ff 	movne.w	r2, #4294967295
 8004134:	2201      	moveq	r2, #1
 8004136:	608a      	str	r2, [r1, #8]
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80041cc <_scanf_chars+0xb0>
 800413e:	06d1      	lsls	r1, r2, #27
 8004140:	bf5f      	itttt	pl
 8004142:	681a      	ldrpl	r2, [r3, #0]
 8004144:	1d11      	addpl	r1, r2, #4
 8004146:	6019      	strpl	r1, [r3, #0]
 8004148:	6816      	ldrpl	r6, [r2, #0]
 800414a:	2700      	movs	r7, #0
 800414c:	69a0      	ldr	r0, [r4, #24]
 800414e:	b188      	cbz	r0, 8004174 <_scanf_chars+0x58>
 8004150:	2801      	cmp	r0, #1
 8004152:	d107      	bne.n	8004164 <_scanf_chars+0x48>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	6963      	ldr	r3, [r4, #20]
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	b953      	cbnz	r3, 8004174 <_scanf_chars+0x58>
 800415e:	2f00      	cmp	r7, #0
 8004160:	d031      	beq.n	80041c6 <_scanf_chars+0xaa>
 8004162:	e022      	b.n	80041aa <_scanf_chars+0x8e>
 8004164:	2802      	cmp	r0, #2
 8004166:	d120      	bne.n	80041aa <_scanf_chars+0x8e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	d41a      	bmi.n	80041aa <_scanf_chars+0x8e>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	06da      	lsls	r2, r3, #27
 8004178:	bf5e      	ittt	pl
 800417a:	682b      	ldrpl	r3, [r5, #0]
 800417c:	781b      	ldrbpl	r3, [r3, #0]
 800417e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004182:	682a      	ldr	r2, [r5, #0]
 8004184:	686b      	ldr	r3, [r5, #4]
 8004186:	3201      	adds	r2, #1
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	68a2      	ldr	r2, [r4, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	3a01      	subs	r2, #1
 8004190:	606b      	str	r3, [r5, #4]
 8004192:	3701      	adds	r7, #1
 8004194:	60a2      	str	r2, [r4, #8]
 8004196:	b142      	cbz	r2, 80041aa <_scanf_chars+0x8e>
 8004198:	2b00      	cmp	r3, #0
 800419a:	dcd7      	bgt.n	800414c <_scanf_chars+0x30>
 800419c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80041a0:	4629      	mov	r1, r5
 80041a2:	4640      	mov	r0, r8
 80041a4:	4798      	blx	r3
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d0d0      	beq.n	800414c <_scanf_chars+0x30>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	f013 0310 	ands.w	r3, r3, #16
 80041b0:	d105      	bne.n	80041be <_scanf_chars+0xa2>
 80041b2:	68e2      	ldr	r2, [r4, #12]
 80041b4:	3201      	adds	r2, #1
 80041b6:	60e2      	str	r2, [r4, #12]
 80041b8:	69a2      	ldr	r2, [r4, #24]
 80041ba:	b102      	cbz	r2, 80041be <_scanf_chars+0xa2>
 80041bc:	7033      	strb	r3, [r6, #0]
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	443b      	add	r3, r7
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	2000      	movs	r0, #0
 80041c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ca:	bf00      	nop
 80041cc:	080049e7 	.word	0x080049e7

080041d0 <_scanf_i>:
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	4698      	mov	r8, r3
 80041d6:	4b74      	ldr	r3, [pc, #464]	@ (80043a8 <_scanf_i+0x1d8>)
 80041d8:	460c      	mov	r4, r1
 80041da:	4682      	mov	sl, r0
 80041dc:	4616      	mov	r6, r2
 80041de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041e2:	b087      	sub	sp, #28
 80041e4:	ab03      	add	r3, sp, #12
 80041e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041ea:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <_scanf_i+0x1dc>)
 80041ec:	69a1      	ldr	r1, [r4, #24]
 80041ee:	4a70      	ldr	r2, [pc, #448]	@ (80043b0 <_scanf_i+0x1e0>)
 80041f0:	2903      	cmp	r1, #3
 80041f2:	bf08      	it	eq
 80041f4:	461a      	moveq	r2, r3
 80041f6:	68a3      	ldr	r3, [r4, #8]
 80041f8:	9201      	str	r2, [sp, #4]
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004200:	bf88      	it	hi
 8004202:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004206:	4627      	mov	r7, r4
 8004208:	bf82      	ittt	hi
 800420a:	eb03 0905 	addhi.w	r9, r3, r5
 800420e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004212:	60a3      	strhi	r3, [r4, #8]
 8004214:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004218:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800421c:	bf98      	it	ls
 800421e:	f04f 0900 	movls.w	r9, #0
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	463d      	mov	r5, r7
 8004226:	f04f 0b00 	mov.w	fp, #0
 800422a:	6831      	ldr	r1, [r6, #0]
 800422c:	ab03      	add	r3, sp, #12
 800422e:	7809      	ldrb	r1, [r1, #0]
 8004230:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004234:	2202      	movs	r2, #2
 8004236:	f7fb fffb 	bl	8000230 <memchr>
 800423a:	b328      	cbz	r0, 8004288 <_scanf_i+0xb8>
 800423c:	f1bb 0f01 	cmp.w	fp, #1
 8004240:	d159      	bne.n	80042f6 <_scanf_i+0x126>
 8004242:	6862      	ldr	r2, [r4, #4]
 8004244:	b92a      	cbnz	r2, 8004252 <_scanf_i+0x82>
 8004246:	6822      	ldr	r2, [r4, #0]
 8004248:	2108      	movs	r1, #8
 800424a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424e:	6061      	str	r1, [r4, #4]
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004258:	6022      	str	r2, [r4, #0]
 800425a:	68a2      	ldr	r2, [r4, #8]
 800425c:	1e51      	subs	r1, r2, #1
 800425e:	60a1      	str	r1, [r4, #8]
 8004260:	b192      	cbz	r2, 8004288 <_scanf_i+0xb8>
 8004262:	6832      	ldr	r2, [r6, #0]
 8004264:	1c51      	adds	r1, r2, #1
 8004266:	6031      	str	r1, [r6, #0]
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	f805 2b01 	strb.w	r2, [r5], #1
 800426e:	6872      	ldr	r2, [r6, #4]
 8004270:	3a01      	subs	r2, #1
 8004272:	2a00      	cmp	r2, #0
 8004274:	6072      	str	r2, [r6, #4]
 8004276:	dc07      	bgt.n	8004288 <_scanf_i+0xb8>
 8004278:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800427c:	4631      	mov	r1, r6
 800427e:	4650      	mov	r0, sl
 8004280:	4790      	blx	r2
 8004282:	2800      	cmp	r0, #0
 8004284:	f040 8085 	bne.w	8004392 <_scanf_i+0x1c2>
 8004288:	f10b 0b01 	add.w	fp, fp, #1
 800428c:	f1bb 0f03 	cmp.w	fp, #3
 8004290:	d1cb      	bne.n	800422a <_scanf_i+0x5a>
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	b90b      	cbnz	r3, 800429a <_scanf_i+0xca>
 8004296:	230a      	movs	r3, #10
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	4945      	ldr	r1, [pc, #276]	@ (80043b4 <_scanf_i+0x1e4>)
 800429e:	6960      	ldr	r0, [r4, #20]
 80042a0:	1ac9      	subs	r1, r1, r3
 80042a2:	f000 f889 	bl	80043b8 <__sccl>
 80042a6:	f04f 0b00 	mov.w	fp, #0
 80042aa:	68a3      	ldr	r3, [r4, #8]
 80042ac:	6822      	ldr	r2, [r4, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03d      	beq.n	800432e <_scanf_i+0x15e>
 80042b2:	6831      	ldr	r1, [r6, #0]
 80042b4:	6960      	ldr	r0, [r4, #20]
 80042b6:	f891 c000 	ldrb.w	ip, [r1]
 80042ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80042be:	2800      	cmp	r0, #0
 80042c0:	d035      	beq.n	800432e <_scanf_i+0x15e>
 80042c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80042c6:	d124      	bne.n	8004312 <_scanf_i+0x142>
 80042c8:	0510      	lsls	r0, r2, #20
 80042ca:	d522      	bpl.n	8004312 <_scanf_i+0x142>
 80042cc:	f10b 0b01 	add.w	fp, fp, #1
 80042d0:	f1b9 0f00 	cmp.w	r9, #0
 80042d4:	d003      	beq.n	80042de <_scanf_i+0x10e>
 80042d6:	3301      	adds	r3, #1
 80042d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6873      	ldr	r3, [r6, #4]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	6073      	str	r3, [r6, #4]
 80042e6:	dd1b      	ble.n	8004320 <_scanf_i+0x150>
 80042e8:	6833      	ldr	r3, [r6, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	60a3      	str	r3, [r4, #8]
 80042f4:	e7d9      	b.n	80042aa <_scanf_i+0xda>
 80042f6:	f1bb 0f02 	cmp.w	fp, #2
 80042fa:	d1ae      	bne.n	800425a <_scanf_i+0x8a>
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004302:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004306:	d1bf      	bne.n	8004288 <_scanf_i+0xb8>
 8004308:	2110      	movs	r1, #16
 800430a:	6061      	str	r1, [r4, #4]
 800430c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004310:	e7a2      	b.n	8004258 <_scanf_i+0x88>
 8004312:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	780b      	ldrb	r3, [r1, #0]
 800431a:	f805 3b01 	strb.w	r3, [r5], #1
 800431e:	e7de      	b.n	80042de <_scanf_i+0x10e>
 8004320:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004324:	4631      	mov	r1, r6
 8004326:	4650      	mov	r0, sl
 8004328:	4798      	blx	r3
 800432a:	2800      	cmp	r0, #0
 800432c:	d0df      	beq.n	80042ee <_scanf_i+0x11e>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	05d9      	lsls	r1, r3, #23
 8004332:	d50d      	bpl.n	8004350 <_scanf_i+0x180>
 8004334:	42bd      	cmp	r5, r7
 8004336:	d909      	bls.n	800434c <_scanf_i+0x17c>
 8004338:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800433c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004340:	4632      	mov	r2, r6
 8004342:	4650      	mov	r0, sl
 8004344:	4798      	blx	r3
 8004346:	f105 39ff 	add.w	r9, r5, #4294967295
 800434a:	464d      	mov	r5, r9
 800434c:	42bd      	cmp	r5, r7
 800434e:	d028      	beq.n	80043a2 <_scanf_i+0x1d2>
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	f012 0210 	ands.w	r2, r2, #16
 8004356:	d113      	bne.n	8004380 <_scanf_i+0x1b0>
 8004358:	702a      	strb	r2, [r5, #0]
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	9e01      	ldr	r6, [sp, #4]
 800435e:	4639      	mov	r1, r7
 8004360:	4650      	mov	r0, sl
 8004362:	47b0      	blx	r6
 8004364:	f8d8 3000 	ldr.w	r3, [r8]
 8004368:	6821      	ldr	r1, [r4, #0]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	f8c8 2000 	str.w	r2, [r8]
 8004370:	f011 0f20 	tst.w	r1, #32
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	d00f      	beq.n	8004398 <_scanf_i+0x1c8>
 8004378:	6018      	str	r0, [r3, #0]
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60e3      	str	r3, [r4, #12]
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	1bed      	subs	r5, r5, r7
 8004384:	445d      	add	r5, fp
 8004386:	442b      	add	r3, r5
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2000      	movs	r0, #0
 800438c:	b007      	add	sp, #28
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	f04f 0b00 	mov.w	fp, #0
 8004396:	e7ca      	b.n	800432e <_scanf_i+0x15e>
 8004398:	07ca      	lsls	r2, r1, #31
 800439a:	bf4c      	ite	mi
 800439c:	8018      	strhmi	r0, [r3, #0]
 800439e:	6018      	strpl	r0, [r3, #0]
 80043a0:	e7eb      	b.n	800437a <_scanf_i+0x1aa>
 80043a2:	2001      	movs	r0, #1
 80043a4:	e7f2      	b.n	800438c <_scanf_i+0x1bc>
 80043a6:	bf00      	nop
 80043a8:	0800494c 	.word	0x0800494c
 80043ac:	08004661 	.word	0x08004661
 80043b0:	08004741 	.word	0x08004741
 80043b4:	080049db 	.word	0x080049db

080043b8 <__sccl>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	780b      	ldrb	r3, [r1, #0]
 80043bc:	4604      	mov	r4, r0
 80043be:	2b5e      	cmp	r3, #94	@ 0x5e
 80043c0:	bf0b      	itete	eq
 80043c2:	784b      	ldrbeq	r3, [r1, #1]
 80043c4:	1c4a      	addne	r2, r1, #1
 80043c6:	1c8a      	addeq	r2, r1, #2
 80043c8:	2100      	movne	r1, #0
 80043ca:	bf08      	it	eq
 80043cc:	2101      	moveq	r1, #1
 80043ce:	3801      	subs	r0, #1
 80043d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80043d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80043d8:	42a8      	cmp	r0, r5
 80043da:	d1fb      	bne.n	80043d4 <__sccl+0x1c>
 80043dc:	b90b      	cbnz	r3, 80043e2 <__sccl+0x2a>
 80043de:	1e50      	subs	r0, r2, #1
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	f081 0101 	eor.w	r1, r1, #1
 80043e6:	54e1      	strb	r1, [r4, r3]
 80043e8:	4610      	mov	r0, r2
 80043ea:	4602      	mov	r2, r0
 80043ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80043f0:	2d2d      	cmp	r5, #45	@ 0x2d
 80043f2:	d005      	beq.n	8004400 <__sccl+0x48>
 80043f4:	2d5d      	cmp	r5, #93	@ 0x5d
 80043f6:	d016      	beq.n	8004426 <__sccl+0x6e>
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	d0f1      	beq.n	80043e0 <__sccl+0x28>
 80043fc:	462b      	mov	r3, r5
 80043fe:	e7f2      	b.n	80043e6 <__sccl+0x2e>
 8004400:	7846      	ldrb	r6, [r0, #1]
 8004402:	2e5d      	cmp	r6, #93	@ 0x5d
 8004404:	d0fa      	beq.n	80043fc <__sccl+0x44>
 8004406:	42b3      	cmp	r3, r6
 8004408:	dcf8      	bgt.n	80043fc <__sccl+0x44>
 800440a:	3002      	adds	r0, #2
 800440c:	461a      	mov	r2, r3
 800440e:	3201      	adds	r2, #1
 8004410:	4296      	cmp	r6, r2
 8004412:	54a1      	strb	r1, [r4, r2]
 8004414:	dcfb      	bgt.n	800440e <__sccl+0x56>
 8004416:	1af2      	subs	r2, r6, r3
 8004418:	3a01      	subs	r2, #1
 800441a:	1c5d      	adds	r5, r3, #1
 800441c:	42b3      	cmp	r3, r6
 800441e:	bfa8      	it	ge
 8004420:	2200      	movge	r2, #0
 8004422:	18ab      	adds	r3, r5, r2
 8004424:	e7e1      	b.n	80043ea <__sccl+0x32>
 8004426:	4610      	mov	r0, r2
 8004428:	e7da      	b.n	80043e0 <__sccl+0x28>

0800442a <__submore>:
 800442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442e:	460c      	mov	r4, r1
 8004430:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004436:	4299      	cmp	r1, r3
 8004438:	d11d      	bne.n	8004476 <__submore+0x4c>
 800443a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800443e:	f7ff f92f 	bl	80036a0 <_malloc_r>
 8004442:	b918      	cbnz	r0, 800444c <__submore+0x22>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004450:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004452:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004456:	6360      	str	r0, [r4, #52]	@ 0x34
 8004458:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800445c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004460:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004464:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004468:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800446c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004470:	6020      	str	r0, [r4, #0]
 8004472:	2000      	movs	r0, #0
 8004474:	e7e8      	b.n	8004448 <__submore+0x1e>
 8004476:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004478:	0077      	lsls	r7, r6, #1
 800447a:	463a      	mov	r2, r7
 800447c:	f000 f848 	bl	8004510 <_realloc_r>
 8004480:	4605      	mov	r5, r0
 8004482:	2800      	cmp	r0, #0
 8004484:	d0de      	beq.n	8004444 <__submore+0x1a>
 8004486:	eb00 0806 	add.w	r8, r0, r6
 800448a:	4601      	mov	r1, r0
 800448c:	4632      	mov	r2, r6
 800448e:	4640      	mov	r0, r8
 8004490:	f000 f830 	bl	80044f4 <memcpy>
 8004494:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004498:	f8c4 8000 	str.w	r8, [r4]
 800449c:	e7e9      	b.n	8004472 <__submore+0x48>

0800449e <memmove>:
 800449e:	4288      	cmp	r0, r1
 80044a0:	b510      	push	{r4, lr}
 80044a2:	eb01 0402 	add.w	r4, r1, r2
 80044a6:	d902      	bls.n	80044ae <memmove+0x10>
 80044a8:	4284      	cmp	r4, r0
 80044aa:	4623      	mov	r3, r4
 80044ac:	d807      	bhi.n	80044be <memmove+0x20>
 80044ae:	1e43      	subs	r3, r0, #1
 80044b0:	42a1      	cmp	r1, r4
 80044b2:	d008      	beq.n	80044c6 <memmove+0x28>
 80044b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044bc:	e7f8      	b.n	80044b0 <memmove+0x12>
 80044be:	4402      	add	r2, r0
 80044c0:	4601      	mov	r1, r0
 80044c2:	428a      	cmp	r2, r1
 80044c4:	d100      	bne.n	80044c8 <memmove+0x2a>
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044d0:	e7f7      	b.n	80044c2 <memmove+0x24>
	...

080044d4 <_sbrk_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d06      	ldr	r5, [pc, #24]	@ (80044f0 <_sbrk_r+0x1c>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	f7fc fc94 	bl	8000e0c <_sbrk>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_sbrk_r+0x1a>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_sbrk_r+0x1a>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	200003a8 	.word	0x200003a8

080044f4 <memcpy>:
 80044f4:	440a      	add	r2, r1
 80044f6:	4291      	cmp	r1, r2
 80044f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044fc:	d100      	bne.n	8004500 <memcpy+0xc>
 80044fe:	4770      	bx	lr
 8004500:	b510      	push	{r4, lr}
 8004502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800450a:	4291      	cmp	r1, r2
 800450c:	d1f9      	bne.n	8004502 <memcpy+0xe>
 800450e:	bd10      	pop	{r4, pc}

08004510 <_realloc_r>:
 8004510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004514:	4680      	mov	r8, r0
 8004516:	4615      	mov	r5, r2
 8004518:	460c      	mov	r4, r1
 800451a:	b921      	cbnz	r1, 8004526 <_realloc_r+0x16>
 800451c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004520:	4611      	mov	r1, r2
 8004522:	f7ff b8bd 	b.w	80036a0 <_malloc_r>
 8004526:	b92a      	cbnz	r2, 8004534 <_realloc_r+0x24>
 8004528:	f7ff f84e 	bl	80035c8 <_free_r>
 800452c:	2400      	movs	r4, #0
 800452e:	4620      	mov	r0, r4
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004534:	f000 f906 	bl	8004744 <_malloc_usable_size_r>
 8004538:	4285      	cmp	r5, r0
 800453a:	4606      	mov	r6, r0
 800453c:	d802      	bhi.n	8004544 <_realloc_r+0x34>
 800453e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004542:	d8f4      	bhi.n	800452e <_realloc_r+0x1e>
 8004544:	4629      	mov	r1, r5
 8004546:	4640      	mov	r0, r8
 8004548:	f7ff f8aa 	bl	80036a0 <_malloc_r>
 800454c:	4607      	mov	r7, r0
 800454e:	2800      	cmp	r0, #0
 8004550:	d0ec      	beq.n	800452c <_realloc_r+0x1c>
 8004552:	42b5      	cmp	r5, r6
 8004554:	462a      	mov	r2, r5
 8004556:	4621      	mov	r1, r4
 8004558:	bf28      	it	cs
 800455a:	4632      	movcs	r2, r6
 800455c:	f7ff ffca 	bl	80044f4 <memcpy>
 8004560:	4621      	mov	r1, r4
 8004562:	4640      	mov	r0, r8
 8004564:	f7ff f830 	bl	80035c8 <_free_r>
 8004568:	463c      	mov	r4, r7
 800456a:	e7e0      	b.n	800452e <_realloc_r+0x1e>

0800456c <_strtol_l.constprop.0>:
 800456c:	2b24      	cmp	r3, #36	@ 0x24
 800456e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004572:	4686      	mov	lr, r0
 8004574:	4690      	mov	r8, r2
 8004576:	d801      	bhi.n	800457c <_strtol_l.constprop.0+0x10>
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <_strtol_l.constprop.0+0x1e>
 800457c:	f7fe fff8 	bl	8003570 <__errno>
 8004580:	2316      	movs	r3, #22
 8004582:	6003      	str	r3, [r0, #0]
 8004584:	2000      	movs	r0, #0
 8004586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458a:	4834      	ldr	r0, [pc, #208]	@ (800465c <_strtol_l.constprop.0+0xf0>)
 800458c:	460d      	mov	r5, r1
 800458e:	462a      	mov	r2, r5
 8004590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004594:	5d06      	ldrb	r6, [r0, r4]
 8004596:	f016 0608 	ands.w	r6, r6, #8
 800459a:	d1f8      	bne.n	800458e <_strtol_l.constprop.0+0x22>
 800459c:	2c2d      	cmp	r4, #45	@ 0x2d
 800459e:	d12d      	bne.n	80045fc <_strtol_l.constprop.0+0x90>
 80045a0:	782c      	ldrb	r4, [r5, #0]
 80045a2:	2601      	movs	r6, #1
 80045a4:	1c95      	adds	r5, r2, #2
 80045a6:	f033 0210 	bics.w	r2, r3, #16
 80045aa:	d109      	bne.n	80045c0 <_strtol_l.constprop.0+0x54>
 80045ac:	2c30      	cmp	r4, #48	@ 0x30
 80045ae:	d12a      	bne.n	8004606 <_strtol_l.constprop.0+0x9a>
 80045b0:	782a      	ldrb	r2, [r5, #0]
 80045b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80045b6:	2a58      	cmp	r2, #88	@ 0x58
 80045b8:	d125      	bne.n	8004606 <_strtol_l.constprop.0+0x9a>
 80045ba:	786c      	ldrb	r4, [r5, #1]
 80045bc:	2310      	movs	r3, #16
 80045be:	3502      	adds	r5, #2
 80045c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80045c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80045c8:	2200      	movs	r2, #0
 80045ca:	fbbc f9f3 	udiv	r9, ip, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80045d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80045d8:	2f09      	cmp	r7, #9
 80045da:	d81b      	bhi.n	8004614 <_strtol_l.constprop.0+0xa8>
 80045dc:	463c      	mov	r4, r7
 80045de:	42a3      	cmp	r3, r4
 80045e0:	dd27      	ble.n	8004632 <_strtol_l.constprop.0+0xc6>
 80045e2:	1c57      	adds	r7, r2, #1
 80045e4:	d007      	beq.n	80045f6 <_strtol_l.constprop.0+0x8a>
 80045e6:	4581      	cmp	r9, r0
 80045e8:	d320      	bcc.n	800462c <_strtol_l.constprop.0+0xc0>
 80045ea:	d101      	bne.n	80045f0 <_strtol_l.constprop.0+0x84>
 80045ec:	45a2      	cmp	sl, r4
 80045ee:	db1d      	blt.n	800462c <_strtol_l.constprop.0+0xc0>
 80045f0:	fb00 4003 	mla	r0, r0, r3, r4
 80045f4:	2201      	movs	r2, #1
 80045f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045fa:	e7eb      	b.n	80045d4 <_strtol_l.constprop.0+0x68>
 80045fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80045fe:	bf04      	itt	eq
 8004600:	782c      	ldrbeq	r4, [r5, #0]
 8004602:	1c95      	addeq	r5, r2, #2
 8004604:	e7cf      	b.n	80045a6 <_strtol_l.constprop.0+0x3a>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1da      	bne.n	80045c0 <_strtol_l.constprop.0+0x54>
 800460a:	2c30      	cmp	r4, #48	@ 0x30
 800460c:	bf0c      	ite	eq
 800460e:	2308      	moveq	r3, #8
 8004610:	230a      	movne	r3, #10
 8004612:	e7d5      	b.n	80045c0 <_strtol_l.constprop.0+0x54>
 8004614:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004618:	2f19      	cmp	r7, #25
 800461a:	d801      	bhi.n	8004620 <_strtol_l.constprop.0+0xb4>
 800461c:	3c37      	subs	r4, #55	@ 0x37
 800461e:	e7de      	b.n	80045de <_strtol_l.constprop.0+0x72>
 8004620:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004624:	2f19      	cmp	r7, #25
 8004626:	d804      	bhi.n	8004632 <_strtol_l.constprop.0+0xc6>
 8004628:	3c57      	subs	r4, #87	@ 0x57
 800462a:	e7d8      	b.n	80045de <_strtol_l.constprop.0+0x72>
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	e7e1      	b.n	80045f6 <_strtol_l.constprop.0+0x8a>
 8004632:	1c53      	adds	r3, r2, #1
 8004634:	d108      	bne.n	8004648 <_strtol_l.constprop.0+0xdc>
 8004636:	2322      	movs	r3, #34	@ 0x22
 8004638:	f8ce 3000 	str.w	r3, [lr]
 800463c:	4660      	mov	r0, ip
 800463e:	f1b8 0f00 	cmp.w	r8, #0
 8004642:	d0a0      	beq.n	8004586 <_strtol_l.constprop.0+0x1a>
 8004644:	1e69      	subs	r1, r5, #1
 8004646:	e006      	b.n	8004656 <_strtol_l.constprop.0+0xea>
 8004648:	b106      	cbz	r6, 800464c <_strtol_l.constprop.0+0xe0>
 800464a:	4240      	negs	r0, r0
 800464c:	f1b8 0f00 	cmp.w	r8, #0
 8004650:	d099      	beq.n	8004586 <_strtol_l.constprop.0+0x1a>
 8004652:	2a00      	cmp	r2, #0
 8004654:	d1f6      	bne.n	8004644 <_strtol_l.constprop.0+0xd8>
 8004656:	f8c8 1000 	str.w	r1, [r8]
 800465a:	e794      	b.n	8004586 <_strtol_l.constprop.0+0x1a>
 800465c:	080049e7 	.word	0x080049e7

08004660 <_strtol_r>:
 8004660:	f7ff bf84 	b.w	800456c <_strtol_l.constprop.0>

08004664 <_strtoul_l.constprop.0>:
 8004664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004668:	4e34      	ldr	r6, [pc, #208]	@ (800473c <_strtoul_l.constprop.0+0xd8>)
 800466a:	4686      	mov	lr, r0
 800466c:	460d      	mov	r5, r1
 800466e:	4628      	mov	r0, r5
 8004670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004674:	5d37      	ldrb	r7, [r6, r4]
 8004676:	f017 0708 	ands.w	r7, r7, #8
 800467a:	d1f8      	bne.n	800466e <_strtoul_l.constprop.0+0xa>
 800467c:	2c2d      	cmp	r4, #45	@ 0x2d
 800467e:	d12f      	bne.n	80046e0 <_strtoul_l.constprop.0+0x7c>
 8004680:	782c      	ldrb	r4, [r5, #0]
 8004682:	2701      	movs	r7, #1
 8004684:	1c85      	adds	r5, r0, #2
 8004686:	f033 0010 	bics.w	r0, r3, #16
 800468a:	d109      	bne.n	80046a0 <_strtoul_l.constprop.0+0x3c>
 800468c:	2c30      	cmp	r4, #48	@ 0x30
 800468e:	d12c      	bne.n	80046ea <_strtoul_l.constprop.0+0x86>
 8004690:	7828      	ldrb	r0, [r5, #0]
 8004692:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004696:	2858      	cmp	r0, #88	@ 0x58
 8004698:	d127      	bne.n	80046ea <_strtoul_l.constprop.0+0x86>
 800469a:	786c      	ldrb	r4, [r5, #1]
 800469c:	2310      	movs	r3, #16
 800469e:	3502      	adds	r5, #2
 80046a0:	f04f 38ff 	mov.w	r8, #4294967295
 80046a4:	2600      	movs	r6, #0
 80046a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80046aa:	fb03 f908 	mul.w	r9, r3, r8
 80046ae:	ea6f 0909 	mvn.w	r9, r9
 80046b2:	4630      	mov	r0, r6
 80046b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80046b8:	f1bc 0f09 	cmp.w	ip, #9
 80046bc:	d81c      	bhi.n	80046f8 <_strtoul_l.constprop.0+0x94>
 80046be:	4664      	mov	r4, ip
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	dd2a      	ble.n	800471a <_strtoul_l.constprop.0+0xb6>
 80046c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80046c8:	d007      	beq.n	80046da <_strtoul_l.constprop.0+0x76>
 80046ca:	4580      	cmp	r8, r0
 80046cc:	d322      	bcc.n	8004714 <_strtoul_l.constprop.0+0xb0>
 80046ce:	d101      	bne.n	80046d4 <_strtoul_l.constprop.0+0x70>
 80046d0:	45a1      	cmp	r9, r4
 80046d2:	db1f      	blt.n	8004714 <_strtoul_l.constprop.0+0xb0>
 80046d4:	fb00 4003 	mla	r0, r0, r3, r4
 80046d8:	2601      	movs	r6, #1
 80046da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046de:	e7e9      	b.n	80046b4 <_strtoul_l.constprop.0+0x50>
 80046e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80046e2:	bf04      	itt	eq
 80046e4:	782c      	ldrbeq	r4, [r5, #0]
 80046e6:	1c85      	addeq	r5, r0, #2
 80046e8:	e7cd      	b.n	8004686 <_strtoul_l.constprop.0+0x22>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1d8      	bne.n	80046a0 <_strtoul_l.constprop.0+0x3c>
 80046ee:	2c30      	cmp	r4, #48	@ 0x30
 80046f0:	bf0c      	ite	eq
 80046f2:	2308      	moveq	r3, #8
 80046f4:	230a      	movne	r3, #10
 80046f6:	e7d3      	b.n	80046a0 <_strtoul_l.constprop.0+0x3c>
 80046f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80046fc:	f1bc 0f19 	cmp.w	ip, #25
 8004700:	d801      	bhi.n	8004706 <_strtoul_l.constprop.0+0xa2>
 8004702:	3c37      	subs	r4, #55	@ 0x37
 8004704:	e7dc      	b.n	80046c0 <_strtoul_l.constprop.0+0x5c>
 8004706:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800470a:	f1bc 0f19 	cmp.w	ip, #25
 800470e:	d804      	bhi.n	800471a <_strtoul_l.constprop.0+0xb6>
 8004710:	3c57      	subs	r4, #87	@ 0x57
 8004712:	e7d5      	b.n	80046c0 <_strtoul_l.constprop.0+0x5c>
 8004714:	f04f 36ff 	mov.w	r6, #4294967295
 8004718:	e7df      	b.n	80046da <_strtoul_l.constprop.0+0x76>
 800471a:	1c73      	adds	r3, r6, #1
 800471c:	d106      	bne.n	800472c <_strtoul_l.constprop.0+0xc8>
 800471e:	2322      	movs	r3, #34	@ 0x22
 8004720:	f8ce 3000 	str.w	r3, [lr]
 8004724:	4630      	mov	r0, r6
 8004726:	b932      	cbnz	r2, 8004736 <_strtoul_l.constprop.0+0xd2>
 8004728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800472c:	b107      	cbz	r7, 8004730 <_strtoul_l.constprop.0+0xcc>
 800472e:	4240      	negs	r0, r0
 8004730:	2a00      	cmp	r2, #0
 8004732:	d0f9      	beq.n	8004728 <_strtoul_l.constprop.0+0xc4>
 8004734:	b106      	cbz	r6, 8004738 <_strtoul_l.constprop.0+0xd4>
 8004736:	1e69      	subs	r1, r5, #1
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	e7f5      	b.n	8004728 <_strtoul_l.constprop.0+0xc4>
 800473c:	080049e7 	.word	0x080049e7

08004740 <_strtoul_r>:
 8004740:	f7ff bf90 	b.w	8004664 <_strtoul_l.constprop.0>

08004744 <_malloc_usable_size_r>:
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f18      	subs	r0, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbc      	itt	lt
 800474e:	580b      	ldrlt	r3, [r1, r0]
 8004750:	18c0      	addlt	r0, r0, r3
 8004752:	4770      	bx	lr

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
